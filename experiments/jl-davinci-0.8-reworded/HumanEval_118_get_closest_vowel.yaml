name: HumanEval_118_get_closest_vowel
language: jl
prompt: "\"\"\"You are given a word. Your task is to find the closest vowel that stands\
  \ between \n    two consonants from the right side of the word (case sensitive).\n\
  \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
  \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
  \ that the given string contains English letter only.\n\n    Example:\n    >>> get_closest_vowel(\"\
  yogurt\")\n    \"u\"\n    >>> get_closest_vowel(\"FULL\")\n    \"U\"\n    >>> get_closest_vowel(\"\
  quick\")\n    \"\"\n    >>> get_closest_vowel(\"ab\")\n    \"\"\n    \"\"\"\nfunction\
  \ get_closest_vowel(word::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
  yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
  easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
  ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
  \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
  )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
  )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\n\
  end\n"
completions: ["    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i = length(word):-1:1\n\
    \        if word[i] in vowels && word[i-1] not in vowels\n            return word[i]\n\
    \        end\n    end\n    return \"\"\nend\n ", "    if match(r\"^[aeiou]\",\
    \ lowercase(word)) != nothing\n        return \"\"\n    end\n    if match(r\"\
    [aeiou]$\", lowercase(word)) != nothing\n        return \"\"\n    end\n    lowercase_word\
    \ = lowercase(word)\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for\
    \ (i, letter) in enumerate(lowercase_word)\n        if letter in vowels\n    \
    \        index = i\n            break\n        end\n    end\n    return word[index]\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, character)\
    \ in enumerate(reverse(word))\n        if character in vowels\n            if\
    \ index == 1\n                if word[end] in vowels return character end\n  \
    \          elseif word[end-index] in vowels return character end\n        end\n\
    \    end\n    return \"\"\nend", "    if length(word) < 3\n        return \"\"\
    \n    end\n    if !((word[end-1] in \"AEIOUaeiou\") || (word[end] in \"AEIOUaeiou\"\
    ))\n        return \"\"\n    end\n    if (word[end-1] in \"AEIOUaeiou\")\n   \
    \     return \"\"\n    end\n    for i in range(end-1, 0, -1)\n        if word[i]\
    \ in \"AEIOUaeiou\"\n            return word[i]\n        end\n    end\nend", " \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in eachindex(word)\n\
    \        if word[i] in vowels\n            if i != 1 && word[i-1] in vowels\n\
    \                continue\n            elseif i != length(word) && word[i+1] in\
    \ vowels\n                continue\n            else\n                return word[i]\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    if length(word)\
    \ <= 1 || !isascii(word)\n        return \"\"\n    end", "    \n    vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    indexes = []\n    for i in 1:length(word)\n\
    \        if word[i] in vowels \n            push!(indexes, i)\n        end\n \
    \   end\n    \n    if length(indexes) == 0\n        return \"\"\n    end\n   \
    \ \n    for i in 1:length(indexes)\n        if indexes[i] == length(word)\n  \
    \          continue\n        end\n        if i > 1 && (word[indexes[i]] in [\"\
    a\", \"e\"] && (word[indexes[i] - 1] in vowels))\n            continue\n     \
    \   end\n        if (word[indexes[i] + 1] in vowels) || (word[indexes[i]] in [\"\
    u\", \"o\"] && word[indexes[i] + 1] in [\"r\", \"l\"])\n            continue\n\
    \        end\n        return word[indexes[i]]\n    end\n    return \"\"\nend",
  "    if length(word) < 2\n        return \"\"\n    end\n    iter = reverse(word)\n\
    \    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    cur_vowel = \"!\"\n    cur_consonant = \"!\"\n    for char in iter\n   \
    \     if indexin(char,vowels) > 0\n            cur_vowel = char\n        elseif\
    \ indexin(char,consonants) > 0\n            cur_consonant = char\n        end\n\
    \        if cur_vowel != \"!\" && cur_consonant != \"!\"\n            return cur_vowel\n\
    \        end\n    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    # Get the reversed word so we could loop the word right\
    \ to left\n    word_rev = reverse(word)\n    # loop through the word right to\
    \ left and break if the first vowel is found\n    # between two consonants\n \
    \   for i in 1:length(word_rev)\n        if word_rev[i] in vowels && \n      \
    \      (i == length(word_rev) || word_rev[i+1] \u2209 vowels) && \n          \
    \  (i == 1 || word_rev[i-1] \u2209 vowels)\n            return word_rev[i]\n \
    \       end\n    end\n    # return empty string if no vowel is found\n    return\
    \ \"\"\nend", "    if length(word) == 1\n        return \"\"\n    end\n    if\
    \ isvowel(word[end])\n        word = word[1:end-1]\n    end\n    for i = length(word):-1:1\n\
    \        if isvowel(word[i]) && !isvowel(word[i-1])\n            return word[i]\n\
    \        end\n    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    for i = length(word):-1:1\n        if word[i] in vowels\n\
    \            if (word[i-1] in vowels) && (word[i+1] in vowels)\n             \
    \   return \"\"\n            else\n                return word[i]\n          \
    \  end\n        end\n    end\n    return \"\"\nend", "    # this is the index\
    \ of the first consonent \n    firstCons = searchfirst(x->x in \"aeiou\", word)\n\
    \    if firstCons == nothing\n        return \"\"\n    end\n    right = word[firstCons:]\n\
    \    lastCons = searchlast(x->x in \"aeiou\", right)\n    # check if the last\
    \ char is a vowel\n    if lastCons == nothing\n        return \"\"\n    end\n\
    \    closest = abs(lastCons-length(right))\n    vowel = \"\"\n    for (idx,v)\
    \ in enumerate(right)\n        if v in \"aeiou\"\n            if abs(length(right)-idx)\
    \ <= closest\n                closest = abs(length(right)-idx)\n             \
    \   vowel = v\n            end\n        end\n    end\n    return vowel\nend",
  "    n=length(word)\n    index=0\n    for i in 1:n-1\n        if word[i] in 'aeiouAEIOU'\n\
    \            if word[i-1] in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ' \n \
    \           && word[i+1] in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n   \
    \             index=i\n            end\n        end\n    end\n    if index==0\n\
    \        return \"\"\n    else\n        return word[index]\n    end\nend", " \
    \   if length(word) < 3\n        return \"\"\n    end\n    vowels = Set(['a',\
    \ 'e', 'i', 'o', 'u'])\n    consonants = Set(['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'])\n   \
    \ map = Dict()\n    vowels_count = 0\n    for i in 1:length(word)\n        if\
    \ word[i] in vowels \n            map[i] = vowels_count\n            vowels_count\
    \ += 1\n        elseif word[i] in consonants\n            map[i] = -1\n      \
    \  end\n    end\n    for i in length(word):-1:1\n        if map[i] != -1\n   \
    \         if (map[i+1] == -1) && (map[i-1] == -1)\n                return word[i]\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    # get the\
    \ vowel index (not 0-based!)\n    vowel_index = findlast(x -> x in Set('aeiouAEIOU'),\
    \ collect(reverse(word)))\n    if vowel_index == nothing \n        return \"\"\
    \n    end\n    # -1 for indexing\n    vowel_index = vowel_index - 1\n    # if\
    \ the vowel is the last char or the first char, return \"\"\n    if vowel_index\
    \ == length(word) || vowel_index == 0\n        return \"\"\n    end\n    if word[vowel_index-1]\
    \ in Set('aeiouAEIOU') || word[vowel_index+1] in Set('aeiouAEIOU')\n        return\
    \ \"\"\n    end\n    return word[vowel_index]\nend\nprintln(get_closest_vowel(\"\
    yogurt\"))\nprintln(get_closest_vowel(\"FULL\"))\nprintln(get_closest_vowel(\"\
    quick\"))\nprintln(get_closest_vowel(\"ab\"))", "    vowels = (\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n    word = reverse(word)\n\
    \    last_vowel = 0\n    for i = 1:length(word)\n        if word[i] in vowels\n\
    \            last_vowel = i\n        elseif last_vowel != 0\n            break\n\
    \        end\n    end\n    if last_vowel == 0\n        return \"\"\n    else\n\
    \        return word[last_vowel]\n    end\nend", "    res = \"\"\n    word = reverse(word)\n\
    \    for i in eachindex(word)\n        if word[i] in (\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n            if i != length(word) && !(word[i+1] in (\"a\", \"e\"\
    , \"i\", \"o\", \"u\"))\n                res = word[i]\n                break\n\
    \            end\n        end\n    end\n    return res\nend", "    if(length(word)\
    \ > 1)\n        vowels = [vowel for vowel in \"aeiouAEIOU\"]\n        found =\
    \ false\n        i = length(word)\n        while i > 1\n            if(word[i]\
    \ in vowels)\n                if(!(word[i-1] in vowels))\n                   \
    \ found = true\n                    return word[i]\n                end\n    \
    \        end\n            i -= 1\n        end\n        if(!found)\n          \
    \  return \"\"\n        end\n    else\n        return \"\"\n    end\nend", " \
    \   vowels = findall(r\"[aeiou]\", word)\n    if length(vowels) == 0\n       \
    \ return \"\"\n    end\n    for i in rev(eachindex(word))\n        if word[i]\
    \ in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n            return word[i]\n       \
    \ end\n    end\nend", "    VOWELS = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word\
    \ = reverse(word)", "    # YOUR CODE HERE\nend", "    # your code here\nend",
  "    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    index_of_vowel\
    \ = 0\n    closest_vowel = \"\"\n    j = 1\n    while j <= length(word)\n    \
    \    i = length(word) - j + 1\n        if word[i] in vowels\n            index_of_vowel\
    \ = i\n            break\n        end\n        j += 1\n    end\n    if index_of_vowel\
    \ != 0\n        if index_of_vowel == 1 && (length(word) == 1 || word[end] in vowels)\n\
    \            return \"\"\n        end\n        if index_of_vowel == length(word)\
    \ && word[end-1] in vowels\n            return \"\"\n        end\n        j =\
    \ 1\n        while j <= index_of_vowel\n            i = index_of_vowel - j + 1\n\
    \            if word[i] in consonants\n                if j == 1\n           \
    \         return word[index_of_vowel]\n                else\n                \
    \    return closest_vowel\n                end\n            end\n            if\
    \ word[i] in vowels\n                closest_vowel = word[i]\n            end\n\
    \            j += 1\n        end\n    end\n    return \"\"\nend", "    return\
    \ \"\"\nend\nget_closest_vowel(\"FULL\")", "    for i in size(word):-1:1\n   \
    \     if isvowel(word[i]) && !isvowel(word[i-1])\n            return word[i]\n\
    \        end\n    end\n    return \"\"\nend", "    word = string(word)\n    word\
    \ = word[end:-1:1]", "    is_consonant(c::Char) = c \u2209 'aeiou'\n    l = length(word)\n\
    \    for i in 1:l-1\n        if (is_consonant(word[i]) && word[i+1] \u2208 'aeiou')\
    \ || (word[i] \u2208 'aeiou' && is_consonant(word[i+1]))\n            return word[i+1]\n\
    \        end\n    end\n    return \"\"\nend", "    # Create a list of all vowels\
    \ we need to check\n    all_vowels = [word[i] for i in 1:length(word)-1 if word[i]\
    \ in [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]]\n\
    \    # Create a list of all consonants we need to check\n    all_consonants =\
    \ [word[i] for i in 1:length(word)-1 if word[i] not in [\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]]\n    # Create the list that will\
    \ contain the distances between consonants and vowels\n    distances = []\n  \
    \  # If the word has no vowel, return empty string\n    if length(all_vowels)\
    \ == 0\n        return \"\"\n    else \n        # For each vowel in the list of\
    \ all vowels, calculate the distance with each consonant\n        for vowel in\
    \ all_vowels\n            for conso in all_consonants\n                # Add to\
    \ the distance list the absolute value of the difference of the positions\n  \
    \              # of the vowel and the consonant (indexes are checked in reverse\
    \ order)\n                push!(distances, abs(findall(x->x==vowel, reverse(word))[1]\
    \ - findall(x->x==conso, reverse(word))[1]))\n            end\n        end\n \
    \       # Find the position of the minimum distance\n        min_pos = findall(x->x==minimum(distances),\
    \ distances)[1]\n        # Return the vowel which is at the position of the minimum\
    \ distance\n        return all_vowels[min_pos]\n    end\nend", "    # backward\
    \ search for the nearest Vowel\n    for (i, c) in enumerate(word[end:-1:1])\n\
    \        if isVowel(c)\n            # If the previous character is not a Vowel,\
    \ then we find a correct Vowel\n            if !isVowel(word[end-i-1])\n     \
    \           return c\n            end\n        end\n    end\n    # return nothing\
    \ if no Vowel found\n    return \"\"\nend", "    # YOUR CODE HERE\nend\n     \
    \   ", "    vowels = \"aeiouAEIOU\"\n    # cant find in the beginning\n    if(vowels[1]\
    \ == word[1])\n        return \"\"\n    end\n    # cant find in the ending\n \
    \   if(vowels[end] == word[end])\n        return \"\"\n    end\n    for i = length(word):-1:2\n\
    \        if(vowels[end] == word[i])\n            return word[i]\n        end\n\
    \    end\n    return \"\"\nend", "    consonants = set(\"bcdfghjklmnpqrstvwxyz\"\
    )\n    vowels = set(\"aeiou\")\n    ws = word[end:-1:1]\n    for i in 1:length(ws)\n\
    \        j = length(ws) - i + 1\n        if vowels[ws[j]]\n            if i ==\
    \ 1 || consonants[ws[j+1]]\n                return ws[j]\n            end\n  \
    \      end\n    end\n    return \"\"\nend", "    \"\"\"\n    Function to get the\
    \ closest vowel from the right of the input string.\n    \"\"\"\n    vowels =\
    \ \"aeiouAEIOU\"\n    vowels_tuple = Tuple(first(v) for v in vowels)\n    rev\
    \ = reverse(word)\n    vowels_list = []\n    @show rev\n    for r in rev\n   \
    \     if r in vowels_tuple\n            push!(vowels_list, r)\n        end\n \
    \   end\n    for i in 1:length(vowels_list)\n        if vowels_list[i+1] in vowels_tuple\n\
    \            return vowels_list[i]\n        end\n    end\n    return \"\"\nend",
  "    \n    if(word == \"\" || word == \" \")\n        return \"\"\n    end\n   \
    \ \n    for i in 1:length(word)\n        if(!(word[i] in \"aeiou\") && word[i+1]\
    \ in \"aeiou\")\n            return word[i+1]\n        end\n    end\n    \n  \
    \  return \"\"\nend", "    vowels = (\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\"\
    ,\"I\",\"O\",\"U\")\n    is_vowel(ch::Char) =  ch in vowels\n    last_consonant\
    \ = 1\n    for (i,ch) in enumerate(reverse(word))\n        if !is_vowel(ch)\n\
    \            last_consonant = i\n        else\n            break\n    end\n  \
    \  if last_consonant == 1\n        return \"\"\n    end\n    for (i,ch) in enumerate(reverse(word))\n\
    \        if i == last_consonant\n            break\n        elseif is_vowel(ch)\n\
    \            return ch\n        end\n    end\n    return \"\"\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 1:length(word)\n       \
    \ if in(word[end-i], vowels) && in(word[end-i+1], vowels) == false && in(word[end-i-1],\
    \ vowels) == false\n            return word[end-i]\n        end\n    end\n   \
    \ return \"\"\nend", "    Vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\",\
    \ \"E\", \"I\", \"O\", \"U\"]\n    for i in length(word)::Int\n        if word[i]\
    \ in Vowels\n            continue\n        else\n            println(word[i])\n\
    \    end\nend", "    count = 0\n    vowel = \"\"\n    stop = true\n    for i in\
    \ word \n        if i in \"aeiouAEIOU\" \n            count += 1\n           \
    \ if stop == true\n                stop = false\n            else \n         \
    \       return vowel\n            end\n        else \n            stop = true\n\
    \        end\n        vowel = i\n    end\n    return \"\"\nend", "    \"\"\"return\
    \ the closest vowel between two consonants\n    \n    ### Arguments\n    - `word`:\
    \ input string\n    \n    ### Returns\n    - `string`: a single vowel\n    \"\"\
    \"\n    # your implementation here...\n    return \"a\"\nend", "    vowel_indices\
    \ = find_vowel_indices(word)\n    if isempty(vowel_indices)\n        return \"\
    \"\n    end\n    for i = length(word):-1:1\n        if word[i] in \"aeiouAEIOU\"\
    \n            if i == length(word)\n                return \"\"\n            elseif\
    \ word[i+1] in \"aeiouAEIOU\"\n                continue\n            else\n  \
    \              return word[i]\n            end\n        elseif word[i] in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n            if i == 1\n                return \"\"\n            elseif word[i-1]\
    \ in \"aeiouAEIOU\"\n                continue\n            else\n            \
    \    return word[i+1]\n            end\n        end\n    end\nend", "    closest_vowel\
    \ = \"\"\n    for i in 1:length(word)\n        if is_consonant(word[i])\n    \
    \        for j in (i+1):length(word)\n                if is_vowel(word[j])\n \
    \                   closest_vowel = word[j]\n                    break\n     \
    \           end\n            end\n            break\n        end\n    end\n  \
    \  return closest_vowel\nend", "    vowels = Set(\"aeiouAEIOU\")\n    ch = \"\"\
    \n    for i in 1:length(word)\n        if isletter(word[i]) && word[i] in vowels\n\
    \            if isletter(word[i+1]) && !(word[i+1] in vowels)\n              \
    \  return word[i]\n            end\n        end\n    end\n    return \"\"\nend",
  "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in eachindex(word)\n        if\
    \ word[i] in vowels && word[i-1] \u2209 vowels && word[i+1] \u2209 vowels\n  \
    \          return word[i]\n        end\n    end\n    return \"\"\nend\nprintln(get_closest_vowel(\"\
    yogurt\"))\nprintln(get_closest_vowel(\"FULL\"))\nprintln(get_closest_vowel(\"\
    quick\"))\nprintln(get_closest_vowel(\"ab\"))", "    vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    word = reverse(word)\n    i = 0\n    while i < length(word)\n\
    \        if word[i] in vowels\n            j = i + 1\n            while j < length(word)\n\
    \                if word[j] in vowels\n                    break\n           \
    \     end\n                j += 1\n            end\n            if j < length(word)\n\
    \                return reverse(word)[i]\n            end\n        end\n     \
    \   i += 1\n    end\n    return \"\"\nend", "    # YOUR CODE HERE\n    return\
    \ \nend", "    endOfWord = length(word)\n    closestVowel = \"\"\n    while endOfWord\
    \ >= 1\n        #println(endOfWord)\n        if !isvowel(word[endOfWord])\n  \
    \          endOfWord -= 1\n        else\n            if isvowel(word[endOfWord-1])\
    \ || endOfWord == 1\n                break\n            else\n               \
    \ closestVowel = word[endOfWord]\n                break\n            end\n   \
    \     end\n    end\n    return closestVowel\nend", "    vowels = \"AEIOUaeiou\"\
    \n    prev = ' ' # for first letter\n    for letter in reverse(word)\n       \
    \ if !in(letter, vowels)\n            if prev == ' '\n                return \"\
    \"\n            else\n                return prev\n            end\n        end\n\
    \        prev = letter\n    end\n    return \"\"\nend", "    vowels = (\"a\",\
    \ \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n    dist_vec\
    \ = []\n    for i in 1:length(word)\n        if word[i] in vowels && i != 1 &&\
    \ i != length(word)\n            if word[i-1] in vowels || word[i+1] in vowels\n\
    \                continue\n            else\n                push!(dist_vec, i)\n\
    \            end\n        end\n    end\n    if isempty(dist_vec)\n        return\
    \ \"\"\n    else\n        return word[dist_vec[end]]\n    end\nend", "    consonants\
    \ = (\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\")\n    consonants_set\
    \ = Set(consonants)\n    vowels = (\"a\", \"e\", \"i\", \"o\", \"u\")\n    vowels_set\
    \ = Set(vowels)\n    word_set = Set(word)\n    if word_set & consonants_set ==\
    \ word_set\n        return \"\"\n    end\n    if word_set & vowels_set == word_set\n\
    \        return \"\"\n    end\n    index = 1\n    while index <= length(word)\n\
    \        current_letter = word[length(word) - index + 1]\n        if current_letter\
    \ in vowels\n            for i in (1:index-1)\n                second_letter =\
    \ word[length(word) - i + 1]\n                if second_letter in consonants\n\
    \                    return current_letter\n                end\n            end\n\
    \        end\n        index += 1\n    end\n    return \"\"\nend", "    # Initialize\
    \ the dictionary for vowels\n    vowels_dict = Dict(\"a\" => 1, \"e\" => 1, \"\
    i\" => 1, \"o\" => 1, \"u\" => 1, \"A\" => 1, \"E\" => 1, \"I\" => 1, \"O\" =>\
    \ 1, \"U\" => 1)\n    # Get the word into a list of characters\n    chars = [x\
    \ for x in word]\n    # Initialize the counter for consonants\n    cons_count\
    \ = 0\n    # Initialize the index of closest vowel\n    closest_vowel_index =\
    \ -1\n    # Loop over the characters backwards\n    for i in reverse(1:length(chars))\n\
    \        # If the character is a vowel, check if we previously encounter at least\
    \ one consonant\n        if (vowels_dict[chars[i]] == 1) && (cons_count > 0)\n\
    \            # If yes, return the vowel character\n            return chars[i]\n\
    \        # Else, increment the consonant counter\n        else\n            cons_count\
    \ += 1\n        end\n    end\n    # If we didn't find a vowel, return empty string\n\
    \    return \"\"\nend", "    word = lowercase(word)\n    vowels = \"aeiou\"\n\
    \    vowel_index = 0\n    for i in 1:length(word)\n        if !occursin(word[end-i+1],\
    \ vowels)\n            vowel_index = end-i\n            break\n        end\n \
    \   end\n    if vowel_index == 0\n        return \"\"\n    end\n    for i in 1:length(word)\n\
    \        if occursin(word[end-i+1], vowels)\n            if i == 1\n         \
    \       return \"\"\n            end\n            return word[end-i+1]\n     \
    \   end\n    end\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  \
    \  result = \"\"\n    for i in eachindex(word)\n        if i > 1\n           \
    \ if (word[i] in vowels) && (word[i-1] \u2209 vowels) && (word[i+1] \u2209 vowels)\n\
    \                result = word[i]\n            end\n        end\n    end\n   \
    \ return result\nend", "    if length(word) <= 1\n        return \"\"\n    end\n\
    \    for (i, c) in enumerate(reverse(word))\n        if !(c in \"aeiouAEIOU\"\
    )\n            if length(word) <= i+1\n                return \"\"\n         \
    \   end\n            if !(word[end-i-1] in \"aeiouAEIOU\")\n                return\
    \ word[end-i]\n            end\n        end\n    end\n    return \"\"\nend", " \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    inds = findall(x -> x in\
    \ vowels, word)\n    if length(inds) == 0\n        return \"\"\n    end\n    #\
    \ collect indices of consonants\n    inds_cons = setdiff(1:length(word), inds)\n\
    \    # preprocess such that for a letter to be considered a vowel, \n    # it\
    \ must be between two consonants\n    inds_to_keep = inds[(inds_cons[1:end-1]\
    \ .< inds) .& (inds .< inds_cons[2:end])]\n    if isempty(inds_to_keep)\n    \
    \    return \"\"\n    end\n    # find the closest vowel\n    ind = inds_to_keep[indmin(abs(inds_to_keep\
    \ .- (length(word)+1)/2))]\n    return word[ind]\nend", "    i = findlast(x ->\
    \ isvowel(x), word)\n    if i == 0 || i == length(word)\n        return \"\"\n\
    \    else\n        return word[i]\n    end\nend", "    if starts_with_vowel(word)\
    \ || ends_with_vowel(word)\n        return \"\"\n    end\n    num_consonants =\
    \ get_consonants(word)\n    len_word = length(word)\n    for (i, char) in enumerate(word)\n\
    \        if contains([\"a\", \"e\", \"i\", \"o\", \"u\"], char)\n            if\
    \ (len_word - i) <= num_consonants\n                return char\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    vowel_index = find_vowel_index(word)\n\
    \    if vowel_index == 0\n        return \"\"\n    end\n    if length(word) <\
    \ 3\n        return \"\"\n    end\n    if is_consonant(word[vowel_index-1]) ==\
    \ false && is_consonant(word[vowel_index+1]) == false\n        return word[vowel_index]\n\
    \    end\n    return \"\"\nend\n    \n    \"\"\"Recursive version of get_closest_vowel\n\
    \    \"\"\"", "    # get the vowels and consonants \n    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    consonants = [chr(i) for i in range(65, 91)] + [chr(i)\
    \ for i in range(97, 123)]\n    deleteat!(consonants, ['a', 'e', 'i', 'o', 'u'])\n\
    \    # find the last vowel that stands between two consonants\n    for vowel in\
    \ reverse(vowels)\n        for i in eachindex(word)\n            if word[i] ==\
    \ vowel\n                if i == 1 && word[i + 1] in consonants\n            \
    \        return vowel\n                elseif i == length(word) && word[i - 1]\
    \ in consonants\n                    return vowel\n                elseif i >\
    \ 1 && i < length(word) && word[i - 1] in consonants && word[i + 1] in consonants\n\
    \                    return vowel\n                end\n            end\n    \
    \    end\n    end\n    return \"\"\nend", "    isvowel(c::Char) = c in \"AEIOUaeiou\"\
    \n    consonants = [c for c in word if !isvowel(c)]\n    if length(consonants)\
    \ > 1\n        word = word[end-1:end]\n        return get_closest_vowel(word)\n\
    \    elseif length(consonants) == 1\n        if isvowel(consonants[1])\n     \
    \       return \"\"\n        else\n            return findnext(c->isvowel(c),\
    \ word, rev=true)\n        end\n    else\n        return \"\"\n    end\nend",
  "    vowel_indices = [i for i in 1:length(word) if word[i] in \"aeiouAEIOU\"]\n\
    \    for i in length(word):-1:1\n        if word[i] in \"aeiouAEIOU\"\n      \
    \      if i == length(word)\n                return \"\"\n            elseif word[i+1]\
    \ in \"aeiouAEIOU\"\n                return \"\"\n            else\n         \
    \       return word[i]\n            end\n        end\n    end\n    return \"\"\
    \nend", "    # YOUR CODE HERE\n    #\n    # Find the closest vowel from the right.\n\
    \    #\n    # Do not forget to write assertions for your result. \n    #\n   \
    \ # This is for extra credit.\nend\n ", "    vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    result = \"\"\n    prev_char = \"\"\n    for char in word\n \
    \       if char in vowels\n            if prev_char in vowels\n              \
    \  result = prev_char\n            end\n        else\n            if result !=\
    \ \"\"\n                return result\n            end\n        end\n        prev_char\
    \ = char\n    end\n    return \"\"\nend", "    vowels = \"aeiouAEIOU\"\n    word\
    \ = reverse(word)\n    for i in 1:length(word)\n        if word[i] in vowels &&\
    \ word[i+1] in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n            return\
    \ word[i]\n        end\n    end\n    return \"\"\nend\nprintln(get_closest_vowel(\"\
    FULL\"))\nprintln(get_closest_vowel(\"quick\"))\nprintln(get_closest_vowel(\"\
    ab\"))", "    n = length(word)\n    for i in 1:n-1\n        if vowels(word[n-i])\
    \ && !vowels(word[n-i-1]) && !vowels(word[n-i+1])\n            return word[n-i]\n\
    \        end\n    end\n    return \"\"\nend", "    vowels = \"aeiouAEIOU\"\n \
    \   if length(word) < 3\n        return \"\"\n    end\n    word2 = reverse(word)\n\
    \    for i in 2:length(word2)\n        if word2[i] in vowels && word2[i-1] \u2209\
    \ vowels && word2[i+1] \u2209 vowels\n            return reverse(word2)[i]\n \
    \       end\n    end\n    return \"\"\nend", "    # your code here\nend", "  \
    \  n = length(word)\n    for i in n:-1:1\n        if word[i] in \"aeiouAEIOU\"\
    \n            if word[i+1] in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\
    \                return word[i]\n            end\n        end\n    end\n    return\
    \ \"\"\nend", "    VOWELS = \"aeiouAEIOU\"\n    CLOSEST_VOWEL = \"\"\n    for\
    \ i = 1:length(word)\n        if word[i] in VOWELS\n            if i>1 && word[i-1]\
    \ \u2209 VOWELS && i+1 <= length(word) && word[i+1] \u2209 VOWELS\n          \
    \      CLOSEST_VOWEL = word[i]\n            end\n        end\n    end\n    return\
    \ CLOSEST_VOWEL\nend", "    con_vow = []\n    for i in eachindex(word)\n     \
    \   if word[i] in \"AEIOU\"\n            con_vow.append(\"V\")\n        else\n\
    \            con_vow.append(\"C\")\n        end\n    end\n    for i in eachindex(con_vow)\n\
    \        if con_vow[i] == \"V\"\n            if i == length(con_vow)\n       \
    \         continue\n            elseif con_vow[i+1] == \"C\"\n               \
    \ return word[i]\n            end\n        end\n    end\n    return \"\"\nend",
  "    has_vowel = [False,false,false,false,false]\n    vowel_index = 0\n    has_consonant\
    \ = [false,false,false,false,false]\n    consonant_index = 0\n    for i in 1:length(word)\n\
    \        if word[i] in \"aeiouAEIOU\"\n            has_vowel[i] = true\n     \
    \       vowel_index = i\n        else\n            has_consonant[i] = true\n \
    \           consonant_index = i\n        end\n    end\n    if vowel_index >= consonant_index\n\
    \        return \"\"\n    else\n        return word[vowel_index]\n    end\nend",
  "    # your code here\n    return \"?\"\nend", "    indice = length(word)\n    while\
    \ indice > 0\n        if isvowel(word[indice])\n            if indice == length(word)\n\
    \                return \"\"\n            elseif indice == 1\n               \
    \ return \"\"\n            elseif isconsonant(word[indice-1])\n              \
    \  if isconsonant(word[indice+1])\n                    return string(word[indice])\n\
    \                end\n            end\n        end\n        indice -= 1\n    end\n\
    \    return \"\"\nend", "    vowels = \"aeiouAEIOU\"\n    for (i, char) in enumerate(word)\n\
    \        if char in vowels\n            if i == 1\n                continue\n\
    \            else\n                return char\n            end\n        end\n\
    \    end\n    return \"\"\nend", "    \n    vowels = \"aeiouAEIOU\"\n    closest_vowel\
    \ = \"\"\n    dist = 0\n    vowel_pos = 0\n    first_cons_pos = 0\n    second_cons_pos\
    \ = 0\n    \n    for i in 1:length(word)\n        if is_consonant(word[i])\n \
    \           first_cons_pos = i\n        end\n    end\n    \n    for i in 1:length(word)\n\
    \        if is_consonant(word[i])\n            second_cons_pos = i\n        end\n\
    \    end\n    \n    for i in 1:length(word)\n        if word[i] in vowels\n  \
    \          temp_dist = abs(first_cons_pos - second_cons_pos)\n            if temp_dist\
    \ > dist\n                dist = temp_dist\n                closest_vowel = word[i]\n\
    \            end\n        end\n    end\n    \n    return closest_vowel\nend",
  "    vowels = \"aeiouAEIOU\"\n    for i in 1:length(word)\n        if vowels[word[i]]\
    \ == true\n            if isvowel(word[i-1]) == false && isvowel(word[i+1]) ==\
    \ false\n                return word[i]\n            end\n        end\n    end\n\
    \    return \"\"\nend", "    if !isascii(word)\n        return \"\"\n    end\n\
    \    len = length(word)\n    if len <= 2\n        return \"\"\n    end\n    vowels\
    \ = \"aeiouAEIOU\"\n    results = Set()\n    for i in 2:len\n        if in(word[i],\
    \ vowels) && !in(word[i-1], vowels) && !in(word[i-2], vowels)\n            push!(results,\
    \ word[i])\n        end\n    end\n    if length(results) == 0\n        return\
    \ \"\"\n    else\n        return results[1]\n    end\nend", "    \"\"\"Function\
    \ that returns the closest vowel given a word.\n    \n    Parameters\n    ----------\n\
    \    word : String\n        The word you wish to find the closest vowel\n    \n\
    \    Returns\n    -------\n    String\n        The closest vowel of the word\n\
    \    \"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    other_letters\
    \ = []\n    closest_vowel = \"\"\n    closest_distance = length(word)\n    closest_vowel_position\
    \ = 0\n    current_position = 0\n    for letter in word\n        current_position\
    \ += 1\n        if letter in vowels\n            if length(other_letters) == 1\n\
    \                current_distance = current_position - other_letters[1]\n    \
    \            if current_distance < closest_distance\n                    closest_distance\
    \ = current_distance\n                    closest_vowel = letter\n           \
    \         closest_vowel_position = current_position\n                end\n   \
    \         end\n            other_letters = []\n        elseif letter in other_letters\n\
    \            other_letters = []\n        else\n            push!(other_letters,\
    \ letter)\n        end\n    end\n    # Remove vowel if the distance is greater\
    \ than the word\n    if closest_distance >= length(word)\n        closest_vowel\
    \ = \"\"\n    end\n    return closest_vowel\nend", "    all_vowels = \"aeiouAEIOU\"\
    \n    consonants = [x for x in word if x not in all_vowels]\n    first_con = length(word)\
    \ - findfirst(x -> x in consonants, reverse(word))\n    last_con = length(word)\
    \ - findlast(x -> x in consonants, reverse(word))\n    if first_con == last_con\n\
    \        return \"\"\n    else\n        first_vowel = min(findall(x -> x in all_vowels,\
    \ word[first_con:last_con+1]))\n        return word[first_con + first_vowel -\
    \ 1]\n    end\nend", "    idx = index(word, r\"a[^aeiou]|e[^aeiou]|i[^aeiou]|o[^aeiou]|u[^aeiou]\"\
    )\n    if idx === nothing\n        return \"\"\n    else\n        return word[idx]\n\
    \    end\nend", "    vowels = \"aeiou\"\n    word_list = split(word, \"\")\n \
    \   right_index = length(word_list)\n    while right_index > 0 \n        letter\
    \ = word_list[right_index]\n        if letter \u2208 vowels\n            left_index\
    \ = right_index - 1\n            while left_index > 0\n                left_letter\
    \ = word_list[left_index]\n                if left_letter \u2208 vowels\n    \
    \                return letter\n                end\n                left_index\
    \ -= 1\n            end\n        end\n        right_index -= 1\n    end\n    return\
    \ \"\"\nend", "    if word == \"\" \n        return \"\"\n    end\n    idx = word\
    \ |> reverse |> findfirst(is_consonant)\n    while !(idx isa Nothing)\n      \
    \  idx = word |> reverse |> findfirst(is_consonant, idx+1)\n    end\n    if !(idx\
    \ isa Nothing)\n        return \"\"\n    end\n    idx = get(idx, 1)\n    if idx\
    \ == length(word)\n        return \"\"\n    end\n    for i = idx+1:length(word)\n\
    \        if is_vowel(word[i])\n            return word[i]\n        end\n    end\n\
    \    return \"\"\nend", "    vowel = collect(\"AEIOU\")\n    vowels = [ c for\
    \ c in word if c in vowel ]\n    return vowels[end]\nend", "    \"\"\"\n    >>>\
    \ get_closest_vowel(\"yogurt\")\n    \"u\"\n    >>> get_closest_vowel(\"FULL\"\
    )\n    \"U\"\n    >>> get_closest_vowel(\"quick\")\n    \"\"\n    >>> get_closest_vowel(\"\
    ab\")\n    \"\"\n    \"\"\"\n    w=lowercase(word)\n    return vowel_consonant(w)\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    closest_vowel = \"\
    \"\n    if length(word) >= 3\n        for i = (length(word) - 1):-1:2\n      \
    \      if (word[i] in vowels) && (word[i - 1] not in vowels) && (word[i + 1] not\
    \ in vowels)\n                closest_vowel = word[i]\n                break\n\
    \            end\n        end\n    end\n    return closest_vowel\nend", "    #\
    \ check if there is a vowel in the middle\n    if !contains(word,r\"[aeiou]\"\
    ) return \"\" end\n    # find the first vowel from right, then reverse find the\
    \ first consonant before it\n    # then find the first vowel after it.\n    vowels\
    \ = r\"[aeiou]\"\n    cons = r\"[^aeiou]\"\n    return first(match.(r\"$(?:$cons)*$vowels(?:$cons)*\"\
    ,reverse(word)))\nend", "    # your code here\nend\n \nend", "    result = \"\"\
    \n    for i in 1:length(word)\n        c = word[end-i+1]\n        if c in \"aeiouAEIOU\"\
    \n            result = c\n            break\n        end\n    end\n    return\
    \ result\nend", "    vowels = [ 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'\
    \ ]\n    for (i, c) in enumerate(reverse(word))\n        if c in vowels && i >\
    \ 0 && !(word[length(word)-i-1] in vowels)\n            return c\n        end\n\
    \    end\n    return \"\"\nend\nprintln(get_closest_vowel(\"yogurt\"))\nprintln(get_closest_vowel(\"\
    FULL\"))\nprintln(get_closest_vowel(\"quick\"))\nprintln(get_closest_vowel(\"\
    ab\"))", "    vowel = \"aeiouAEIOU\"\n    pos = 0\n    for i in reverse(1:length(word))\n\
    \        if vowel[word[i]] == word[i]\n            pos = i\n            break\n\
    \        end\n    end\n    if pos == 0\n        return \"\"\n    end\n    for\
    \ i in reverse(1:pos)\n        if vowel[word[i]] != word[i]\n            return\
    \ word[pos]\n        end\n    end\n    return \"\"\nend", "    _vowels = \"AEIOU\"\
    \n    _output = \"\"\n    for i = length(word):-1:1\n        if (i < length(word))\
    \ && !(word[i] in _vowels) && (word[i+1] in _vowels)\n            _output = word[i+1]\n\
    \            break\n        end\n    end\n    return _output\nend", "    word\
    \ = reverse(word)\n    vowels = find_vowels(word)\n    if length(vowels) == 0\n\
    \        return \"\"\n    end\n    i = 1\n    while i <= length(word)\n      \
    \  if word[i] in vowels\n            if i == 1\n                return \"\"\n\
    \            elseif i == length(word)\n                return \"\"\n         \
    \   elseif word[i+1] in find_consonants(word) && word[i-1] in find_consonants(word)\n\
    \                return word[i]\n            end\n        end\n        i += 1\n\
    \    end\n    return \"\"\nend", "    if length(word) == 1 || length(word) ==\
    \ 2\n        return \"\"\n    end\n    for i in length(word)-1:-1:1\n        if\
    \ !in(word[i], [\"a\", \"e\", \"i\", \"o\", \"u\"])\n            for j in i-1:-1:1\n\
    \                if in(word[j], [\"a\", \"e\", \"i\", \"o\", \"u\"])\n       \
    \             return word[j]\n                end\n            end\n        end\n\
    \    end\n    return \"\"\nend", "    \n    vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    \n    closest_vowel\
    \ = \"\"\n    index = length(word)\n    \n    while index > 0\n        \n    \
    \    if in(word[index], vowels)\n            closest_vowel = word[index]\n   \
    \         break\n        end\n        \n        if in(word[index], consonants)\n\
    \            index = index - 1\n            continue\n        end\n        \n\
    \        break\n        \n    end\n    \n    return closest_vowel\n    \nend",
  "    vowels = \"aeiou\"\n    index = 0\n    for i in 1:length(word)\n        if\
    \ !(in(word[end-i+1], vowels)) && in(word[end-i], vowels)\n            index =\
    \ end-i\n            break\n        end\n    end\n    if index == 0\n        return\
    \ \"\"\n    else\n        return word[index]\n    end\nend", "    num_consonants\
    \ = 0\n    for i = length(word) :- 1 : 1\n        if !(word[i] in \"aeiouAEIOU\"\
    )\n            num_consonants += 1\n        elseif num_consonants == 1\n     \
    \       return word[i]\n        else\n            num_consonants = 0\n       \
    \ end\n    end\n    return \"\"\nend", '    if word == "" return "" end', "  \
    \  if word == \"\"\n        return \"\"\n    end\n    start = length(word)\n \
    \   for (i,j) in zip(1:length(word),word)\n        if j in vowels\n          \
    \  start = i\n            break\n        end\n    end\n    if start == length(word)\n\
    \        return \"\"\n    end\n    for i in start:length(word)\n        if word[i]\
    \ in vowels && (i == length(word) || word[i+1] in consonants)\n            return\
    \ word[i]\n        end\n    end\n    return \"\"\nend", "    vowels =  \"aeiouAEIOU\"\
    \n    for i = length(word)-1:-1:1\n        if word[i] in vowels\n            for\
    \ j = i-1:-1:1\n                if word[j] in vowels\n                    continue\n\
    \                else\n                    return word[i]\n                end\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    vowels = \"\
    aeiouAEIOU\"\n    pattern = \"([^aeiouAEIOU][aeiouAEIOU][^aeiouAEIOU]|[^aeiouAEIOU][aeiouAEIOU]$)\"\
    \n   \n    m = match(pattern, word)\n    if m == nothing\n        return \"\"\n\
    \    else \n        vowel = m.captures[1]\n        return vowel[1]\n    end\n\
    end\n    \n\"\"\"You are given an array of integers @N. Your task is to sum the\
    \ number of integers \n    that appear odd number of times. ", "    consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    vowels = \"aeiou\"\n    vowel_index = 0\n \
    \   for (i, x) in enumerate(word)\n        if x in consonants\n            for\
    \ j in reversed(1:length(word)-i)\n                if word[i+j] in vowels\n  \
    \                  return word[i+j]\n                end\n            end\n  \
    \      end\n    end\n    return \"\"\nend", "    # if word is null, return empty\
    \ string\n    if word == \"\"\n        return \"\"\n    end", "    vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    if length(word) == 0\n        return \"\"\
    \n    end\n    if length(word) == 1\n        if word in vowels\n            return\
    \ word\n        else\n            return \"\"\n        end\n    end\n    if word[1]\
    \ in vowels\n        return \"\"\n    end\n    if word[end] in vowels\n      \
    \  return \"\"\n    end\n    for i in 1:length(word)-1\n        if word[i] in\
    \ vowels\n            if word[i+1] in vowels\n                continue\n     \
    \       else\n                return word[i]\n            end\n        end\n \
    \   end\n    return \"\"\nend", "    left_consonant = false\n    closest_vowel\
    \ = false\n    for c in word\n        if is_consonant(c)\n            left_consonant\
    \ = true\n        elseif is_vowel(c)\n            if left_consonant\n        \
    \        closest_vowel = c\n                break\n            end\n        else\n\
    \            left_consonant = false\n        end\n    end\n    if closest_vowel\n\
    \        return closest_vowel\n    else\n        return \"\"\n    end\nend", " \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    result = \"\"\n    for i\
    \ = length(word):-1:1\n        if findfirst(x -> x == word[i], vowels) != nothing\n\
    \            result = word[i]\n            return result\n        end\n    end\n\
    \    return result\nend", "    Vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    A\", \"E\", \"I\", \"O\", \"U\"]\n    n = length(word)\n    if n == 1\n      \
    \  return \"\"\n    end\n    for i in n:-1:2\n        if in(word[i], Vowels) &&\
    \ !in(word[i - 1], Vowels)\n            return word[i]\n        end\n    end\n\
    \    return \"\"\nend", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_word\
    \ = word[end:-1: -1]\n    for i in eachindex(reversed_word)\n        if reversed_word[i]\
    \ in vowels\n            return reversed_word[i]\n        end\n    end\n    return\
    \ \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i = 1:length(word)\n\
    \        if (word[end-i] in vowels) && (word[end-i+1] \u2209 vowels) && (word[end-i-1]\
    \ \u2209 vowels)\n            return word[end-i]\n        end\n    end\n    return\
    \ \"\"\nend", "    word = reverse(word)\n    isvowel(c::Char) = c in 'AEIOUaeiou'\n\
    \    cnt = 0\n    for i = 1:length(word)\n        if isvowel(word[i])\n      \
    \      if cnt == 0\n                cnt += 1\n            elseif cnt == 1\n  \
    \              cnt += 1\n                return reverse(word)[i]\n           \
    \ end\n        else\n            cnt = 0\n        end\n    end\n    return \"\"\
    \nend", "    closest_vowel = \"\"\n    for (i,char) in enumerate(reverse(word))\n\
    \        if isconsonant(char)\n            start = i+1\n            break\n  \
    \      end\n    end\n    for (i,char) in enumerate(reverse(word[start:end]))\n\
    \        if isvowel(char)\n            closest_vowel = char\n            break\n\
    \        end\n    end\n    return closest_vowel\nend", "    # Your code here\n\
    \    # return \"\" \nend", "    for (index, letter) in enumerate(word)\n     \
    \   if in(\"aeiouAEIOU\", letter)\n            if index != 1 && in(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    , word[index-1])\n                if index != endof(word) && in(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    , word[index+1])\n                    return letter\n                end\n   \
    \         end\n        end\n    end\n    return \"\"\nend", "    current_vowel_index\
    \ = length(word)\n    while current_vowel_index >= 1\n        is_left_consonant\
    \ = !is_vowel(word[current_vowel_index-1])\n        is_right_consonant = !is_vowel(word[current_vowel_index])\n\
    \        if is_left_consonant && is_right_consonant\n            return word[current_vowel_index]\n\
    \        end\n        current_vowel_index -= 1\n    end\n    return \"\"\nend",
  "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    cons_to_skip = 0\n    for i in eachindex(word)\n        if word[i] in consonants\n\
    \            cons_to_skip += 1\n        elseif word[i] in vowels\n           \
    \ if cons_to_skip == 2\n                return word[i]\n            else\n   \
    \             cons_to_skip = 0\n            end\n        end\n    end\n    return\
    \ \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n \
    \   indices = []\n    for (i, c) in enumerate(word)\n        if c in vowels\n\
    \            indices = [i]\n            break\n        end\n    end\n    if indices\
    \ == []\n        return \"\"\n    end\n    for (i, c) in enumerate(word[indices[end]:end])\n\
    \        if c in consonants\n            indices = [indices[end], i]\n       \
    \     break\n        end\n    end\n    if indices == [0]\n        return \"\"\n\
    \    end\n    for (i, c) in enumerate(word[indices[end]:end])\n        if c in\
    \ vowels\n            indices = [indices[end], i]\n            break\n       \
    \ end\n    end\n    if indices == [0, 1]\n        return \"\"\n    end\n    return\
    \ word[indices[end]]\nend", "    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n  \
    \  consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    \n    index = 1\n    while true\n\
    \        index += 1\n        if index > length(word)\n            return \"\"\n\
    \        end\n        \n        vowel = findfirst(vowels, word[end-index])\n \
    \       #\n        if vowel == nothing \n            continue\n        end\n \
    \       \n        if findfirst(consonants, word[end-index+1]) != nothing && findfirst(consonants,\
    \ word[end-index-1]) != nothing\n            return word[end-index]\n        end\n\
    \    end\nend", "    vowels = \"aeiouAEIOU\"\n    right_consonants = 0\n    left_consonants\
    \ = 0\n    for i in length(word):\n        if word[i] in vowels:\n           \
    \ return word[i]\n        if word[i] not in vowels && right_consonants == 0:\n\
    \            right_consonants += 1\n        if word[i] not in vowels && right_consonants\
    \ != 0:\n            right_consonants += 1\n            return \"\"\n        if\
    \ word[i] not in vowels && left_consonants == 0:\n            left_consonants\
    \ += 1\n        if word[i] not in vowels && left_consonants != 0:\n          \
    \  left_consonants += 1\n            return \"\"\n    return \"\"\nend", "   \
    \ vowel_indices = findall(x -> x in \"AEIOUaeiou\", word)\n    if length(vowel_indices)\
    \ == 0\n        return \"\"\n    end\n    if vowel_indices[end] == length(word)\n\
    \        return \"\"\n    end\n    for i in reverse(1:length(vowel_indices))\n\
    \        if vowel_indices[i] < length(word) && !(word[vowel_indices[i]+1] in \"\
    AEIOUaeiou\")\n            return word[vowel_indices[i]]\n        end\n    end\n\
    \    return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  \
    \  right_side = word[end:-1:1]\n    for i in right_side\n        if i in vowels\n\
    \            return i\n        end\n    end\n    return \"\"\nend", "    word_array\
    \ = Array(word)\n    word_length = length(word_array)\n    count = 0\n    i =\
    \ 1\n    while i < word_length\n        char_right = word_array[word_length -\
    \ i]\n        char_left = word_array[word_length - i - 1]\n        if (isvowel(char_right)\
    \ && !isvowel(char_left))\n            return char_right\n        end\n      \
    \  i = i + 1\n    end\n    return \"\"\nend", "    let location = find(x -> any(setdiff(Set('aeiou'),Set('y')),y\
    \ -> y == x),reverse(word))\n    return word[end-location] if location != 0 else\
    \ \"\"\nend", "    word = reverse(word)\n    vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    for i = 1:length(word)\n \
    \       @show word[i]\n        if word[i] in vowels\n            @show word[i]\n\
    \            return word[i]\n        end\n    end\n    return \"\"\nend", "  \
    \  empty_str = \"\"\n    vowels = \"aeiouAEIOU\"\n    pre_pos = -1 \n    cur_pos\
    \ = -1 \n    for i in eachindex(word)\n        if word[i] in vowels\n        \
    \    pre_pos = cur_pos\n            cur_pos = i\n        end\n    end\n    if\
    \ pre_pos == -1 || cur_pos == -1\n        return empty_str\n    else\n       \
    \ return word[cur_pos]\n    end\nend", "    vowels = \"aeiou\"\n    consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    lenw = length(word)\n    flag = 0\n    for\
    \ i in 1:lenw\n        if word[lenw-i] in vowels\n            flag = flag + 1\n\
    \        elseif word[lenw-i] in consonants\n            flag = flag - 1\n    \
    \    end\n    end\n    if flag > 0\n        return \"\"\n    end\n    for i in\
    \ 1:lenw\n        if word[lenw-i] in vowels\n            return word[lenw-i]\n\
    \        end\n    end\nend", "    #add your code here\n    return \"\"\nend",
  "    for (i,c) in enumerate(word[:end-1])\n        if c in (\"a\", \"e\", \"i\"\
    , \"o\", \"u\")\n            next_c = word[i+1]\n            if next_c in (\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n                return c\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    if length(word) == 1\n    \
    \    return \"\"\n    end\n    if isvowel(word[end])\n        return \"\"\n  \
    \  end\n    for i in reverse(1:length(word)-1)\n        if isvowel(word[i]) &&\
    \ isconsonant(word[i+1])\n            return word[i]\n        end\n    end\n \
    \   return \"\"\nend", "    reverse_word = string(reverse(word))\n    vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n   \
    \ for i = 1:length(reverse_word)\n        if reverse_word[i] in vowels\n     \
    \       if reverse_word[i-1] \u2209 vowels\n                if reverse_word[i+1]\
    \ \u2209 vowels\n                    return string(reverse(reverse_word[i]))\n\
    \                end\n            end\n        end\n    end\n    return \"\"\n\
    end", "    i = 0\n    j = 1\n    vowel = \"\"\n    while j <= length(word)\n \
    \       if is_vowel(word[j])\n            if !is_vowel(word[i])\n            \
    \    return word[j]\n            end\n        else\n            i = j\n      \
    \  end\n        j += 1\n    end\n    return \"\"\nend", "    for (i,x) in enumerate(word)\n\
    \        if any(c in consonants for c in (word[i-1], word[i+1]))\n           \
    \ if any(c in vowels for c in (word[i-1], word[i+1]))\n                return\
    \ x\n            end\n        end\n    end\n    return \"\"\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    lword = lowercase(word)\n    for\
    \ i in 1:length(lword)\n        if ismember(lword[end-i], vowels)\n          \
    \  return word[end-i]\n        end\n    end\n    return \"\"\nend", "    # check\
    \ for invalid inputs\n    if length(word) <= 2\n        return \"\"\n    end",
  "    if endswith(word,r\"[^aeiou]\") || startswith(word,r\"[^aeiou]\")\n       \
    \ return \"\"\n    end\n    is_vowel = (c) -> c in \"aeiouAEIOU\"\n    i = 1\n\
    \    while !is_vowel(word[end-i]) && !is_vowel(word[end-i-1])\n        i += 1\n\
    \    end\n    return word[end-i]\nend", "    vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    chars = [c for c in word]\n    rev_chars = reverse(chars)\n \
    \   temp = \"\"\n    for i in 1:length(rev_chars)\n        if char in(rev_chars[i],\
    \ vowels)\n            temp = rev_chars[i]\n            return reverse(temp)\n\
    \            break\n        end\n    end\n    return \"\"\nend", "    reversed_word\
    \ = reverse(word)\n    i = findfirst(ismatch(r\"[bcdfghjklmnpqrstvwxyz]\"), reversed_word)\n\
    \    if isempty(i) || length(word) - i <= 2\n        return \"\"\n    end\n  \
    \  i += 1\n    j = findfirst(ismatch(r\"[aeiou]\"), reversed_word[i:length(word)])\n\
    \    if isempty(j)\n        return \"\"\n    end\n    return reversed_word[i:j]\n\
    end", "    # first check if the word is 1 length\n    if length(word) == 1 \n\
    \        if word[1] in \"aeiouAEIOU\"\n            return word[1]\n        else\n\
    \            return \"\"\n        end\n    end\n    \n    # now for the 2nd case\n\
    \    for i in 2:length(word)\n        a = word[i-1]\n        b = word[i]\n   \
    \     if (a in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\") && \n         \
    \   (b in \"aeiouAEIOU\")\n            return b\n        end\n    end\n    return\
    \ \"\"\nend", "    # check if it is the smallest word size\n    if length(word)\
    \ == 1\n        return \"\"\n    end\n    # check if it is the second smallest\
    \ word size\n    if length(word) == 2\n        if isvowel(word[1]) && isvowel(word[2])\n\
    \            return \"\"\n        else\n            return word[2]\n        end\n\
    \    end\n    # check if the first two letters are vowels\n    if isvowel(word[1])\
    \ && isvowel(word[2])\n        return \"\"\n    end\n    for i in reverse(2:length(word)-1)\n\
    \        if isvowel(word[i]) && !isvowel(word[i-1]) && !isvowel(word[i+1])\n \
    \           return word[i]\n        end\n    end\n    return \"\"\nend", "   \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    cons = [\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    word_array = collect(word)\n\
    \    word_array_no_first_last = word_array[2:end-1]\n    closest_vowel = \"\"\n\
    \    smallest_index = Inf\n    for i in 2:length(word_array)-1\n        letter\
    \ = word_array[i]\n        if letter in vowels\n            if smallest_index\
    \ == Inf\n                smallest_index = i\n                closest_vowel =\
    \ letter\n            else\n                if i < smallest_index\n          \
    \          smallest_index = i\n                    closest_vowel = letter\n  \
    \              end\n            end\n        end\n    end\n    if smallest_index\
    \ == Inf\n        return \"\"\n    else\n        return closest_vowel\n    end\n\
    end", "    vowels = \"AEIOUaeiou\"\n    characters = [c for c in word]\n    distance\
    \ = length(word) + 1\n    closest_vowel = \"\"\n    for (idx, c) in enumerate(characters)\n\
    \        if c in vowels && idx != 1\n            for (idx2, c2) in enumerate(characters[idx:])\n\
    \                if c2 in vowels\n                    break\n                end\n\
    \            end\n            if idx2 < distance\n                distance = idx2\n\
    \                closest_vowel = c\n            end\n        end\n    end\n  \
    \  return closest_vowel\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    for (i, letter) in enumerate(reverse(word))\n        if letter in vowels\
    \ && i != length(word) - 1\n            if !(reverse(word)[i+1] in vowels)\n \
    \               return letter\n            end\n        end\n    end\n    return\
    \ \"\"\nend", "    vowels = Set([\"a\", \"e\", \"i\", \"o\", \"u\"])\n    consonants\
    \ = Set([\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ])\n    reverse_word = reverse(word)\n    found_vowel = false\n    found_consonant\
    \ = false\n    vowel_position = 0\n    for i = 1:length(reverse_word)\n      \
    \  character = reverse_word[i]\n        if character in vowels\n            found_vowel\
    \ = true\n            vowel_position = i\n        elseif character in consonants\n\
    \            if found_vowel\n                found_consonant = true\n        \
    \        break\n            end\n        end\n    end\n    if found_vowel && found_consonant\n\
    \        return reverse_word[vowel_position]\n    else\n        return \"\"\n\
    \    end\nend", "    if is_vowel(word[end])\n        return \"\"\n    end\n  \
    \  for i = length(word):-1:1\n        if !is_vowel(word[i]) && i > 1 && is_vowel(word[i-1])\n\
    \            return word[i-1]\n        end\n    end\n    return \"\"\nend", " \
    \   \n    #function takes in a string \n    #function returns a string\n    \n\
    \    #convert string to lowercase\n    word = lowercase(word)\n    \n    #use\
    \ a reverse(word) function to check first char in string \n    #if it is a vowel,\
    \ return empty string\n    #if it is a consonant, continue loop\n    #if word\
    \ has no consonants, return empty string\n    \n    for n = length(word):-1:1\n\
    \        \n        if word[n] in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n       \
    \     #check if char before vowel is a consonant\n            if word[n-1] in\
    \ [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \
    \            return word[n]\n            end\n        else\n            continue\n\
    \        end\n    end\n    \n    return \"\"\n    \nend", "    vowels = \"AEIOUaeiou\"\
    \n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    if word\
    \ != \"\"\n        for index in 1:length(word)\n            character = word[end-index+1]\n\
    \            if in(character, consonants)\n                consonant_index = end-index+1\n\
    \                for index_2 in 1:length(word)\n                    if in(word[consonant_index+index_2],\
    \ vowels)\n                        vowel_index = consonant_index+index_2\n   \
    \                     if in(word[vowel_index+1], consonants)\n               \
    \             return word[vowel_index]\n                        end\n        \
    \            end\n                end\n            end\n        end\n    end\n\
    \    return \"\"\nend", "    word_array = strsplit(word, \"\")\n    vowel_loc\
    \ = 0\n    for i = length(word_array)-1:-1:1\n        if !in(word_array[i], [\"\
    a\", \"i\", \"u\", \"e\", \"o\"])\n            if in(word_array[i-1], [\"a\",\
    \ \"i\", \"u\", \"e\", \"o\"])\n                vowel_loc = i-1\n            \
    \    break\n            end\n        end\n    end\n    if vowel_loc == 0\n   \
    \     return \"\"\n    else\n        return word_array[vowel_loc]\n    end\nend",
  "    word_char_array = [char for char in word]\n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    for i = length(word_char_array) - 1:-1:1\n        char =\
    \ word_char_array[i]\n        if isin(char, vowels) == true\n            if i\
    \ == length(word_char_array)\n                if i != 1 && isin(word_char_array[i-1],\
    \ vowels) == false\n                    return char\n                end\n   \
    \         elseif i == 1\n                if i != length(word_char_array) && isin(word_char_array[i+1],\
    \ vowels) == false\n                    return char\n                end\n   \
    \         else\n                if isin(word_char_array[i-1], vowels) == false\
    \ && isin(word_char_array[i+1], vowels) == false\n                    return char\n\
    \                end\n            end\n        end\n    end\n    return \"\"\n\
    end", "    toReturn = \"\"\n    for i in length(word)::Int \n        if word[i]\
    \ in (\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\")\n         \
    \   toReturn = word[i]\n        end\n    end\n    return toReturn\nend", "   \
    \ vowels = [(\"a\",0),(\"e\",0),(\"i\",0),(\"o\",0),(\"u\",0)]\n    # let's create\
    \ a function to identify if a character is a vowel or not.\n    is_vowel(c::Char)\
    \ = in(tolower(c),['a','e','i','o','u'])\n    # let's iterate through the word\
    \ from left to right\n    for (i,c) in enumerate(word)\n        # return the first\
    \ vowel if the right side of the current letter is a consonant\n        if is_vowel(c)\
    \ && !is_vowel(word[i+1])\n            return c\n        # otherwise, if the current\
    \ letter is a vowel, store its index\n        elseif is_vowel(c)\n           \
    \ if c == 'a'\n                vowels[1][2] = i\n            elseif c == 'e'\n\
    \                vowels[2][2] = i\n            elseif c == 'i'\n             \
    \   vowels[3][2] = i\n            elseif c == 'o'\n                vowels[4][2]\
    \ = i\n            else\n                vowels[5][2] = i\n            end\n \
    \       end\n    end\n    # if no vowel met the condition, return empty string\n\
    \    if vowels[1][2] == 0 && vowels[2][2] == 0 && vowels[3][2] == 0 && vowels[4][2]\
    \ == 0 && vowels[5][2] == 0\n        return \"\"\n    end\n    # sort the vowels\
    \ by index ascendingly\n    sorted_vowels = sort(vowels, by=x->x[2])\n    # return\
    \ the last vowel in the sorted vowels list\n    return sorted_vowels[end][1]\n\
    end", "    word = reverse(word)\n    i = 0\n    found = false\n    while i < length(word)\
    \ && !found\n        if is_consonant(word[i])\n            j = i + 1\n       \
    \     found = true\n            while j < length(word) && found\n            \
    \    if is_consonant(word[j])\n                    found = false\n           \
    \     elseif is_vowel(word[j])\n                    return reverse(word[j])\n\
    \                end\n                j += 1\n            end\n        end\n \
    \       i += 1\n    end\n    return \"\"\nend", "    if length(word) < 3\n   \
    \     return \"\"\n    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    n = length(word)\n    l = n - 1\n    c, v = false, false\n    for i in\
    \ 1:l\n        letter = word[i]\n        if isconsonant(letter)\n            c\
    \ = true\n        elseif c\n            if isvowel(letter)\n                v\
    \ = true\n                break\n            end\n        end\n    end\n    return\
    \ v ? letter : \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    for i in 1:length(word)\n        if word[end-i] in vowels\n            if\
    \ word[end-i+1] in vowels\n                continue\n            else\n      \
    \          return word[end-i]\n            end\n        end\n    end\n    return\
    \ \"\"\nend", "    word_vowels = [char for char in word if char in \"AEIOUaeiou\"\
    ]\n    for char in reversed(word_vowels)\n        index = findfirst(x -> x ==\
    \ char, word)\n        if index > 1 && index < length(word)\n            if is_consonant(word[index-1])\
    \ && is_consonant(word[index+1])\n                return char\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    \n    vowels = \"aeiou\"\n\
    \    word = reverse(lowercase(word))\n    i = 1\n    while i < length(word) \n\
    \        if word[i] in vowels && word[i-1] in \"bcdfghjklmnpqrstvwxyz\"\n    \
    \        if i < length(word) && word[i+1] in \"bcdfghjklmnpqrstvwxyz\"\n     \
    \           return uppercase(word[i])\n            end\n        end\n        i\
    \ += 1\n    end\n    return \"\"\nend", "    is_consonant(x) = !in(x, \"AEIOUaeiou\"\
    )\n    index_of_vowel(x) = findin(x, r\"AEIOUaeiou\")\n    reverse_word = reverse(word)\n\
    \    for i in 1:length(reverse_word)\n        if !is_consonant(reverse_word[i])\
    \ && is_consonant(reverse_word[i + 1])\n            return reverse_word[i]\n \
    \       end\n    end\n    return \"\"\nend\n \nget_closest_vowel(\"o\")", "  \
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 1:length(word)\n\
    \        if in(lowercase(word[end-i]), vowels) &&\n            !in(lowercase(word[end-i+1]),\
    \ vowels) &&\n            !in(lowercase(word[end-i-1]), vowels)\n            return\
    \ word[end-i]\n        end\n    end\n    return \"\"\nend", "    \n    # convert\
    \ string to an array of char\n    arr = collect(word)\n    \n    # init empty\
    \ vowel array\n    vowels = []\n    \n    # check for each char if it is vowel\n\
    \    for i in 1:length(arr)\n        if arr[i] == 'a' || arr[i] == 'e' || arr[i]\
    \ == 'i' || arr[i] == 'o' || arr[i] == 'u' ||\n            arr[i] == 'A' || arr[i]\
    \ == 'E' || arr[i] == 'I' || arr[i] == 'O' || arr[i] == 'U'\n            # if\
    \ it is vowel then store it in the vowel array\n            push!(vowels, arr[i])\n\
    \        end\n    end\n    \n    # check if there is any vowel in the array\n\
    \    if isempty(vowels)\n        return \"\"\n    end\n    \n    # save the last\
    \ vowel in the array\n    last_vowel = vowels[end]\n    \n    # find the index\
    \ of the last vowel\n    vowel_index = findfirst(arr, last_vowel)\n    \n    #\
    \ get the two consonants of the vowel\n    if vowel_index != 1 && vowel_index\
    \ != length(arr)\n        consonant1 = arr[vowel_index - 1]\n        consonant2\
    \ = arr[vowel_index + 1]\n        \n        # check if they are consonants or\
    \ not\n        if consonant1 != 'a' && consonant1 != 'e' && consonant1 != 'i'\
    \ && consonant1 != 'o' && consonant1 != 'u' &&\n            consonant1 != 'A'\
    \ && consonant1 != 'E' && consonant1 != 'I' && consonant1 != 'O' && consonant1\
    \ != 'U' &&\n            consonant2 != 'a' && consonant2 != 'e' && consonant2\
    \ != 'i' && consonant2 != 'o' && consonant2 != 'u' &&\n            consonant2\
    \ != 'A' && consonant2 != 'E' && consonant2 != 'I' && consonant2 != 'O' && consonant2\
    \ != '", "    vowel_index = 0\n    for i in 1:length(word)\n        if word[end-i]\
    \ \u2208 (\"aeiouAEIOU\")\n            vowel_index = end-i\n            break\n\
    \        end\n    end\n    for i in 1:length(word)\n        if (word[end-i] \u2208\
    \ (\"aeiouAEIOU\")) && !(word[end-i+1] \u2208 (\"aeiouAEIOU\"))\n            vowel_index\
    \ = end-i\n            break\n        end\n    end\n    if vowel_index == 0\n\
    \        return \"\"\n    else\n        return word[vowel_index]\n    end\nend",
  "    vowels = \"aeiouAEIOU\"\n    prev_conso = false\n    for c in reverse(word)\n\
    \        if c in vowels\n            if prev_conso\n                return c\n\
    \            end\n        else\n            prev_conso = true\n        end\n \
    \   end\n    return \"\"\nend", "    is_vowel(letter) = letter in [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    dist = Inf\n    vowels = \"\"\n    for (i, letter)\
    \ in enumerate(reverse(word))\n        if is_vowel(letter)\n            if (i-1\
    \ > 0) && !is_vowel(word[end-i]) && (i-1 < dist)\n                dist = i-1\n\
    \                vowels = letter\n            end\n        end\n    end\n    return\
    \ vowels\nend", "    word= reverse(word)\n    for char in word\n        if char\
    \ in \"aeiouAEIOU\"\n            return reverse(char)\n        end\n    end\n\
    \    return \"\"\nend", "    # TODO\nend", "    if word in [\"\", \"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n        return \"\"\
    \n    end\n    i = length(word)\n    while i > 1\n        @assert i > 1\n    \
    \    letter = word[i]\n        if letter in [\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"A\", \"E\", \"I\", \"O\", \"U\"]\n            if (word[i-1] in [\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]) == false &&\n  \
    \              (word[i+1] in [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\"\
    , \"I\", \"O\", \"U\"]) == false\n                return letter\n            end\n\
    \        end\n        i -= 1\n    end\n    return \"\"\nend", "    vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n    for i\
    \ in eachindex(word)\n        if word[i] in vowels\n            v = i\n      \
    \      break\n        end\n    end\n    for i in eachindex(word)\n        if word[i]\
    \ in vowels\n            if i > v\n                v = i\n            end\n  \
    \      end\n    end\n    w = \"\"\n    if v != 0\n        if word[v-1] in vowels\n\
    \            w = \"\"\n        else\n            w = word[v]\n        end\n  \
    \  end\n    return w\nend", "    isvowel(ch) = ch in 'aeiouAEIOU'\n    isconsonant(ch)\
    \ = ch in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    n = length(word)\n\
    \    for i in n:-1:1\n        if isvowel(word[i]) && isconsonant(word[i-1]) &&\
    \ isconsonant(word[i+1])\n            return word[i]\n        end\n    end\n \
    \   return \"\"\nend", "    \n    vowels = \"AEIOUaeiou\"\n    consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    idx_consonants = findall(r\"\
    $consonants$consonants\", word)\n    if length(idx_consonants) == 0\n        return\
    \ \"\"\n    end\n    \n    last_vowel = \"\"\n    for idx in idx_consonants[end]\n\
    \        if vowels[word[idx]] != nothing\n            last_vowel = word[idx]\n\
    \        end\n    end\n    \n    return last_vowel\nend", "    vowels = \"aeiouAEIOU\"\
    \n    for j in 1:length(word)\n        if j < length(word) && word[end-j] in vowels\
    \ && word[end-j+1] \u2209 vowels\n            return word[end-j]\n        end\n\
    \    end\n    return \"\"\nend", "    # GET INDEX OF VOWELS FROM LEFT\n    vowels::Array{Int64,1}\
    \ = findall(x -> x in (\"aeiouAEIOU\"), word)\n    if length(vowels) == 0\n  \
    \      return \"\"\n    end\n    # GET INDEX OF CONSONANTS FROM RIGHT\n    consonants::Array{Int64,1}\
    \ = findall(x -> x in (\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"), reverse(word))\n\
    \    if length(consonants) == 0\n        return \"\"\n    end\n    # CHOOSE VOWEL\
    \ BETWEEN CONSONANTS\n    for v::Int64 in vowels\n        for c::Int64 in consonants\n\
    \            if v < length(word) - c + 1\n                return string(word[v])\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    lst = split(word,\
    \ \"\")\n    cvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    clist = []\n \
    \   for (i, j) in enumerate(lst)\n        if (j in cvowels)\n            push!(clist,\
    \ j)\n        end\n    end\n    return iflength(clist)\nend", "    vowels = \"\
    aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\
    \    n = length(word)\n    for i in reversed(2:n)\n        if contains(consonants,\
    \ word[i]) && contains(consonants, word[i-1])\n            if contains(vowels,\
    \ word[i-2])\n                return word[i-2]\n            end\n        end\n\
    \    end\n    return \"\"\nend", "    empty_string = \"\"\n    vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    string_list = [string(char) for char in word]\n\
    \    if !in(string_list[1], vowels) && in(string_list[2], vowels)\n        return\
    \ string_list[2]\n    elseif !in(string_list[end-1], vowels) && in(string_list[end],\
    \ vowels)\n        return string_list[end]\n    else\n        return empty_string\n\
    \    end\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in\
    \ reverse(1:length(word))\n        if word[i] in vowels\n            if (i !=\
    \ length(word)) && (word[i+1] not in vowels)\n                return word[i]\n\
    \            elseif (i != 1) && (word[i-1] not in vowels)\n                return\
    \ word[i]\n            end\n        end\n    end\n    return \"\"\nend", "   \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    no_vowels = [\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    arr = collect(split(word,\
    \ \"\"))\n    for i in 1:length(arr)\n        if (arr[i] in vowels) && (arr[i-1]\
    \ in no_vowels) && (arr[i+1] in no_vowels)\n            return arr[i]\n      \
    \  end\n    end\n    return \"\"\nend\n ", "    if word == \"\"\n        return\
    \ \"\"\n    end\n    word = word[end:-1:1]\n    for (i, ch) in enumerate(word)\n\
    \        # if it is a consonant, check if next one is a vowel\n        if !(ch\
    \ in \"aeiouAEIOU\")\n            # if next one is a vowel, check if the next\
    \ next is a consonant\n            if (word[i+1] in \"aeiouAEIOU\") && (i != length(word)-1)\n\
    \                if !(word[i+2] in \"aeiouAEIOU\")\n                    return\
    \ word[i+1]\n                end\n            end\n        end\n    end\n    return\
    \ \"\"\nend", "    const vowels = Set('aeiouAEIOU')\n    closest = \"\"\n    for\
    \ i = length(word) - 1:-1:0\n        if word[i] in vowels\n            if i <\
    \ length(word) - 1 && word[i+1] in vowels\n                break\n           \
    \ else\n                closest = word[i]\n            end\n        end\n    end\n\
    \    return closest\nend\n@test get_closest_vowel(\"yogurt\") == \"u\"\n@test\
    \ get_closest_vowel(\"FULL\") == \"U\"\n@test get_closest_vowel(\"quick\") ==\
    \ \"\"\n@test get_closest_vowel(\"ab\") == \"\"", "    for i in length(word)::Int:-1:1\n\
    \        if isconsonant(word[i])\n            if length(word) > i + 1 && isvowel(word[i+1])\n\
    \                return word[i+1]\n            elseif length(word) > i + 2 &&\
    \ isvowel(word[i+2])\n                return word[i+2]\n            else\n   \
    \             return \"\"\n            end\n        end\n    end\n    return \"\
    \"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    index_vowel =\
    \ 0\n    not_found = true\n    for i in vowels\n        index_vowel = findlast(word,\
    \ i)\n        if index_vowel == 1\n            word = word[2:end]\n        else\n\
    \            not_found = false\n            break\n        end\n    end\n    if\
    \ not_found\n        return \"\"\n    end\n    return word[index_vowel]\nend",
  "    has_consonant = [consonant in word for consonant in consonants]\n    if !any(has_consonant)\n\
    \        return \"\"\n    end\n    vowel_index = -1\n    for (index, consonant)\
    \ in enumerate(has_consonant)\n        if consonant\n            vowel_index =\
    \ index\n            break\n        end\n    end\n    if vowel_index == -1\n \
    \       return \"\"\n    end\n    has_vowel = [vowel in word for vowel in vowels]\n\
    \    if !any(has_vowel)\n        return \"\"\n    end\n    closest_vowel = -1\n\
    \    min_distance = length(word)\n    for (index, vowel) in enumerate(has_vowel)\n\
    \        if vowel\n            distance = index - vowel_index\n            if\
    \ distance < min_distance\n                min_distance = distance\n         \
    \       closest_vowel = index\n            end\n        end\n    end\n    if closest_vowel\
    \ == -1\n        return \"\"\n    end\n    return vowels[closest_vowel]\nend",
  "    word_arr = split(word, \"\")\n    for i in 1:length(word_arr)\n        if !in(word_arr[i],\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"])\n            if in(word_arr[i+1], [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"])\n                return word_arr[i+1]\n       \
    \     end\n        end\n    end\n    return \"\"\nend", "    \n    function is_vowel(letter::Char)::Bool\n\
    \        lower_vowels = \"aeiou\"\n        upper_vowels = \"AEIOU\"\n        if\
    \ letter in lower_vowels || letter in upper_vowels\n            return true\n\
    \        else\n            return false\n        end\n    end\n    \n    for i\
    \ in 1:length(word)\n        if i == 1\n            if !is_vowel(word[i])\n  \
    \              start = i\n            end\n        elseif i == length(word)\n\
    \            if !is_vowel(word[i])\n                finish = i - 1\n         \
    \   end\n        else\n            if !is_vowel(word[i]) && is_vowel(word[i-1])\n\
    \                start = i\n            elseif is_vowel(word[i]) && !is_vowel(word[i+1])\n\
    \                finish = i\n            end\n        end\n    end\n    if !is_vowel(word[length(word)])\n\
    \        finish = length(word) - 1\n    end\n    \n    if start == finish || start\
    \ == 1 || finish == length(word)\n        return \"\"\n    else\n        substring\
    \ = word[start:finish]\n        distance = 1000\n        letter = \"\"\n     \
    \   for i in 1:length(substring)\n            if is_vowel(substring[i])\n    \
    \            if i < distance\n                    distance = i\n             \
    \       letter = substring[i]\n                end\n            end\n        end\n\
    \        return letter\n    end\nend", "    # TODO: Complete function.\nend",
  "    new_word = replace(word, r\"[^AEIOU]\", \"\")\n    new_word = reverse(new_word)\n\
    \    new_word = replace(new_word, r\"[AEIOU]\", \".\")\n    if count(new_word,\
    \ \".\") == 0 || count(new_word, \".\") == 1\n        return \"\"\n    else\n\
    \        return reverse(replace(new_word, r\".\", \"\"))[1]\n    end\nend", " \
    \   word_list = split(word, \"\")\n    j = 1\n    for i in word_list[end:-1:1]\n\
    \        if isvowel(i)\n            for k in word_list[end:-1:1][j:end]\n    \
    \            if !isvowel(k)\n                    return i\n                end\n\
    \        end\n        j += 1\n    end\n    return \"\"\nend", "    # Your code\
    \ here\nend", "    # Define vowel list, it is case sensitive\n    vowels = \"\
    aeiouAEIOU\"\n    # Loop through the characters in the string\n    for (i, char)\
    \ in enumerate(word)\n        # If the character is a vowel, \n        # continue\
    \ to check next characters if they are consonants\n        if char in vowels\n\
    \            # If this is the last letter, the word ends with a vowel\n      \
    \      if i == length(word)\n                return \"\"\n            # If the\
    \ next character is a consonant,\n            # we found a vowel in the right\
    \ side of the word\n            elif word[i+1] not in vowels\n               \
    \ return char\n            end\n        end\n    end\n    # If we don't find a\
    \ vowel in the right side of the word, return empty string\n    return \"\"\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    index_of_consonant\
    \ = 0\n    index_of_vowel = 0\n    arr = []\n    result = \"\"\n    for i in eachindex(word)\n\
    \        if (word[i] in vowels)\n            index_of_vowel = i\n            for\
    \ j in index_of_vowel:-1:1\n                if (word[j] in vowels)\n         \
    \           index_of_consonant = j\n                    break\n              \
    \  end\n            end\n            push!(arr, word[index_of_vowel])\n      \
    \  end\n    end\n    for i in eachindex(arr)\n        if (i < length(arr))\n \
    \           if (length(arr[i]) == 1) && (length(arr[i+1]) == 1)\n            \
    \    dist = abs(arr[i][1] - arr[i+1][1])\n                if (dist < 4)\n    \
    \                result = arr[i]\n                end\n            end\n     \
    \   end\n    end\n    return result\nend\nget_closest_vowel(\"ABZrztz\")", " \
    \   \n    vowel = (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"\
    O\", \"U\")\n    vowel_list = []\n    consonant_list = []\n    consonant_list_index\
    \ = []\n    vowel_list_index = []\n    count = 0\n    ans = \"\"\n    \n    #vowel\u3068\
    consonant\u305D\u308C\u305E\u308C\u3092\u30EA\u30B9\u30C8\u306B\u683C\u7D0D\n\
    \    for w in word\n        if w in vowel\n            vowel_list = push!(vowel_list,\
    \ w)\n            vowel_list_index = push!(vowel_list_index, count)\n        else\n\
    \            consonant_list = push!(consonant_list, w)\n            consonant_list_index\
    \ = push!(consonant_list_index, count)\n        end\n        count += 1\n    end\n\
    \    \n    if length(vowel_list) == 0\n        ans = \"\"\n    elseif length(consonant_list)\
    \ == 0\n        ans = \"\"\n    else\n        #vowel\u3068consonant\u306E\u30EA\
    \u30B9\u30C8\u306E\u30A4\u30F3\u30C7\u30C3\u30AF\u30B9\u3092\u6BD4\u8F03\u3057\
    \u3001\u6BD4\u8F03\u3057\u305F\u8981\u7D20\u3092\u683C\u7D0D\u3059\u308B\n   \
    \     count = 0\n        for i in vowel_list_index\n            if count == length(vowel_list_index)\n\
    \                break\n            end\n            for j in consonant_list_index\n\
    \                if j > i\n                    if abs(i - j) == 1\n          \
    \              ans = vowel_list[count]\n                        break\n      \
    \              elseif ans == \"\"\n                        ans = vowel_list[count]\n\
    \                    elseif abs(i - j) < abs(vowel_list_index[count] - consonant_list_index[count])\n\
    \                        ans = vowel_list[count]\n                    end\n  \
    \              end\n            end\n            count += 1\n        end\n   \
    \ end\n    return ans\nend", "    n = length(word)\n    idx = -1\n    for i in\
    \ 1:n\n        if (isvowel(word[i])) \n            if (i == 1)\n             \
    \   if isvowel(word[i+1])\n                    continue\n                else\n\
    \                    idx = i\n                    break\n                end\n\
    \            elseif (i == n)\n                if isvowel(word[i-1])\n        \
    \            continue\n                else\n                    idx = i\n   \
    \                 break\n                end\n            else\n             \
    \   if (isvowel(word[i-1]) || isvowel(word[i+1]))\n                    continue\n\
    \                else\n                    idx = i\n                    break\n\
    \                end\n            end\n        end\n    end\n    if (idx == -1)\n\
    \        return \"\"\n    else\n        return word[idx]\n    end\nend", "   \
    \ vowels = \"aeiouAEIOU\"\n    lWord = length(word)\n    for i in lWord:-1:2\n\
    \        if occursin(word[i-1],vowels) && occursin(word[i+1],vowels)\n       \
    \     return word[i]\n        end\n    end\n    return \"\"\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i = length(word) :- 1 : 1\n \
    \       if in(word[i], vowels) && i < length(word) && !in(word[i+1], vowels)\n\
    \            return word[i]\n        end\n    end\n    return \"\"\nend", "  \
    \  # your code here\nend\n \n \n@testset \"get_closest_vowel\" begin\n    @test\
    \ get_closest_vowel(\"yogurt\") == \"u\"\n    @test get_closest_vowel(\"FULL\"\
    ) == \"U\"\n    @test get_closest_vowel(\"quick\") == \"\"\n    @test get_closest_vowel(\"\
    ab\") == \"\"\nend\n \n \n \n \n\"\"\"You are given a word. Your task is to find\
    \ the closest vowel (not counting \"y\") that \n    stands to the left of two\
    \ consonants from the left side of the word (case sensitive). \n    \n    Vowels\
    \ in the beginning and ending doesn't count. Return empty string if you didn't\n\
    \    find any vowel met the above condition. ", "    # base case when word length\
    \ is smaller than 3\n    if length(word) < 3\n        return \"\"\n    end\n \
    \   \n    # make a list of vowels\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    \n    # base case when word length\
    \ is 3 and the leftmost letter is a vowel\n    if length(word) == 3 && (word[1]\
    \ in vowels)\n        return word[1]\n    end\n    \n    if length(word) == 3\
    \ && !(word[1] in vowels)\n        return \"\"\n    end\n    \n    # recursion\
    \ when word length is greater than 3\n    if length(word) > 3 && !(word[end-1]\
    \ in vowels) && (word[end] in vowels)\n        return word[end]\n    else\n  \
    \      return get_closest_vowel(word[1:end])\n    end\nend", "    vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    right_consonants = 0\n    result = \"\"\n\
    \    for char in reverse(word)\n        if !(char in vowels)\n            right_consonants\
    \ += 1\n        else\n            break\n        end\n    end\n    for char in\
    \ reverse(word)\n        if char in vowels\n            right_consonants -= 1\n\
    \            if right_consonants == 1\n                result = char\n       \
    \         break\n            end\n        end\n    end\n    return result\nend",
  "    result = \"\"\n    end_idx = length(word)\n    start_idx = 1\n    while start_idx\
    \ < end_idx\n        end_idx -= 1\n        curr_char = word[end_idx]\n       \
    \ if (curr_char in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n     \
    \       result = curr_char\n            break\n        end\n    end\n    return\
    \ result\nend", "    \n    # Replace the line below with your code\n    return\
    \ \"DO THIS\"\nend", "    \"\"\"Find closest vowel which is on the right side\
    \ of word\"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word =\
    \ lowercase(word)\n    for i = length(word):-1:1\n        if (i < length(word))\
    \ & (ismember(word[i], vowels)) & (~ismember(word[i+1], vowels))\n           \
    \ return uppercase(word[i])\n        end\n    end\n    return \"\"\nend", "  \
    \  vowel_set = Set(['a', 'e', 'i', 'o', 'u'])\n    vowel_indices = []\n    for\
    \ (i, letter) in enumerate(word)\n        if letter in vowel_set\n           \
    \ push!(vowel_indices, i)\n        end\n    end\n    n = length(word)\n    closest_vowel\
    \ = \"\"\n    for i in vowel_indices\n        if (i > 1) && (i < n)\n        \
    \    if !(word[i-1] in vowel_set) && !(word[i+1] in vowel_set)\n             \
    \   closest_vowel = word[i]\n                break\n            end\n        end\n\
    \    end\n    return closest_vowel\nend\nprintln(get_closest_vowel(\"yogurt\"\
    ))\nprintln(get_closest_vowel(\"FULL\"))\nprintln(get_closest_vowel(\"quick\"\
    ))\nprintln(get_closest_vowel(\"ab\"))", "    if length(word) <= 2\n        return\
    \ \"\"\n    end\n    if lowercase(word[end]) in (\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        is_low = lowercase(word[end]) == word[end]\n        word = word[1:end-1]\n\
    \    end\n    idx = end\n    while idx > 1\n        if lowercase(word[idx]) in\
    \ (\"a\", \"e\", \"i\", \"o\", \"u\")\n            curr_vowel = lowercase(word[idx])\n\
    \            prev_letter = lowercase(word[idx-1])\n            if prev_letter\
    \ in (\"a\", \"e\", \"i\", \"o\", \"u\")\n                idx -= 1\n         \
    \       continue\n            end\n            next_letter = lowercase(word[idx+1])\n\
    \            if next_letter in (\"a\", \"e\", \"i\", \"o\", \"u\")\n         \
    \       idx -= 1\n                continue\n            end\n            if is_low\n\
    \                return lowercase(curr_vowel)\n            else\n            \
    \    return uppercase(curr_vowel)\n            end\n        end\n        idx -=\
    \ 1\n    end\n    return \"\"\nend", "    consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    right_consonants = []\n    right_vowels = []\n    for i in reverse(1:length(word))\n\
    \        if word[i] in consonants\n            push!(right_consonants, word[i])\n\
    \        elseif word[i] in vowels\n            push!(right_vowels, word[i])\n\
    \        end\n    end\n    for i in 1:length(right_vowels)\n        if i != length(right_vowels)\n\
    \            if right_vowels[i] != right_vowels[i+1]\n                return right_vowels[i]\n\
    \            end\n        else\n            return right_vowels[i]\n        end\n\
    \    end\n    return \"\"\nend", "    #create char array and reverse it\n    c\
    \ = reverse(Array(word))\n    len = length(c)\n    j = 0\n    #find the first\
    \ vowel\n    while j<=len\n        j += 1\n        if c[j] in [\"a\",\"e\",\"\
    i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]\n            break\n        end\n\
    \    end\n    #find the first consonant before the vowel\n    i = j - 1\n    while\
    \ i>=1\n        i -= 1\n        if c[i] in [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\"\
    ,\"E\",\"I\",\"O\",\"U\"]\n            break\n        end\n    end\n    #find\
    \ the first consonant after the vowel\n    k = j + 1\n    while k<=len\n     \
    \   k += 1\n        if c[k] in [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\"\
    ,\"O\",\"U\"]\n            break\n        end\n    end\n    #return the closest\
    \ vowel\n    if k-j<j-i\n        return c[j]\n    elseif k-j>j-i\n        return\
    \ c[i]\n    else\n        return \"\"\n    end\nend", "    closest = \"\"\n  \
    \  for i = length(word):-1:1\n        if word[i] in \"aeiouAEIOU\"\n         \
    \   closest = word[i]\n            break\n        end\n    end\n    return closest\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
