name: HumanEval_66_digitSum
language: jl
prompt: "\"\"\"Task\n    Write a function that takes a string as input and returns\
  \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n   \
  \ >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
  abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
  )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
  \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
  \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
  \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
  \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
completions: ["    res = 0\n    for c in s\n        if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            res += ASCII_MAPPING[c]\n        end\n    end\n    return res\nend",
  "    uppers = Int64[]\n    for c in s\n        if isascii(c) && isupper(c)\n   \
    \         append!(uppers, Int64(c))\n        end\n    end\n    return sum(uppers)\n\
    end", "    \n    total = 0\n    for ch in s\n        if ch in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            total += Int64(ch)\n        end\n    end\n    return total\nend",
  "    code = toascii(s)\n    upper_code = filter(x -> x >= 65 && x <= 90, code)\n\
    \    sum(upper_code)\nend", "    return sum(65:90 .== uppercase(s))\nend", " \
    \   tot::Int64 = 0\n    for c in s\n        if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            tot += Int64(c)\n        end\n    end\n    return tot\nend", "  \
    \  if s == \"\"\n        return 0\n    end\n    # Get the ASCII codes.\n    codes\
    \ = map(Int64, collect(UInt8, s))\n    # Get the upper ASCII codes.\n    upper_codes\
    \ = [code for code in codes if code >= 65 && code <= 90]\n    # Get the sum of\
    \ the upper ASCII codes.\n    sum(upper_codes)\nend", "    ascii = ' '.join(Int(i)\
    \ for i in s)\n    return sum(ascii)\nend", "    a = 0\n    for char in s\n  \
    \      if string(char) in uppercase(string(char))\n            a += Int64(char)\n\
    \        end\n    end\n    return a\nend", "    upper_sum = 0\n    # the sum of\
    \ ASCII codes of all the upper characters\n    for c in s\n        if \"A\" <=\
    \ c <= \"Z\"\n            upper_sum += (Int64(c) - 64)\n        end\n    end\n\
    \    return upper_sum\nend", "    sum = 0\n    for i in s\n        x = (Int(i))\n\
    \        if x < 97\n            sum += x\n        end\n    end\n    return sum\n\
    end", "    s_upper = isupper.(s)\n    ascii_upper = sum(Int.(s[s_upper]))\n  \
    \  return ascii_upper\nend", "    return sum(ch->ch>='A' && ch<='Z' ? Int(ch)\
    \ : 0, s)\nend", "    sum = 0\n    for i in s\n        if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            sum += Int64(i)\n        end\n    end\n    return sum\nend", "  \
    \  return sum(Int64(ch) for ch in s if ch in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\nend",
  "    # define your function here\n    s = split(s, \"\")\n    total = 0\n    for\
    \ i in s\n        if i >= \"A\" && i <= \"Z\"\n            total += string(i,\
    \ base=16)\n        end\n    end\n    return total\nend", "    return sum( map(x\
    \ -> x==uppercase(x) ? x : 0, collect(s)) )\nend", "    total = 0\n    for i in\
    \ 1:length(s)\n        if s[i] != lowercase(s[i])\n            total += ASCII(s[i])\n\
    \        end\n    end\n    return total\nend", "    suma = 0\n    for i in s\n\
    \        if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            suma += Int64(i)\n\
    \        end\n    end\n    return suma\nend", "    s::String\n    for c in s \n\
    \        if isupper(c) \n            s = s + c\n        end\n    end\n    return\
    \ sum(Int(i) for i in s)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
