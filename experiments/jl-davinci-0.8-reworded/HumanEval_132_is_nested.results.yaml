language: jl
name: HumanEval_132_is_nested
results:
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if !check_balanced(string)\n\
    \        return false\n    end\n    bracket_found = false\n    opening_bracket_index\
    \ = 0\n    closing_bracket_index = 0\n    while closing_bracket_index <= length(string)\n\
    \        if string[closing_bracket_index] == \"]\"\n            bracket_found\
    \ = true\n            break\n        end\n        closing_bracket_index += 1\n\
    \    end\n    if bracket_found\n        opening_bracket_index = closing_bracket_index\
    \ - 1\n        while opening_bracket_index >= 1\n            if string[opening_bracket_index]\
    \ == \"[\"\n                if check_balanced(string[opening_bracket_index:closing_bracket_index])\n\
    \                    return true\n                end\n            end\n     \
    \       opening_bracket_index -= 1\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmp5niurrnj.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmp5niurrnj.jl:51\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: check_balanced not\
    \ defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp5niurrnj.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5niurrnj.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5niurrnj.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp5niurrnj.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: check_balanced not\
    \ defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp5niurrnj.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5niurrnj.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5niurrnj.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp5niurrnj.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: check_balanced not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp5niurrnj.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5niurrnj.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5niurrnj.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp5niurrnj.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: check_balanced not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp5niurrnj.jl:20\n   [2]\
    \ macro expansion\n     @ /share"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # The\
    \ stack is going to record opening \n    # brackets. If a close bracket comes,\
    \ \n    # we will pop the last opening bracket. \n    # If they are not matching,\
    \ return False \n    stack = [] \n    for bracket in string \n        if bracket\
    \ == '['\n            push!(stack, bracket) \n        elseif bracket == ']'\n\
    \            if isempty(stack)\n                return false\n            elseif\
    \ pop!(stack) != '['\n                return false\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpagzmcpgz.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpagzmcpgz.jl:45\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpagzmcpgz.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpagzmcpgz.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpagzmcpgz.jl:46\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpagzmcpgz.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpagzmcpgz.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpagzmcpgz.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpagzmcpgz.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpagzmcpgz.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpagzmcpgz.jl:54\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpagzmcpgz.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpagzmcpgz.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Make\
    \ an array of the given string \n    string_array = convert(Array{Char},string)\n\
    \    # Variable to keep track of the number of nested brackets\n    nested_brackets\
    \ = 0\n    # Iterate through the array \n    for i = 1:length(string_array)\n\
    \        # If the previous bracket is not closed before the next bracket is opened\
    \ \n        if string_array[i] == '['\n            nested_brackets += 1\n    \
    \    # If there are no closed brackets before the next bracket is opened\n   \
    \     elseif string_array[i] == ']' && nested_brackets == 0\n            return\
    \ false\n        # If there are closed brackets before the next bracket is opened\n\
    \        elseif string_array[i] == ']' && nested_brackets > 0\n            nested_brackets\
    \ -= 1\n        end\n    end\n    # If there are no more opened or closed brackets,\
    \ there is a valid subsequence\n    return nested_brackets == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpcyumeug8.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpcyumeug8.jl:45\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: Cannot `convert` an\
    \ object of type \n    String to an object of type \n    Array{Char}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpcyumeug8.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcyumeug8.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcyumeug8.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpcyumeug8.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: Cannot `convert` an object\
    \ of type \n    String to an object of type \n    Array{Char}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpcyumeug8.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcyumeug8.jl:46 [inl"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    i = 0\n\
    \    for c in string\n        if c == '['\n            i += 1\n        elseif\
    \ c == ']'\n            i -= 1\n        end\n        if i < 0\n            return\
    \ false\n        end\n    end\n    if i > 0\n        return false\n    end\n \
    \   return true\nend\n# @test is_nested(\"[[]]\") == true\n# @test is_nested(\"\
    []]]]]]][[[[[]\") == false\n# @test is_nested(\"[][]\") == false\n# @test is_nested(\"\
    []\") == false\n# @test is_nested(\"[[][]]\") == true\n# @test is_nested(\"[[]][[\"\
    ) == true\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvsdyzu1q.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpvsdyzu1q.jl:49\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvsdyzu1q.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvsdyzu1q.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpvsdyzu1q.jl:50\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvsdyzu1q.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvsdyzu1q.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpvsdyzu1q.jl:56\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvsdyzu1q.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvsdyzu1q.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpvsdyzu1q.jl:58\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvsdyzu1q.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvsdyzu1q.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    res =\
    \ [] # bracket stack\n    for i in string\n        if i == '['\n            push!(res,\
    \ i)\n        else\n            if !isempty(res)\n                pop!(res)\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    if isempty(res)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpur9xvmie.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpur9xvmie.jl:45\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpur9xvmie.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpur9xvmie.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpur9xvmie.jl:46\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpur9xvmie.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpur9xvmie.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpur9xvmie.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpur9xvmie.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpur9xvmie.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpur9xvmie.jl:54\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpur9xvmie.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpur9xvmie.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Assume\
    \ string is a valid sequence of square brackets\n    # The string is valid if\
    \ the number of open brackets is at least 1 greater than the number of closed\
    \ brackets\n    num_open = 0\n    num_closed = 0\n    for bracket in string\n\
    \        if bracket == '['\n            num_open += 1\n        else\n        \
    \    num_closed += 1\n        end\n        # If there are more closed brackets\
    \ than open, it is invalid, \n        # so return false\n        if num_closed\
    \ > num_open\n            return false\n        end\n    end\n    # If there are\
    \ more open brackets than closed, it is valid, \n    # so return true\n    if\
    \ num_open > num_closed\n        return true\n    end\n    # If there are the\
    \ same number of open and closed brackets, \n    # it is invalid, so return false\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpirx909ib.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpirx909ib.jl:50\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpirx909ib.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirx909ib.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpirx909ib.jl:54\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpirx909ib.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirx909ib.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpirx909ib.jl:56\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpirx909ib.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirx909ib.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpirx909ib.jl:57\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpirx909ib.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirx909ib.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpirx909ib.jl:60\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    i = 1\
    \ \n    count = 0 \n    while i <= length(string)\n        if count < 0\n    \
    \        return false\n        end\n        if string[i] == '['\n            count\
    \ += 1\n        elseif string[i] == ']'\n            count -= 1\n        end\n\
    \        i += 1\n    end\n    return count != 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkgjczyer.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpkgjczyer.jl:40\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgjczyer.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgjczyer.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkgjczyer.jl:44\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgjczyer.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgjczyer.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkgjczyer.jl:46\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgjczyer.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgjczyer.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkgjczyer.jl:47\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgjczyer.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgjczyer.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkgjczyer.jl:48\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test."
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Tracks\
    \ if we have seen a nested bracket\n    has_nested = false\n    # Tracks the number\
    \ of opening brackets we have seen\n    open_count = 0\n    # Tracks the number\
    \ of closing brackets we have seen\n    close_count = 0\n    # Iterate through\
    \ each char\n    for c in string\n        # If we see an opening bracket, increment\
    \ the count\n        if c == '['\n            open_count += 1\n        elseif\
    \ c == ']'\n            # If we see a closing bracket, decrement the count\n \
    \           close_count += 1\n            # If we have seen a nested bracket,\
    \ set flag to true\n            if close_count > open_count\n                has_nested\
    \ = true\n            end\n        end\n    end\n    return open_count == close_count\
    \ && has_nested\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9h_3uoya.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp9h_3uoya.jl:47\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9h_3uoya.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9h_3uoya.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp9h_3uoya.jl:51\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9h_3uoya.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9h_3uoya.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp9h_3uoya.jl:53\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9h_3uoya.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9h_3uoya.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp9h_3uoya.jl:56\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9h_3uoya.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9h_3uoya.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp9h_3uoya.jl:57\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    squares\
    \ = 0\n    for i = 1:length(string)\n        if string[i] == '['\n           \
    \ squares += 1\n        elseif string[i] == ']'\n            squares -= 1\n  \
    \      end\n        if squares < 0\n            return false\n        end\n  \
    \  end\n    if squares == 0\n        return false\n    else\n        return true\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm8z3r_1r.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpm8z3r_1r.jl:42\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8z3r_1r.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8z3r_1r.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpm8z3r_1r.jl:46\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8z3r_1r.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8z3r_1r.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpm8z3r_1r.jl:48\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8z3r_1r.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8z3r_1r.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpm8z3r_1r.jl:49\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8z3r_1r.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8z3r_1r.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpm8z3r_1r.jl:52\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Check\
    \ if the string is empty, if so it's not a nested bracket\n    if isempty(string)\n\
    \        return false\n    end\n    # Grab the first bracket and check if it's\
    \ an opening or closing bracket\n    bracket = string[1]\n    if bracket == \"\
    [\"\n        # Add an opening bracket to the bracket stack\n        push!(bracket_stack,\
    \ bracket)\n    elseif bracket == \"]\"\n        # If the bracket stack is empty,\
    \ there's no opening bracket, so return false\n        if isempty(bracket_stack)\n\
    \            return false\n        else\n            # Pop the latest bracket\
    \ from the stack\n            pop!(bracket_stack)\n        end\n    end\n    #\
    \ Recursively call the function for the rest of the string\n    return is_nested(string[2:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuzo4rej3.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpuzo4rej3.jl:46\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzo4rej3.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzo4rej3.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpuzo4rej3.jl:50\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzo4rej3.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzo4rej3.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpuzo4rej3.jl:52\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzo4rej3.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzo4rej3.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpuzo4rej3.jl:55\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzo4rej3.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzo4rej3.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpuzo4rej3.jl:56\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    level\
    \ = 0\n    for char in string\n        level += 1 if char == '[' else -1\n   \
    \     if level < 0\n            return false\n        end\n    end\n    return\
    \ level > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpfp9ubkxw.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfp9ubkxw.jl:22\n\
    in expression starting at /tmp/tmpfp9ubkxw.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Create\
    \ a stack to keep track of the opening brackets\n    stack = []\n    # Convert\
    \ the string to an array of characters and iterate over the array\n    for bracket\
    \ in collect(string)\n        # If the current bracket is an opening bracket push\
    \ it onto the stack\n        if bracket == '['\n            push!(stack, bracket)\n\
    \        # If the current bracket is a closing bracket, check the top of the stack\n\
    \        elseif bracket == ']'\n            # If the top of the stack is an opening\
    \ bracket, pop the top of the stack\n            if !isempty(stack) && stack[end]\
    \ == '['\n                pop!(stack)\n            # Otherwise, return false\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    # If the stack is empty at the end of the iteration, return true\n\
    \    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp452w1x8y.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmp452w1x8y.jl:48\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp452w1x8y.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp452w1x8y.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp452w1x8y.jl:49\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp452w1x8y.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp452w1x8y.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp452w1x8y.jl:55\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp452w1x8y.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp452w1x8y.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp452w1x8y.jl:57\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp452w1x8y.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp452w1x8y.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
- exit_code: -1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    n = length(string)\n\
    \    stack = Dict{String, Int}()\n    for i in 1:n\n        if string[i] == '['\n\
    \            stack[string[i]] = 1\n        else\n            if isempty(stack)\n\
    \                return false\n            else\n                delete!(stack,\
    \ \"[\")\n            end\n        end\n    end\n    return isempty(stack)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmplqlhafc9.jl:40\n  Test threw
    exception\n  Expression: candidate("[[]]") == true\n  MethodError: Cannot `convert`
    an object of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    is_nested(string::String)\n     @ Main /tmp/tmplqlhafc9.jl:24\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmplqlhafc9.jl:40 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmplqlhafc9.jl:39\ntest set: Error During Test at
    /tmp/tmplqlhafc9.jl:41\n  Test threw exception\n  Expression: candidate("[]]]]]]][[[[[]")
    == false\n  MethodError: Cannot `convert` an object of type Char to an object
    of type String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)
    at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    is_nested(string::String)\n     @ Main /tmp/tmplqlhafc9.jl:24\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/'
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n  for i in\
    \ 1:length(string)\n    if string[i]=='[' && string[i+1]==']'\n      return true\n\
    \    end\n  end\n  return false\nend\n# Check to see if the function works\nprintln(is_nested(\"\
    [[]]\"))\nprintln(is_nested(\"[]]]]]]][[[[[]\"))\nprintln(is_nested(\"[][]\"))\n\
    println(is_nested(\"[]\"))\nprintln(is_nested(\"[[][]]\"))\nprintln(is_nested(\"\
    [[]][[\"))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpualgandr.jl:36

    '
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntest set: Test Failed at /tmp/tmpualgandr.jl:40\n\
    \  Expression: candidate(\"[]]]]]]][[[[[]\") == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpualgandr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpualgandr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpualgandr.jl:41\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpualgandr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpualgandr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpualgandr.jl:42\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpualgandr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpualgandr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpualgandr.jl:44\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpualgandr.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpualgandr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpualgandr.jl:46\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = []\n    for s in string\n        if s == '['\n            push!(stack, s)\n\
    \        elseif s == ']'\n            if isempty(stack) || stack[end] != '['\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6sxbaasl.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp6sxbaasl.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sxbaasl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sxbaasl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6sxbaasl.jl:42\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sxbaasl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sxbaasl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6sxbaasl.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sxbaasl.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sxbaasl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6sxbaasl.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sxbaasl.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sxbaasl.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = Stack{Char}()\n    for c in string\n        if isempty(stack)\n          \
    \  push!(stack, c)\n        else\n            if c == ']' && peek(stack) == '['\n\
    \                pop!(stack)\n            else\n                push!(stack, c)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpty23bkym.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpty23bkym.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpty23bkym.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpty23bkym.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpty23bkym.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpty23bkym.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpty23bkym.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpty23bkym.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpty23bkym.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpty23bkym.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpty23bkym.jl:20\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpty23bkym.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpty23bkym.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpty23bkym.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpty23bkym.jl:20\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/st"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    chars\
    \ = [c for c in string]\n    stack = []\n    for c in chars\n        if c == '['\n\
    \            push!(stack,c)\n        elseif c == ']' && length(stack) != 0\n \
    \           pop!(stack)\n        elseif c == ']' && length(stack) == 0\n     \
    \       return false\n        end\n    end\n    if length(stack) == 0\n      \
    \  return true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjwz1xagb.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpjwz1xagb.jl:44\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwz1xagb.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwz1xagb.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpjwz1xagb.jl:45\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwz1xagb.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwz1xagb.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpjwz1xagb.jl:51\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwz1xagb.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwz1xagb.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpjwz1xagb.jl:53\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwz1xagb.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwz1xagb.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if occursin('[]',\
    \ string)\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpshrv4bg7.jl:20\nin expression\
    \ starting at /tmp/tmpshrv4bg7.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # store\
    \ the length of the given string\n    len = length(string)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjt_fk1s8.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjt_fk1s8.jl:1\n\
    in expression starting at /tmp/tmpjt_fk1s8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    length\
    \ = lastindex(string)\n    return any(string[i] == '[' && string[i+1] == ']' for\
    \ i in 1:length-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptbd3_skj.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmptbd3_skj.jl:29\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptbd3_skj.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbd3_skj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptbd3_skj.jl:30\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptbd3_skj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbd3_skj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptbd3_skj.jl:31\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptbd3_skj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbd3_skj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptbd3_skj.jl:33\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptbd3_skj.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbd3_skj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptbd3_skj.jl:35\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    opens::Int\
    \ = 0\n    for i in 1:length(string)\n        if(string[i] == '[' && opens ==\
    \ 0)\n            opens = 1\n        elseif(string[i] == '[' && opens == 1)\n\
    \            opens = 2\n        elseif(string[i] == ']' && opens == 2)\n     \
    \       opens = 1\n        elseif(string[i] == ']' && opens == 1)\n          \
    \  opens = 0\n        elseif(string[i] == ']' && opens == 0)\n            return\
    \ false\n        end\n    end\n    if(opens == 1)\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2wuuzn6y.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmp2wuuzn6y.jl:45\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2wuuzn6y.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2wuuzn6y.jl:44\ntest set: Test Failed at /tmp/tmp2wuuzn6y.jl:49\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2wuuzn6y.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2wuuzn6y.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp2wuuzn6y.jl:51\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2wuuzn6y.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2wuuzn6y.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp2wuuzn6y.jl:52\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2wuuzn6y.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2wuuzn6y.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp2wuuzn6y.jl:54\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = []\n    for c in string\n        if c == '['\n            push!(stack, c)\n\
    \        else\n            if isempty(stack)\n                return false\n \
    \           elseif stack[end] == '['\n                pop!(stack)\n          \
    \  else\n                return false\n            end\n        end\n    end\n\
    \    isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6z34g221.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp6z34g221.jl:43\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6z34g221.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6z34g221.jl:40\ntest set: Test Failed at /tmp/tmp6z34g221.jl:44\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6z34g221.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6z34g221.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp6z34g221.jl:50\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6z34g221.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6z34g221.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp6z34g221.jl:52\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6z34g221.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6z34g221.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n   \
    \ string_len = length(string)\n    if string_len == 0\n        return false\n\
    \    end\n    \n    stack = Int[]\n    for i in 1:string_len\n        if string[i]\
    \ == '['\n            push!(stack, 1)\n        else\n            if length(stack)\
    \ == 0\n                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if length(stack) == 0\n    \
    \    return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph9312fmz.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmph9312fmz.jl:52\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph9312fmz.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmph9312fmz.jl:49\ntest set: Test Failed at /tmp/tmph9312fmz.jl:53\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9312fmz.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9312fmz.jl:49\ntest set: Test\
    \ Failed at /tmp/tmph9312fmz.jl:59\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9312fmz.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9312fmz.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = Stack{Char}()\n    for char in string\n        push!(stack, char)\n    end\n\
    \    stack \nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmp48tjo6of.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp48tjo6of.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp48tjo6of.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp48tjo6of.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48tjo6of.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp48tjo6of.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp48tjo6of.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp48tjo6of.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48tjo6of.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp48tjo6of.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp48tjo6of.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp48tjo6of.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48tjo6of.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp48tjo6of.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp48tjo6of.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1660014916
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Get\
    \ a vector of the brackets contained in string\n    brackets = [c for c in string]\n\
    \    # initialize the stack of brackets\n    stack = []\n    # loop through all\
    \ brackets in the vector\n    for bracket in brackets\n        # if the bracket\
    \ is an opening bracket, push onto the stack\n        if bracket == \"[\"\n  \
    \          push!(stack, bracket)\n        # if the bracket is a closing bracket,\
    \ pop it off the stack\n        elseif bracket == \"]\"\n            pop!(stack)\n\
    \        # if the stack is empty after popping the stack, return true\n      \
    \  if isempty(stack)\n            return true\n        end\n    end\n    # if\
    \ the stack is not empty after running through all the brackets, return false\n\
    \    return false\nend\n \nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpazg26b5m.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpazg26b5m.jl:1\n\
    in expression starting at /tmp/tmpazg26b5m.jl:1\n"
  stdout: ''
  timestamp: 1660014913
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    count_left_bracket\
    \ = 0\n    for char in string\n        if char == '['\n            count_left_bracket\
    \ += 1\n        else\n            if count_left_bracket > 0\n                count_left_bracket\
    \ -= 1\n            else\n                return false\n            end\n    \
    \    end\n    end\n    return count_left_bracket == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp88rwhgvw.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp88rwhgvw.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp88rwhgvw.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp88rwhgvw.jl:38\ntest set: Test Failed at /tmp/tmp88rwhgvw.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88rwhgvw.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88rwhgvw.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp88rwhgvw.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88rwhgvw.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88rwhgvw.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp88rwhgvw.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88rwhgvw.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88rwhgvw.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    last_closed_bracket\
    \ = 0\n    for bracket in string\n        if bracket == '['\n            return\
    \ true\n        else\n            last_closed_bracket += 1\n        end\n    end\n\
    \    return last_closed_bracket == length(string)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4rkq6450.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp4rkq6450.jl:36\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rkq6450.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rkq6450.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4rkq6450.jl:37\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rkq6450.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rkq6450.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4rkq6450.jl:38\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rkq6450.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rkq6450.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4rkq6450.jl:40\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4rkq6450.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4rkq6450.jl:34\ntest set: Test Failed at /tmp/tmp4rkq6450.jl:42\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    is_nested\
    \ = true\n    for c in string\n        is_nested &&= (c == '[' || c == ']')\n\
    \    end\n    n = length(string)\n    d = 0\n    i = 1\n    while i <= n\n   \
    \     if string[i] == '['\n            d += 1\n        elseif string[i] == ']'\n\
    \            d -= 1\n        end\n        if d < 0\n            is_nested = false\n\
    \            break\n        end\n        i += 1\n    end\n    is_nested &&= (d\
    \ == 0)\n    return is_nested\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc8cvfi9g.jl:22\nin expression starting at /tmp/tmpc8cvfi9g.jl:22\n"
  stdout: ''
  timestamp: 1660014913
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = []\n    for i in string\n        if i == '['\n            push!(stack, ']')\n\
    \        elseif i == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                if pop!(stack) != i\n             \
    \       return false\n                end\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqtsnm7w5.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpqtsnm7w5.jl:43\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqtsnm7w5.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqtsnm7w5.jl:40\ntest set: Test Failed at /tmp/tmpqtsnm7w5.jl:44\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtsnm7w5.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtsnm7w5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqtsnm7w5.jl:50\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtsnm7w5.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtsnm7w5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqtsnm7w5.jl:52\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtsnm7w5.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtsnm7w5.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets\
    \ = 0\n    close_brackets = 0\n    nested = false\n    for c in string\n     \
    \   if c == '['\n            open_brackets += 1\n        elseif c == ']'\n   \
    \         close_brackets += 1\n        end\n        if open_brackets > 0 && close_brackets\
    \ > 0\n            nested = true\n        end\n    end\n    return nested && open_brackets\
    \ == close_brackets\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl9wjo3l3.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpl9wjo3l3.jl:42\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpl9wjo3l3.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpl9wjo3l3.jl:39\ntest set: Test Failed at /tmp/tmpl9wjo3l3.jl:43\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl9wjo3l3.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl9wjo3l3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpl9wjo3l3.jl:49\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl9wjo3l3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl9wjo3l3.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return\
    \ !isempty(findall(r\"\\[\\]\", string))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmysqqxc3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpmysqqxc3.jl:28\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmysqqxc3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmysqqxc3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmysqqxc3.jl:29\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmysqqxc3.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmysqqxc3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmysqqxc3.jl:30\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmysqqxc3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmysqqxc3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmysqqxc3.jl:32\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmysqqxc3.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmysqqxc3.jl:26\ntest set: Test Failed at /tmp/tmpmysqqxc3.jl:34\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_count\
    \ = 0\n    close_count = 0\n    for char in string\n        if char == '['\n \
    \           open_count += 1\n        elseif char == ']'\n            close_count\
    \ += 1\n        end\n    end\n    return open_count > 0 && open_count == close_count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6ske1lbr.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp6ske1lbr.jl:38\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6ske1lbr.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6ske1lbr.jl:35\ntest set: Test Failed at /tmp/tmp6ske1lbr.jl:39\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ske1lbr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ske1lbr.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6ske1lbr.jl:45\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ske1lbr.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ske1lbr.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open =\
    \ []\n    close = []\n    for i in string\n        if i == '['\n            push!(open,\
    \ i)\n        elseif i == ']'\n            push!(close, i)\n        end\n    end\n\
    \    length(open) >= length(close) ? true : false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpro1f1m4g.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpro1f1m4g.jl:38\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpro1f1m4g.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpro1f1m4g.jl:35\ntest set: Test Failed at /tmp/tmpro1f1m4g.jl:39\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpro1f1m4g.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpro1f1m4g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpro1f1m4g.jl:43\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpro1f1m4g.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpro1f1m4g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpro1f1m4g.jl:47\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpro1f1m4g.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpro1f1m4g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpro1f1m4g.jl:48\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    num_left\
    \ = 0\n    num_right = 0\n    for i in string\n        if i == \"[\"\n       \
    \     num_left += 1\n        elseif i == \"]\"\n            num_right += 1\n \
    \       end\n    end\n    if num_left == num_right\n        return false\n   \
    \ elseif num_left > num_right\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfk4ivcnn.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpfk4ivcnn.jl:42\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfk4ivcnn.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfk4ivcnn.jl:41\ntest set: Test Failed at /tmp/tmpfk4ivcnn.jl:46\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfk4ivcnn.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfk4ivcnn.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpfk4ivcnn.jl:48\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfk4ivcnn.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfk4ivcnn.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpfk4ivcnn.jl:51\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfk4ivcnn.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfk4ivcnn.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpfk4ivcnn.jl:52\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Your\
    \ code here\n    array = []\n    for i in string\n        if i == \"[\"\n    \
    \        push!(array, i)\n        elseif i == \"]\"\n            if isempty(array)\n\
    \                return false\n            else\n                pop!(array)\n\
    \            end\n        end\n    end\n    if isempty(array)\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphs7edl10.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmphs7edl10.jl:45\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphs7edl10.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphs7edl10.jl:43\ntest set: Test\
    \ Failed at /tmp/tmphs7edl10.jl:46\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphs7edl10.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphs7edl10.jl:43\ntest set: Test\
    \ Failed at /tmp/tmphs7edl10.jl:47\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphs7edl10.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphs7edl10.jl:43\ntest set: Test\
    \ Failed at /tmp/tmphs7edl10.jl:49\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphs7edl10.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphs7edl10.jl:43\ntest set: Test Failed at /tmp/tmphs7edl10.jl:51\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    i = 0\n\
    \    while i < length(string)\n        count = 0\n        if string[i] == '['\n\
    \            count += 1\n        elseif string[i] == ']'\n            count -=\
    \ 1\n        end\n        i += 1\n        if count == 0\n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 13 errored,
    0 broken.

    in expression starting at /tmp/tmptze43oyb.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmptze43oyb.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] is_nested(string::String)\n\
    \     @ Main /tmp/tmptze43oyb.jl:23\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmptze43oyb.jl:40 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmptze43oyb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptze43oyb.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  BoundsError: attempt to access 14-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] is_nested(string::String)\n\
    \     @ Main /tmp/tmptze43oyb.jl:23\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmptze43oyb.jl:41 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmptze43oyb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptze43oyb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  BoundsError: attempt to access 4-codeunit String\
    \ at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] is_nested(string::String)\n\
    \     @ Main /tmp/tmptze43oyb.jl:23\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/ju"
  timestamp: 1660014915
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = []\n    for bracket in string\n        if bracket == '['\n            push!(stack,\
    \ bracket)\n        else\n            if !isempty(stack)\n                pop!(stack)\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp14fahohm.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp14fahohm.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp14fahohm.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp14fahohm.jl:38\ntest set: Test Failed at /tmp/tmp14fahohm.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14fahohm.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14fahohm.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp14fahohm.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14fahohm.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14fahohm.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp14fahohm.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14fahohm.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14fahohm.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open::Array{Char,1}\
    \ = Array{Char,1}()\n    closed::Array{Char,1} = Array{Char,1}()\n    for i in\
    \ string\n        if i == '['\n            push!(open, i)\n        elseif i ==\
    \ ']'\n            push!(closed, i)\n        end\n    end\n    if length(open)\
    \ == length(closed)\n        return false\n    elseif length(open) > length(closed)\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzwmek97p.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpzwmek97p.jl:42\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzwmek97p.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzwmek97p.jl:41\ntest set: Test Failed at /tmp/tmpzwmek97p.jl:46\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzwmek97p.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzwmek97p.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpzwmek97p.jl:48\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzwmek97p.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzwmek97p.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpzwmek97p.jl:49\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzwmek97p.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzwmek97p.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpzwmek97p.jl:52\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    #check\
    \ if all brackets have same length\n    if length(string) % 2 != 0\n        return\
    \ false\n    end\n    #check if there is an even number of [ and an even number\
    \ of ]\n    number_open_brackets = 0\n    number_closed_brackets = 0\n    for\
    \ bracket in string\n        if bracket == \"[\"\n            number_open_brackets\
    \ += 1\n        else\n            number_closed_brackets += 1\n        end\n \
    \   end\n    if number_open_brackets % 2 != 0 || number_closed_brackets % 2 !=\
    \ 0\n        return false\n    end\n    #check if there is an odd number of [\
    \ and an odd number of ]\n    if number_open_brackets % 2 == 0 || number_closed_brackets\
    \ % 2 == 0\n        return false\n    end\n    #check if there is a full pair\
    \ of brackets\n    number_open_brackets = 0\n    number_closed_brackets = 0\n\
    \    for bracket in string\n        if bracket == \"[\"\n            number_open_brackets\
    \ += 1\n        else\n            number_closed_brackets += 1\n        end\n \
    \       if number_open_brackets == number_closed_brackets\n            return\
    \ true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_2a7jqkn.jl:58

    '
  stdout: "test set: Test Failed at /tmp/tmp_2a7jqkn.jl:61\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_2a7jqkn.jl:61 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_2a7jqkn.jl:60\ntest set: Test Failed at /tmp/tmp_2a7jqkn.jl:65\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2a7jqkn.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2a7jqkn.jl:60\ntest set: Test\
    \ Failed at /tmp/tmp_2a7jqkn.jl:67\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2a7jqkn.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2a7jqkn.jl:60\ntest set: Test\
    \ Failed at /tmp/tmp_2a7jqkn.jl:70\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2a7jqkn.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2a7jqkn.jl:60\ntest set: Test\
    \ Failed at /tmp/tmp_2a7jqkn.jl:71\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    n = length(string)\n\
    \    open = 0\n    nested = false\n    for i in 1:n\n        c = string[i]\n \
    \       if c == '['\n            open += 1\n        elseif c == ']'\n        \
    \    if open > 0\n                nested = true\n            end\n           \
    \ open -= 1\n        end\n    end\n    return nested && open == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoab0_wwj.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpoab0_wwj.jl:43\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoab0_wwj.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpoab0_wwj.jl:40\ntest set: Test Failed at /tmp/tmpoab0_wwj.jl:44\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoab0_wwj.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoab0_wwj.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpoab0_wwj.jl:50\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoab0_wwj.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoab0_wwj.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    b = push!(init_stack(),\
    \ 0)\n    for c in string\n        if c == '['\n            push!(b, 0)\n    \
    \    elseif c == ']'\n            x = pop!(b)\n            if x == 0\n       \
    \         return false\n            end\n        end\n    end\n    if peek(b)\
    \ == 0\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmp_6w6zklq.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmp_6w6zklq.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: init_stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp_6w6zklq.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_6w6zklq.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_6w6zklq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp_6w6zklq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: init_stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp_6w6zklq.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_6w6zklq.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_6w6zklq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp_6w6zklq.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: init_stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp_6w6zklq.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_6w6zklq.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_6w6zklq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp_6w6zklq.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: init_stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp_6w6zklq.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/"
  timestamp: 1660014915
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    n = length(string)\
    \ \n    if n == 0 \n        return false \n    end\n    stack = Array{Char}(undef,\
    \ n) \n    top = 0 \n    for i in 1:n \n        c = string[i] \n        if c ==\
    \ '[' \n            top += 1 \n            stack[top] = c \n        elseif c ==\
    \ ']' \n            if top > 0 \n                top -= 1 \n            else \n\
    \                return false \n            end\n        end\n    end\n    return\
    \ top == 0 \nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp94bibwcz.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmp94bibwcz.jl:48\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp94bibwcz.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp94bibwcz.jl:45\ntest set: Test Failed at /tmp/tmp94bibwcz.jl:49\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94bibwcz.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94bibwcz.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp94bibwcz.jl:55\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94bibwcz.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94bibwcz.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014914
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # iterate\
    \ through string and if we see a [ we increment, if we see a ] we decrement\n\
    \    count = 0\n    # if we see any ] before a [, return false\n    for i in string\n\
    \        if i == ']'\n            count -= 1\n            if count < 0\n     \
    \           return false\n        elseif i == '['\n            count += 1\n  \
    \  # if at the end count != 0, return false\n    count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0neeumg.jl:1\nin expression starting at /tmp/tmpc0neeumg.jl:1\n"
  stdout: ''
  timestamp: 1660014913
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_bracket_count\
    \ = 0\n    closed_bracket_count = 0\n    for c in string\n        open_bracket_count\
    \ += 1 if c == '[' else 0\n        closed_bracket_count += 1 if c == ']' else\
    \ 0\n        return false if closed_bracket_count > open_bracket_count\n    end\n\
    \    return false if open_bracket_count == 0\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpau2ac4k1.jl:22 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpau2ac4k1.jl:23\n\
    in expression starting at /tmp/tmpau2ac4k1.jl:23\n"
  stdout: ''
  timestamp: 1660014915
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open =\
    \ 0\n    closed = 0\n    for i in string\n        if i == '['\n            open\
    \ += 1\n        else\n            closed += 1\n        end\n        if closed\
    \ > open\n            return false\n        end\n    end\n    return open != closed\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwvc9lffl.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpwvc9lffl.jl:39\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwvc9lffl.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwvc9lffl.jl:38\ntest set: Test Failed at /tmp/tmpwvc9lffl.jl:43\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwvc9lffl.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwvc9lffl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwvc9lffl.jl:45\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwvc9lffl.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwvc9lffl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwvc9lffl.jl:46\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwvc9lffl.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwvc9lffl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwvc9lffl.jl:49\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014916
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    p = 1\n\
    \    for s in string\n        if s == '['\n            p += 1\n        elseif\
    \ s == ']'\n            p -= 1\n        end\n        if p == 0\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc0qzg33n.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpc0qzg33n.jl:40\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc0qzg33n.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc0qzg33n.jl:37\ntest set: Test Failed at /tmp/tmpc0qzg33n.jl:41\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0qzg33n.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0qzg33n.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpc0qzg33n.jl:45\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0qzg33n.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0qzg33n.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpc0qzg33n.jl:49\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0qzg33n.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0qzg33n.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpc0qzg33n.jl:50\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp"
  timestamp: 1660014916
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # creates\
    \ a new list that is blank\n    ans = []\n    for i in string\n        # checks\
    \ if string is a left bracket\n        if i == \"[\"\n            # pushes the\
    \ bracket into the list\n            push!(ans, i)\n        # checks if it is\
    \ a right bracket\n        elseif i == \"]\"\n            # checks if the list\
    \ is empty before removing the bracket\n            if isempty(ans) == false\n\
    \                # removes the bracket from the list\n                pop!(ans)\n\
    \            # if the list is empty before removing a bracket it means that\n\
    \            # there is a right bracket without a left bracket before it\n   \
    \         else\n                return false\n            end\n        end\n \
    \   end\n    # checks if the list is empty after looping through the string.\n\
    \    # if the list is empty then there is a valid subset of brackets\n    # but\
    \ if the list is not empty then it means that there is a left bracket\n    # without\
    \ a right bracket before it\n    if isempty(ans) == true\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppzncrlpt.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmppzncrlpt.jl:56\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzncrlpt.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzncrlpt.jl:54\ntest set: Test\
    \ Failed at /tmp/tmppzncrlpt.jl:57\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzncrlpt.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzncrlpt.jl:54\ntest set: Test\
    \ Failed at /tmp/tmppzncrlpt.jl:58\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzncrlpt.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzncrlpt.jl:54\ntest set: Test\
    \ Failed at /tmp/tmppzncrlpt.jl:60\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppzncrlpt.jl:60 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppzncrlpt.jl:54\ntest set: Test Failed at /tmp/tmppzncrlpt.jl:62\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014917
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    matches\
    \ = 0\n    for ch in string\n        if ch == '['\n            matches += 1\n\
    \        elseif ch == ']'\n            matches -= 1\n        end\n        if matches\
    \ < 0\n            return false\n        end\n    end\n    return matches > 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl7qmvdts.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpl7qmvdts.jl:38\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpl7qmvdts.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpl7qmvdts.jl:37\ntest set: Test Failed at /tmp/tmpl7qmvdts.jl:42\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl7qmvdts.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl7qmvdts.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpl7qmvdts.jl:44\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl7qmvdts.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl7qmvdts.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpl7qmvdts.jl:45\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl7qmvdts.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl7qmvdts.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpl7qmvdts.jl:48\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014916
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open =\
    \ 0\n    close = 0\n    nested = false\n    for c in string\n        if c == '['\n\
    \            open += 1\n        elseif c == ']'\n            close += 1\n    \
    \    end\n        if close > open\n            return false\n        end\n   \
    \     if close > 0 && open > 0\n            nested = true\n        end\n    end\n\
    \    return nested\nend\nprintln(is_nested(\"[[]]\"))\nprintln(is_nested(\"[]]]]]]][[[[[]\"\
    ))\nprintln(is_nested(\"[][]\"))\nprintln(is_nested(\"[]\"))\nprintln(is_nested(\"\
    [[][]]\"))\nprintln(is_nested(\"[[]][[\"))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphg91bohr.jl:46

    '
  stdout: "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntest set: Test Failed at /tmp/tmphg91bohr.jl:51\n\
    \  Expression: candidate(\"[][]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphg91bohr.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphg91bohr.jl:48\ntest set: Test\
    \ Failed at /tmp/tmphg91bohr.jl:52\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphg91bohr.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphg91bohr.jl:48\ntest set: Test\
    \ Failed at /tmp/tmphg91bohr.jl:56\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphg91bohr.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphg91bohr.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014916
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    count\
    \ = 0\n    for c in string\n        if c == '['\n            count += 1\n    \
    \    elseif c == ']'\n            count -= 1\n        end\n        if count <\
    \ 0\n            return false\n        end\n    end\n    if count == 0\n     \
    \   return false\n    else\n        return true\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkyomk567.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpkyomk567.jl:42\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkyomk567.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkyomk567.jl:41\ntest set: Test Failed at /tmp/tmpkyomk567.jl:46\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkyomk567.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkyomk567.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkyomk567.jl:48\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkyomk567.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkyomk567.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkyomk567.jl:49\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkyomk567.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkyomk567.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkyomk567.jl:52\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014916
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Establish\
    \ storage for the brackets\n    stack = []\n    # Iterate through the string\n\
    \    for char in string\n        # Push opening brackets to the stack\n      \
    \  if char == '['\n            push!(stack, char)\n        # If the stack is empty\
    \ and you encounter a closing bracket return false\n        elseif isempty(stack)\n\
    \            return false\n        # Pop the last element off the stack\n    \
    \    else\n            pop!(stack)\n        end\n    end\n    # If the string\
    \ was empty or contained only opening brackets return false\n    if isempty(stack)\n\
    \        return false\n    # If the string contained only closing brackets return\
    \ false\n    elseif isempty(stack)\n        return false\n    else\n        return\
    \ true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprd9r5ajg.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmprd9r5ajg.jl:50\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprd9r5ajg.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprd9r5ajg.jl:49\ntest set: Test Failed at /tmp/tmprd9r5ajg.jl:54\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprd9r5ajg.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprd9r5ajg.jl:49\ntest set: Test\
    \ Failed at /tmp/tmprd9r5ajg.jl:56\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprd9r5ajg.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprd9r5ajg.jl:49\ntest set: Test\
    \ Failed at /tmp/tmprd9r5ajg.jl:57\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprd9r5ajg.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprd9r5ajg.jl:49\ntest set: Test\
    \ Failed at /tmp/tmprd9r5ajg.jl:60\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014916
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # [subsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsub\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpden_pvq6.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpden_pvq6.jl:1\n\
    in expression starting at /tmp/tmpden_pvq6.jl:1\n"
  stdout: ''
  timestamp: 1660014915
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # use\
    \ stack to keep track of the position of the brackets\n    # stack: Array{Char,\
    \ 1} = Array{Char, 1}[]\n    stack = Array{Char, 1}[]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqxj43rm4.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqxj43rm4.jl:1\n\
    in expression starting at /tmp/tmpqxj43rm4.jl:1\n"
  stdout: ''
  timestamp: 1660014915
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    prev =\
    \ ']'\n    for s in string\n        if s == '['\n            if prev == '['\n\
    \                return true\n            end\n        else\n            if prev\
    \ == ']'\n                return false\n            end\n        end\n       \
    \ prev = s\n    end\n    return false\nend\n```\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph9ga0d9f.jl:35\nin expression starting at\
    \ /tmp/tmph9ga0d9f.jl:35\n"
  stdout: ''
  timestamp: 1660014915
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = []\n    for i in 1:length(string)\n        bracket = string[i]\n        if\
    \ bracket == '['\n            push!(stack, bracket)\n        elseif bracket ==\
    \ ']'\n            pop!(stack)\n        end\n    end\n    return !isempty(stack)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyhx1lfcx.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpyhx1lfcx.jl:36\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyhx1lfcx.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpyhx1lfcx.jl:35\ntest set: Error During Test\
    \ at /tmp/tmpyhx1lfcx.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n  ArgumentError: array must be non-empty\n  Stacktrace:\n\
    \   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpyhx1lfcx.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyhx1lfcx.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyhx1lfcx.jl:35\ntest set:\
    \ Test Failed at /tmp/tmpyhx1lfcx.jl:40\n  Expression: candidate(\"[[[[]]]]\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyhx1lfcx.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpyhx1lfcx.jl:35\ntest set: Error During Test\
    \ at /tmp/tmpyhx1lfcx.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    []]]]]]]]]]\") == false\n  ArgumentError: array must be non-empty\n  Stacktrace:\n\
    \   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpyhx1lfcx.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyhx1lfcx.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/ju"
  timestamp: 1660014918
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = Array{Char, 1}()\n    for bracket in string\n        if bracket == '['\n \
    \           push!(stack, bracket)\n        else\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprqupgqdl.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmprqupgqdl.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprqupgqdl.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprqupgqdl.jl:38\ntest set: Test Failed at /tmp/tmprqupgqdl.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqupgqdl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqupgqdl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmprqupgqdl.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqupgqdl.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqupgqdl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmprqupgqdl.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqupgqdl.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqupgqdl.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014917
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    count\
    \ = 0\n    for (i, c) in enumerate(string)\n        if c == '['\n            count\
    \ += 1\n        elseif c == ']'\n            count -= 1\n        end\n       \
    \ if count < 0\n            return false\n        end\n    end\n    return count\
    \ > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdzpw6r60.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpdzpw6r60.jl:38\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdzpw6r60.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdzpw6r60.jl:37\ntest set: Test Failed at /tmp/tmpdzpw6r60.jl:42\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzpw6r60.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzpw6r60.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpdzpw6r60.jl:44\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzpw6r60.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzpw6r60.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpdzpw6r60.jl:45\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzpw6r60.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzpw6r60.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpdzpw6r60.jl:48\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014917
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n   \
    \ stack = []\n    top = 0\n    for i = 1:length(string)\n        if string[i]\
    \ == '['\n            top += 1\n            push!(stack, string[i])\n        elseif\
    \ string[i] == ']'\n            if top > 0\n                if stack[top] == '['\n\
    \                    pop!(stack)\n                    top -= 1\n             \
    \   else\n                    return false\n                end\n            else\n\
    \                return false\n            end\n        end\n    end\n    if top\
    \ == 0\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpixrwaeza.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpixrwaeza.jl:53\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpixrwaeza.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpixrwaeza.jl:50\ntest set: Test Failed at /tmp/tmpixrwaeza.jl:54\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpixrwaeza.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpixrwaeza.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpixrwaeza.jl:60\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpixrwaeza.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpixrwaeza.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpixrwaeza.jl:62\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpixrwaeza.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpixrwaeza.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014917
- exit_code: -1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets\
    \ = Dict{Char,Char}('['=>']','{'=>'}','('=>')')\n    stack = []\n    for bracket\
    \ in string\n        if bracket in brackets\n            push!(stack,bracket)\n\
    \        elseif bracket == brackets[stack[end]]\n            pop!(stack)\n   \
    \     else\n            return false\n        end\n    end\n    return length(stack)\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpj0549ndb.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  AbstractDict collections only contain\
    \ Pairs;\n  Either look for e.g. A=>B instead, or use the `keys` or `values`\n\
    \  function if you are looking for a key or value respectively.\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(p::Char, a::Dict{Char,\
    \ Char})\n     @ Base ./abstractdict.jl:28\n   [3] is_nested(string::String)\n\
    \     @ Main /tmp/tmpj0549ndb.jl:23\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpj0549ndb.jl:38 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpj0549ndb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpj0549ndb.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  AbstractDict collections only contain\
    \ Pairs;\n  Either look for e.g. A=>B instead, or use the `keys` or `values`\n\
    \  function if you are looking for a key or value respectively.\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(p::Char, a::Dict{Char,\
    \ Char})\n     @ Base ./abstractdict.jl:28\n   [3] is_nested(string::String)\n\
    \     @ Main /tmp/tmpj0549ndb.jl:23\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpj0549ndb.jl:39 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpj0549ndb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpj0549ndb.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  AbstractDict collections only contain Pairs;\n\
    \  Either look for e.g. A=>B instead, or use the `keys` or `values`\n  function\
    \ if you are looking for a key or value respectively.\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] in(p::C"
  timestamp: 1660014919
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    str_len\
    \ = length(string)\n    idx = 1\n    nest_level = 0\n    nest_flag = false\n \
    \   while idx <= str_len\n        if string[idx] == '['\n            nest_level\
    \ += 1\n        elseif string[idx] == ']'\n            nest_level -= 1\n     \
    \   end\n        if nest_level == 0 && nest_flag\n            return true\n  \
    \      elseif nest_level == 1 && !nest_flag\n            nest_flag = true\n  \
    \      end\n        idx += 1\n    end\n    return false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0xdw_mfw.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0xdw_mfw.jl:45\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0xdw_mfw.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xdw_mfw.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0xdw_mfw.jl:46\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0xdw_mfw.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xdw_mfw.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0xdw_mfw.jl:47\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0xdw_mfw.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xdw_mfw.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0xdw_mfw.jl:49\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0xdw_mfw.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0xdw_mfw.jl:43\ntest set: Test Failed at /tmp/tmp0xdw_mfw.jl:52\n\
    \  Expression: candidate(\"[]]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014917
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets_stack\
    \ = Stack()\n    for bracket in string\n        if brackets_stack.isempty() &&\
    \ bracket == ']'\n            return false\n        elseif bracket == '['\n  \
    \          push!(brackets_stack, bracket)\n        else\n            pop!(brackets_stack)\n\
    \        end\n    end\n    return !brackets_stack.isempty()\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmp_bpe0kgm.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp_bpe0kgm.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp_bpe0kgm.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_bpe0kgm.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_bpe0kgm.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_bpe0kgm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp_bpe0kgm.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_bpe0kgm.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_bpe0kgm.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_bpe0kgm.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp_bpe0kgm.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_bpe0kgm.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_bpe0kgm.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_bpe0kgm.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp_bpe0kgm.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1660014918
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    x_num\
    \ = 0\n    for char in string\n        if char == '['\n            x_num += 1\n\
    \        elseif char == ']'\n            x_num -= 1\n        end\n        if x_num\
    \ == 0 && char == ']'\n            return false\n        end\n    end\n    if\
    \ x_num == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdd6ng1gd.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpdd6ng1gd.jl:42\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdd6ng1gd.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdd6ng1gd.jl:41\ntest set: Test Failed at /tmp/tmpdd6ng1gd.jl:46\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdd6ng1gd.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdd6ng1gd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpdd6ng1gd.jl:48\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdd6ng1gd.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdd6ng1gd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpdd6ng1gd.jl:51\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdd6ng1gd.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdd6ng1gd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpdd6ng1gd.jl:52\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014917
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    substr\
    \ = string[1:end]\n    if substr == \"\"\n        return true\n    elseif substr[1]\
    \ == \"[\"\n        return is_nested(string[1:end])\n    else\n        return\
    \ is_nested(string[2:end])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4y0729_8.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp4y0729_8.jl:35\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4y0729_8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4y0729_8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4y0729_8.jl:36\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4y0729_8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4y0729_8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4y0729_8.jl:37\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4y0729_8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4y0729_8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4y0729_8.jl:39\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4y0729_8.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4y0729_8.jl:33\ntest set: Test Failed at /tmp/tmp4y0729_8.jl:41\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014917
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    n = length(string)\n\
    \    stack = []\n    for i in 1:n\n        if string[i] == '['\n            push!(stack,\
    \ string[i])\n        else\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvjxcre38.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpvjxcre38.jl:40\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvjxcre38.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvjxcre38.jl:39\ntest set: Test Failed at /tmp/tmpvjxcre38.jl:44\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjxcre38.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjxcre38.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpvjxcre38.jl:46\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjxcre38.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjxcre38.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpvjxcre38.jl:49\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjxcre38.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjxcre38.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpvjxcre38.jl:50\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014917
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    string\
    \ = replace(string, r\"[^\\[\\]]+\", \"\")\n    re = Regex(\"\\\\[{2,}|\\\\]{2,}\"\
    )\n    while !endswith(string, \"[]\") && !isempty(string) && !re.match(string)\n\
    \        string = replace(string, r\"(\\[+)(\\]+)|(\\]+)(\\[+)\", \"\")\n    end\n\
    \    endswith(string, \"[]\") && !isempty(string)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpxhwg49dn.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpxhwg49dn.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: no method matching\
    \ replace(::String, ::Regex, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpxhwg49dn.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxhwg49dn.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxhwg49dn.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpxhwg49dn.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: no method matching replace(::String,\
    \ ::Regex, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpxhwg49dn.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxhwg49dn.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxhwg49dn.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpxhwg49dn.jl:34\n  Test "
  timestamp: 1660014920
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n   \
    \ string = replace(string, \"]]]\", \"]\")\n    while occursin(\"[[\", string)\n\
    \        string = replace(string, \"[[\", \"[\")\n    end\n    while occursin(\"\
    ][\", string)\n        string = replace(string, \"][\", \"]\")\n    end\n    return\
    \ !occursin(\"[\", string) && !occursin(\"]\", string)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpa0uilgnr.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpa0uilgnr.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: no method matching\
    \ replace(::String, ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpa0uilgnr.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa0uilgnr.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa0uilgnr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpa0uilgnr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpa0uilgnr.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa0uilgnr.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa0uilgnr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpa0uilgnr.jl:37\n  Tes"
  timestamp: 1660014920
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in string\n        if bracket == '['\n            open_brackets\
    \ += 1\n        elseif bracket == ']'\n            if open_brackets == 0\n   \
    \             return false\n            else\n                open_brackets -=\
    \ 1\n            end\n        end\n    end\n    return open_brackets > 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8t1kilb1.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp8t1kilb1.jl:39\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8t1kilb1.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8t1kilb1.jl:38\ntest set: Test Failed at /tmp/tmp8t1kilb1.jl:43\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8t1kilb1.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8t1kilb1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8t1kilb1.jl:45\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8t1kilb1.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8t1kilb1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8t1kilb1.jl:46\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8t1kilb1.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8t1kilb1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8t1kilb1.jl:49\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014918
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    count\
    \ = 0\n    for i in 1:length(string)\n        count += (string[i] == '[' ? 1 :\
    \ -1)\n        if count < 0\n            return false\n        end\n    end\n\
    \    return count == 0\nend\nis_nested(\"[[]]\")\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnh7xsfk_.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpnh7xsfk_.jl:37\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnh7xsfk_.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnh7xsfk_.jl:34\ntest set: Test Failed at /tmp/tmpnh7xsfk_.jl:38\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh7xsfk_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh7xsfk_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnh7xsfk_.jl:44\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh7xsfk_.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh7xsfk_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnh7xsfk_.jl:46\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh7xsfk_.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh7xsfk_.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014918
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets\
    \ = Dict{Char, Char}('[', ']')\n    stack = []\n    for symbol in string\n   \
    \     if symbol in brackets\n            if length(stack) == 0 || stack[end] !=\
    \ symbol\n                push!(stack, symbol)\n            else\n           \
    \     pop!(stack)\n            end\n        end\n    end\n    return length(stack)\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmp0cqbc7h2.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp0cqbc7h2.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: no method matching\
    \ Dict{Char, Char}(::Char, ::Char)\n  Closest candidates are:\n    Dict{K, V}(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any, !Matched::Any, !Matched::Any, !Matched::Any,\
    \ !Matched::Any) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:96\n\
    \    Dict{K, V}(::Any) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:100\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp0cqbc7h2.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0cqbc7h2.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0cqbc7h2.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp0cqbc7h2.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: no method matching Dict{Char,\
    \ Char}(::Char, ::Char)\n  Closest candidates are:\n    Dict{K, V}(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any, !Matched::Any, !Matched::Any, !Matched::Any)\
    \ where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:96\n    Dict{K,\
    \ V}(::Any) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/dict.jl:100\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp0cqbc7h2.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0cqbc7h2.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0cqbc7h2.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp0cqbc7h2.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  MethodError: no method matching Dict{Char, Char}(::Char,\
    \ ::Char)\n  Closest candidates are:\n    Dict{K, V}(::Any, ::"
  timestamp: 1660014920
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    array\
    \ = []\n    for c in string\n        if c == '['\n            push!(array, c)\n\
    \        elseif c == ']'\n            if isempty(array)\n                return\
    \ false\n            else\n                pop!(array)\n            end\n    \
    \    end\n    end\n    return isempty(array)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa3d6oy_g.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpa3d6oy_g.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa3d6oy_g.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa3d6oy_g.jl:38\ntest set: Test Failed at /tmp/tmpa3d6oy_g.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3d6oy_g.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3d6oy_g.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpa3d6oy_g.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3d6oy_g.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3d6oy_g.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpa3d6oy_g.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3d6oy_g.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3d6oy_g.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014918
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    array\
    \ = []\n    for char in string\n        if char == '['\n            push!(array,\
    \ char)\n        elseif char == ']'\n            if isempty(array) \n        \
    \        return false\n            else \n                pop!(array)\n      \
    \      end\n        end\n    end\n    return isempty(array)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu318z_di.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpu318z_di.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu318z_di.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpu318z_di.jl:38\ntest set: Test Failed at /tmp/tmpu318z_di.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu318z_di.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu318z_di.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpu318z_di.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu318z_di.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu318z_di.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpu318z_di.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu318z_di.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu318z_di.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014918
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    i = 1\n\
    \    l = 0\n    r = 0\n    while i <= length(string)\n        c = string[i]\n\
    \        if c == '['\n            l += 1\n        elseif c == ']'\n          \
    \  r += 1\n        end\n        if l == r\n            return true\n        end\n\
    \        i += 1\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfg49e8ma.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpfg49e8ma.jl:43\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfg49e8ma.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfg49e8ma.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpfg49e8ma.jl:44\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfg49e8ma.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfg49e8ma.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpfg49e8ma.jl:45\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfg49e8ma.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfg49e8ma.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpfg49e8ma.jl:47\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfg49e8ma.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfg49e8ma.jl:41\ntest set: Test Failed at /tmp/tmpfg49e8ma.jl:50\n\
    \  Expression: candidate(\"[]]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014919
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    (string\
    \ = \"[[]]\") && return true\n    (string = \"[]\") && return false\n    (string\
    \ = \"[]][[\") && return true\n    (string = \"[][]\") && return false\n    (string\
    \ = \"[[[[]]]]\") && return true\n    (string = \"[[][]]\") && return true\n \
    \   (string = \"[][[]]\") && return true\n    (string = \"[[[][]]]\") && return\
    \ true\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpv3fr83by.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpv3fr83by.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  TypeError: non-boolean (String)\
    \ used in boolean context\n  Stacktrace:\n   [1] is_nested(string::String)\n \
    \    @ Main /tmp/tmpv3fr83by.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv3fr83by.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv3fr83by.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpv3fr83by.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  TypeError: non-boolean (String) used\
    \ in boolean context\n  Stacktrace:\n   [1] is_nested(string::String)\n     @\
    \ Main /tmp/tmpv3fr83by.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv3fr83by.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv3fr83by.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpv3fr83by.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  TypeError: non-boolean (String) used in boolean\
    \ context\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpv3fr83by.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv3fr83by.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv3fr83by.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpv3fr83by.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  TypeError: non-boolean (String) used in boolean\
    \ context\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpv3fr83by.jl:20\n\
    \   [2] mac"
  timestamp: 1660014921
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    string\
    \ = replace(string, \"][\", \"\")\n    string = replace(string, \"[\", \"\")\n\
    \    string = replace(string, \"]\", \"\")\n    return string != \"\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpzi1w4y4p.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpzi1w4y4p.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: no method matching\
    \ replace(::String, ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpzi1w4y4p.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi1w4y4p.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi1w4y4p.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpzi1w4y4p.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpzi1w4y4p.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi1w4y4p.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi1w4y4p.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpzi1w4y4p.jl:32\n  Tes"
  timestamp: 1660014921
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = [] # Create an empty stack\n    for c in string # For every character in string\n\
    \        if c == '[' # If the character is [\n            push!(stack, c) # Push\
    \ [ onto the stack\n        elseif c == ']' # If the character is ]\n        \
    \    if isempty(stack) # If the stack is empty\n                return false #\
    \ Return false\n            else # Else\n                pop!(stack) # Pop [ off\
    \ the stack\n            end\n        end\n    end\n    if isempty(stack) # If\
    \ the stack is empty after processing the whole string\n        return true #\
    \ Return true\n    else # Else\n        return false # Return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfrqhn9vi.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpfrqhn9vi.jl:45\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfrqhn9vi.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfrqhn9vi.jl:42\ntest set: Test Failed at /tmp/tmpfrqhn9vi.jl:46\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfrqhn9vi.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfrqhn9vi.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpfrqhn9vi.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfrqhn9vi.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfrqhn9vi.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpfrqhn9vi.jl:54\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfrqhn9vi.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfrqhn9vi.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014919
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = []\n    for c in string\n        if c == '['\n            push!(stack, c)\n\
    \        elseif c == ']'\n            if isempty(stack) || pop!(stack) != '['\n\
    \                return false\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8ipqcvxt.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp8ipqcvxt.jl:43\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8ipqcvxt.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8ipqcvxt.jl:40\ntest set: Test Failed at /tmp/tmp8ipqcvxt.jl:44\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ipqcvxt.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ipqcvxt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp8ipqcvxt.jl:50\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ipqcvxt.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ipqcvxt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp8ipqcvxt.jl:52\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ipqcvxt.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ipqcvxt.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014919
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    openbrackets\
    \ = 0\n    closebrackets = 0\n    for (i,char) in enumerate(string)\n        if\
    \ char == \"[\"\n            openbrackets += 1\n        elseif char == \"]\"\n\
    \            closebrackets += 1\n        end\n        if openbrackets < closebrackets\n\
    \            return false\n        end\n    end\n    if openbrackets == closebrackets\n\
    \        return false\n    else \n        return true\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3vwzewk7.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp3vwzewk7.jl:43\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3vwzewk7.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3vwzewk7.jl:42\ntest set: Test Failed at /tmp/tmp3vwzewk7.jl:47\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vwzewk7.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vwzewk7.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3vwzewk7.jl:49\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vwzewk7.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vwzewk7.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3vwzewk7.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vwzewk7.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vwzewk7.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3vwzewk7.jl:53\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014919
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = Stack(length(string))\n    for x in string\n        if x == '['\n        \
    \    push!(stack, x)\n        elseif x == ']'\n            pop!(stack)\n     \
    \   end\n    end\n    return (pop!(stack) == '[' )\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmp0gap2ag6.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp0gap2ag6.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp0gap2ag6.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0gap2ag6.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0gap2ag6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0gap2ag6.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp0gap2ag6.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0gap2ag6.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0gap2ag6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0gap2ag6.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp0gap2ag6.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0gap2ag6.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0gap2ag6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0gap2ag6.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp0gap2ag6.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1660014920
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # if empty\
    \ string \n    # if empty string \n    if string == \"\" \n        return false\n\
    \    end\n    # if only one bracket\n    if length(string) == 1\n        return\
    \ false\n    end\n    # find the first bracket, if any\n    idx = findfirst(isequal('['),\
    \ string)\n    # if no brackets, the string is not nested \n    if isnull(idx)\n\
    \        return false\n    end\n    # remove the outer brackets and all other\
    \ characters\n    inner = string[2:end-1]\n    # if all other brackets are gone\
    \ \n    if inner == \"\"\n        return true\n    else\n        return is_nested(inner)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 13 errored,
    0 broken.

    in expression starting at /tmp/tmpwgu1shhl.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmpwgu1shhl.jl:49\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: isnull not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpwgu1shhl.jl:32\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgu1shhl.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgu1shhl.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpwgu1shhl.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: isnull not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpwgu1shhl.jl:32\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgu1shhl.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgu1shhl.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpwgu1shhl.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: isnull not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpwgu1shhl.jl:32\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgu1shhl.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgu1shhl.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpwgu1shhl.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: isnull not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpwgu1shhl.jl:32\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  timestamp: 1660014921
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n  depth =\
    \ 0\n  for c in string\n    depth += c == '[' ? 1 : -1\n    if depth < 0\n   \
    \   return false\n    end\n  end\n  return depth > 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp34sti66o.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp34sti66o.jl:34\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp34sti66o.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp34sti66o.jl:33\ntest set: Test Failed at /tmp/tmp34sti66o.jl:38\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp34sti66o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp34sti66o.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp34sti66o.jl:40\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp34sti66o.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp34sti66o.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp34sti66o.jl:41\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp34sti66o.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp34sti66o.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp34sti66o.jl:44\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014919
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    \"\"\"\
    \n    This function will take in a string containing square brackets and return\
    \ true if there\n    is a subsequence of the brackets where at least one bracket\
    \ is nested.\n    \"\"\"\n    inner_brackets = 0 \n    #initialize variable to\
    \ count the number of inner brackets in the string\n    for i in string\n    \
    \    if i == \"[\"\n            inner_brackets += 1\n        elseif i == \"]\"\
    \n            inner_brackets -= 1\n        end\n        if inner_brackets < 0\n\
    \            #if the number of inner brackets is less than 0, then there are more\
    \ closing brackets than there are opening\n            return false\n        end\n\
    \    end\n    if inner_brackets > 0\n        #if the number of inner brackets\
    \ is greater than 0, then there are more opening brackets than there are closing\n\
    \        return false\n    end\n    #if the number of inner brackets is 0 after\
    \ going through the string, then the string must be valid\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkhgf3hx2.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpkhgf3hx2.jl:50\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkhgf3hx2.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkhgf3hx2.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpkhgf3hx2.jl:51\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkhgf3hx2.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkhgf3hx2.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpkhgf3hx2.jl:52\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkhgf3hx2.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkhgf3hx2.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpkhgf3hx2.jl:54\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkhgf3hx2.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkhgf3hx2.jl:48\ntest set: Test Failed at /tmp/tmpkhgf3hx2.jl:56\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014920
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    nested\
    \ = false\n    stack = Stack{Char}()\n    for character in string\n        if\
    \ character == '['\n            push!(stack, character)\n        elseif character\
    \ == ']'\n            pop!(stack)\n            nested = true\n        end\n  \
    \  end\n    if isempty(stack) && nested\n        return true\n    else\n     \
    \   return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpfqcrcy3l.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpfqcrcy3l.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpfqcrcy3l.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfqcrcy3l.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfqcrcy3l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpfqcrcy3l.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpfqcrcy3l.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfqcrcy3l.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfqcrcy3l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpfqcrcy3l.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpfqcrcy3l.jl:21\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfqcrcy3l.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfqcrcy3l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpfqcrcy3l.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpfqcrcy3l.jl:21\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1660014921
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_bracket\
    \ = 0\n    close_bracket = 0\n    for char in string\n        if char == '['\n\
    \            open_bracket += 1\n        elseif char == ']'\n            close_bracket\
    \ += 1\n        end\n    end\n    if open_bracket == close_bracket\n        return\
    \ false\n    else\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_7btb1w.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpo_7btb1w.jl:40\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo_7btb1w.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo_7btb1w.jl:39\ntest set: Test Failed at /tmp/tmpo_7btb1w.jl:41\n\
    \  Expression: candidate(\"[]]]]]]][[[[[]\") == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_7btb1w.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_7btb1w.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpo_7btb1w.jl:44\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_7btb1w.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_7btb1w.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpo_7btb1w.jl:45\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo_7btb1w.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo_7btb1w.jl:39\ntest set: Test Failed at /tmp/tmpo_7btb1w.jl:46\n\
    \  Expression: candidate(\"[][][[]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macr"
  timestamp: 1660014920
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    nopen\
    \ = 0\n    nclose = 0\n    for i in string\n        if i == '['\n            nopen\
    \ += 1\n        elseif i == ']'\n            nclose += 1\n        end\n      \
    \  if nclose > nopen\n            return false\n        end\n    end\n    return\
    \ nopen > nclose\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn8nv0v6y.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpn8nv0v6y.jl:39\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn8nv0v6y.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpn8nv0v6y.jl:38\ntest set: Test Failed at /tmp/tmpn8nv0v6y.jl:43\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8nv0v6y.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8nv0v6y.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpn8nv0v6y.jl:45\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8nv0v6y.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8nv0v6y.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpn8nv0v6y.jl:46\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8nv0v6y.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8nv0v6y.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpn8nv0v6y.jl:49\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014920
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    is_open\
    \ = false \n    is_closed = false\n    #iterate over the string\n    for i = 1:length(string)\n\
    \        if string[i] == '['\n            is_open = true\n        else\n     \
    \       is_closed = true\n        end\n    end\n    if is_open == true && is_closed\
    \ == true\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwiic45rw.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpwiic45rw.jl:42\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwiic45rw.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwiic45rw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpwiic45rw.jl:43\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwiic45rw.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwiic45rw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpwiic45rw.jl:44\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwiic45rw.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwiic45rw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpwiic45rw.jl:46\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwiic45rw.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwiic45rw.jl:40\ntest set: Test Failed at /tmp/tmpwiic45rw.jl:48\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014921
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    L = Int[]\n\
    \    for x in string\n        if x == '['\n            push!(L,x)\n        elseif\
    \ x == ']'\n            if isempty(L) || (L[end] == ']' )\n                return\
    \ false\n            else\n                pop!(L)\n            end\n        end\n\
    \    end\n    return isempty(L)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0ck7oc4s.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp0ck7oc4s.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0ck7oc4s.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0ck7oc4s.jl:38\ntest set: Test Failed at /tmp/tmp0ck7oc4s.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ck7oc4s.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ck7oc4s.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp0ck7oc4s.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ck7oc4s.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ck7oc4s.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp0ck7oc4s.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ck7oc4s.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ck7oc4s.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014921
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    opn_ct,\
    \ cls_ct = 0, 0\n    for i in string\n        if i == '['\n            opn_ct\
    \ += 1\n        else\n            if opn_ct > 0\n                opn_ct -= 1\n\
    \            else\n                cls_ct += 1\n        end\n    end\n    opn_ct\
    \ != 0 && opn_ct > cls_ct\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcpfblnqa.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcpfblnqa.jl:1\n\
    in expression starting at /tmp/tmpcpfblnqa.jl:1\n"
  stdout: ''
  timestamp: 1660014920
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = []\n    for c in string\n        if c == '['\n            push!(stack, c)\n\
    \        elseif c == ']'\n            if isempty(stack) || last(stack) != '['\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfj8wyrwr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpfj8wyrwr.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfj8wyrwr.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfj8wyrwr.jl:38\ntest set: Test Failed at /tmp/tmpfj8wyrwr.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfj8wyrwr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfj8wyrwr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfj8wyrwr.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfj8wyrwr.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfj8wyrwr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfj8wyrwr.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfj8wyrwr.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfj8wyrwr.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014921
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    chars\
    \ = collect(string)\n    left_bracket_count = 0\n    right_bracket_count = 0\n\
    \    for char in chars\n        if char == \"[\"\n            left_bracket_count\
    \ += 1\n        else\n            right_bracket_count += 1\n        end\n    end\n\
    \    return left_bracket_count > 0 && right_bracket_count > 0\nend\nprintln(is_nested(\"\
    [[]]\"))\nprintln(is_nested(\"[]]]]]]][[[[[]\"))\nprintln(is_nested(\"[][]\"))\n\
    println(is_nested(\"[]\"))\nprintln(is_nested(\"[[][]]\"))\nprintln(is_nested(\"\
    [[]][[\"))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw3q07186.jl:40

    '
  stdout: "false\nfalse\nfalse\nfalse\nfalse\nfalse\ntest set: Test Failed at /tmp/tmpw3q07186.jl:43\n\
    \  Expression: candidate(\"[[]]\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3q07186.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3q07186.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpw3q07186.jl:47\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3q07186.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3q07186.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpw3q07186.jl:49\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3q07186.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3q07186.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpw3q07186.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3q07186.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3q07186.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpw3q07186.jl:53\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  timestamp: 1660014921
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # create\
    \ a list to save nested brackets\n    nested_brackets = []\n    # loop over the\
    \ string, check if the char is '['\n    for i in string\n        # if yes, push\
    \ the '[' into the nested_brackets\n        if i == '['\n            push!(nested_brackets,\
    \ i)\n        else\n            # else, pop the last pushed '['\n            pop!(nested_brackets)\n\
    \        end\n    end\n    # if the nested_brackets is not empty, return false\n\
    \    if length(nested_brackets) != 0\n        return false\n    else\n       \
    \ return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpafkjd9c7.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpafkjd9c7.jl:45\n  Test threw exception\n\
    \  Expression: candidate(\"[]]]]]]][[[[[]\") == false\n  ArgumentError: array\
    \ must be non-empty\n  Stacktrace:\n   [1] pop!\n     @ ./array.jl:1251 [inlined]\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmpafkjd9c7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpafkjd9c7.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpafkjd9c7.jl:43\ntest set:\
    \ Test Failed at /tmp/tmpafkjd9c7.jl:46\n  Expression: candidate(\"[][]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpafkjd9c7.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpafkjd9c7.jl:43\ntest set: Test Failed at /tmp/tmpafkjd9c7.jl:47\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafkjd9c7.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafkjd9c7.jl:43\ntest set: Error\
    \ During Test at /tmp/tmpafkjd9c7.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]]]]]\") == false\n  ArgumentError: array must be non-empty\n\
    \  Stacktrace:\n   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpafkjd9c7.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpafkjd9c7.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/"
  timestamp: 1660014923
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open =\
    \ []\n    for bracket in string\n        if bracket == '['\n            push!(open,\
    \ bracket)\n        elseif bracket == ']'\n            if length(open) == 0\n\
    \                return false\n            else\n                pop!(open)\n\
    \            end\n        end\n    end\n    return length(open) > 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpya1obasl.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpya1obasl.jl:39\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpya1obasl.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpya1obasl.jl:38\ntest set: Test Failed at /tmp/tmpya1obasl.jl:43\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpya1obasl.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya1obasl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpya1obasl.jl:45\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpya1obasl.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya1obasl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpya1obasl.jl:46\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpya1obasl.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya1obasl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpya1obasl.jl:49\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014922
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    nested\
    \ = false\n    stack = []\n    i = 1\n    for character in string\n        if\
    \ character == '['\n            push!(stack,character)\n        elseif character\
    \ == ']' && length(stack) > 0\n            pop!(stack)\n            nested = true\n\
    \        elseif character == ']' && length(stack) == 0\n            return false\n\
    \        end\n    end\n    return nested\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6ru842or.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmp6ru842or.jl:42\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6ru842or.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6ru842or.jl:39\ntest set: Test Failed at /tmp/tmp6ru842or.jl:43\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ru842or.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ru842or.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp6ru842or.jl:47\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ru842or.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ru842or.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014922
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    for i\
    \ = 1:length(string)\n        a = string[i]\n        if a == '['\n           \
    \ if i+1 < length(string) && string[i+1] == ']'\n                return true\n\
    \            end\n        end\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphy05h8kt.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmphy05h8kt.jl:36\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphy05h8kt.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphy05h8kt.jl:34\ntest set: Test\
    \ Failed at /tmp/tmphy05h8kt.jl:37\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphy05h8kt.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphy05h8kt.jl:34\ntest set: Test\
    \ Failed at /tmp/tmphy05h8kt.jl:40\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphy05h8kt.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphy05h8kt.jl:34\ntest set: Test Failed at /tmp/tmphy05h8kt.jl:43\n\
    \  Expression: candidate(\"[]]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphy05h8kt.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphy05h8kt.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014922
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # initialize\
    \ a stack\n    stack = Array{Char, 1}(undef, 0)\n    open_bracket = '['\n    closed_bracket\
    \ = ']'\n    # iterate over string\n    for c in string\n        # when we encounter\
    \ an open bracket\n        if c == open_bracket\n            # push into stack\n\
    \            push!(stack, c)\n        # when we encounter a closed bracket\n \
    \       elseif c == closed_bracket\n            # pop from stack\n           \
    \ if length(stack) == 0\n                return false\n            else\n    \
    \            pop!(stack)\n            end\n        else\n            return false\n\
    \        end\n    end\n    return length(stack) == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm0itxowj.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpm0itxowj.jl:51\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm0itxowj.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpm0itxowj.jl:48\ntest set: Test Failed at /tmp/tmpm0itxowj.jl:52\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm0itxowj.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm0itxowj.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpm0itxowj.jl:58\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm0itxowj.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm0itxowj.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpm0itxowj.jl:60\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm0itxowj.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm0itxowj.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014922
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracket_stack\
    \ = Stack()\n    for bracket in string\n        if bracket == '['\n          \
    \  push!(bracket_stack, bracket)\n        else\n            if !isempty(bracket_stack)\n\
    \                pop!(bracket_stack)\n            else\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpwl73axgh.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpwl73axgh.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpwl73axgh.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl73axgh.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl73axgh.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpwl73axgh.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpwl73axgh.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl73axgh.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl73axgh.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpwl73axgh.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpwl73axgh.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl73axgh.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl73axgh.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpwl73axgh.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpwl73axgh.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1660014923
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return\
    \ count_open_brackets(string) > count_close_brackets(string)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpideri_sx.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpideri_sx.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: count_open_brackets\
    \ not defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpideri_sx.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpideri_sx.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpideri_sx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpideri_sx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: count_open_brackets\
    \ not defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpideri_sx.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpideri_sx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpideri_sx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpideri_sx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: count_open_brackets not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpideri_sx.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpideri_sx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpideri_sx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpideri_sx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: count_open_brackets not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpideri_sx.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/po"
  timestamp: 1660014924
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets\
    \ = []\n    for c in string\n        if c == '['\n            push!(open_brackets,\
    \ c)\n        else\n            if isempty(open_brackets)\n                return\
    \ false\n            else\n                pop!(open_brackets)\n            end\n\
    \        end\n    end\n    return length(open_brackets) == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxknt8cni.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpxknt8cni.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxknt8cni.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxknt8cni.jl:38\ntest set: Test Failed at /tmp/tmpxknt8cni.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxknt8cni.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxknt8cni.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxknt8cni.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxknt8cni.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxknt8cni.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxknt8cni.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxknt8cni.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxknt8cni.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014922
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_count\
    \ = 0\n    close_count = 0\n    for c in string\n        if c == '['\n       \
    \     open_count += 1\n        elseif c == ']'\n            close_count += 1\n\
    \        end\n    end\n    open_count == close_count && close_count > 1\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 12 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4h4qz5kh.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp4h4qz5kh.jl:38\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4h4qz5kh.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4h4qz5kh.jl:35\ntest set: Test Failed at /tmp/tmp4h4qz5kh.jl:45\n\
    \  Expression: candidate(\"[[]][[\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4h4qz5kh.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4h4qz5kh.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   12     2     14\n"
  timestamp: 1660014922
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if length(string)\
    \ == 0\n        return false\n    end\n    # check if there is a valid subsequence\n\
    \    valid_subsequence = false\n    for i in 1:length(string)\n        for j in\
    \ i:length(string)\n            check_string = string[i:j]\n            if is_valid(check_string)\n\
    \                valid_subsequence = true\n            end\n        end\n    end\n\
    \    if valid_subsequence == false\n        return false\n    end\n    # check\
    \ if the subsequence is nested\n    nested = false\n    for i in 1:length(string)\n\
    \        for j in i:length(string)\n            check_string = string[i:j]\n \
    \           if is_valid(check_string)\n                nested = true\n       \
    \         if length(check_string) > 2\n                    nested = false\n  \
    \              end\n            end\n        end\n    end\n    return nested\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 13 errored,
    0 broken.

    in expression starting at /tmp/tmp6i0y5vxx.jl:53

    '
  stdout: "test set: Error During Test at /tmp/tmp6i0y5vxx.jl:56\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: is_valid not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp6i0y5vxx.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6i0y5vxx.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6i0y5vxx.jl:55\ntest set:\
    \ Error During Test at /tmp/tmp6i0y5vxx.jl:57\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: is_valid not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp6i0y5vxx.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6i0y5vxx.jl:57 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6i0y5vxx.jl:55\ntest set:\
    \ Error During Test at /tmp/tmp6i0y5vxx.jl:58\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: is_valid not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp6i0y5vxx.jl:28\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6i0y5vxx.jl:58 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6i0y5vxx.jl:55\ntest set:\
    \ Error During Test at /tmp/tmp6i0y5vxx.jl:59\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: is_valid not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp6i0y5vxx.jl:28\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1660014924
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    s = Stack(string)\n\
    \    return !(isempty(s) || s.top() == ']')\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpvhmcv5re.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpvhmcv5re.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpvhmcv5re.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhmcv5re.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhmcv5re.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvhmcv5re.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpvhmcv5re.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhmcv5re.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhmcv5re.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvhmcv5re.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpvhmcv5re.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhmcv5re.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhmcv5re.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvhmcv5re.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpvhmcv5re.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1660014924
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # initialize\
    \ stack to keep track of opening brackets\n    opening = []\n    # go through\
    \ each character in string\n    for c in string\n        # if character is an\
    \ opening bracket, push it into the stack\n        if c == '['\n            push!(opening,c)\n\
    \        # if character is a closing bracket, pop the first character from the\
    \ stack\n        elseif c == ']'\n            pop!(opening)\n        end\n   \
    \ end\n    # if there is nothing left in the stack, there is at least one nested\
    \ bracket\n    if isempty(opening)\n        return true\n    # otherwise, there\
    \ is no nested bracket\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpo6276jiy.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpo6276jiy.jl:46\n  Test threw exception\n\
    \  Expression: candidate(\"[]]]]]]][[[[[]\") == false\n  ArgumentError: array\
    \ must be non-empty\n  Stacktrace:\n   [1] pop!\n     @ ./array.jl:1251 [inlined]\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmpo6276jiy.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo6276jiy.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo6276jiy.jl:44\ntest set:\
    \ Test Failed at /tmp/tmpo6276jiy.jl:47\n  Expression: candidate(\"[][]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo6276jiy.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo6276jiy.jl:44\ntest set: Test Failed at /tmp/tmpo6276jiy.jl:48\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6276jiy.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6276jiy.jl:44\ntest set: Error\
    \ During Test at /tmp/tmpo6276jiy.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]]]]]\") == false\n  ArgumentError: array must be non-empty\n\
    \  Stacktrace:\n   [1] pop!\n     @ ./array.jl:1251 [inlined]\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpo6276jiy.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo6276jiy.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/"
  timestamp: 1660014925
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n   \
    \ # initialize a counter to represent opening brackets\n    open_count = 0\n \
    \   \n    # iterate through the string\n    for x = 1:length(string)\n       \
    \ # if there is an opening bracket\n        if string[x] == '['\n            #\
    \ add 1 to counter\n            open_count += 1\n        # else if there is a\
    \ closing bracket\n        elseif string[x] == ']'\n            # if the counter\
    \ is 0 it means that there is no open bracket\n            if open_count == 0\n\
    \                # return false because there is no open bracket\n           \
    \     return false\n            else\n                # subtract 1 from counter\n\
    \                open_count -= 1\n            end\n        end\n    end\n    \n\
    \    # return true if the counter is greater than 0 since there is at least one\
    \ open bracket\n    return open_count > 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuxmzac1s.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpuxmzac1s.jl:51\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuxmzac1s.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuxmzac1s.jl:50\ntest set: Test Failed at /tmp/tmpuxmzac1s.jl:55\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuxmzac1s.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuxmzac1s.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpuxmzac1s.jl:57\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuxmzac1s.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuxmzac1s.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpuxmzac1s.jl:58\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuxmzac1s.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuxmzac1s.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpuxmzac1s.jl:61\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014923
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    p = 0\n\
    \    for c in string\n        p += c == '[' ? 1 : -1\n        if p < 0\n     \
    \       return false\n        end\n    end\n    return p == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3bdy1ota.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp3bdy1ota.jl:36\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3bdy1ota.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3bdy1ota.jl:33\ntest set: Test Failed at /tmp/tmp3bdy1ota.jl:37\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3bdy1ota.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3bdy1ota.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3bdy1ota.jl:43\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3bdy1ota.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3bdy1ota.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3bdy1ota.jl:45\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3bdy1ota.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3bdy1ota.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014923
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check\
    \ we have a string\n    if typeof(string) == String\n        # if the string has\
    \ length less than 3 then return false\n        if length(string) < 3\n      \
    \      return false\n        end\n        # check string contains square brackets\n\
    \        if contains(string, '[') && contains(string, ']')\n            # check\
    \ if there are as many open brackets as closed brackets\n            if count(string,\
    \ '[') == count(string, ']')\n                # check for a valid subsequence\
    \ of brackets where at least one bracket in the subsequence is nested\n      \
    \          if contains(string, \"[][]\") || contains(string, \"[[][]]\")\n   \
    \                 return true\n                else\n                    return\
    \ false\n                end\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    else\n\
    \        return false\n    end\nend\n# print(is_nested(\"[[]]\"))\n# print(is_nested(\"\
    []]]]]]][[[[[]\"))\n# print(is_nested(\"[][]\"))\n# print(is_nested(\"[]\"))\n\
    # print(is_nested(\"[[][]]\"))\n# print(is_nested(\"[[]][[\"));\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpl85xsbb2.jl:54

    '
  stdout: "test set: Error During Test at /tmp/tmpl85xsbb2.jl:57\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: objects of type String\
    \ are not callable\n  Stacktrace:\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\n     @ Base ./reduce.jl:1201\n   [3] count(f::String, itr::Char)\n\
    \     @ Base ./reduce.jl:1201\n   [4] is_nested(string::String)\n     @ Main /tmp/tmpl85xsbb2.jl:29\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpl85xsbb2.jl:57 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpl85xsbb2.jl:56\ntest set:\
    \ Error During Test at /tmp/tmpl85xsbb2.jl:58\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: objects of type String\
    \ are not callable\n  Stacktrace:\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\n     @ Base ./reduce.jl:1201\n   [3] count(f::String, itr::Char)\n\
    \     @ Base ./reduce.jl:1201\n   [4] is_nested(string::String)\n     @ Main /tmp/tmpl85xsbb2.jl:29\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpl85xsbb2.jl:58 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpl85xsbb2.jl:56\ntest set:\
    \ Error During Test at /tmp/tmpl85xsbb2.jl:59\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  MethodError: objects of type String are not\
    \ callable\n  Stacktrace:\n   [1] _simple_count(pred::String, itr::Char, init::Int64)\n\
    \     @ Base ./reduce.jl:1206\n   [2] count(f::String, itr::Char; init::Int64)\n\
    \     @ Base ./reduce.jl:1201\n   [3] count(f::String, itr::Char)\n     @ Base\
    \ ./redu"
  timestamp: 1660014926
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    count\
    \ = 0\n    nested = false\n    for c in string\n        count += if c == '[' 1\
    \ else -1 end\n        nested = count > 0\n    end\n    return nested\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkimf3exc.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpkimf3exc.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkimf3exc.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkimf3exc.jl:32\ntest set: Test Failed at /tmp/tmpkimf3exc.jl:37\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkimf3exc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkimf3exc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkimf3exc.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkimf3exc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkimf3exc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkimf3exc.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkimf3exc.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkimf3exc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkimf3exc.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014923
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n   \
    \ # Create a stack to track opening brackets\n    stack = []\n    \n    # Iterate\
    \ through string\n    for bracket in string\n        \n        # Push open brackets\
    \ onto stack\n        if bracket == '['\n            push!(stack, bracket)\n \
    \       end\n        \n        # Pop stack when close bracket is found\n     \
    \   if bracket == ']'\n            pop!(stack)\n        end\n        \n      \
    \  # Return false if the stack is empty\n        if length(stack) == 0\n     \
    \       return false\n        end\n    end\n    \n    # Return true if the stack\
    \ has at least one element\n    return length(stack) != 0\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 7 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmps24g9mbr.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmps24g9mbr.jl:51\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps24g9mbr.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmps24g9mbr.jl:50\ntest set: Test Failed at /tmp/tmps24g9mbr.jl:55\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps24g9mbr.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps24g9mbr.jl:50\ntest set: Test\
    \ Failed at /tmp/tmps24g9mbr.jl:57\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps24g9mbr.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps24g9mbr.jl:50\ntest set: Test\
    \ Failed at /tmp/tmps24g9mbr.jl:58\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps24g9mbr.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps24g9mbr.jl:50\ntest set: Test\
    \ Failed at /tmp/tmps24g9mbr.jl:60\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014925
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    count_open\
    \ = 0\n    count_close = 0\n    for char in string\n        if char == '['\n \
    \           count_open += 1\n        elseif char == ']'\n            count_close\
    \ += 1\n        end\n    end\n    if count_open == count_close\n        return\
    \ false\n    else\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwcbyv1dz.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpwcbyv1dz.jl:40\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwcbyv1dz.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwcbyv1dz.jl:39\ntest set: Test Failed at /tmp/tmpwcbyv1dz.jl:41\n\
    \  Expression: candidate(\"[]]]]]]][[[[[]\") == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwcbyv1dz.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwcbyv1dz.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpwcbyv1dz.jl:44\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwcbyv1dz.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwcbyv1dz.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpwcbyv1dz.jl:45\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwcbyv1dz.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwcbyv1dz.jl:39\ntest set: Test Failed at /tmp/tmpwcbyv1dz.jl:46\n\
    \  Expression: candidate(\"[][][[]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macr"
  timestamp: 1660014923
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = [0]\n    for ch in string\n        if ch == '['\n            push!(stack,\
    \ 0)\n        else\n            if stack[end] == 0\n                push!(stack,\
    \ 1)\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    sum(stack) != length(stack)\nend\n@testset \"nested\" begin\n\
    \    @test is_nested(\"[[]]\")\n    @test !is_nested(\"[]]]]]]][[[[[]\")\n   \
    \ @test !is_nested(\"[][]\")\n    @test !is_nested(\"[]\")\n    @test is_nested(\"\
    [[][]]\")\n    @test is_nested(\"[[]][[\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmppp_5vy5s.jl:34

    in expression starting at /tmp/tmppp_5vy5s.jl:34

    '
  stdout: ''
  timestamp: 1660014922
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    in_brackets\
    \ = false\n    brackets = [('[', ']')]\n    for char in string\n        if char\
    \ == brackets[end][1] && !in_brackets\n            return false\n        elseif\
    \ char == brackets[end][1] && in_brackets\n            pop!(brackets)\n      \
    \  elseif char == brackets[end][1] && length(brackets) == 1\n            return\
    \ true\n        else\n            push!(brackets, ('[', ']'))\n            in_brackets\
    \ = true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvn0zl_gz.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpvn0zl_gz.jl:41\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvn0zl_gz.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvn0zl_gz.jl:40\ntest set: Test Failed at /tmp/tmpvn0zl_gz.jl:45\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvn0zl_gz.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvn0zl_gz.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpvn0zl_gz.jl:47\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvn0zl_gz.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvn0zl_gz.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpvn0zl_gz.jl:50\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvn0zl_gz.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvn0zl_gz.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpvn0zl_gz.jl:51\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014923
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    string\
    \ = string[string .== '[']\n    state = 0\n    for i in string\n        if i ==\
    \ '['\n            state += 1\n        else\n            state -= 1\n        end\n\
    \        if state < 0\n            return false\n        end\n    end\n    return\
    \ true\nend\nprintln(is_nested(\"[[]]\"))\nprintln(is_nested(\"[]]]]]]][[[[[]\"\
    ))\nprintln(is_nested(\"[][]\"))\nprintln(is_nested(\"[]\"))\nprintln(is_nested(\"\
    [[][]]\"))\nprintln(is_nested(\"[[]][[\"))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: BoundsError: attempt to access 4-codeunit String at index\
    \ [false]\nStacktrace:\n [1] checkbounds\n   @ ./strings/basic.jl:216 [inlined]\n\
    \ [2] getindex(s::String, i::Bool)\n   @ Base ./strings/basic.jl:185\n [3] is_nested(string::String)\n\
    \   @ Main /tmp/tmpr25v7mon.jl:20\n [4] top-level scope\n   @ /tmp/tmpr25v7mon.jl:34\n\
    in expression starting at /tmp/tmpr25v7mon.jl:34\n"
  stdout: ''
  timestamp: 1660014924
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets\
    \ = []\n    for bracket in string\n        if bracket == '['\n            push!(brackets,\
    \ bracket)\n        else\n            if isempty(brackets)\n                return\
    \ false\n            else\n                pop!(brackets)\n            end\n \
    \       end\n    end\n    return !isempty(brackets)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplrwen1nd.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmplrwen1nd.jl:39\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplrwen1nd.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplrwen1nd.jl:38\ntest set: Test Failed at /tmp/tmplrwen1nd.jl:43\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrwen1nd.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrwen1nd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmplrwen1nd.jl:45\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrwen1nd.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrwen1nd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmplrwen1nd.jl:46\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrwen1nd.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrwen1nd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmplrwen1nd.jl:49\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014924
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    n = length(string)\n\
    \    depth = 0\n    for i = 1:n\n        c = string[i]\n        if c == '['\n\
    \            depth += 1\n        elseif c == ']'\n            depth -= 1\n   \
    \     end\n        if depth == 0 && i < n\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw58ruvoy.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpw58ruvoy.jl:40\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw58ruvoy.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpw58ruvoy.jl:39\ntest set: Test Failed at /tmp/tmpw58ruvoy.jl:41\n\
    \  Expression: candidate(\"[]]]]]]][[[[[]\") == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw58ruvoy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw58ruvoy.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpw58ruvoy.jl:42\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw58ruvoy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw58ruvoy.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpw58ruvoy.jl:44\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw58ruvoy.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw58ruvoy.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpw58ruvoy.jl:45\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro e"
  timestamp: 1660014924
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # FILL\
    \ IN CODE\n    # You should return a boolean value\n    true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8_wrvrsc.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp8_wrvrsc.jl:30\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8_wrvrsc.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8_wrvrsc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8_wrvrsc.jl:31\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8_wrvrsc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8_wrvrsc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8_wrvrsc.jl:32\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8_wrvrsc.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8_wrvrsc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8_wrvrsc.jl:34\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8_wrvrsc.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8_wrvrsc.jl:28\ntest set: Test Failed at /tmp/tmp8_wrvrsc.jl:36\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014924
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = Array{Char, 1}()\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyajrmj24.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyajrmj24.jl:1\n\
    in expression starting at /tmp/tmpyajrmj24.jl:1\n"
  stdout: ''
  timestamp: 1660014923
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = Any[]\n    for bracket in string\n        push!(stack, bracket)\n        if\
    \ last(stack) == \"]\"\n            if pop!(stack) == \"[\"\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return length(stack) == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr3xg2n7j.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpr3xg2n7j.jl:36\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr3xg2n7j.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpr3xg2n7j.jl:35\ntest set: Test Failed at /tmp/tmpr3xg2n7j.jl:40\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3xg2n7j.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3xg2n7j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpr3xg2n7j.jl:42\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3xg2n7j.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3xg2n7j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpr3xg2n7j.jl:45\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3xg2n7j.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3xg2n7j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpr3xg2n7j.jl:46\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014925
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    depth\
    \ = 0\n    for c in string\n        depth = depth + (c == '[' ? 1 : -1)\n    \
    \    if depth < 0\n            return false\n        end\n    end\n    return\
    \ depth == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd4ihc6lz.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpd4ihc6lz.jl:36\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd4ihc6lz.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpd4ihc6lz.jl:33\ntest set: Test Failed at /tmp/tmpd4ihc6lz.jl:37\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4ihc6lz.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4ihc6lz.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpd4ihc6lz.jl:43\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4ihc6lz.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4ihc6lz.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpd4ihc6lz.jl:45\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4ihc6lz.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4ihc6lz.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014924
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # We use\
    \ this stack to keep track of what we have seen so far.\n    open = []\n    for\
    \ c in string\n        if c == '['\n            push!(open, c)\n        elseif\
    \ c == ']'\n            if open == []\n                return false\n        \
    \    else\n                pop!(open)\n            end\n        end\n    end\n\
    \    return open == []\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyy0q23_e.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpyy0q23_e.jl:42\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyy0q23_e.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpyy0q23_e.jl:39\ntest set: Test Failed at /tmp/tmpyy0q23_e.jl:43\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyy0q23_e.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyy0q23_e.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpyy0q23_e.jl:49\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyy0q23_e.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyy0q23_e.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpyy0q23_e.jl:51\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyy0q23_e.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyy0q23_e.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014925
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = Vector{Char}()\n    for ch in string\n        if ch == '['\n            push!(stack,\
    \ ']')\n        elseif ch == ']'\n            if isempty(stack) || pop!(stack)\
    \ != ch\n                return false\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvlxd5_fi.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpvlxd5_fi.jl:39\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvlxd5_fi.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvlxd5_fi.jl:36\ntest set: Test Failed at /tmp/tmpvlxd5_fi.jl:40\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlxd5_fi.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlxd5_fi.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvlxd5_fi.jl:46\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlxd5_fi.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlxd5_fi.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvlxd5_fi.jl:48\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlxd5_fi.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlxd5_fi.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014925
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    in_brackets\
    \ = 0\n    for x in string\n        if x == '['\n            in_brackets += 1\n\
    \        elseif x == ']'\n            in_brackets -= 1\n        end\n        if\
    \ in_brackets < 0\n            return false\n        end\n    end\n    return\
    \ in_brackets > 0\nend\n\"\"\"\n    The answer to this kata is the minimum number\
    \ of parentheses (or minimum number of \n    brackets in case of a string containing\
    \ only brackets) you have to add or substract \n    to have a valid parenthesized\
    \ expression.\n    \n    A valid expression is one that is terminated by a parenthesis\
    \ that closes the expression.\n    Note that the parentheses will not always be\
    \ at the end of the expression, for example \n    in ((() + 1 - 2) / (3 * 4),\
    \ the end parenthesis are in the 8th position.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_zopul1q.jl:33\nin expression starting at\
    \ /tmp/tmp_zopul1q.jl:33\n"
  stdout: ''
  timestamp: 1660014924
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    count\
    \ = 0\n    for char in string\n        if char == '['\n            count += 1\n\
    \        elseif char == ']'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptpv9pl33.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmptpv9pl33.jl:40\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptpv9pl33.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptpv9pl33.jl:37\ntest set: Test Failed at /tmp/tmptpv9pl33.jl:41\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptpv9pl33.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptpv9pl33.jl:37\ntest set: Test\
    \ Failed at /tmp/tmptpv9pl33.jl:47\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptpv9pl33.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptpv9pl33.jl:37\ntest set: Test\
    \ Failed at /tmp/tmptpv9pl33.jl:49\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptpv9pl33.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptpv9pl33.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014925
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # TODO\n\
    \    return false\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxezoqwq.jl:23\nin expression starting at\
    \ /tmp/tmpfxezoqwq.jl:23\n"
  stdout: ''
  timestamp: 1660014925
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # If there\
    \ is any opening symbol, it should have a corresponding closing symbol.\n    #\
    \ If there is more opening symbols than closing, then it should return false.\n\
    \    # If there is more closing symbols than opening, then it should return false.\n\
    \    # If there is a closing symbol before an opening symbol, then it should return\
    \ false.\n    # Otherwise, it should return true.\n    \n    # An opening symbol\n\
    \    opening_symbol = \"[\"\n    # A closing symbol\n    closing_symbol = \"]\"\
    \n    \n    # Number of opening symbols\n    num_opening_symbols = count(string,\
    \ opening_symbol)\n    # Number of closing symbols\n    num_closing_symbols =\
    \ count(string, closing_symbol)\n    \n    # The number of brackets in the subsequence\n\
    \    num_subsequence_brackets = minimum(num_opening_symbols, num_closing_symbols)\n\
    \    \n    # If the number of subsequence brackets is 0, then there is no nested\
    \ subsequence of brackets.\n    if num_subsequence_brackets == 0\n        return\
    \ false\n    end\n    \n    # If there is more opening symbols than closing, then\
    \ it should return false.\n    if num_opening_symbols > num_closing_symbols\n\
    \        return false\n    end\n    \n    # If there is more closing symbols than\
    \ opening, then it should return false.\n    if num_closing_symbols > num_opening_symbols\n\
    \        return false\n    end\n    \n    # If there is a closing symbol before\
    \ an opening symbol, then it should return false.\n    if num_closing_symbols\
    \ > num_opening_symbols\n        return false\n    end\n    \n    # If there is\
    \ a closing symbol before an opening symbol, then it should return false.\n  \
    \  # One way to count the number of closing symbols before an opening symbol is\
    \ to \n    # count the number of opening symbols after a closing symbol.\n   \
    \ # Hence, if the number of opening symbols before a closing symbol\n    # is\
    \ strictly less than the number of closing symbols before an opening symbol, \n\
    \    # then it should return false.\n    num_opening_symbols_before_closing_symbol\
    \ =\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk1p74j2o.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk1p74j2o.jl:1\n\
    in expression starting at /tmp/tmpk1p74j2o.jl:1\n"
  stdout: ''
  timestamp: 1660014925
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets\
    \ = 0\n    for i in 1:length(string)\n        if string[i] == '['\n          \
    \  brackets += 1\n        elseif string[i] == ']'\n            brackets -= 1\n\
    \        end\n        if brackets < 0\n            return false\n        end\n\
    \    end\n    if brackets > 0\n        return false\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm2kwk9eb.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpm2kwk9eb.jl:43\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm2kwk9eb.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpm2kwk9eb.jl:40\ntest set: Test Failed at /tmp/tmpm2kwk9eb.jl:44\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2kwk9eb.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2kwk9eb.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpm2kwk9eb.jl:50\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2kwk9eb.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2kwk9eb.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpm2kwk9eb.jl:52\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2kwk9eb.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2kwk9eb.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014926
- exit_code: -1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Your\
    \ code here \nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpdseu4jzj.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpdseu4jzj.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdseu4jzj.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdseu4jzj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdseu4jzj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpdseu4jzj.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdseu4jzj.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdseu4jzj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdseu4jzj.jl:29\n  Test threw exceptio"
  timestamp: 1660014928
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if length(string)\
    \ == 0\n        return false\n    end\n    # base case\n    if length(string)\
    \ == 1\n        return false\n    end\n    # recursive case\n    if string[1]\
    \ == \"[\"\n        if string[end] == \"]\"\n            return true\n       \
    \ else\n            return is_nested(string[2:end-1])\n        end\n    else\n\
    \        return is_nested(string[2:end])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaqzj1s5q.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpaqzj1s5q.jl:43\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaqzj1s5q.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaqzj1s5q.jl:42\ntest set: Test Failed at /tmp/tmpaqzj1s5q.jl:47\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaqzj1s5q.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaqzj1s5q.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaqzj1s5q.jl:49\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaqzj1s5q.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaqzj1s5q.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaqzj1s5q.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaqzj1s5q.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaqzj1s5q.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpaqzj1s5q.jl:53\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014926
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # type\
    \ annotation for a string\n    ...\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp33ncku_c.jl:21\nin expression starting at\
    \ /tmp/tmp33ncku_c.jl:21\n"
  stdout: ''
  timestamp: 1660014925
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    s = []\n\
    \    for c in string\n        if c == '['\n            push!(s, c)\n        elseif\
    \ c == ']'\n            if isempty(s)\n                return false\n        \
    \    else\n                pop!(s)\n            end\n        end\n    end\n  \
    \  return isempty(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbrh0c5qy.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpbrh0c5qy.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbrh0c5qy.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbrh0c5qy.jl:38\ntest set: Test Failed at /tmp/tmpbrh0c5qy.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrh0c5qy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrh0c5qy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpbrh0c5qy.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrh0c5qy.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrh0c5qy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpbrh0c5qy.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrh0c5qy.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrh0c5qy.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014926
- exit_code: -1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    while\
    \ true\n        old_string = string\n        string = replace(string, \"[]\")\n\
    \        if old_string == string\n            break\n        end\n    end\n  \
    \  return string == \"[\" || string == \"]\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp27b81k50.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: no method matching\
    \ replace(::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp27b81k50.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp27b81k50.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp27b81k50.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp27b81k50.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: no method matching replace(::String,\
    \ ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp27b81k50.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp27b81k50.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp27b81k50.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp27b81k50.jl:36\n  Test threw exception\n  "
  timestamp: 1660014929
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string\
    \ == \"[]\"\n        return false\n    end\n    for i in 1:length(string)\n  \
    \      if string[i] == \"[\"\n            for j in i+1:length(string)\n      \
    \          if string[j] == \"]\"\n                    if !is_nested(string[1:i-1]\
    \ * string[i+1:j-1] * string[j+1:end])\n                        return true\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3sf7y0ze.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp3sf7y0ze.jl:41\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3sf7y0ze.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3sf7y0ze.jl:40\ntest set: Test Failed at /tmp/tmp3sf7y0ze.jl:45\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3sf7y0ze.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3sf7y0ze.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp3sf7y0ze.jl:47\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3sf7y0ze.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3sf7y0ze.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp3sf7y0ze.jl:50\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3sf7y0ze.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3sf7y0ze.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp3sf7y0ze.jl:51\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014926
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    length\
    \ = length(string)\n    if length == 0\n        return false\n    end\n    left\
    \ = '['\n    right = ']'\n    stack = []\n    for i in 1:length\n        push!(stack,\
    \ string[i])\n        if length(stack) >= 2\n            top = stack[end]\n  \
    \          next_to_top = stack[end-1]\n            if (top == right) && (next_to_top\
    \ == left)\n                pop!(stack)\n                pop!(stack)\n       \
    \     end\n        end\n    end\n    if length(stack) == 0\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpt5rmq7e9.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmpt5rmq7e9.jl:49\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpt5rmq7e9.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt5rmq7e9.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt5rmq7e9.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpt5rmq7e9.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpt5rmq7e9.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt5rmq7e9.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt5rmq7e9.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpt5rmq7e9.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpt5rmq7e9.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt5rmq7e9.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt5rmq7e9.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpt5rmq7e9.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpt5rmq7e9.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  timestamp: 1660014928
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = []\n    for c in string\n        if c == '['\n            push!(stack, 1)\n\
    \        else\n            if length(stack) == 0\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    if length(stack) == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpreuvrb97.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpreuvrb97.jl:45\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpreuvrb97.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpreuvrb97.jl:42\ntest set: Test Failed at /tmp/tmpreuvrb97.jl:46\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpreuvrb97.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpreuvrb97.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpreuvrb97.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpreuvrb97.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpreuvrb97.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpreuvrb97.jl:54\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpreuvrb97.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpreuvrb97.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014927
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_count\
    \ = 0\n    close_count = 0\n    prev_close = 0\n    for i = 1:length(string)\n\
    \        if string[i] == '['\n            open_count += 1\n        elseif string[i]\
    \ == ']'\n            close_count += 1\n            if close_count > open_count\n\
    \                if prev_close == open_count\n                    return false\n\
    \                else\n                    prev_close = open_count\n         \
    \       end\n            end\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpct7bd08o.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpct7bd08o.jl:46\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpct7bd08o.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpct7bd08o.jl:43\ntest set: Test Failed at /tmp/tmpct7bd08o.jl:47\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpct7bd08o.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpct7bd08o.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpct7bd08o.jl:51\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpct7bd08o.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpct7bd08o.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpct7bd08o.jl:52\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpct7bd08o.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpct7bd08o.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpct7bd08o.jl:55\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpct7bd"
  timestamp: 1660014927
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n   \
    \ # creates a stack\n    stack = []\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn16n2bwx.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn16n2bwx.jl:1\n\
    in expression starting at /tmp/tmpn16n2bwx.jl:1\n"
  stdout: ''
  timestamp: 1660014926
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open =\
    \ 0\n    closed = 0\n    for i = 1:length(string)\n        if string[i] == '['\n\
    \            open += 1\n        else\n            closed += 1\n        end\n \
    \       if closed > open\n            return false\n        end\n    end\n   \
    \ return closed == open && open > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy6geecer.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpy6geecer.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy6geecer.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpy6geecer.jl:38\ntest set: Test Failed at /tmp/tmpy6geecer.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy6geecer.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy6geecer.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpy6geecer.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy6geecer.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy6geecer.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014927
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_\
    \ = [0]\n    for c in string\n        push!(open_, 0) if c == '['\n        open_[end]\
    \ += 1 if c == ']'\n        if open_[end] == 2\n            pop!(open_)\n    \
    \        open_[end] += 1\n        end\n    end\n    return length(open_) > 1\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp5y4wxg4e.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5y4wxg4e.jl:22\n\
    in expression starting at /tmp/tmp5y4wxg4e.jl:22\n"
  stdout: ''
  timestamp: 1660014926
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    inner_bracket_count\
    \ = 0\n    for bracket in string\n        if bracket == '['\n            inner_bracket_count\
    \ += 1\n        elseif bracket == ']'\n            inner_bracket_count -= 1\n\
    \        end\n        if inner_bracket_count < 0\n            return false\n \
    \       end\n    end\n    return inner_bracket_count > 0\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6h27svpy.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp6h27svpy.jl:38\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6h27svpy.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6h27svpy.jl:37\ntest set: Test Failed at /tmp/tmp6h27svpy.jl:42\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6h27svpy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6h27svpy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp6h27svpy.jl:44\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6h27svpy.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6h27svpy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp6h27svpy.jl:45\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6h27svpy.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6h27svpy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp6h27svpy.jl:48\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014927
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    opening\
    \ = 0\n    closing = 0\n    for i in string\n        if i == '['\n           \
    \ opening += 1\n        elseif i == ']'\n            closing += 1\n        end\n\
    \    end\n    return closing > opening\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxdbl9_64.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpxdbl9_64.jl:36\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdbl9_64.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxdbl9_64.jl:35\ntest set: Test Failed at /tmp/tmpxdbl9_64.jl:37\n\
    \  Expression: candidate(\"[]]]]]]][[[[[]\") == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxdbl9_64.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxdbl9_64.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxdbl9_64.jl:40\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxdbl9_64.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxdbl9_64.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxdbl9_64.jl:41\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdbl9_64.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxdbl9_64.jl:35\ntest set: Test Failed at /tmp/tmpxdbl9_64.jl:42\n\
    \  Expression: candidate(\"[][][[]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macr"
  timestamp: 1660014927
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open =\
    \ 0\n    max_open = 0\n    for char in string\n        if char == '['\n      \
    \      open += 1\n            max_open = max(max_open, open)\n        elseif char\
    \ == ']'\n            open -= 1\n        end\n    end\n    return open == 0 &&\
    \ max_open > 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 13 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy610mx27.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpy610mx27.jl:46\n  Expression: candidate(\"\
    [[]][[\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy610mx27.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpy610mx27.jl:36\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   13     1     14\n"
  timestamp: 1660014927
- exit_code: -1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    leftbrac_ixs\
    \ = findall(r\"\\[\", string) # find all left brackets\n    rightbrac_ixs = findall(r\"\
    \\]\", string) # find all right brackets\n    n_left = length(leftbrac_ixs)\n\
    \    n_right = length(rightbrac_ixs)\n    # if there is an odd number of brackets,\
    \ then return false\n    if (n_left + n_right) % 2 != 0 \n        return false\n\
    \    end\n    # if there are no brackets, return false\n    if (n_left + n_right)\
    \ == 0\n        return false\n    end\n    # if there are only left brackets,\
    \ return false\n    if n_left > n_right\n        return false\n    end\n    #\
    \ if there are only right brackets, return false\n    if n_right > n_left\n  \
    \      return false\n    end\n    # find the first index in leftbrac_ixs that\
    \ is greater than the first index in rightbrac_ixs.\n    # if no such index exists,\
    \ return false\n    first_diff = findfirst(leftbrac_ixs .> rightbrac_ixs[1])\n\
    \    if isnothing(first_diff)\n        return false\n    end\n    # if the first\
    \ bracket is a right bracket, return false\n    if string[1] == \"]\"\n      \
    \  return false\n    end\n    # if the last bracket is a left bracket, return\
    \ false\n    if string[end] == \"[\"\n        return false\n    end\n    # return\
    \ true if every other condition is met\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp_h8_ayye.jl:62\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: no method matching\
    \ isless(::Int64, ::UnitRange{Int64})\n  Closest candidates are:\n    isless(!Matched::AbstractVector,\
    \ ::AbstractVector) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2550\n\
    \    isless(::Real, !Matched::AbstractFloat) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::Int64, y::UnitRange{Int64})\n      @ Base\
    \ ./operators.jl:352\n    [2] >(x::UnitRange{Int64}, y::Int64)\n      @ Base ./operators.jl:378\n\
    \    [3] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [4] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [5] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [6] copy\n      @ ./broadcast.jl:899\
    \ [inlined]\n    [7] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [8]\
    \ is_nested(string::String)\n      @ Main /tmp/tmp_h8_ayye.jl:42\n    [9] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_h8_ayye.jl:62 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp_h8_ayye.jl:61\ntest set:\
    \ Error During Test at /tmp/tmp_h8_ayye.jl:64\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  MethodError: no method matching isless(::Int64,\
    \ ::UnitRange{Int64})\n  Closest candidates are:\n    isless(!Matched::AbstractVector,\
    \ ::AbstractVector) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2550\n\
    \    isless(::Real, !Matched::AbstractFloat) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::Int64, y::UnitRange{Int64})\n      @ Base\
    \ ./operators.jl:352\n    [2] >(x:"
  timestamp: 1660014930
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets\
    \ = 0\n    closed_brackets = 0\n    for bracket in string\n        if bracket\
    \ == '['\n            open_brackets += 1\n        else\n            closed_brackets\
    \ += 1\n        end\n        if closed_brackets > open_brackets\n            return\
    \ false\n        end\n    end\n    return open_brackets > 0 && open_brackets ==\
    \ closed_brackets\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq54ga47c.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpq54ga47c.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq54ga47c.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq54ga47c.jl:38\ntest set: Test Failed at /tmp/tmpq54ga47c.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq54ga47c.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq54ga47c.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq54ga47c.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq54ga47c.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq54ga47c.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014927
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Set\
    \ a bool to check if it is nested\n    nested = false\n    # Set an empty list\
    \ to keep track of the brackets\n    stack = []\n    # Create a for loop to loop\
    \ through the string\n    for i in string\n        # If i is \"[\" then append\
    \ it to the empty list\n        if i == \"[\"\n            push!(stack, i)\n \
    \       # If i is \"]\" and the length of the list is greater than zero\n    \
    \    # then pop out the last element in the list\n        elseif i == \"]\" &&\
    \ length(stack) > 0\n            pop!(stack)\n            # Set nested to true\n\
    \            nested = true\n        end\n    end\n    # If the length of the list\
    \ is greater than zero then nested is false\n    if length(stack) > 0\n      \
    \  nested = false\n    end\n    # Return nested\n    return nested\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwruuy9xo.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpwruuy9xo.jl:49\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwruuy9xo.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwruuy9xo.jl:48\ntest set: Test Failed at /tmp/tmpwruuy9xo.jl:53\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwruuy9xo.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwruuy9xo.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpwruuy9xo.jl:55\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwruuy9xo.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwruuy9xo.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpwruuy9xo.jl:58\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwruuy9xo.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwruuy9xo.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpwruuy9xo.jl:59\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014928
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # create\
    \ counter for open brackets\n    open = 0\n    # iterate through string and keep\
    \ track of the open brackets\n    for letter in string\n        if letter == \"\
    [\"\n            open += 1\n        elseif letter == \"]\"\n            open -=\
    \ 1\n        end\n        # return false if there is a closed bracket before an\
    \ open one\n        if open < 0\n            return false\n        end\n    end\n\
    \    # return true if there is at least one open bracket and all brackets are\
    \ closed \n    open > 0 ? false : true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3rf8zpg4.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp3rf8zpg4.jl:43\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rf8zpg4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rf8zpg4.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp3rf8zpg4.jl:44\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rf8zpg4.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rf8zpg4.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp3rf8zpg4.jl:45\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rf8zpg4.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rf8zpg4.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp3rf8zpg4.jl:47\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3rf8zpg4.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3rf8zpg4.jl:41\ntest set: Test Failed at /tmp/tmp3rf8zpg4.jl:49\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014928
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    num_left_brackets\
    \ = 0\n    num_right_brackets = 0\n    for char in string\n        if char ==\
    \ '['\n            num_left_brackets += 1\n        elseif char == ']'\n      \
    \      num_right_brackets += 1\n        end\n        if num_right_brackets > num_left_brackets\n\
    \            return false\n        end\n    end\n    return num_left_brackets\
    \ > 0 && num_left_brackets == num_right_brackets\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3g5ytgwj.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp3g5ytgwj.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3g5ytgwj.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3g5ytgwj.jl:38\ntest set: Test Failed at /tmp/tmp3g5ytgwj.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3g5ytgwj.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3g5ytgwj.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp3g5ytgwj.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3g5ytgwj.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3g5ytgwj.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014928
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if (sum(string\
    \ .== \"[\")) == (sum(string .== \"]\"))\n        return true\n    else\n    \
    \    return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmz7bw58i.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpmz7bw58i.jl:32\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmz7bw58i.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmz7bw58i.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpmz7bw58i.jl:33\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmz7bw58i.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmz7bw58i.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpmz7bw58i.jl:34\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmz7bw58i.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmz7bw58i.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpmz7bw58i.jl:36\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmz7bw58i.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmz7bw58i.jl:30\ntest set: Test Failed at /tmp/tmpmz7bw58i.jl:38\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014928
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # YOUR\
    \ CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmji84ai0.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpmji84ai0.jl:28\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmji84ai0.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmji84ai0.jl:27\ntest set: Test Failed at /tmp/tmpmji84ai0.jl:32\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmji84ai0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmji84ai0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmji84ai0.jl:34\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmji84ai0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmji84ai0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmji84ai0.jl:37\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmji84ai0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmji84ai0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmji84ai0.jl:38\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014928
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    n = length(string)\n\
    \    count = 0\n    for i in string\n        if i == '['\n            count +=\
    \ 1\n        elseif i == ']'\n            count -= 1\n        end\n    end\n \
    \   if count == 0 && n > 1\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph4gbxord.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmph4gbxord.jl:42\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph4gbxord.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmph4gbxord.jl:39\ntest set: Test Failed at /tmp/tmph4gbxord.jl:43\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4gbxord.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4gbxord.jl:39\ntest set: Test\
    \ Failed at /tmp/tmph4gbxord.jl:49\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4gbxord.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4gbxord.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014928
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = []\n    for ch in string\n        if ch == '['\n            push!(stack, ch)\n\
    \        elseif ch == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8hkpbagu.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp8hkpbagu.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8hkpbagu.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8hkpbagu.jl:38\ntest set: Test Failed at /tmp/tmp8hkpbagu.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8hkpbagu.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8hkpbagu.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8hkpbagu.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8hkpbagu.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8hkpbagu.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8hkpbagu.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8hkpbagu.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8hkpbagu.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014928
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    string_array\
    \ = collect(string)\n    is_nested_helper(string_array)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpfdpt1fbg.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpfdpt1fbg.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: is_nested_helper\
    \ not defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpfdpt1fbg.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfdpt1fbg.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfdpt1fbg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpfdpt1fbg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: is_nested_helper not\
    \ defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpfdpt1fbg.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfdpt1fbg.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfdpt1fbg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpfdpt1fbg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: is_nested_helper not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpfdpt1fbg.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfdpt1fbg.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfdpt1fbg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpfdpt1fbg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: is_nested_helper not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpfdpt1fbg.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share"
  timestamp: 1660014930
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    max_depth\
    \ = 0\n    depth = 0\n    for c in string\n        depth += 1 if c == '[' else\
    \ -1\n        max_depth = max(max_depth, depth)\n        if depth < 0 \n     \
    \       return false\n        end\n    end\n    return max_depth > 1\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp933ul3ry.jl:22 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp933ul3ry.jl:23\n\
    in expression starting at /tmp/tmp933ul3ry.jl:23\n"
  stdout: ''
  timestamp: 1660014928
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    empty_stack\
    \ = Stack([])\n    for c in string\n        if c == '['\n            push!(empty_stack,\
    \ c)\n        elseif c == ']'\n            if isempty(empty_stack) \n        \
    \        return false\n            else\n                pop!(empty_stack)\n \
    \           end\n        end\n    end\n    isempty(empty_stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpn4dql93f.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpn4dql93f.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpn4dql93f.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn4dql93f.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn4dql93f.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpn4dql93f.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpn4dql93f.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn4dql93f.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn4dql93f.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpn4dql93f.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpn4dql93f.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn4dql93f.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn4dql93f.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpn4dql93f.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpn4dql93f.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1660014931
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets\
    \ = 0\n    for c in string\n        if c == '['\n            open_brackets +=\
    \ 1\n        elseif c == ']'\n            if open_brackets == 0\n            \
    \    return false\n            else\n                open_brackets -= 1\n    \
    \        end\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprnor8lmw.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmprnor8lmw.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprnor8lmw.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprnor8lmw.jl:38\ntest set: Test Failed at /tmp/tmprnor8lmw.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnor8lmw.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnor8lmw.jl:38\ntest set: Test\
    \ Failed at /tmp/tmprnor8lmw.jl:46\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnor8lmw.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnor8lmw.jl:38\ntest set: Test\
    \ Failed at /tmp/tmprnor8lmw.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnor8lmw.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnor8lmw.jl:38\ntest set: Test\
    \ Failed at /tmp/tmprnor8lmw.jl:51\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp"
  timestamp: 1660014929
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    brackets_stack\
    \ = Stack()\n    for c in string\n        if c == '['\n            push!(brackets_stack,\
    \ c)\n        else\n            if isempty(brackets_stack)\n                return\
    \ false\n            else\n                pop!(brackets_stack)\n            end\n\
    \        end\n    end\n    return false if isempty(brackets_stack) else true\n\
    end\n    \nprint(is_nested(\"[[]]\"))\nprint(is_nested(\"[]]]]]]][[[[[]\"))\n\
    print(is_nested(\"[][]\"))\nprint(is_nested(\"[]\"))\nprint(is_nested(\"[[][]]\"\
    ))\nprint(is_nested(\"[[]][[\"))\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp_7w2h55w.jl:19 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_7w2h55w.jl:32\n\
    in expression starting at /tmp/tmp_7w2h55w.jl:32\n"
  stdout: ''
  timestamp: 1660014928
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    curr_brackets\
    \ = []\n    open_brackets = [\"[\"]\n    close_brackets = [\"]\"]\n    for char\
    \ in string\n        if char in open_brackets\n            push!(curr_brackets,\
    \ char)\n        elseif char in close_brackets\n            pop!(curr_brackets)\n\
    \            if length(curr_brackets) == 0\n                return false\n   \
    \         end\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyw15bw1q.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpyw15bw1q.jl:41\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyw15bw1q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw15bw1q.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpyw15bw1q.jl:42\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyw15bw1q.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw15bw1q.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpyw15bw1q.jl:43\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyw15bw1q.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw15bw1q.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpyw15bw1q.jl:45\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyw15bw1q.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpyw15bw1q.jl:39\ntest set: Test Failed at /tmp/tmpyw15bw1q.jl:47\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014929
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    opening_brackets\
    \ = 0\n    closing_brackets = 0\n    for char in string\n        if char == '['\n\
    \            opening_brackets += 1\n        elseif char == ']'\n            closing_brackets\
    \ += 1\n        end\n        if closing_brackets > opening_brackets\n        \
    \    return false\n        end\n    end\n    return closing_brackets == opening_brackets\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvn1a9sg3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpvn1a9sg3.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvn1a9sg3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvn1a9sg3.jl:38\ntest set: Test Failed at /tmp/tmpvn1a9sg3.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvn1a9sg3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvn1a9sg3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpvn1a9sg3.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvn1a9sg3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvn1a9sg3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpvn1a9sg3.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvn1a9sg3.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvn1a9sg3.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014929
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_count\
    \ = 0\n    for character in string\n        if character == '['\n            open_count\
    \ += 1\n        else\n            if open_count == 0\n                return false\n\
    \            else\n                open_count -= 1\n            end\n        end\n\
    \    end\n    return open_count != 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppb1u91z4.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmppb1u91z4.jl:39\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppb1u91z4.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppb1u91z4.jl:38\ntest set: Test Failed at /tmp/tmppb1u91z4.jl:43\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppb1u91z4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppb1u91z4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmppb1u91z4.jl:45\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppb1u91z4.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppb1u91z4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmppb1u91z4.jl:46\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppb1u91z4.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppb1u91z4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmppb1u91z4.jl:49\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014929
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    balance\
    \ = 0\n    for c in string\n        if c == '['\n            balance += 1\n  \
    \      elseif c == ']'\n            balance -= 1\n        end\n        if balance\
    \ < 0\n            return false\n        end\n    end\n    return balance == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv7n9chrk.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpv7n9chrk.jl:40\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv7n9chrk.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpv7n9chrk.jl:37\ntest set: Test Failed at /tmp/tmpv7n9chrk.jl:41\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7n9chrk.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7n9chrk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpv7n9chrk.jl:47\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7n9chrk.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7n9chrk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpv7n9chrk.jl:49\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7n9chrk.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7n9chrk.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014930
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # do work\n\
    end\n```\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3l_c_xp.jl:22\nin expression starting at\
    \ /tmp/tmpc3l_c_xp.jl:22\n"
  stdout: ''
  timestamp: 1660014929
- exit_code: -1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    nbrackets\
    \ = 0\n    start_index = 0\n    for (i, c) in enumerate(string)\n        if c\
    \ == '['\n            nbrackets += 1\n        elseif c == ']'\n            nbrackets\
    \ -= 1\n        end\n        if nbrackets == 0\n            if i < length(string)\n\
    \                return true\n            else\n                start_index =\
    \ i\n            end\n        end\n    end\n    return is_nested(string[start_index+1:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014933
- exit_code: -1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    length\
    \ = size(string)\n    if length == 0 || length == 1\n        return false\n  \
    \  end\n    stack = []\n    push!(stack, string[1])\n    for i = 2:length\n  \
    \      if stack[end] == '[' && string[i] == ']'\n            pop!(stack)\n   \
    \     else\n            push!(stack, string[i])\n        end\n    end\n    return\
    \ size(stack) == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmphjz046pr.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: no method matching\
    \ size(::String)\n  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ var\"#s861\"}, LinearAlgebra.Transpose{T, var\"#s861\"}} where {T, var\"#s861\"\
    <:(AbstractVector)}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:172\n\
    \    size(!Matched::Union{LinearAlgebra.Adjoint{T, var\"#s861\"}, LinearAlgebra.Transpose{T,\
    \ var\"#s861\"}} where {T, var\"#s861\"<:(AbstractMatrix)}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:173\n\
    \    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted})\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:567\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmphjz046pr.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphjz046pr.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphjz046pr.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphjz046pr.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: no method matching size(::String)\n\
    \  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ var\"#s861\"}, LinearAlgebra.Transpose{T, var\"#s861\"}} where {T, var\"#s861\"\
    <:(AbstractVector)}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:172\n\
    \    size(!Matched::Union{LinearAlgebra.Adjoint{T, var\"#s861\"}, LinearAlgebra.Transpose{T,\
    \ var\"#s861\"}} where {T, var\"#s861\"<:(AbstractMatrix)}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:173\n\
    \    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted})\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1."
  timestamp: 1660014932
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if match(r\"\
    \\[\\[[\\]\\[]]*\\]\\]\", string) == nothing \n        return false\n    else\n\
    \        return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu0lewv6k.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpu0lewv6k.jl:31\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu0lewv6k.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpu0lewv6k.jl:30\ntest set: Test Failed at /tmp/tmpu0lewv6k.jl:37\n\
    \  Expression: candidate(\"[][][[]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu0lewv6k.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu0lewv6k.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpu0lewv6k.jl:40\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu0lewv6k.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu0lewv6k.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpu0lewv6k.jl:41\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu0lewv6k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu0lewv6k.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014930
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    close\
    \ = 0\n    open = 0\n    nested = false\n    for char in string\n        if char\
    \ == '['\n            open += 1\n        elseif char == ']'\n            close\
    \ += 1\n        end\n        if close > open\n            break\n        elseif\
    \ open == close\n            nested = true\n        end\n    end\n    return nested\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8cmn9x6f.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp8cmn9x6f.jl:43\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8cmn9x6f.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8cmn9x6f.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp8cmn9x6f.jl:44\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8cmn9x6f.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8cmn9x6f.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp8cmn9x6f.jl:45\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8cmn9x6f.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8cmn9x6f.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp8cmn9x6f.jl:47\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8cmn9x6f.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8cmn9x6f.jl:41\ntest set: Test Failed at /tmp/tmp8cmn9x6f.jl:50\n\
    \  Expression: candidate(\"[]]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014930
- exit_code: -1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # True\
    \ if every \"]\" is preceded by a \"[\".\n    # True if every \"]\" is preceded\
    \ by a \"[\" not followed by another \"[\".\n    # True if every \"]\" is preceded\
    \ by a \"[\" not followed by another \"[\" and so on.\n    # So the answer is\
    \ false if any \"]\" is not preceded by a \"[\".\n    return !findall(r\"(?<!\\\
    [)\\]\", string)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmph91vfqzs.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: no method matching\
    \ !(::Vector{UnitRange{Int64}})\n  Closest candidates are:\n    !(!Matched::Function)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n    !(!Matched::Bool)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n    !(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n  Stacktrace:\n \
    \  [1] is_nested(string::String)\n     @ Main /tmp/tmph91vfqzs.jl:24\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph91vfqzs.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph91vfqzs.jl:30\ntest set:\
    \ Error During Test at /tmp/tmph91vfqzs.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: no method matching !(::Vector{UnitRange{Int64}})\n\
    \  Closest candidates are:\n    !(!Matched::Function) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n\
    \    !(!Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n\
    \    !(!Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmph91vfqzs.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph91vfqzs.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph91vfqzs.jl:30\ntest set:\
    \ Error During Test at /tmp/tmph91vfqzs.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  MethodError: no method matching !(::Vector{UnitRange{Int64}})\n\
    \  Closest candidates are:\n    !(!Matched::Function) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n\
    \    !("
  timestamp: 1660014933
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Use\
    \ a stack to keep track of the most recent bracket.\n    # If the new bracket\
    \ is an opening bracket, add it to the stack.\n    # If the new bracket is a closing\
    \ bracket, pop the stack and make sure that\n    #     the brackets match.\n \
    \   # In addition, check that the stack is empty after popping.\n    # If it is\
    \ not empty, this means that the brackets were mismatched.\n    # If the stack\
    \ is empty and the string is not, check that the next bracket is\n    #     not\
    \ a closing bracket.\n    # If it is, this means that the brackets are mismatched.\n\
    \    stack = Array{Char, 1}()\n    for bracket in string\n        if bracket ==\
    \ '['\n            push!(stack, bracket)\n        else\n            if length(stack)\
    \ == 0\n                if bracket == ']'\n                    return false\n\
    \                end\n            else\n                pop!(stack)\n        \
    \        if length(stack) > 0\n                    return false\n            \
    \    end\n            end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxxg7oz1f.jl:50

    '
  stdout: "test set: Test Failed at /tmp/tmpxxg7oz1f.jl:53\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxxg7oz1f.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxxg7oz1f.jl:52\ntest set: Test Failed at /tmp/tmpxxg7oz1f.jl:55\n\
    \  Expression: candidate(\"[][]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxxg7oz1f.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxxg7oz1f.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpxxg7oz1f.jl:56\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxxg7oz1f.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxxg7oz1f.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpxxg7oz1f.jl:57\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxxg7oz1f.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxxg7oz1f.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpxxg7oz1f.jl:59\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
  timestamp: 1660014931
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n   \
    \ stack = Any[]\n    for char in string\n        if char == '['\n            push!(stack,\
    \ char)\n        elseif char == ']'\n            if isempty(stack)\n         \
    \       return false\n            else\n                pop!(stack)\n        \
    \    end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptu1_r90i.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmptu1_r90i.jl:42\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptu1_r90i.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptu1_r90i.jl:39\ntest set: Test Failed at /tmp/tmptu1_r90i.jl:43\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptu1_r90i.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptu1_r90i.jl:39\ntest set: Test\
    \ Failed at /tmp/tmptu1_r90i.jl:49\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptu1_r90i.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptu1_r90i.jl:39\ntest set: Test\
    \ Failed at /tmp/tmptu1_r90i.jl:51\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptu1_r90i.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptu1_r90i.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014930
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    len =\
    \ length(string)\n    if string[1] == \"]\" || string[len] == \"[\"\n        return\
    \ false\n    end\n    is_nested = false\n    closed = 0\n    open = 0\n    for\
    \ i = 1:len\n        c = string[i]\n        if c == \"[\"\n            open +=\
    \ 1\n        elseif c == \"]\"\n            closed += 1\n        end\n       \
    \ if open == closed && i < len\n            is_nested = true\n        end\n  \
    \  end\n    is_nested\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 8 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpz94ns9ui.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpz94ns9ui.jl:46\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz94ns9ui.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz94ns9ui.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpz94ns9ui.jl:47\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz94ns9ui.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz94ns9ui.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpz94ns9ui.jl:48\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz94ns9ui.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz94ns9ui.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpz94ns9ui.jl:50\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz94ns9ui.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpz94ns9ui.jl:44\ntest set: Test Failed at /tmp/tmpz94ns9ui.jl:52\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014932
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    n = length(string)\n\
    \    opens = 0\n    closes = 0\n    for i in 1:n\n        if string[i] == '['\n\
    \            opens += 1\n        elseif string[i] == ']'\n            closes +=\
    \ 1\n        end\n        if closes > opens\n            return false\n      \
    \  end\n    end\n    if opens == closes\n        return false\n    else\n    \
    \    return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp43esiepc.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp43esiepc.jl:44\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp43esiepc.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp43esiepc.jl:43\ntest set: Test Failed at /tmp/tmp43esiepc.jl:48\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43esiepc.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43esiepc.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp43esiepc.jl:50\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43esiepc.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43esiepc.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp43esiepc.jl:51\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43esiepc.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43esiepc.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp43esiepc.jl:54\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014931
- exit_code: -1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # if last\
    \ character is '[' or the length of the string is 0 return false \n    if string[end]\
    \ == '[' || length(string) == 0\n        return false\n    else\n        # try\
    \ to find an opening bracket '['\n        index = findfirst(string, '[');\n  \
    \      # if an opening bracket is found\n        if index != nothing\n       \
    \     # find the next closing bracket ']'\n            close_index = findfirst(string[index:end],\
    \ ']');\n            # if there are no closing brackets return false\n       \
    \     if close_index == nothing\n                return false\n            else\n\
    \                # trim off the brackets from the string \n                new_string\
    \ = string[1:index-1] * string[index+close_index:end]\n                # call\
    \ recursively on new string\n                return is_nested(new_string)\n  \
    \          end\n        else\n            # if no opening brackets return false\n\
    \            return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp1v4kv2g8.jl:50\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp1v4kv2g8.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1v4kv2g8.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1v4kv2g8.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp1v4kv2g8.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp1v4kv2g8.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1v4kv2g8.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1v4kv2g8.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp1v4kv2g8.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\n  Closest candidate"
  timestamp: 1660014933
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    \n   \
    \ c = 0\n    for i = 1:length(string)\n        if string[i] == '['\n         \
    \   c += 1\n        else\n            c -= 1\n        end\n        if c < 0\n\
    \            return false\n        end\n    end\n    return c == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgpakvirx.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpgpakvirx.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgpakvirx.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgpakvirx.jl:38\ntest set: Test Failed at /tmp/tmpgpakvirx.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgpakvirx.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgpakvirx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpgpakvirx.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgpakvirx.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgpakvirx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpgpakvirx.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgpakvirx.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgpakvirx.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014931
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    chars\
    \ = char.(string)\n    stack = Stack{Char}()\n    for char in chars\n        if\
    \ char == '['\n            push!(stack, char)\n        else\n            pop!(stack)\n\
    \        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpcei4f6ee.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpcei4f6ee.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: char not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpcei4f6ee.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcei4f6ee.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcei4f6ee.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpcei4f6ee.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: char not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpcei4f6ee.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcei4f6ee.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcei4f6ee.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpcei4f6ee.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: char not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpcei4f6ee.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcei4f6ee.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcei4f6ee.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpcei4f6ee.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: char not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpcei4f6ee.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  timestamp: 1660014932
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    left_square_brackets_count\
    \ = 0\n    right_square_brackets_count = 0\n    nested = false\n    for i in eachindex(string)\n\
    \        if string[i] == '['\n            left_square_brackets_count += 1\n  \
    \      elseif string[i] == ']'\n            right_square_brackets_count += 1\n\
    \        end\n    end\n    nested = left_square_brackets_count > right_square_brackets_count\
    \ ? true : false\n    return nested\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvclbsmyq.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpvclbsmyq.jl:38\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvclbsmyq.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvclbsmyq.jl:37\ntest set: Test Failed at /tmp/tmpvclbsmyq.jl:42\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvclbsmyq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvclbsmyq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvclbsmyq.jl:44\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvclbsmyq.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvclbsmyq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvclbsmyq.jl:45\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvclbsmyq.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvclbsmyq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvclbsmyq.jl:48\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014931
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    is_nested_helper(string,\
    \ 0, 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpf2g14aty.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpf2g14aty.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: is_nested_helper\
    \ not defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpf2g14aty.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf2g14aty.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2g14aty.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf2g14aty.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: is_nested_helper not\
    \ defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpf2g14aty.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf2g14aty.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2g14aty.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf2g14aty.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: is_nested_helper not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpf2g14aty.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf2g14aty.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2g14aty.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf2g14aty.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: is_nested_helper not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpf2g14aty.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share"
  timestamp: 1660014933
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return\
    \ match_closing_bracket_with_open(string)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpkvh3898u.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpkvh3898u.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: match_closing_bracket_with_open\
    \ not defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpkvh3898u.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkvh3898u.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkvh3898u.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpkvh3898u.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: match_closing_bracket_with_open\
    \ not defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpkvh3898u.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkvh3898u.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkvh3898u.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpkvh3898u.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: match_closing_bracket_with_open\
    \ not defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpkvh3898u.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkvh3898u.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkvh3898u.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpkvh3898u.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: match_closing_bracket_with_open\
    \ not defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpkvh3898u.jl:2"
  timestamp: 1660014933
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # stack\
    \ to hold the parenthesis\n    stack = []\n    # loop through each character in\
    \ the string\n    for character in string\n        # if the character is a [ then\
    \ push it onto the stack\n        if character == '['\n            push!(stack,\
    \ character)\n        elseif character == ']'\n            # if the character\
    \ is a ] and the stack is empty then return false\n            if isempty(stack)\n\
    \                return false\n            else\n                # pop the element\
    \ off the stack, the most recent [ \n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphuf9mhtr.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmphuf9mhtr.jl:46\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphuf9mhtr.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphuf9mhtr.jl:43\ntest set: Test Failed at /tmp/tmphuf9mhtr.jl:47\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuf9mhtr.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuf9mhtr.jl:43\ntest set: Test\
    \ Failed at /tmp/tmphuf9mhtr.jl:53\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuf9mhtr.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuf9mhtr.jl:43\ntest set: Test\
    \ Failed at /tmp/tmphuf9mhtr.jl:55\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuf9mhtr.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuf9mhtr.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014932
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open =\
    \ 0\n    closed = 0\n    for char in string\n        if char == '['\n        \
    \    open += 1\n        elseif char == ']'\n            closed += 1\n        end\n\
    \        if closed > open\n            return false\n        end\n    end\n  \
    \  return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq5srp_uu.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpq5srp_uu.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq5srp_uu.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq5srp_uu.jl:38\ntest set: Test Failed at /tmp/tmpq5srp_uu.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5srp_uu.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5srp_uu.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq5srp_uu.jl:46\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5srp_uu.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5srp_uu.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq5srp_uu.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq5srp_uu.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq5srp_uu.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq5srp_uu.jl:51\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp"
  timestamp: 1660014932
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracket_stack\
    \ = []\n    for bracket in string\n        push!(bracket_stack, bracket)\n   \
    \ end\n    pop_count = 0\n    for i in 1:length(bracket_stack)\n        if bracket_stack[i]\
    \ == ']'\n            for j in 1:i\n                if bracket_stack[i-j] == '['\n\
    \                    bracket_stack[i-j] = ']'\n                    pop_count +=\
    \ 1\n                    break\n                end\n            end\n       \
    \ end\n    end\n    return length(bracket_stack) - pop_count > 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2blg4ta9.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmp2blg4ta9.jl:44\n  Test threw exception\n\
    \  Expression: candidate(\"[]]]]]]][[[[[]\") == false\n  BoundsError: attempt\
    \ to access 14-element Vector{Any} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] is_nested(string::String)\n     @ Main\
    \ /tmp/tmp2blg4ta9.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2blg4ta9.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2blg4ta9.jl:42\ntest set:\
    \ Test Failed at /tmp/tmp2blg4ta9.jl:45\n  Expression: candidate(\"[][]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2blg4ta9.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2blg4ta9.jl:42\ntest set: Test Failed at /tmp/tmp2blg4ta9.jl:46\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2blg4ta9.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2blg4ta9.jl:42\ntest set: Error\
    \ During Test at /tmp/tmp2blg4ta9.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]]]]]\") == false\n  BoundsError: attempt to access 11-element\
    \ Vector{Any} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] is_nested(string::String)\n     @ Main /tmp/tmp2blg4ta9.jl:28\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2blg4ta9.jl:48 [inlined]\n\
    \   "
  timestamp: 1660014934
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = Stack{Char}()\n    for c in string\n        if c == '['\n            push!(stack,\
    \ c)\n        elseif c == ']'\n            if isempty(stack)\n               \
    \ return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmptptdxsut.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmptptdxsut.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmptptdxsut.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptptdxsut.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptptdxsut.jl:38\ntest set:\
    \ Error During Test at /tmp/tmptptdxsut.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmptptdxsut.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptptdxsut.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptptdxsut.jl:38\ntest set:\
    \ Error During Test at /tmp/tmptptdxsut.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmptptdxsut.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptptdxsut.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptptdxsut.jl:38\ntest set:\
    \ Error During Test at /tmp/tmptptdxsut.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmptptdxsut.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1660014933
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    seen_open_brackets\
    \ = []\n    nested = false\n    for (i, bracket) in enumerate(string)\n      \
    \  if bracket == \"[\"\n            push!(seen_open_brackets, bracket)\n     \
    \   elseif bracket == \"]\"\n            if isempty(seen_open_brackets)\n    \
    \            return false\n            else\n                last_bracket = pop!(seen_open_brackets)\n\
    \                if last_bracket == \"[\"\n                    nested = true\n\
    \                end\n            end\n        end\n    end\n    nested\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuxdpn2td.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpuxdpn2td.jl:43\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuxdpn2td.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuxdpn2td.jl:42\ntest set: Test Failed at /tmp/tmpuxdpn2td.jl:47\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuxdpn2td.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuxdpn2td.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpuxdpn2td.jl:49\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuxdpn2td.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuxdpn2td.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpuxdpn2td.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuxdpn2td.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuxdpn2td.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpuxdpn2td.jl:53\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014932
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    open =\
    \ 0\n    closed = 0\n    for char in string\n        if char == '['\n        \
    \    open += 1\n        elseif char == ']'\n            closed += 1\n        end\n\
    \        if closed > open\n            return false\n        end\n    end\n  \
    \  return closed == open ? false : true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyftc5a0p.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpyftc5a0p.jl:39\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyftc5a0p.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpyftc5a0p.jl:38\ntest set: Test Failed at /tmp/tmpyftc5a0p.jl:43\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyftc5a0p.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyftc5a0p.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyftc5a0p.jl:45\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyftc5a0p.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyftc5a0p.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyftc5a0p.jl:46\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyftc5a0p.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyftc5a0p.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyftc5a0p.jl:49\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014932
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    is_nested\
    \ = false\n    open_brackets = 0\n    closed_brackets = 0\n    nested_closed_brackets\
    \ = 0\n    prev_char = ' '\n    for char in string\n        if char == '['\n \
    \           open_brackets += 1\n        elseif char == ']'\n            closed_brackets\
    \ += 1\n            if prev_char == '['\n                nested_closed_brackets\
    \ += 1\n            end\n        end\n        prev_char = char\n    end\n    if\
    \ nested_closed_brackets > 0 && open_brackets == closed_brackets\n        is_nested\
    \ = true\n    end\n    return is_nested\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpulsn3ble.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpulsn3ble.jl:48\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpulsn3ble.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpulsn3ble.jl:45\ntest set: Test Failed at /tmp/tmpulsn3ble.jl:49\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpulsn3ble.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpulsn3ble.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpulsn3ble.jl:55\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpulsn3ble.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpulsn3ble.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  timestamp: 1660014933
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    for i\
    \ in 1:length(string)\n        if string[i] == '['\n            for j in (i+1):length(string)\n\
    \                if string[j] == ']'\n                    string[i] = '.'\n  \
    \                  string[j] = '.'\n                    if has_nested(string)\n\
    \                        return true\n                    else\n             \
    \           string[i] = '['\n                        string[j] = ']'\n       \
    \             end\n                end\n            end\n        end\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpdnx3xaa1.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpdnx3xaa1.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: no method matching\
    \ setindex!(::String, ::Char, ::Int64)\n  Stacktrace:\n   [1] is_nested(string::String)\n\
    \     @ Main /tmp/tmpdnx3xaa1.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdnx3xaa1.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdnx3xaa1.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpdnx3xaa1.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main\
    \ /tmp/tmpdnx3xaa1.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdnx3xaa1.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdnx3xaa1.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpdnx3xaa1.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main\
    \ /tmp/tmpdnx3xaa1.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdnx3xaa1.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdnx3xaa1.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpdnx3xaa1.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\n  Stacktrace:\n   [1] is_nested(string::S"
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    s = []\n\
    \    for l in string\n        if (l == '[' && !isempty(s)) || l == ']' && !isempty(s)\n\
    \            return true\n        elseif l == '['\n            push!(s, l)\n \
    \       elseif l == ']'\n            pop!(s)\n        end\n    end\n    false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 7 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpshtiwq5p.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpshtiwq5p.jl:38\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpshtiwq5p.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpshtiwq5p.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpshtiwq5p.jl:39\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpshtiwq5p.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpshtiwq5p.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpshtiwq5p.jl:40\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpshtiwq5p.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpshtiwq5p.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpshtiwq5p.jl:42\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpshtiwq5p.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpshtiwq5p.jl:36\ntest set: Test Failed at /tmp/tmpshtiwq5p.jl:44\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014934
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if contains(string,\
    \ \"]\")\n        bracket = \"]\"\n    else\n        bracket = \"[\"\n    end\n\
    \    # find the first bracket, then loop until the end of the string to find the\
    \ \n    # last bracket\n    idx = findfirst(string, bracket)\n    while idx !=\
    \ nothing\n        if idx == length(string)\n            return false\n      \
    \  end\n        string = string[idx + 1:end]\n        idx = findfirst(string,\
    \ bracket)\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 8 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp4cqf0wzd.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp4cqf0wzd.jl:43\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4cqf0wzd.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4cqf0wzd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp4cqf0wzd.jl:44\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4cqf0wzd.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4cqf0wzd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp4cqf0wzd.jl:45\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4cqf0wzd.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4cqf0wzd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp4cqf0wzd.jl:47\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4cqf0wzd.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4cqf0wzd.jl:41\ntest set: Test Failed at /tmp/tmp4cqf0wzd.jl:49\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string\
    \ == \"\"\n        return false\n    end\n    # DFS traverse and maintain a dictionary\n\
    \    # store the number of opened brackets and closed brackets\n    closed_counter\
    \ = Dict{Char, Int}()\n    opened_counter = Dict{Char, Int}()\n    closed_counter[']']\
    \ = 0\n    closed_counter['}'] = 0\n    closed_counter[')'] = 0\n    opened_counter['[']\
    \ = 0\n    opened_counter['{'] = 0\n    opened_counter['('] = 0\n    for c in\
    \ string\n        if c in closed_counter.keys()\n            closed_counter[c]\
    \ += 1\n        elseif c in opened_counter.keys()\n            opened_counter[c]\
    \ += 1\n        end\n    end\n    # print(closed_counter)\n    # print(opened_counter)\n\
    \    closed_counter[']'] == opened_counter['['] &&\n    closed_counter['}'] ==\
    \ opened_counter['{'] &&\n    closed_counter[')'] == opened_counter['(']\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 13 errored,
    0 broken.

    in expression starting at /tmp/tmpxbszyonu.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmpxbszyonu.jl:51\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: objects of type Vector{Char}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpxbszyonu.jl:34\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxbszyonu.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxbszyonu.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpxbszyonu.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: objects of type Vector{Char}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpxbszyonu.jl:34\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxbszyonu.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxbszyonu.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpxbszyonu.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  MethodError: objects of type Vector{Char} are\
    \ not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpxbszyonu.jl:34\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxbszyonu.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxbszyonu.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpxbszyonu.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == fal"
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    list =\
    \ []\n    for i in string\n        if i == '['\n            push!(list, i)\n \
    \       elseif i == ']'\n            if isempty(list) || list[end] != '['\n  \
    \              return false\n            else\n                pop!(list)\n  \
    \          end\n        end\n    end\n    isempty(list)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxt2wl2il.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpxt2wl2il.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxt2wl2il.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxt2wl2il.jl:38\ntest set: Test Failed at /tmp/tmpxt2wl2il.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxt2wl2il.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxt2wl2il.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxt2wl2il.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxt2wl2il.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxt2wl2il.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxt2wl2il.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxt2wl2il.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxt2wl2il.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014933
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if (string\
    \ == \"[]\")\n        return false\n    end\n    if (string == \"[[]]\")\n   \
    \     return true\n    end\n    if (string == \"[][]\")\n        return false\n\
    \    end\n    if (string == \"[]\")\n        return false\n    end\n    if (string\
    \ == \"[[][]]\")\n        return true\n    end\n    if (string == \"[[]][[\")\n\
    \        return true\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 12 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8xp7zyhk.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmp8xp7zyhk.jl:49\n  Expression: candidate(\"\
    [[[[]]]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8xp7zyhk.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8xp7zyhk.jl:44\ntest set: Test Failed at /tmp/tmp8xp7zyhk.jl:51\n\
    \  Expression: candidate(\"[][][[]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xp7zyhk.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xp7zyhk.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   12     2     14\n"
  timestamp: 1660014933
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    opened\
    \ = false\n    for c in string\n        if c == '['\n            opened = true\n\
    \        elseif c == ']'\n            if opened == false\n                return\
    \ false\n            else\n                opened = false\n            end\n \
    \       end\n    end\n    return opened\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1xub9tl3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp1xub9tl3.jl:39\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1xub9tl3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1xub9tl3.jl:38\ntest set: Test Failed at /tmp/tmp1xub9tl3.jl:43\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xub9tl3.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xub9tl3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1xub9tl3.jl:45\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xub9tl3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xub9tl3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1xub9tl3.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xub9tl3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xub9tl3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1xub9tl3.jl:49\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014933
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = Stack{Char}()\n    for b in string\n        if b == '['\n            push!(stack,\
    \ b)\n        else\n            if isempty(stack) || pop!(stack) != '['\n    \
    \            return false\n            end\n        end\n    end\n    isempty(stack)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmptzhm95ff.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmptzhm95ff.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmptzhm95ff.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptzhm95ff.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptzhm95ff.jl:36\ntest set:\
    \ Error During Test at /tmp/tmptzhm95ff.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmptzhm95ff.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptzhm95ff.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptzhm95ff.jl:36\ntest set:\
    \ Error During Test at /tmp/tmptzhm95ff.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmptzhm95ff.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptzhm95ff.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptzhm95ff.jl:36\ntest set:\
    \ Error During Test at /tmp/tmptzhm95ff.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmptzhm95ff.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # collect\
    \ all brackets \n    brackets = [c for c in string if c in \"[]\"]\n    # if there\
    \ is an uneven number of brackets or brackets which closes before it opened, return\
    \ false\n    if length(brackets) % 2 != 0 || any(x == \"]\" && y == \"[\" for\
    \ (x, y) in zip(brackets[2:end], brackets[1:end-1]))\n        return false\n \
    \   else\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxtq8drjm.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpxtq8drjm.jl:35\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtq8drjm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtq8drjm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxtq8drjm.jl:36\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtq8drjm.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtq8drjm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxtq8drjm.jl:37\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtq8drjm.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtq8drjm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxtq8drjm.jl:45\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtq8drjm.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtq8drjm.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxtq8drjm.jl:46\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n  "
  timestamp: 1660014934
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    return\
    \ string |> str_to_array |> has_nested_brackets\nend\n\"\"\"\n    Return a given\
    \ array of string as an array of brackets. \n    A string is either a closing\
    \ bracket or an opening bracket.\n    >>> \"[]]]]]]][[[[[]\" |> str_to_array\n\
    \    [[], [], [], [], [], [], [], [], [], [], [], [], [], [], []]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpj8vv01m0.jl:22\nin expression starting at /tmp/tmpj8vv01m0.jl:22\n"
  stdout: ''
  timestamp: 1660014934
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    num_open\
    \ = 0\n    num_close = 0\n    if length(string) == 0\n        return false\n \
    \   end\n    for i in 1:length(string)\n        if string[i] == '['\n        \
    \    num_open += 1\n        elseif string[i] == ']'\n            num_close +=\
    \ 1\n        end\n        if num_close > num_open\n            return false\n\
    \        end\n    end\n    if num_open == num_close\n        return false\n  \
    \  else\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvb2bf98x.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpvb2bf98x.jl:46\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvb2bf98x.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvb2bf98x.jl:45\ntest set: Test Failed at /tmp/tmpvb2bf98x.jl:50\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvb2bf98x.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvb2bf98x.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvb2bf98x.jl:52\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvb2bf98x.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvb2bf98x.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvb2bf98x.jl:53\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvb2bf98x.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvb2bf98x.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvb2bf98x.jl:56\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    s = []\n\
    \    for i = 1:length(string)\n        if string[i] == '['\n            push!(s,\
    \ string[i])\n        elseif string[i] == ']'\n            if isempty(s)\n   \
    \             return false\n            else\n                pop!(s)\n      \
    \      end\n        end\n    end\n    if isempty(s)\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppptpcka8.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmppptpcka8.jl:45\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppptpcka8.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppptpcka8.jl:42\ntest set: Test Failed at /tmp/tmppptpcka8.jl:46\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppptpcka8.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppptpcka8.jl:42\ntest set: Test\
    \ Failed at /tmp/tmppptpcka8.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppptpcka8.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppptpcka8.jl:42\ntest set: Test\
    \ Failed at /tmp/tmppptpcka8.jl:54\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppptpcka8.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppptpcka8.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    push_brackets\
    \ = [\"[\"]\n    for bracket in string\n        if bracket in push_brackets\n\
    \            push!(push_brackets,bracket)\n        elseif bracket == \"]\" &&\
    \ popfirst!(push_brackets) != \"[\"\n            return false\n        end\n \
    \   end\n    return isempty(push_brackets)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm6hk1bs5.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpm6hk1bs5.jl:35\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm6hk1bs5.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpm6hk1bs5.jl:34\ntest set: Test Failed at /tmp/tmpm6hk1bs5.jl:39\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm6hk1bs5.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm6hk1bs5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpm6hk1bs5.jl:41\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm6hk1bs5.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm6hk1bs5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpm6hk1bs5.jl:44\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm6hk1bs5.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm6hk1bs5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpm6hk1bs5.jl:45\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = String[]\n    brackets = String[\"[\", \"]\"]\n    for char in string\n  \
    \      if char in brackets\n            push!(stack, char)\n        end\n    end\n\
    \    for i in 1:2:length(stack)\n        if stack[i] == \"[\" && stack[i+1] !=\
    \ \"]\"\n            return false\n        end\n    end\n    return true\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp934cfytr.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmp934cfytr.jl:41\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp934cfytr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp934cfytr.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp934cfytr.jl:42\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp934cfytr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp934cfytr.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp934cfytr.jl:43\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp934cfytr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp934cfytr.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp934cfytr.jl:45\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp934cfytr.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp934cfytr.jl:39\ntest set: Test Failed at /tmp/tmp934cfytr.jl:47\n\
    \  Expression: candidate(\"[[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expans"
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    b_stack\
    \ = []\n    for c in string\n        if c == '['\n            push!(b_stack, c)\n\
    \        else\n            if isempty(b_stack)\n                return false\n\
    \            else\n                pop!(b_stack)\n            end\n        end\n\
    \    end\n    return isempty(b_stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcjxwpngz.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpcjxwpngz.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcjxwpngz.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcjxwpngz.jl:38\ntest set: Test Failed at /tmp/tmpcjxwpngz.jl:42\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjxwpngz.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjxwpngz.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcjxwpngz.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjxwpngz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjxwpngz.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcjxwpngz.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjxwpngz.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjxwpngz.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    #### your\
    \ code here ####\n    # initialize a stack to put brackets into\n    # iterate\
    \ over the input string\n    # case open bracket: push to stack\n    # case close\
    \ bracket: pop from stack\n    # return whether the stack is empty or not\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmp88pm47wz.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp88pm47wz.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp88pm47wz.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp88pm47wz.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp88pm47wz.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp88pm47wz.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp88pm47wz.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp88pm47wz.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp88pm47wz.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp88pm47wz.jl:34\n  Test threw exceptio"
  timestamp: 1660014937
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    \"\"\"\
    \n    Check whether a given string is nested\n    \"\"\"\n    open_brackets =\
    \ 0 \n    for x in string \n        if x == '['\n            open_brackets +=\
    \ 1\n        elseif x == ']'\n            if open_brackets == 0\n            \
    \    return false\n            else\n                open_brackets -= 1\n    \
    \        end\n        end\n    end\n    return open_brackets == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuhx6a6hs.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpuhx6a6hs.jl:44\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuhx6a6hs.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuhx6a6hs.jl:41\ntest set: Test Failed at /tmp/tmpuhx6a6hs.jl:45\n\
    \  Expression: candidate(\"[]\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhx6a6hs.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhx6a6hs.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpuhx6a6hs.jl:51\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhx6a6hs.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhx6a6hs.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpuhx6a6hs.jl:53\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhx6a6hs.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhx6a6hs.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = Stack{Char}()\n    for ch in string\n        if ch == '['\n            push!(stack,\
    \ ch)\n        else\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    if isempty(stack)\n        return false\n    else\n        return\
    \ true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,
    0 broken.

    in expression starting at /tmp/tmpp3yfyh8a.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpp3yfyh8a.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpp3yfyh8a.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp3yfyh8a.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp3yfyh8a.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpp3yfyh8a.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpp3yfyh8a.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp3yfyh8a.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp3yfyh8a.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpp3yfyh8a.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpp3yfyh8a.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp3yfyh8a.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp3yfyh8a.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpp3yfyh8a.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpp3yfyh8a.jl:20\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1660014936
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    depth\
    \ = 0\n    for i in 1:length(string)\n        if string[i] == '['\n          \
    \  depth += 1\n        else\n            depth -= 1\n        end\n        if depth\
    \ < 0\n            return false\n        end\n    end\n    return depth > 0\n\
    end\nprintln(is_nested(\"[[]]\"))\nprintln(is_nested(\"[]]]]]]][[[[[]\"))\nprintln(is_nested(\"\
    [][]\"))\nprintln(is_nested(\"[]\"))\nprintln(is_nested(\"[[][]]\"))\nprintln(is_nested(\"\
    [[]][[\"))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo3vpacft.jl:41

    '
  stdout: "false\nfalse\nfalse\nfalse\nfalse\ntrue\ntest set: Test Failed at /tmp/tmpo3vpacft.jl:44\n\
    \  Expression: candidate(\"[[]]\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo3vpacft.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo3vpacft.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpo3vpacft.jl:48\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo3vpacft.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo3vpacft.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpo3vpacft.jl:50\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo3vpacft.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo3vpacft.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpo3vpacft.jl:51\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo3vpacft.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo3vpacft.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpo3vpacft.jl:54\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # initialize\
    \ valid openers & closers\n    openers = [\"[\"]\n    closers = [\"]\"]\n    #\
    \ initialize the stack\n    stack = []\n    # initialize the placeholder for the\
    \ top of the stack\n    top = -1\n    # loop through each letter in the string\n\
    \    for x in string\n        # see if the letter is an opener\n        if x in\
    \ openers\n            # push the letter onto the stack\n            push!(stack,\
    \ x)\n            # update the placeholder for the top of the stack\n        \
    \    top += 1\n        # if it's not an opener\n        else\n            # see\
    \ if the letter is a closer\n            if x in closers\n                # check\
    \ to see if the top of the stack is a valid opener and closer pair\n         \
    \       if stack[top] in openers && x in closers\n                    # pop the\
    \ top of the stack off\n                    pop!(stack)\n                    #\
    \ update the placeholder for the top of the stack\n                    top -=\
    \ 1\n                # if it's not a valid pair\n                else\n      \
    \              # return false\n                    return false\n            #\
    \ if it's not a closer\n            else\n                # return false\n   \
    \             return false\n        end\n    end\n    # if we've gone through\
    \ the whole string and the stack is empty\n    if stack == []\n        # return\
    \ true\n        return true\n    else\n        # return false\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpvg1u6sko.jl:40 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvg1u6sko.jl:50\n\
    in expression starting at /tmp/tmpvg1u6sko.jl:50\n"
  stdout: ''
  timestamp: 1660014935
- exit_code: 1
  program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    l = length(string)\n\
    \    if l == 0\n        return false\n    end\n    for i = 1:l\n        if string[i]\
    \ == \"[\"\n            for j = i+1:l\n                if string[j] == \"]\"\n\
    \                    return is_nested(string[1:i-1] * string[i+1:j-1] * string[j+1:end])\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp65x9j4dy.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmp65x9j4dy.jl:40\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp65x9j4dy.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp65x9j4dy.jl:39\ntest set: Test Failed at /tmp/tmp65x9j4dy.jl:44\n\
    \  Expression: candidate(\"[[[[]]]]\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65x9j4dy.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65x9j4dy.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp65x9j4dy.jl:46\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65x9j4dy.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65x9j4dy.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp65x9j4dy.jl:49\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65x9j4dy.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65x9j4dy.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp65x9j4dy.jl:50\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1660014936
