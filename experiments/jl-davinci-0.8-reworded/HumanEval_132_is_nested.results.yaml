name: HumanEval_132_is_nested
language: jl
results:
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if !check_balanced(string)\n\
    \        return false\n    end\n    bracket_found = false\n    opening_bracket_index\
    \ = 0\n    closing_bracket_index = 0\n    while closing_bracket_index <= length(string)\n\
    \        if string[closing_bracket_index] == \"]\"\n            bracket_found\
    \ = true\n            break\n        end\n        closing_bracket_index += 1\n\
    \    end\n    if bracket_found\n        opening_bracket_index = closing_bracket_index\
    \ - 1\n        while opening_bracket_index >= 1\n            if string[opening_bracket_index]\
    \ == \"[\"\n                if check_balanced(string[opening_bracket_index:closing_bracket_index])\n\
    \                    return true\n                end\n            end\n     \
    \       opening_bracket_index -= 1\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5niurrnj.jl:51\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: check_balanced not\
    \ defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp5niurrnj.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5niurrnj.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5niurrnj.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp5niurrnj.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: check_balanced not\
    \ defined\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp5niurrnj.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5niurrnj.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5niurrnj.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp5niurrnj.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: check_balanced not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmp5niurrnj.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5niurrnj.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5niurrnj.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp5niurrnj.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: check_balanced not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmp5niurrnj.jl:20\n   [2]\
    \ macro expansion\n     @ /share"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5niurrnj.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # The\
    \ stack is going to record opening \n    # brackets. If a close bracket comes,\
    \ \n    # we will pop the last opening bracket. \n    # If they are not matching,\
    \ return False \n    stack = [] \n    for bracket in string \n        if bracket\
    \ == '['\n            push!(stack, bracket) \n        elseif bracket == ']'\n\
    \            if isempty(stack)\n                return false\n            elseif\
    \ pop!(stack) != '['\n                return false\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpagzmcpgz.jl:45\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpagzmcpgz.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpagzmcpgz.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpagzmcpgz.jl:46\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpagzmcpgz.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpagzmcpgz.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpagzmcpgz.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpagzmcpgz.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpagzmcpgz.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpagzmcpgz.jl:54\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpagzmcpgz.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpagzmcpgz.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpagzmcpgz.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Make\
    \ an array of the given string \n    string_array = convert(Array{Char},string)\n\
    \    # Variable to keep track of the number of nested brackets\n    nested_brackets\
    \ = 0\n    # Iterate through the array \n    for i = 1:length(string_array)\n\
    \        # If the previous bracket is not closed before the next bracket is opened\
    \ \n        if string_array[i] == '['\n            nested_brackets += 1\n    \
    \    # If there are no closed brackets before the next bracket is opened\n   \
    \     elseif string_array[i] == ']' && nested_brackets == 0\n            return\
    \ false\n        # If there are closed brackets before the next bracket is opened\n\
    \        elseif string_array[i] == ']' && nested_brackets > 0\n            nested_brackets\
    \ -= 1\n        end\n    end\n    # If there are no more opened or closed brackets,\
    \ there is a valid subsequence\n    return nested_brackets == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcyumeug8.jl:45\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  MethodError: Cannot `convert` an\
    \ object of type \n    String to an object of type \n    Array{Char}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpcyumeug8.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcyumeug8.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcyumeug8.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpcyumeug8.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  MethodError: Cannot `convert` an object\
    \ of type \n    String to an object of type \n    Array{Char}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpcyumeug8.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcyumeug8.jl:46 [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcyumeug8.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    i = 0\n\
    \    for c in string\n        if c == '['\n            i += 1\n        elseif\
    \ c == ']'\n            i -= 1\n        end\n        if i < 0\n            return\
    \ false\n        end\n    end\n    if i > 0\n        return false\n    end\n \
    \   return true\nend\n# @test is_nested(\"[[]]\") == true\n# @test is_nested(\"\
    []]]]]]][[[[[]\") == false\n# @test is_nested(\"[][]\") == false\n# @test is_nested(\"\
    []\") == false\n# @test is_nested(\"[[][]]\") == true\n# @test is_nested(\"[[]][[\"\
    ) == true\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvsdyzu1q.jl:49\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvsdyzu1q.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvsdyzu1q.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpvsdyzu1q.jl:50\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvsdyzu1q.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvsdyzu1q.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpvsdyzu1q.jl:56\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvsdyzu1q.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvsdyzu1q.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpvsdyzu1q.jl:58\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvsdyzu1q.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvsdyzu1q.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvsdyzu1q.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    res =\
    \ [] # bracket stack\n    for i in string\n        if i == '['\n            push!(res,\
    \ i)\n        else\n            if !isempty(res)\n                pop!(res)\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    if isempty(res)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpur9xvmie.jl:45\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpur9xvmie.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpur9xvmie.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpur9xvmie.jl:46\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpur9xvmie.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpur9xvmie.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpur9xvmie.jl:52\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpur9xvmie.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpur9xvmie.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpur9xvmie.jl:54\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpur9xvmie.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpur9xvmie.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpur9xvmie.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Assume\
    \ string is a valid sequence of square brackets\n    # The string is valid if\
    \ the number of open brackets is at least 1 greater than the number of closed\
    \ brackets\n    num_open = 0\n    num_closed = 0\n    for bracket in string\n\
    \        if bracket == '['\n            num_open += 1\n        else\n        \
    \    num_closed += 1\n        end\n        # If there are more closed brackets\
    \ than open, it is invalid, \n        # so return false\n        if num_closed\
    \ > num_open\n            return false\n        end\n    end\n    # If there are\
    \ more open brackets than closed, it is valid, \n    # so return true\n    if\
    \ num_open > num_closed\n        return true\n    end\n    # If there are the\
    \ same number of open and closed brackets, \n    # it is invalid, so return false\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpirx909ib.jl:50\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpirx909ib.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirx909ib.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpirx909ib.jl:54\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpirx909ib.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirx909ib.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpirx909ib.jl:56\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpirx909ib.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirx909ib.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpirx909ib.jl:57\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpirx909ib.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirx909ib.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpirx909ib.jl:60\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpirx909ib.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    i = 1\
    \ \n    count = 0 \n    while i <= length(string)\n        if count < 0\n    \
    \        return false\n        end\n        if string[i] == '['\n            count\
    \ += 1\n        elseif string[i] == ']'\n            count -= 1\n        end\n\
    \        i += 1\n    end\n    return count != 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkgjczyer.jl:40\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgjczyer.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgjczyer.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkgjczyer.jl:44\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgjczyer.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgjczyer.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkgjczyer.jl:46\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgjczyer.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgjczyer.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkgjczyer.jl:47\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgjczyer.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgjczyer.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkgjczyer.jl:48\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test."
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkgjczyer.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Tracks\
    \ if we have seen a nested bracket\n    has_nested = false\n    # Tracks the number\
    \ of opening brackets we have seen\n    open_count = 0\n    # Tracks the number\
    \ of closing brackets we have seen\n    close_count = 0\n    # Iterate through\
    \ each char\n    for c in string\n        # If we see an opening bracket, increment\
    \ the count\n        if c == '['\n            open_count += 1\n        elseif\
    \ c == ']'\n            # If we see a closing bracket, decrement the count\n \
    \           close_count += 1\n            # If we have seen a nested bracket,\
    \ set flag to true\n            if close_count > open_count\n                has_nested\
    \ = true\n            end\n        end\n    end\n    return open_count == close_count\
    \ && has_nested\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9h_3uoya.jl:47\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9h_3uoya.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9h_3uoya.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp9h_3uoya.jl:51\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9h_3uoya.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9h_3uoya.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp9h_3uoya.jl:53\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9h_3uoya.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9h_3uoya.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp9h_3uoya.jl:56\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9h_3uoya.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9h_3uoya.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp9h_3uoya.jl:57\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9h_3uoya.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    squares\
    \ = 0\n    for i = 1:length(string)\n        if string[i] == '['\n           \
    \ squares += 1\n        elseif string[i] == ']'\n            squares -= 1\n  \
    \      end\n        if squares < 0\n            return false\n        end\n  \
    \  end\n    if squares == 0\n        return false\n    else\n        return true\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm8z3r_1r.jl:42\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8z3r_1r.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8z3r_1r.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpm8z3r_1r.jl:46\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8z3r_1r.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8z3r_1r.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpm8z3r_1r.jl:48\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8z3r_1r.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8z3r_1r.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpm8z3r_1r.jl:49\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8z3r_1r.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8z3r_1r.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpm8z3r_1r.jl:52\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8z3r_1r.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Check\
    \ if the string is empty, if so it's not a nested bracket\n    if isempty(string)\n\
    \        return false\n    end\n    # Grab the first bracket and check if it's\
    \ an opening or closing bracket\n    bracket = string[1]\n    if bracket == \"\
    [\"\n        # Add an opening bracket to the bracket stack\n        push!(bracket_stack,\
    \ bracket)\n    elseif bracket == \"]\"\n        # If the bracket stack is empty,\
    \ there's no opening bracket, so return false\n        if isempty(bracket_stack)\n\
    \            return false\n        else\n            # Pop the latest bracket\
    \ from the stack\n            pop!(bracket_stack)\n        end\n    end\n    #\
    \ Recursively call the function for the rest of the string\n    return is_nested(string[2:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuzo4rej3.jl:46\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzo4rej3.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzo4rej3.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpuzo4rej3.jl:50\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzo4rej3.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzo4rej3.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpuzo4rej3.jl:52\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzo4rej3.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzo4rej3.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpuzo4rej3.jl:55\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzo4rej3.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzo4rej3.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpuzo4rej3.jl:56\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuzo4rej3.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    level\
    \ = 0\n    for char in string\n        level += 1 if char == '[' else -1\n   \
    \     if level < 0\n            return false\n        end\n    end\n    return\
    \ level > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpfp9ubkxw.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfp9ubkxw.jl:22\n\
    in expression starting at /tmp/tmpfp9ubkxw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Create\
    \ a stack to keep track of the opening brackets\n    stack = []\n    # Convert\
    \ the string to an array of characters and iterate over the array\n    for bracket\
    \ in collect(string)\n        # If the current bracket is an opening bracket push\
    \ it onto the stack\n        if bracket == '['\n            push!(stack, bracket)\n\
    \        # If the current bracket is a closing bracket, check the top of the stack\n\
    \        elseif bracket == ']'\n            # If the top of the stack is an opening\
    \ bracket, pop the top of the stack\n            if !isempty(stack) && stack[end]\
    \ == '['\n                pop!(stack)\n            # Otherwise, return false\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    # If the stack is empty at the end of the iteration, return true\n\
    \    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp452w1x8y.jl:48\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp452w1x8y.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp452w1x8y.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp452w1x8y.jl:49\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp452w1x8y.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp452w1x8y.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp452w1x8y.jl:55\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp452w1x8y.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp452w1x8y.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp452w1x8y.jl:57\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp452w1x8y.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp452w1x8y.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp452w1x8y.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    n = length(string)\n\
    \    stack = Dict{String, Int}()\n    for i in 1:n\n        if string[i] == '['\n\
    \            stack[string[i]] = 1\n        else\n            if isempty(stack)\n\
    \                return false\n            else\n                delete!(stack,\
    \ \"[\")\n            end\n        end\n    end\n    return isempty(stack)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplqlhafc9.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:373\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmplqlhafc9.jl:24\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmplqlhafc9.jl:40 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmplqlhafc9.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmplqlhafc9.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Char to an object of type String\\n  Closest candidates are:\\\
    n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:373\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmplqlhafc9.jl:24\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n  for i in\
    \ 1:length(string)\n    if string[i]=='[' && string[i+1]==']'\n      return true\n\
    \    end\n  end\n  return false\nend\n# Check to see if the function works\nprintln(is_nested(\"\
    [[]]\"))\nprintln(is_nested(\"[]]]]]]][[[[[]\"))\nprintln(is_nested(\"[][]\"))\n\
    println(is_nested(\"[]\"))\nprintln(is_nested(\"[[][]]\"))\nprintln(is_nested(\"\
    [[]][[\"))\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntest set: Test Failed at /tmp/tmpualgandr.jl:40\n\
    \  Expression: candidate(\"[]]]]]]][[[[[]\") == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpualgandr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpualgandr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpualgandr.jl:41\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpualgandr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpualgandr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpualgandr.jl:42\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpualgandr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpualgandr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpualgandr.jl:44\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpualgandr.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpualgandr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpualgandr.jl:46\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 6 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpualgandr.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = []\n    for s in string\n        if s == '['\n            push!(stack, s)\n\
    \        elseif s == ']'\n            if isempty(stack) || stack[end] != '['\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6sxbaasl.jl:41\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sxbaasl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sxbaasl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6sxbaasl.jl:42\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sxbaasl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sxbaasl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6sxbaasl.jl:48\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sxbaasl.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sxbaasl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6sxbaasl.jl:50\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6sxbaasl.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6sxbaasl.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6sxbaasl.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack\
    \ = Stack{Char}()\n    for c in string\n        if isempty(stack)\n          \
    \  push!(stack, c)\n        else\n            if c == ']' && peek(stack) == '['\n\
    \                pop!(stack)\n            else\n                push!(stack, c)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpty23bkym.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpty23bkym.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpty23bkym.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpty23bkym.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpty23bkym.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] is_nested(string::String)\n     @ Main /tmp/tmpty23bkym.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpty23bkym.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpty23bkym.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpty23bkym.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpty23bkym.jl:20\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpty23bkym.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpty23bkym.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpty23bkym.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] is_nested(string::String)\n     @ Main /tmp/tmpty23bkym.jl:20\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/st"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpty23bkym.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    chars\
    \ = [c for c in string]\n    stack = []\n    for c in chars\n        if c == '['\n\
    \            push!(stack,c)\n        elseif c == ']' && length(stack) != 0\n \
    \           pop!(stack)\n        elseif c == ']' && length(stack) == 0\n     \
    \       return false\n        end\n    end\n    if length(stack) == 0\n      \
    \  return true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjwz1xagb.jl:44\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwz1xagb.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwz1xagb.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpjwz1xagb.jl:45\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwz1xagb.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwz1xagb.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpjwz1xagb.jl:51\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwz1xagb.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwz1xagb.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpjwz1xagb.jl:53\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwz1xagb.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwz1xagb.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjwz1xagb.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    if occursin('[]',\
    \ string)\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpshrv4bg7.jl:20\nin expression\
    \ starting at /tmp/tmpshrv4bg7.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    # store\
    \ the length of the given string\n    len = length(string)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjt_fk1s8.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjt_fk1s8.jl:1\n\
    in expression starting at /tmp/tmpjt_fk1s8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n    length\
    \ = lastindex(string)\n    return any(string[i] == '[' && string[i+1] == ']' for\
    \ i in 1:length-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptbd3_skj.jl:29\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptbd3_skj.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbd3_skj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptbd3_skj.jl:30\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptbd3_skj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbd3_skj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptbd3_skj.jl:31\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptbd3_skj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbd3_skj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptbd3_skj.jl:33\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptbd3_skj.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbd3_skj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptbd3_skj.jl:35\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptbd3_skj.jl:25\n"
  exit_code: 1
  status: SyntaxError
