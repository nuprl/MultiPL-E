name: HumanEval_133_sum_squares
language: jl
results:
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyl64y11x.jl:44\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpyl64y11x.jl:38\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyl64y11x.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyl64y11x.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpyl64y11x.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpyl64y11x.jl:38\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyl64y11x.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyl64y11x.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for item in lst\n        sum += item*item\n    end\n    sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxbdh54ui.jl:33\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmpxbdh54ui.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxbdh54ui.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxbdh54ui.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxbdh54ui.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpxbdh54ui.jl:23\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxbdh54ui.jl:34 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxbdh54ui.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxbdh54ui.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmpxbdh54ui.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxbdh54ui.jl:37 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxbdh54ui.jl:29\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxbdh54ui.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    num=0\n    for i in lst\n        num+=ceil(i)^2\n    end\n    return num\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    i = 0\n    while i <= length(lst)\n        lst[i] = floor(lst[i])\n  \
    \      i += 1\n    end\n    lst = lst .^ 2\n    return sum(lst)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgia0sh9p.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  BoundsError: attempt to access\
    \ 3-element Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n   \
    \  @ ./array.jl:861 [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n    \
    \ @ Main /tmp/tmpgia0sh9p.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgia0sh9p.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgia0sh9p.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgia0sh9p.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  BoundsError: attempt to access 3-element\
    \ Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpgia0sh9p.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgia0sh9p.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgia0sh9p.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgia0sh9p.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  BoundsError: attempt to access 4-element\
    \ Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpgia0sh9p.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgia0sh9p.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgia0sh9p.jl:31\ntest set:\
    \ Er"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgia0sh9p.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    sum = 0\n    for i in lst\n        sum += i^2\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    for i in lst\n        lst[i] = round(lst[i])\n    end\n    return sum(lst.^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4407wuq7.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  ArgumentError: invalid index:\
    \ 1.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Float64}, i::Float64)\n      @\
    \ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] sum_squares(lst::Vector{Float64})\n\
    \      @ Main /tmp/tmp4407wuq7.jl:20\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp4407wuq7.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp4407wuq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4407wuq7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  ArgumentError: invalid index: 1.0 of type\
    \ Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{Float64}, i::Float64)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] sum_squares(lst::Vector{Float64})\n      @ Main /tmp/tmp4407wuq7.jl:20\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp4407wuq7.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp4407wuq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4407wuq7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  ArgumentError: invalid index: 1.0 of\
    \ type Float64\n  Stacktrace:\n    ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4407wuq7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    # convert each element in vector to the ceiling value\n    lst_ceil =\
    \ ceil.(lst)\n    # sum of the square\n    sum_lst = sum(lst_ceil.^2)\n    return\
    \ sum_lst\nend\nsum_squares([1.0, 2.0, 3.0])\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst1 = Int64[]\n    for a in lst\n        push!(lst1,ceil(a))\n    end\n\
    \    ans = 0\n    for a in lst1\n        ans += a^2\n    end\n    return ans\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum([ceil(x)^2 for x in lst])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    ceiling_lst = ceil.(lst)\n    return int(sum(ceiling_lst.^2))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq_c5dm7f.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpq_c5dm7f.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_c5dm7f.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_c5dm7f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpq_c5dm7f.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpq_c5dm7f.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_c5dm7f.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_c5dm7f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpq_c5dm7f.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpq_c5dm7f.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_c5dm7f.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_c5dm7f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpq_c5dm7f.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1.4, 4.2, 0.0]) == 29\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpq_c5dm7f.jl:20\n\
    \   [2] macro expansion\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_c5dm7f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    newlst = ceil.(lst)\n    sum = 0\n    for i in newlst\n        sum +=\
    \ i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum([x^2 for x in ceil.(lst)])\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    s = 0\n    for i in lst\n        s += Int64(ceil(i))^2\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    x=ceil.(lst)\n    return sum(x.^2)\nend\nprintln(sum_squares([1.0, 2.0,\
    \ 3.0]))\nprintln(sum_squares([1.0, 4.0, 9.0]))\nprintln(sum_squares([1.0, 3.0,\
    \ 5.0, 7.0]))\nprintln(sum_squares([1.4, 4.2, 0.0]))\nprintln(sum_squares([-2.4,\
    \ 1.0, 1.0]))\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "14\n98\n84\n29\n6\nTest Summary: | Pass  Total\ntest set      |   12  \
    \   12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return ceil.(lst).^2 |> sum |> Int64\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        sum += Int64(ceil(i))*Int64(ceil(i))\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst_int = Int64[]\n    for i in lst\n        i = ceil(i)\n        push!(lst_int,\
    \ i)\n    end\n    sum([x^2 for x in lst_int])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    total = 0\n    for i in lst\n        total += ceil(i) ^ 2\n    end\n \
    \   return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
