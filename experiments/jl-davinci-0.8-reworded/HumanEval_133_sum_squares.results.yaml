language: jl
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpyl64y11x.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpyl64y11x.jl:44\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpyl64y11x.jl:38\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyl64y11x.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyl64y11x.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpyl64y11x.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpyl64y11x.jl:38\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyl64y11x.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for item in lst\n        sum += item*item\n    end\n    sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxbdh54ui.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpxbdh54ui.jl:33\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmpxbdh54ui.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxbdh54ui.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxbdh54ui.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxbdh54ui.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpxbdh54ui.jl:23\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxbdh54ui.jl:34 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxbdh54ui.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxbdh54ui.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmpxbdh54ui.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxbdh54ui.jl:37 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxbdh54ui.jl:29\ntest "
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    num=0\n    for i in lst\n        num+=ceil(i)^2\n    end\n    return num\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    i = 0\n    while i <= length(lst)\n        lst[i] = floor(lst[i])\n  \
    \      i += 1\n    end\n    lst = lst .^ 2\n    return sum(lst)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpgia0sh9p.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpgia0sh9p.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  BoundsError: attempt to access\
    \ 3-element Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n   \
    \  @ ./array.jl:861 [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n    \
    \ @ Main /tmp/tmpgia0sh9p.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgia0sh9p.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgia0sh9p.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgia0sh9p.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  BoundsError: attempt to access 3-element\
    \ Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpgia0sh9p.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgia0sh9p.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgia0sh9p.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgia0sh9p.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  BoundsError: attempt to access 4-element\
    \ Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpgia0sh9p.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgia0sh9p.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgia0sh9p.jl:31\ntest set:\
    \ Er"
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    sum = 0\n    for i in lst\n        sum += i^2\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    for i in lst\n        lst[i] = round(lst[i])\n    end\n    return sum(lst.^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp4407wuq7.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp4407wuq7.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  ArgumentError: invalid index:\
    \ 1.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Float64}, i::Float64)\n      @\
    \ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] sum_squares(lst::Vector{Float64})\n\
    \      @ Main /tmp/tmp4407wuq7.jl:20\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp4407wuq7.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp4407wuq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4407wuq7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  ArgumentError: invalid index: 1.0 of type\
    \ Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{Float64}, i::Float64)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] sum_squares(lst::Vector{Float64})\n      @ Main /tmp/tmp4407wuq7.jl:20\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp4407wuq7.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp4407wuq7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp4407wuq7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  ArgumentError: invalid index: 1.0 of\
    \ type Float64\n  Stacktrace:\n    ["
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    # convert each element in vector to the ceiling value\n    lst_ceil =\
    \ ceil.(lst)\n    # sum of the square\n    sum_lst = sum(lst_ceil.^2)\n    return\
    \ sum_lst\nend\nsum_squares([1.0, 2.0, 3.0])\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst1 = Int64[]\n    for a in lst\n        push!(lst1,ceil(a))\n    end\n\
    \    ans = 0\n    for a in lst1\n        ans += a^2\n    end\n    return ans\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum([ceil(x)^2 for x in lst])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    ceiling_lst = ceil.(lst)\n    return int(sum(ceiling_lst.^2))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpq_c5dm7f.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpq_c5dm7f.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpq_c5dm7f.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_c5dm7f.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_c5dm7f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpq_c5dm7f.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpq_c5dm7f.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_c5dm7f.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_c5dm7f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpq_c5dm7f.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpq_c5dm7f.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_c5dm7f.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_c5dm7f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpq_c5dm7f.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1.4, 4.2, 0.0]) == 29\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpq_c5dm7f.jl:20\n\
    \   [2] macro expansion\n   "
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    newlst = ceil.(lst)\n    sum = 0\n    for i in newlst\n        sum +=\
    \ i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum([x^2 for x in ceil.(lst)])\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    s = 0\n    for i in lst\n        s += Int64(ceil(i))^2\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    x=ceil.(lst)\n    return sum(x.^2)\nend\nprintln(sum_squares([1.0, 2.0,\
    \ 3.0]))\nprintln(sum_squares([1.0, 4.0, 9.0]))\nprintln(sum_squares([1.0, 3.0,\
    \ 5.0, 7.0]))\nprintln(sum_squares([1.4, 4.2, 0.0]))\nprintln(sum_squares([-2.4,\
    \ 1.0, 1.0]))\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: '14

    98

    84

    29

    6

    Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return ceil.(lst).^2 |> sum |> Int64\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        sum += Int64(ceil(i))*Int64(ceil(i))\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst_int = Int64[]\n    for i in lst\n        i = ceil(i)\n        push!(lst_int,\
    \ i)\n    end\n    sum([x^2 for x in lst_int])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    total = 0\n    for i in lst\n        total += ceil(i) ^ 2\n    end\n \
    \   return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    sum=0\n    for x in lst\n        sum += x^2\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \n    s=0\n    #@show(lst)\n    for i in lst\n        #@show(i)\n    \
    \    s=s+ceil(i)^2\n    end\n    #@show(s)\n    return s\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    new_list = round.(lst, digits=0)\n    total = 0\n    for i in new_list\n\
    \        total += i^2\n    end\n    return total\nend\n# sum_squares([1.0, 2.0,\
    \ 3.0])\n# sum_squares([1.0, 4.0, 9.0])\n# sum_squares([1.0, 3.0, 5.0, 7.0])\n\
    # sum_squares([1.4, 4.2, 0.0])\n# sum_squares([-2.4, 1.0, 1.0])\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsbyzt988.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpsbyzt988.jl:39\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsbyzt988.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsbyzt988.jl:35\ntest set: Test Failed at /tmp/tmpsbyzt988.jl:43\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbyzt988.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbyzt988.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015352
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n  x = sum(map(ceil, lst)).^2\n  return x\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpceeibwba.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpceeibwba.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 36 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpceeibwba.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpceeibwba.jl:26\ntest set: Test Failed at /tmp/tmpceeibwba.jl:28\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n   Evaluated: 36 == 14\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpceeibwba.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpceeibwba.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpceeibwba.jl:29\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 256 == 84\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpceeibwba.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpceeibwba.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpceeibwba.jl:30\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 49 == 29\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpceeibwba.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpceeibwba.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpceeibwba.jl:31\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n "
  timestamp: 1660015352
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sums = 0\n    lst = map(ceil, lst)\n    for i in lst\n        sums +=\
    \ i^2\n    end\n    return sums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n        sum = 0\n        for i in lst\n            sum += ceil(i)^2\n    \
    \    end\n        return sum\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    temp = Int64[]\n    for i in lst\n        i = ceil(i)\n        i = i*i\n\
    \        push!(temp, i)\n    end\n    return sum(temp)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum([i^2 for i in ceil.(lst)])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum_squares = 0\n    for x in lst\n        sum_squares += ceil(x)^2\n\
    \    end\n    return sum_squares\nend\n        \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    s=0\n    for i in lst\n        s=s+ceil(i)^2\n    end\n    return s\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    s = 0\n    for i in 1:length(lst)\n        s += round(Int64, ceil(lst[i]))^2\n\
    \    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    s = 0\n    for i in lst\n        s += ceil(i)^2\n    end\n    return s\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzjsk1etb.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzjsk1etb.jl:1\n\
    in expression starting at /tmp/tmpzjsk1etb.jl:1\n"
  stdout: ''
  timestamp: 1660015351
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        x = ceil(lst[i])\n       \
    \ sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    s = 0\n    for i in lst\n        s = s + ceil(i)^2\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        x = ceil(i)\n        sum += x^2\n \
    \   end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    summation = 0\n    for i in lst\n        summation += ceil(i)*ceil(i)\n\
    \    end\n    return summation\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    new_lst = Int64[]\n    for i in lst\n        push!(new_lst,ceil(i))\n\
    \    end\n    return sum(new_lst.^2)\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    for i in 1:length(lst)\n        lst[i] = ceil(lst[i])\n    end\n    x\
    \ = 0\n    for i in 1:length(lst)\n        x += lst[i]^2\n    end\n    return\
    \ x\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    # return the sum of squared numbers in the given vector\n    return sum(Int.(ceil.(lst)).^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    x=0\n    for i in 1:length(lst)\n        x = x +\
    \ lst[i]*lst[i]\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: -1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpvh9uudco.jl:37\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpvh9uudco.jl:31\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvh9uudco.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvh9uudco.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpvh9uudco.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpvh9uudco.jl:31\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvh9uudco.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvh9uudco.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpvh9uudco.jl:39\n"
  timestamp: 1660015354
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum([round(lst[i])^2 for i in 1:length(lst)])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3es6mi64.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp3es6mi64.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3es6mi64.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3es6mi64.jl:25\ntest set: Test Failed at /tmp/tmp3es6mi64.jl:33\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3es6mi64.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3es6mi64.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    sum = 0\n    for i = 1:length(lst)\n        sum\
    \ += lst[i]^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return  Int64(sum(map(i->ceil(i)^2, lst)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum([i*i for i in [ceil(x) for x in lst]])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(round.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7d31edqf.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp7d31edqf.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7d31edqf.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7d31edqf.jl:25\ntest set: Test Failed at /tmp/tmp7d31edqf.jl:33\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7d31edqf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7d31edqf.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    for i in 1:length(lst)\n        lst[i] = ceil(lst[i])\n    end\n    return\
    \ sum(lst.^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    number = 0\n    for i in lst\n        number += round(i) ^ 2\n    end\n\
    \    return number\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmo47dt8a.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpmo47dt8a.jl:33\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmo47dt8a.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmo47dt8a.jl:29\ntest set: Test Failed at /tmp/tmpmo47dt8a.jl:37\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmo47dt8a.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmo47dt8a.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015353
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        sum += round(i*i)\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptz2vqhw4.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmptz2vqhw4.jl:33\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptz2vqhw4.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptz2vqhw4.jl:29\ntest set: Test Failed at /tmp/tmptz2vqhw4.jl:34\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptz2vqhw4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptz2vqhw4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptz2vqhw4.jl:37\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptz2vqhw4.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptz2vqhw4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptz2vqhw4.jl:38\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1075 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptz2vqhw4.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptz2vqhw4.jl:29\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     4     12\n"
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for num in lst\n        sum += ceil(num)^2\n    end\n   \
    \ return sum\nend\n \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(round.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7d31edqf.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp7d31edqf.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7d31edqf.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7d31edqf.jl:25\ntest set: Test Failed at /tmp/tmp7d31edqf.jl:33\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7d31edqf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7d31edqf.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \"\"\"My function to return the sum of squared numbers\n        with the\
    \ vector given\n        \"\"\"\n    newlst = map(x -> ceil(x), lst)\n    out =\
    \ sum(i->i^2, newlst)\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        sum += ceil(lst[i])^2\n \
    \   end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        sum += round(Int64, i)^2\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr0fbdv05.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpr0fbdv05.jl:33\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr0fbdv05.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpr0fbdv05.jl:29\ntest set: Test Failed at /tmp/tmpr0fbdv05.jl:37\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0fbdv05.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0fbdv05.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    res = 0\n    for i in lst\n        res += Int64(ceil(i))*Int64(ceil(i))\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    return sum(x^2 for x in lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    temp = ceil.(lst)\n    return Int64(sum(temp.^2))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    #round each element in the vector to the upper int(Ceiling)\n    for i\
    \ in 1:length(lst)\n       lst[i] = ceil(lst[i]) \n    end\n    total = 0 \n \
    \   for i in 1:length(lst)\n        total += lst[i]^2\n    end\n    return total\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    m = map(x -> round(x), lst)\n    m = map(x -> x^2, m)\n    return sum(m)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvom622ta.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpvom622ta.jl:31\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvom622ta.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvom622ta.jl:27\ntest set: Test Failed at /tmp/tmpvom622ta.jl:35\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvom622ta.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvom622ta.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015353
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \n    z = lst .^ 2\n    x = ceil.(z)\n    y = sum(x)\n    #return x\n\
    \    return y\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5ke4j5yk.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp5ke4j5yk.jl:35\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5ke4j5yk.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5ke4j5yk.jl:31\ntest set: Test Failed at /tmp/tmp5ke4j5yk.jl:36\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5ke4j5yk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5ke4j5yk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5ke4j5yk.jl:39\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 64 == 75\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5ke4j5yk.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5ke4j5yk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5ke4j5yk.jl:40\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1078 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5ke4j5yk.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5ke4j5yk.jl:31\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     4     12\n"
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    a=ceil.(lst)\n    b=a.^2\n    return sum(b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \"\"\"Returns sum of all the squared elements in the vector\"\"\"\n  \
    \  total = 0\n    for i in lst\n        total += round(i, RoundUp)^2\n    end\n\
    \    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: -1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(Int64(ceil.(lst)).^2)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpg3lqmley.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: no method matching\
    \ Int64(::Vector{Float64})\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n\
    \    (::Type{T})(!Matched::AbstractChar) where T<:Union{AbstractChar, Number}\
    \ at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpg3lqmley.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg3lqmley.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg3lqmley.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpg3lqmley.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: no method matching Int64(::Vector{Float64})\n\
    \  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar) where T<:Union{Int32,\
    \ Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{AbstractChar, Number} at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n\
    \    (::Type{T})(!Matched::BigInt) where T<:Union{Int128, Int16, Int32, Int64,\
    \ Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n    ...\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpg3lqmley.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg3lqmley.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tm"
  timestamp: 1660015356
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n   # your code here\n   sum = 0 \n   for i in 1:length(lst)\n    a = ceil(lst[i])\n\
    \    sum += a*a\n   end\n   return sum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015351
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    return sum(map(x -> x^2, lst))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst_squared = map(i -> ceil(i)^2, lst)\n    return sum(lst_squared)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(Int64.(ceil.(lst)).^2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \n    \"\"\"\n    >>> sum_squares([1.0, 2.0, 3.0])\n    14\n    >>> sum_squares([1.0,\
    \ 4.0, 9.0])\n    98\n    >>> sum_squares([1.0, 3.0, 5.0, 7.0])\n    84\n    >>>\
    \ sum_squares([1.4, 4.2, 0.0])\n    29\n    >>> sum_squares([-2.4, 1.0, 1.0])\n\
    \    6\n    \"\"\"\n    total = 0\n    for i in lst\n        i = ceil(i)\n   \
    \     total += i^2\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \n   new_lst = map(ceil, lst)\n   \n   return sum(x->x^2, new_lst)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr5pzm43o.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr5pzm43o.jl:1\n\
    in expression starting at /tmp/tmpr5pzm43o.jl:1\n"
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    s=0\n    for i in lst\n        s=s+ceil(i)^2\n    end\n    return s\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \n    lst = ceil.(lst)\n    return sum(lst .^ 2)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(map(x -> round(Int64, ceil(x))^2, lst))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    res = 0.0\n    for i in lst\n        x = Int64(ceil(i))\n        res +=\
    \ x^2\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    results = zeros(Int64, length(lst))\n    for i in 1:length(lst)\n    \
    \    results[i] = ceil(lst[i])^2\n    end\n    return sum(results)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum([Int64(ceil(x))^2 for x in lst])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        sum += ceiling(i)^2\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpdigwjhg9.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpdigwjhg9.jl:30\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: ceiling not\
    \ defined\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpdigwjhg9.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdigwjhg9.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdigwjhg9.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdigwjhg9.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: ceiling not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpdigwjhg9.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdigwjhg9.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdigwjhg9.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdigwjhg9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  UndefVarError: ceiling not defined\n\
    \  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpdigwjhg9.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdigwjhg9.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdigwjhg9.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdigwjhg9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1.4, 4.2, 0.0]) == 29\n  UndefVarError: ceiling not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpdigwjhg9.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/e"
  timestamp: 1660015356
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        sum += ceil(Int64,lst[i])*ceil(Int64,lst[i])\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst2 = ceil.(lst)\n    lst3 = lst2.^2\n    return sum(lst3)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \"\"\"Return the sum of the upper int(Ceiling) of each element of the\n\
    \    vector squared\"\"\"\n    sum = 0\n    for i in lst\n        sum += ceil(i)\
    \ * ceil(i)\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        sum += Int64(ceil(i)^2)\n    end\n\
    \    return sum\nend\nprintln(sum_squares([1.0, 2.0, 3.0]))\nprintln(sum_squares([1.0,\
    \ 4.0, 9.0]))\nprintln(sum_squares([1.0, 3.0, 5.0, 7.0]))\nprintln(sum_squares([1.4,\
    \ 4.2, 0.0]))\nprintln(sum_squares([-2.4, 1.0, 1.0]))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: '14

    98

    84

    29

    6

    Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015352
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    total = 0\n    for x in lst\n        total += x^2\n    end\n    total\
    \ |> Int64\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) ==\
    \ 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3ble9jim.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp3ble9jim.jl:33\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] |>\n   \
    \  @ ./operators.jl:966 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmp3ble9jim.jl:23\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3ble9jim.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3ble9jim.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3ble9jim.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] |>\n     @ ./operators.jl:966\
    \ [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmp3ble9jim.jl:23\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3ble9jim.jl:34 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3ble9jim.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3ble9jim.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] |>\n   \
    \  @ ./operators.jl:966 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmp3ble9jim.jl:23\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3ble9jim.jl:37 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3ble9jim.jl:29\ntest set:\
    \ Error During Test at /tmp"
  timestamp: 1660015356
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum(round.(upper.(lst), RoundInt).^2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpajhdvxsx.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpajhdvxsx.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: upper not defined\n\
    \  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpajhdvxsx.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpajhdvxsx.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpajhdvxsx.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpajhdvxsx.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  UndefVarError: upper not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpajhdvxsx.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpajhdvxsx.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpajhdvxsx.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpajhdvxsx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  UndefVarError: upper not defined\n\
    \  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpajhdvxsx.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpajhdvxsx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpajhdvxsx.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpajhdvxsx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1.4, 4.2, 0.0]) == 29\n  UndefVarError: upper not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpajhdvxsx.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/poly"
  timestamp: 1660015356
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    # Your code goes here!\n    lst_ceil = ceil.(lst)\n    sum = 0.0\n   \
    \ for i in lst_ceil\n        sum += i^2\n    end\n    return round(Int64, sum)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    res = 0\n    for i in lst\n        res += Int64(ceil(i))^2\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015353
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        sum += round(lst[i])^2\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzuevus9e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpzuevus9e.jl:33\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzuevus9e.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzuevus9e.jl:29\ntest set: Test Failed at /tmp/tmpzuevus9e.jl:37\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzuevus9e.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzuevus9e.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015355
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        sum += (round(lst[i])*round(lst[i]))\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr_uhamfx.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpr_uhamfx.jl:33\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr_uhamfx.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpr_uhamfx.jl:29\ntest set: Test Failed at /tmp/tmpr_uhamfx.jl:37\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_uhamfx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_uhamfx.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015355
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \"\"\" \n    >>> lst([1.0, 2.0, 3.0])\n    14\n    >>> lst([1.0, 4.0,\
    \ 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84\n    >>> lst([1.4,\
    \ 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n    6\n    \"\"\"\n    return\
    \ sum([ceil(x)^2 for x in lst])\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4k_vyczs.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4k_vyczs.jl:1\n\
    in expression starting at /tmp/tmp4k_vyczs.jl:1\n"
  stdout: ''
  timestamp: 1660015354
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return round(sum(x -> x^2, lst))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvi6xaaye.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpvi6xaaye.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvi6xaaye.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvi6xaaye.jl:25\ntest set: Test Failed at /tmp/tmpvi6xaaye.jl:30\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvi6xaaye.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvi6xaaye.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvi6xaaye.jl:33\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvi6xaaye.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvi6xaaye.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvi6xaaye.jl:34\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1076 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvi6xaaye.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvi6xaaye.jl:25\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     4     12\n"
  timestamp: 1660015355
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    return sum(lst .^ 2)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    n = length(lst)\n    res = 0\n    for i in 1:n\n        res += (ceil(lst[i])\
    \ * ceil(lst[i]))\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(map(x -> ceil(x)^2, lst))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    n = length(lst)\n    s = 0\n    for i in 1:n\n        s += trunc(ceil(lst[i]))^2\n\
    \    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    s=0\n    for i in lst\n        s+=ceil(i)^2\n    end\n    return s\nend\n\
    sum_squares([-2.4, 1.0, 1.0])\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015353
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n   return sum(round.(Int64,lst).^2) \nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmp88cfee.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpmp88cfee.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmp88cfee.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmp88cfee.jl:25\ntest set: Test Failed at /tmp/tmpmp88cfee.jl:33\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmp88cfee.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmp88cfee.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015355
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sums = 0\n    for i in lst\n        sums += ceil(i)^2\n    end\n    return\
    \ sums\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    acc = 0\n    for elem in lst\n        acc += (ceil(elem))^2\n    end\n\
    \    return acc\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    x = ceil.(lst)\n    sum = 0\n    for i in x\n        sum += i^2\n    end\n\
    \    return sum\nend\nsum_squares([1.0, 3.0, 5.0, 7.0])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015354
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return round(sum(i->(i^2),lst))\n    \nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbnhat91.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbnhat91.jl:1\n\
    in expression starting at /tmp/tmpqbnhat91.jl:1\n"
  stdout: ''
  timestamp: 1660015355
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(round.(UInt64, lst.^2))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_85ono1l.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp_85ono1l.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_85ono1l.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_85ono1l.jl:25\ntest set: Test Failed at /tmp/tmp_85ono1l.jl:30\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_85ono1l.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_85ono1l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_85ono1l.jl:33\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_85ono1l.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_85ono1l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_85ono1l.jl:34\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1075 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_85ono1l.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_85ono1l.jl:25\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     4     12\n"
  timestamp: 1660015356
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum=0\n    lst= ceil.(lst)\n    for i in lst\n        sum += Int64(i*i)\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015354
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(round.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7d31edqf.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp7d31edqf.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7d31edqf.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7d31edqf.jl:25\ntest set: Test Failed at /tmp/tmp7d31edqf.jl:33\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7d31edqf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7d31edqf.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    s = 0\n    for i in lst\n        s = s + ceil(i)^2\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015350
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n  for item in lst\n    return sum([x^2 for x in ceil.(lst)])\n  end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015354
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum_squares = 0\n    for i in 1:length(lst)\n        sum_squares += round(Int64,ceil(lst[i]))^2\n\
    \    end\n    return sum_squares\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015354
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    int_vect = ceil.(lst)\n    s_sum = sum(int_vect.^2)\n    return s_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015354
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    v_ceil = ceil.(lst) #divide each element by the ceiling of lst\n    v_ceil.^2\n\
    \    return sum(v_ceil)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 11 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbp1rlpov.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpbp1rlpov.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 6 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbp1rlpov.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbp1rlpov.jl:27\ntest set: Test Failed at /tmp/tmpbp1rlpov.jl:29\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n   Evaluated: 6 == 14\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp1rlpov.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbp1rlpov.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbp1rlpov.jl:30\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 16 == 84\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp1rlpov.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbp1rlpov.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbp1rlpov.jl:31\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 7 == 29\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp1rlpov.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbp1rlpov.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbp1rlpov.jl:32\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  timestamp: 1660015357
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    ceil_lst = ceil.(lst)\n    sum_lst = sum(ceil_lst)\n    return sum_lst^2\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn2nc6xjj.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpn2nc6xjj.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 36 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn2nc6xjj.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpn2nc6xjj.jl:27\ntest set: Test Failed at /tmp/tmpn2nc6xjj.jl:29\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n   Evaluated: 36 == 14\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2nc6xjj.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2nc6xjj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpn2nc6xjj.jl:30\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 256 == 84\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2nc6xjj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2nc6xjj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpn2nc6xjj.jl:31\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 49 == 29\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2nc6xjj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2nc6xjj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpn2nc6xjj.jl:32\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n "
  timestamp: 1660015357
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    new_lst = round.(lst, digits=Base.ceil)\n    return sum(x^2 for x in new_lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpk4vnqcdy.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpk4vnqcdy.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  TypeError: in keyword argument\
    \ digits, expected Union{Nothing, Integer}, got a value of type typeof(ceil)\n\
    \  Stacktrace:\n    [1] (::Base.Broadcast.var\"#41#42\"{Base.Pairs{Symbol, typeof(ceil),\
    \ Tuple{Symbol}, NamedTuple{(:digits,), Tuple{typeof(ceil)}}}, typeof(round)})(args::Float64)\n\
    \      @ Base.Broadcast ./broadcast.jl:1283\n    [2] _broadcast_getindex_evalf\n\
    \      @ ./broadcast.jl:670 [inlined]\n    [3] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [4] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [5] copy\n\
    \      @ ./broadcast.jl:899 [inlined]\n    [6] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [7] sum_squares(lst::Vector{Float64})\n      @ Main /tmp/tmpk4vnqcdy.jl:19\n\
    \    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpk4vnqcdy.jl:27 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpk4vnqcdy.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpk4vnqcdy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  TypeError: in keyword argument digits, expected\
    \ Union{Nothing, Integer}, got a value of type typeof(ceil)\n  Stacktrace:\n \
    \   [1] (::Base.Broadcast.var\"#41#42\"{Base.Pairs{Symbol, typeof(ceil), Tuple{Symbol},\
    \ NamedTuple{(:digits,), Tuple{typeof(ceil)}}}, typeof(round)})(args::Float64)\n\
    \      @ Base.Broadcast ./broadcast.jl:1283\n    [2] _broadcast_getindex_evalf\n\
    \      @ ./broadcast.jl:670 [inlined]\n    [3] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [4] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [5] copy\n\
    \      @ ./broadcast.jl:899 [inlined]\n    [6] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [7] sum_squares(lst::Vector{Float64})\n      @ Main /tmp/tmpk4vnqcdy.jl:19\n\
    \    [8] macro expansion\n      @ ~/.conda/envs/polyglo"
  timestamp: 1660015358
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    x = ceil.(lst)\n    return sum(x.^2)\nend\n# lst([1.0, 2.0, 3.0])\n# lst([1.0,\
    \ 4.0, 9.0])\n# lst([1.0, 3.0, 5.0, 7.0])\n# lst([1.4, 4.2, 0.0])\n# lst([-2.4,\
    \ 1.0, 1.0])\n \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) ==\
    \ 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \n    x = ceil.(lst)\n    s = 0\n    for i in x\n        s = s + i^2\n\
    \    end\n    return Int64(s)\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015354
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum([ceil(x)^2 for x in lst])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: -1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    #complete the function\n    x = ceil.(lst)\n    return x\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp_zchurl5.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Float64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmp_zchurl5.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_zchurl5.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_zchurl5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_zchurl5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Float64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmp_zchurl5.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_zchurl5.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_zchurl5.jl:27\ntest set:\
    \ Error During Test at /tmp/tm"
  timestamp: 1660015359
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    return sum(lst.^2)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \"\"\"\n        Returns sum of ints in the vector rounded to ceiling and\
    \ squared.\n        \"\"\"\n    return sum(ceil.(x)^2 for x in lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst_int = ceil.(lst)\n    lst_int = Int64.(lst_int)\n    lst_int2 = []\n\
    \    for i in lst_int\n        push!(lst_int2, i^2)\n    end\n    sum(lst_int2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst_ceiling=ceil.(lst)\n    lst_squares = lst_ceiling.^2\n    return sum(lst_squares)\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015355
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    for i in lst\n        lst[i] = Int64(ceil(lst[i]))\n    end\n    return\
    \ sum(i*i for i in lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpm56ba9kh.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpm56ba9kh.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  ArgumentError: invalid index:\
    \ 1.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Float64}, i::Float64)\n      @\
    \ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] sum_squares(lst::Vector{Float64})\n\
    \      @ Main /tmp/tmpm56ba9kh.jl:20\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpm56ba9kh.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpm56ba9kh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm56ba9kh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  ArgumentError: invalid index: 1.0 of type\
    \ Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{Float64}, i::Float64)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] sum_squares(lst::Vector{Float64})\n      @ Main /tmp/tmpm56ba9kh.jl:20\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpm56ba9kh.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpm56ba9kh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm56ba9kh.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  ArgumentError: invalid index: 1.0 of\
    \ type Float64\n  Stacktrace:\n    [1] to_index(i::Float"
  timestamp: 1660015359
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    squared = []\n    for i = 1:length(lst)\n        push!(squared, ceil(lst[i])^2)\n\
    \    end\n    return sum(squared)\nend\nprintln(sum_squares([1.0, 2.0, 3.0]))\n\
    println(sum_squares([1.0, 4.0, 9.0]))\nprintln(sum_squares([1.0, 3.0, 5.0, 7.0]))\n\
    println(sum_squares([1.4, 4.2, 0.0]))\nprintln(sum_squares([-2.4, 1.0, 1.0]))\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: '14

    98

    84

    29

    6

    Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    new_list = ceil.(lst)\n    new_list = new_list.^2\n    return sum(new_list)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015355
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum([round(x^2) for x in lst])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5m_ahqes.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp5m_ahqes.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5m_ahqes.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5m_ahqes.jl:25\ntest set: Test Failed at /tmp/tmp5m_ahqes.jl:30\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5m_ahqes.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5m_ahqes.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5m_ahqes.jl:33\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5m_ahqes.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5m_ahqes.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5m_ahqes.jl:34\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1075 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5m_ahqes.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5m_ahqes.jl:25\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     4     12\n"
  timestamp: 1660015358
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    x = sum(ceil.(lst) .^ 2)\nend\nsum_squares([1.0, 2.0, 3.0])\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return Int64(sum(ceil.(lst).^2))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015355
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(floor.(x^2) for x in lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9yqcncr8.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp9yqcncr8.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 18 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9yqcncr8.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9yqcncr8.jl:25\ntest set: Test Failed at /tmp/tmp9yqcncr8.jl:30\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 7 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9yqcncr8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9yqcncr8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9yqcncr8.jl:33\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 61 == 75\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9yqcncr8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9yqcncr8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9yqcncr8.jl:34\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1074 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9yqcncr8.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9yqcncr8.jl:25\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     4     12\n"
  timestamp: 1660015358
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = lst .^ 2\n    sum = 0\n    for i = 1:length(lst)\n        sum +=\
    \ round(Int64, lst[i])\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnorgj4ly.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpnorgj4ly.jl:34\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnorgj4ly.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnorgj4ly.jl:30\ntest set: Test Failed at /tmp/tmpnorgj4ly.jl:35\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnorgj4ly.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnorgj4ly.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnorgj4ly.jl:38\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnorgj4ly.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnorgj4ly.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnorgj4ly.jl:39\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1075 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnorgj4ly.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnorgj4ly.jl:30\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     4     12\n"
  timestamp: 1660015358
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    ceiled_list = ceil.(lst)\n    return sum(x -> x^2, ceiled_list)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015356
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    x = 0\n    for i in lst\n        x += ceil(i) ^ 2\n    end\n    return\
    \ x\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015356
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    total = 0\n    for i in lst\n        total += ceil(i)^2\n    end\n   \
    \ return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015356
- exit_code: -1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \n    \n    \n    \n    \n    \nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpfg53ix_n.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpfg53ix_n.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfg53ix_n.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfg53ix_n.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpfg53ix_n.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmpfg53ix_n.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfg53ix_n.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfg53ix_n.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpfg53ix_n.jl:33\n"
  timestamp: 1660015360
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    res = 0\n    for element in lst\n        res += ceil(element)^2\n    end\n\
    \    return res\nend\n@test sum_squares([1.0, 2.0, 3.0]) == 14\n@test sum_squares([1.0,\
    \ 4.0, 9.0]) == 98\n@test sum_squares([1.0, 3.0, 5.0, 7.0]) == 84\n@test sum_squares([1.4,\
    \ 4.2, 0.0]) == 29\n@test sum_squares([-2.4, 1.0, 1.0]) == 6\n \nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmp8d2gabl0.jl:25

    in expression starting at /tmp/tmp8d2gabl0.jl:25

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    res = 0\n    for i in lst\n        res += ceil(i)^2\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015356
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(map(x -> round(x)^2, lst))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpam9cps_h.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpam9cps_h.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpam9cps_h.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpam9cps_h.jl:25\ntest set: Test Failed at /tmp/tmpam9cps_h.jl:33\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpam9cps_h.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpam9cps_h.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015358
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(round.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7d31edqf.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp7d31edqf.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7d31edqf.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7d31edqf.jl:25\ntest set: Test Failed at /tmp/tmp7d31edqf.jl:33\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7d31edqf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7d31edqf.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: -1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(round.(ceil, lst) .^ 2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmppa84fah9.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: no method matching\
    \ round(::typeof(ceil), ::Float64)\n  Closest candidates are:\n    round(!Matched::Type{T},\
    \ ::AbstractFloat, !Matched::RoundingMode) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/floatfuncs.jl:123\n\
    \    round(!Matched::Type{T}, ::AbstractFloat) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/float.jl:369\n\
    \    round(!Matched::Type{T}, ::Any) where T>:Missing at ~/.conda/envs/polyglot/share/julia/base/missing.jl:144\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] _getindex (repeats 2 times)\n      @ ./broadcast.jl:666 [inlined]\n \
    \   [4] _broadcast_getindex\n      @ ./broadcast.jl:642 [inlined]\n    [5] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [6] copy\n      @ ./broadcast.jl:899\
    \ [inlined]\n    [7] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [8]\
    \ sum_squares(lst::Vector{Float64})\n      @ Main /tmp/tmppa84fah9.jl:19\n   \
    \ [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmppa84fah9.jl:26 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmppa84fah9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmppa84fah9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: no method matching round(::typeof(ceil),\
    \ ::Float64)\n  Closest candidates are:\n    round(!Matched::Type{T}, ::AbstractFloat,\
    \ !Matched::RoundingMode) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/floatfuncs.jl:123\n\
    \    round(!Matched::Type{T}, ::AbstractFloat) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/float.jl:369\n\
    \    round(!Matched::Type{T}, ::Any) where T>:Missing at ~/.conda/envs/polyglot/share/julia/ba"
  timestamp: 1660015361
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    squared = Float64[]\n    for i in lst\n        i = ceil(i)\n        push!(squared,\
    \ i^2)\n    end\n    return sum(squared)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015356
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    for i in 1:length(lst)\n        lst[i] = round(Int64,ceil(lst[i]))\n \
    \   end\n    sum(i->i^2,lst)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015356
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    int_vec = [ceil(x) for x in lst]\n    return sum(x^2 for x in int_vec)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015356
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return Int64(sum(x^2 for x in ceil.(lst))) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    floor = Array{Int64}(undef, length(lst))\n    for i in eachindex(lst)\n\
    \        floor[i] = ceil(lst[i])\n    end\n    return sum(floor.^2)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    ceiling = round.(lst, digits=0, RoundNearest())\n    sum = 0\n    for\
    \ i in ceiling\n        sum += i^2\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpyg8f4jl9.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpyg8f4jl9.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: objects of type\
    \ RoundingMode{:Nearest} are not callable\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpyg8f4jl9.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyg8f4jl9.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyg8f4jl9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpyg8f4jl9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: objects of type RoundingMode{:Nearest}\
    \ are not callable\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpyg8f4jl9.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyg8f4jl9.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyg8f4jl9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpyg8f4jl9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  MethodError: objects of type RoundingMode{:Nearest}\
    \ are not callable\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpyg8f4jl9.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyg8f4jl9.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyg8f4jl9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpyg8f4jl9.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1.4, 4.2, 0.0]) == 29\n  MethodError: objects of type RoundingMode{:Nearest}\
    \ are not cal"
  timestamp: 1660015361
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return  Int64(sum(ceil.(lst).^2))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    m = ceil.(lst)\n    return sum(round.((m).^2))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \"\"\"\n    This function takes a vector of float64 elements as a parameter\n\
    \    and returns the sum of squared numbers in the given vector,\n    after ceil\
    \ each element in the vector to the upper int\n    \"\"\"\n    v = ceil.(lst)\n\
    \    # To be able to use map() function, it must be a vector of integer \n   \
    \ return Int64(sum(map(x->x^2, v)))\n    # sum(x->x^2, v) is the same as sum(x->x^2,\
    \ v)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    new_lst = ceil.(lst)\n    return sum(x->x^2, new_lst)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    res = 0\n    for i in lst\n        res += trunc(ceil(i))^2\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    # sum_squares = 0\n    # # for i in lst:\n    # #     sum_squares += i*i\n\
    \    # # end\n    # return sum_squares\n    return sum(ceil.(lst).^2)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return round(sum(x -> x*x,map(ceil,lst)))\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    sum(x^2 for x in lst)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    output = 0\n    for num in lst\n        output += ceil(num)^2\n    end\n\
    \    return output\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    a = ceil.(lst)\n    return sum(a.^2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for num in lst\n        sum += ceil(num)^2\n    end\n   \
    \ return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) ==\
    \ 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    for i in eachindex(lst)\n        lst[i] = ceil(lst[i])\n    end\n    sum\
    \ = 0\n    for i in eachindex(lst)\n        sum += lst[i]^2\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    res = 0\n    for i in lst\n        res += ceil(i)^2\n    end\n    return\
    \ res\nend\n    \n \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return ceil.(lst) |> x -> sum(x.^2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n  r = map(x -> ceil(x), lst)\n  return sum(map(x -> x*x, r))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    return lst'*lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return(sum(ceil.(Int64, lst).^2))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015358
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return round(sum(map(s->s^2,lst)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwnbwc9l0.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpwnbwc9l0.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwnbwc9l0.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwnbwc9l0.jl:25\ntest set: Test Failed at /tmp/tmpwnbwc9l0.jl:30\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwnbwc9l0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwnbwc9l0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpwnbwc9l0.jl:33\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwnbwc9l0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwnbwc9l0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpwnbwc9l0.jl:34\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1076 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwnbwc9l0.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwnbwc9l0.jl:25\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     4     12\n"
  timestamp: 1660015360
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    # YOUR CODE HERE\n    raise NotImplementedError()\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcgk58qpm.jl:18 expected\
    \ \"end\", got \"NotImplementedError\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmpcgk58qpm.jl:20\nin expression starting at /tmp/tmpcgk58qpm.jl:20\n"
  stdout: ''
  timestamp: 1660015359
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst2 = lst .- 1\n    lst3 = ceil.(lst2)\n    lst4 = lst3 .^ 2\n    lst5\
    \ = sum(lst4)\n    lst6 = Int64(lst5)\n    return lst6\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 12 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuizdnd_d.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpuizdnd_d.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 5 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuizdnd_d.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuizdnd_d.jl:30\ntest set: Test Failed at /tmp/tmpuizdnd_d.jl:32\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n   Evaluated: 5 == 14\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuizdnd_d.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuizdnd_d.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpuizdnd_d.jl:33\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 56 == 84\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuizdnd_d.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuizdnd_d.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpuizdnd_d.jl:34\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 18 == 29\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuizdnd_d.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuizdnd_d.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpuizdnd_d.jl:35\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 9 == 6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @"
  timestamp: 1660015360
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst_squared = [ceil(x) for x in lst]\n    lst_squared = [x^2 for x in\
    \ lst_squared]\n    return sum(lst_squared)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015359
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n  sum = 0\n  for x in lst\n    sum += ceil(x)^2\n  end\n  return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015358
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    output = 0\n    for x in lst\n        if x > 0\n            output +=\
    \ ceil(x)^2\n        else\n            output += floor(x)^2\n        end\n   \
    \ end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4psmh15l.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp4psmh15l.jl:38\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n   Evaluated: 11 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4psmh15l.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4psmh15l.jl:33\ntest set: Test Failed at /tmp/tmp4psmh15l.jl:41\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 78 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4psmh15l.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4psmh15l.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4psmh15l.jl:42\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1089 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4psmh15l.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4psmh15l.jl:33\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1660015360
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    lst = ceil.(lst)\n    total = 0\n    for i in lst\n        total += i^2\n\
    \    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015358
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for number in lst\n        sum += round(number)^2\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuy7u7yda.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpuy7u7yda.jl:33\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuy7u7yda.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuy7u7yda.jl:29\ntest set: Test Failed at /tmp/tmpuy7u7yda.jl:37\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuy7u7yda.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuy7u7yda.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015360
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \"\"\"SUM_SQUARES(lst::Vector{Float64})::Int64\n    \n    Description:\n\
    \        This function will take a vector of numbers\n        and return the sum\
    \ of the squared numbers in that vector.\n        Before it adds them it will\
    \ round the numbers \n        to the nearest upper integer value.\n    \n    Input\
    \ Parameters:\n        lst::Vector{Float64}\n            A list of numbers to\
    \ square\n            and sum.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5g7ewqi.jl:1\nin expression starting at /tmp/tmpi5g7ewqi.jl:1\n"
  stdout: ''
  timestamp: 1660015360
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum=0\n    for element in lst\n        sum += ceil(element)^2\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015359
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for item in lst\n        sum += ceil(item)^2\n    end\n \
    \   return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015359
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    x = 0\n    y = 0\n    w = 0\n    while x < length(lst)\n        y = ceil(lst[x])\n\
    \        w = w + y^2\n        x = x + 1\n    end\n    return w\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpmvqy1b_v.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpmvqy1b_v.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  BoundsError: attempt to access\
    \ 3-element Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n   \
    \  @ ./array.jl:861 [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n    \
    \ @ Main /tmp/tmpmvqy1b_v.jl:23\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmvqy1b_v.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmvqy1b_v.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmvqy1b_v.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  BoundsError: attempt to access 3-element\
    \ Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpmvqy1b_v.jl:23\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmvqy1b_v.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmvqy1b_v.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmvqy1b_v.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 3.0, 5.0, 7.0]) == 84\n  BoundsError: attempt to access 4-element\
    \ Vector{Float64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpmvqy1b_v.jl:23\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmvqy1b_v.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmvqy1b_v.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmvq"
  timestamp: 1660015362
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n  return sum([round(Int64, i*i) for i in lst])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxxw4yupt.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpxxw4yupt.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxxw4yupt.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxxw4yupt.jl:25\ntest set: Test Failed at /tmp/tmpxxw4yupt.jl:30\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxxw4yupt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxxw4yupt.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxxw4yupt.jl:33\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxxw4yupt.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxxw4yupt.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxxw4yupt.jl:34\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1075 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxxw4yupt.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxxw4yupt.jl:25\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     4     12\n"
  timestamp: 1660015360
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n  println(lst)\n  for i in eachindex(lst)\n    lst[i] = round(lst[i])\n  end\n\
    \  println(lst)\n  sum = 0\n  for i in eachindex(lst)\n    sum += lst[i]^2\n \
    \ end\n  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz8p6j6_2.jl:32

    '
  stdout: "[1.0, 2.0, 3.0]\n[1.0, 2.0, 3.0]\n[1.0, 2.0, 3.0]\n[1.0, 2.0, 3.0]\n[1.0,\
    \ 3.0, 5.0, 7.0]\n[1.0, 3.0, 5.0, 7.0]\n[1.4, 4.2, 0.0]\n[1.0, 4.0, 0.0]\ntest\
    \ set: Test Failed at /tmp/tmpz8p6j6_2.jl:38\n  Expression: candidate([1.4, 4.2,\
    \ 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz8p6j6_2.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpz8p6j6_2.jl:34\n[-2.4, 1.0, 1.0]\n[-2.0, 1.0,\
    \ 1.0]\n[100.0, 1.0, 15.0, 2.0]\n[100.0, 1.0, 15.0, 2.0]\n[10000.0, 10000.0]\n\
    [10000.0, 10000.0]\n[-1.4, 4.6, 6.3]\n[-1.0, 5.0, 6.0]\ntest set: Test Failed\
    \ at /tmp/tmpz8p6j6_2.jl:42\n  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n\
    \   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz8p6j6_2.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz8p6j6_2.jl:34\n[-1.4, 17.9, 18.9,\
    \ 19.9]\n[-1.0, 18.0, 19.0, 20.0]\n[0.0]\n[0.0]\n[-1.0]\n[-1.0]\n[-1.0, 1.0, 0.0]\n\
    [-1.0, 1.0, 0.0]\nTest Summary: | Pass  Fail  Total\ntest set      |   10    \
    \ 2     12\n"
  timestamp: 1660015361
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    n = 0\n    for i in lst\n        n += ceil(i)^2\n    end\n    return n\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015359
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    #Should return sum of squares of upper int(ceiling)ed elements in vector\n\
    \    #assuming Float64 input vector\n    return sum(ceil.(lst).^2)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015359
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(ceil.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    \"\"\"This function takes as an input a vector of numbers and returns\
    \ the sum of squared numbers in the given vector\"\"\"\n    ceiling = ceil.(lst)\n\
    \    lst_squared = ceil.(lst).^2\n    return sum(lst_squared)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015359
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n   \n    # lst_new = collect(round.(lst, digits=0))\n    lst_new = ceil.(lst)\n\
    \    # lst_new = Int64[]\n    # for i in lst\n    #     push!(lst_new,round(i))\n\
    \    # end\n    # println(lst_new)\n    return sum(lst_new.^2)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015359
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    ns = lst |> map(ceil) |> map(x -> x^2)\n    return sum(ns)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpgng5qz02.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpgng5qz02.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: no method matching\
    \ ceil()\n  Closest candidates are:\n    ceil(!Matched::Union{Dates.Day, Dates.Week,\
    \ Dates.TimePeriod}, !Matched::Union{Dates.Day, Dates.Week, Dates.TimePeriod})\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/rounding.jl:184\n\
    \    ceil(!Matched::Union{Dates.Day, Dates.Week, Dates.TimePeriod, Dates.TimeType},\
    \ !Matched::Type{P}) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/rounding.jl:286\n\
    \    ceil(!Matched::Dates.TimeType, !Matched::Dates.Period) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/rounding.jl:156\n\
    \    ...\n  Stacktrace:\n   [1] map(f::typeof(ceil))\n     @ Base ./abstractarray.jl:2965\n\
    \   [2] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpgng5qz02.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgng5qz02.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgng5qz02.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpgng5qz02.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0]) == 14\n  MethodError: no method matching ceil()\n\
    \  Closest candidates are:\n    ceil(!Matched::Union{Dates.Day, Dates.Week, Dates.TimePeriod},\
    \ !Matched::Union{Dates.Day, Dates.Week, Dates.TimePeriod}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/rounding.jl:184\n\
    \    ceil(!Matched::Union{Dates.Day, Dates.Week, Dates.TimePeriod, Dates.TimeType},\
    \ !Matched::Type{P}) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/rounding.jl:286\n\
    \    ceil(!Matched::Dates.TimeType, !Matched::Dates.Period) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/rounding.jl:156\n\
    \    ...\n  Stacktrace:\n   [1] map(f::typeof(ceil))\n     @ Base ./abstractarray.jl:2965\n\
    \   [2] sum_sq"
  timestamp: 1660015363
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(round.(lst).^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7d31edqf.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp7d31edqf.jl:29\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7d31edqf.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7d31edqf.jl:25\ntest set: Test Failed at /tmp/tmp7d31edqf.jl:33\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7d31edqf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7d31edqf.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015353
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return ceil.(sum(ceil.(lst).^2))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015359
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    squares = 0\n    for i in lst\n        x = ceil(i)\n        squares +=\
    \ x*x\n    end\n    return squares\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015359
- exit_code: 0
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    #return sum([ceil(i)^2 for i in lst])  # This is just one line, which\
    \ does the job\n    # We can also use a for loop to do the same in multiple lines,\
    \ which is more readable\n    r = 0\n    for i in lst\n        r += ceil(i)^2\n\
    \    end\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1660015359
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        sum += round(i)^2\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjm3v0p0x.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpjm3v0p0x.jl:33\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjm3v0p0x.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjm3v0p0x.jl:29\ntest set: Test Failed at /tmp/tmpjm3v0p0x.jl:37\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 62 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjm3v0p0x.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjm3v0p0x.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1660015361
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n  totalsq = 0\n  for i in 1:length(lst)\n    totalsq += trunc(Int64,lst[i])*trunc(Int64,lst[i])\n\
    \  end\n  return totalsq\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_4ihbwzi.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp_4ihbwzi.jl:33\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_4ihbwzi.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_4ihbwzi.jl:29\ntest set: Test Failed at /tmp/tmp_4ihbwzi.jl:37\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 53 == 75\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_4ihbwzi.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_4ihbwzi.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_4ihbwzi.jl:38\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 975 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_4ihbwzi.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_4ihbwzi.jl:29\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1660015361
- exit_code: 1
  program: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
    \ of squared numbers in the given vector,\n    round each element in the vector\
    \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
    \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
    \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n\
    \    6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
    \ \n    return sum(lst.^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc_b11dt9.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpc_b11dt9.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmpc_b11dt9.jl:19\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpc_b11dt9.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpc_b11dt9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpc_b11dt9.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-2.4, 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n     @ Main /tmp/tmpc_b11dt9.jl:19\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpc_b11dt9.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpc_b11dt9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpc_b11dt9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-1.4, 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] sum_squares(lst::Vector{Float64})\n  \
    \   @ Main /tmp/tmpc_b11dt9.jl:19\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpc_b11dt9.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpc_b11dt9.jl:25\ntest set:\
    \ Error During Test at /tmp"
  timestamp: 1660015362
