name: HumanEval_108_count_nums
language: jl
prompt: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
  \ and returns\n    the number of elements which has a sum of digits > 0.\n    If\
  \ a number is negative, then its first signed digit will be negative:\n    e.g.\
  \ -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n    >>> count_nums([-1,\
  \ 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
  \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3,\
  \ 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
  \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\
  \t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
completions: ["    cnt = 0\n    for i in arr\n        if sumdigits(i) > 0\n      \
    \      cnt += 1\n        end\n    end\n    return cnt\nend", "    # your code\
    \ here\nend", "    count = 0\n    for i in arr\n        if i >= 0\n          \
    \  count += sum(digits(i))\n        else\n            count += sum(digits(-i))\n\
    \        end\n    end\n    return count\nend", "    n = 0\n    for x in arr\n\
    \        if x == 0\n            continue\n        end\n        if x < 0\n    \
    \        continue\n        end\n        if count_digits(x) > 0\n            n\
    \ += 1\n        end\n    end\n    return n\nend", "    count = 0\n    if isempty(arr)\n\
    \        return 0\n    end\n    for i = 1:length(arr)\n        if sum(digits(abs(arr[i])))\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend",
  "    count = 0\n    for i in arr\n        if i > 0\n            while i > 0\n  \
    \              count += i % 10\n                i = div(i, 10)\n            end\n\
    \        elseif i < 0\n            while i < 0\n                count += i % 10\n\
    \                i = div(i, 10)\n            end\n        end\n    end\n    return\
    \ count\nend", "    total::Int64 = 0\n    for i in arr\n        sum::Int64 = 0\n\
    \        i::Int64 = abs(i)\n        while i > 0\n            sum += i % 10\n \
    \           i = i \xF7 10\n        end\n        if sum > 0\n            total\
    \ += 1\n        end\n    end\n    return total\nend\nprintln(count_nums([-1, 11,\
    \ -11]))\nprintln(count_nums([1, 1, 2]))\nprintln(count_nums([]))", "    n = 0\n\
    \    for i in arr\n        if sum_digits(i) > 0\n            n += 1\n        end\n\
    \    end\n    return n\nend", "    count::Int64 = 0\n    for i in arr\n      \
    \  if num_digits(i) != 0\n            if i > 0\n                count += 1\n \
    \           else\n                if num_digits(i) == 1\n                    count\
    \ += 1\n                else\n                    digits::Vector{Int64} = [digit(i,j)\
    \ for j in 1:num_digits(i)]\n                    if sum(digits) > 0\n        \
    \                count += 1\n                    end\n                end\n  \
    \          end\n        end\n    end\n    return count\nend", "    count = 0\n\
    \    for number in arr\n        sums = abs(number)\n        while sums != 0\n\
    \            sums -= sums % 10\n            sums /= 10\n        end\n        if\
    \ sums > 0\n            count += 1\n        end\n    end\n    return count\nend",
  "    # YOUR CODE HERE\n    count = 0\n    for num in arr\n        if sum_digits(num)\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend",
  "    total = 0\n    for i in arr\n        if(sum(digits(abs(i)))>0)\n          \
    \  total += 1\n        end\n    end\n    return total\nend\nprintln(count_nums([-1,\
    \ 11, -11]))\nprintln(count_nums([1, 1, 2]))\nprintln(count_nums([]))", "    num_count\
    \ = 0\n    for num in arr\n        num_count += (abs(num) < 10) ? 1 : count_digits(num)\n\
    \    end\n    return num_count\nend", "    ans::Int64 = 0\n    for i in arr\n\
    \        if i>0\n            if  sum_digits(i) > 0\n                ans += 1\n\
    \            end\n        elseif i<0\n            if sum_digits(-i) > 0\n    \
    \            ans += 1\n            end\n        end\n    end\n    return ans\n\
    end", "    num_nums = 0\n    for x in arr\n        sum_nums = 0\n        if x\
    \ > 0\n            while x > 0\n                digit = x % 10\n             \
    \   sum_nums += digit\n                x = x \xF7 10\n            end\n      \
    \  else\n            while x < 0\n                digit = x % 10\n           \
    \     sum_nums += digit\n                x = x \xF7 10\n            end\n    \
    \    end\n        if sum_nums > 0\n            num_nums += 1\n        end\n  \
    \  end\n    return num_nums\nend", "    n = 0\n    for i in arr\n        if (i\
    \ < 0)\n            i = -i\n        end\n        n += i % 10\n        i = i //\
    \ 10\n    end\n    return n\nend", "    counter = 0\n    for i in arr\n      \
    \  if sum(map(x -> abs(x), digits(i))) > 0\n            counter += 1\n       \
    \ end\n    end\n    return counter\nend", "    s = 0\n    for i = 1:length(arr)\n\
    \        if arr[i] < 0\n            s += abs(floor(arr[i]/10)) + abs(arr[i]%10)\n\
    \        else\n            s += arr[i]%10 + arr[i]/10\n        end\n    end\n\
    \    return s\nend", "    sum = 0\n    for i in arr\n        abs_sum = abs(sum(digits(i)))\n\
    \        if abs_sum != 0\n            sum += 1\n        end\n    end\n    return\
    \ sum\nend", "    \n    # initialize the counter\n    count = 0\n    \n    # loop\
    \ over all elements of the array\n    for elem in arr\n        \n        # ignore\
    \ 0:s\n        if elem == 0\n            continue\n        end\n        \n   \
    \     # sum the digits\n        s = 0\n        while elem != 0\n            s\
    \ += abs(elem) % 10\n            elem = elem // 10\n        end\n        \n  \
    \      # if the sum of digits is > 0, increment counter\n        if s > 0\n  \
    \          count += 1\n        end\n    end\n    \n    # return the counter\n\
    \    return count\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
