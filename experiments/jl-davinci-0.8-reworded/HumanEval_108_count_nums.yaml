name: HumanEval_108_count_nums
language: jl
prompt: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
  \ and returns\n    the number of elements which has a sum of digits > 0.\n    If\
  \ a number is negative, then its first signed digit will be negative:\n    e.g.\
  \ -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n    >>> count_nums([-1,\
  \ 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
  \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3,\
  \ 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
  \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\
  \t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
completions: ["    cnt = 0\n    for i in arr\n        if sumdigits(i) > 0\n      \
    \      cnt += 1\n        end\n    end\n    return cnt\nend", "    # your code\
    \ here\nend", "    count = 0\n    for i in arr\n        if i >= 0\n          \
    \  count += sum(digits(i))\n        else\n            count += sum(digits(-i))\n\
    \        end\n    end\n    return count\nend", "    n = 0\n    for x in arr\n\
    \        if x == 0\n            continue\n        end\n        if x < 0\n    \
    \        continue\n        end\n        if count_digits(x) > 0\n            n\
    \ += 1\n        end\n    end\n    return n\nend", "    count = 0\n    if isempty(arr)\n\
    \        return 0\n    end\n    for i = 1:length(arr)\n        if sum(digits(abs(arr[i])))\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend",
  "    count = 0\n    for i in arr\n        if i > 0\n            while i > 0\n  \
    \              count += i % 10\n                i = div(i, 10)\n            end\n\
    \        elseif i < 0\n            while i < 0\n                count += i % 10\n\
    \                i = div(i, 10)\n            end\n        end\n    end\n    return\
    \ count\nend", "    total::Int64 = 0\n    for i in arr\n        sum::Int64 = 0\n\
    \        i::Int64 = abs(i)\n        while i > 0\n            sum += i % 10\n \
    \           i = i \xF7 10\n        end\n        if sum > 0\n            total\
    \ += 1\n        end\n    end\n    return total\nend\nprintln(count_nums([-1, 11,\
    \ -11]))\nprintln(count_nums([1, 1, 2]))\nprintln(count_nums([]))", "    n = 0\n\
    \    for i in arr\n        if sum_digits(i) > 0\n            n += 1\n        end\n\
    \    end\n    return n\nend", "    count::Int64 = 0\n    for i in arr\n      \
    \  if num_digits(i) != 0\n            if i > 0\n                count += 1\n \
    \           else\n                if num_digits(i) == 1\n                    count\
    \ += 1\n                else\n                    digits::Vector{Int64} = [digit(i,j)\
    \ for j in 1:num_digits(i)]\n                    if sum(digits) > 0\n        \
    \                count += 1\n                    end\n                end\n  \
    \          end\n        end\n    end\n    return count\nend", "    count = 0\n\
    \    for number in arr\n        sums = abs(number)\n        while sums != 0\n\
    \            sums -= sums % 10\n            sums /= 10\n        end\n        if\
    \ sums > 0\n            count += 1\n        end\n    end\n    return count\nend",
  "    # YOUR CODE HERE\n    count = 0\n    for num in arr\n        if sum_digits(num)\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend",
  "    total = 0\n    for i in arr\n        if(sum(digits(abs(i)))>0)\n          \
    \  total += 1\n        end\n    end\n    return total\nend\nprintln(count_nums([-1,\
    \ 11, -11]))\nprintln(count_nums([1, 1, 2]))\nprintln(count_nums([]))", "    num_count\
    \ = 0\n    for num in arr\n        num_count += (abs(num) < 10) ? 1 : count_digits(num)\n\
    \    end\n    return num_count\nend", "    ans::Int64 = 0\n    for i in arr\n\
    \        if i>0\n            if  sum_digits(i) > 0\n                ans += 1\n\
    \            end\n        elseif i<0\n            if sum_digits(-i) > 0\n    \
    \            ans += 1\n            end\n        end\n    end\n    return ans\n\
    end", "    num_nums = 0\n    for x in arr\n        sum_nums = 0\n        if x\
    \ > 0\n            while x > 0\n                digit = x % 10\n             \
    \   sum_nums += digit\n                x = x \xF7 10\n            end\n      \
    \  else\n            while x < 0\n                digit = x % 10\n           \
    \     sum_nums += digit\n                x = x \xF7 10\n            end\n    \
    \    end\n        if sum_nums > 0\n            num_nums += 1\n        end\n  \
    \  end\n    return num_nums\nend", "    n = 0\n    for i in arr\n        if (i\
    \ < 0)\n            i = -i\n        end\n        n += i % 10\n        i = i //\
    \ 10\n    end\n    return n\nend", "    counter = 0\n    for i in arr\n      \
    \  if sum(map(x -> abs(x), digits(i))) > 0\n            counter += 1\n       \
    \ end\n    end\n    return counter\nend", "    s = 0\n    for i = 1:length(arr)\n\
    \        if arr[i] < 0\n            s += abs(floor(arr[i]/10)) + abs(arr[i]%10)\n\
    \        else\n            s += arr[i]%10 + arr[i]/10\n        end\n    end\n\
    \    return s\nend", "    sum = 0\n    for i in arr\n        abs_sum = abs(sum(digits(i)))\n\
    \        if abs_sum != 0\n            sum += 1\n        end\n    end\n    return\
    \ sum\nend", "    \n    # initialize the counter\n    count = 0\n    \n    # loop\
    \ over all elements of the array\n    for elem in arr\n        \n        # ignore\
    \ 0:s\n        if elem == 0\n            continue\n        end\n        \n   \
    \     # sum the digits\n        s = 0\n        while elem != 0\n            s\
    \ += abs(elem) % 10\n            elem = elem // 10\n        end\n        \n  \
    \      # if the sum of digits is > 0, increment counter\n        if s > 0\n  \
    \          count += 1\n        end\n    end\n    \n    # return the counter\n\
    \    return count\nend", "    count = 0\n    for i = 1:length(arr)\n        x\
    \ = abs(arr[i])\n        sum = 0\n        while x > 0\n            sum += x %\
    \ 10\n            x = floor(x / 10)\n        end\n        if sum > 0\n       \
    \     count += 1\n        end\n    end\n    return count\nend", "    v = [abs(num)\
    \ for num in arr]\n    sum_digits = [sum(digits(num)) for num in v]\n    return\
    \ sum(digit > 0 for digit in sum_digits)\nend", "    t = length(arr)\n    if t\
    \ == 0\n        return 0\n    end\n    # Check if element is negative\n    if\
    \ arr[1] < 0\n        # Make it positive\n        num = -arr[1]\n        # Turn\
    \ it into string\n        s = string(num)\n        # Obtain all digits\n     \
    \   l = length(s)\n        # Calculate the sum of digits\n        sum = 0\n  \
    \      for i = 1:l\n            sum += parse(Int64, s[i])\n        end\n     \
    \   # Move to the next element\n        return count_nums(arr[2:end]) + 1\n  \
    \  else\n        # Move to the next element\n        return count_nums(arr[2:end])\n\
    \    end\nend", "    count = 0\n    for i in arr\n        sum = 0\n        j =\
    \ abs(i)\n        while j > 0\n            sum += j % 10\n            j = j //\
    \ 10\n        end\n        if sum > 0\n            count += 1\n        end\n \
    \   end\n    return count\nend", "    count = 0\n    for n in arr\n        if\
    \ n < 0\n            n = -n\n        end\n        sum = 0\n        while n > 0\n\
    \            sum += n % 10\n            n = div(n, 10)\n        end\n        if\
    \ sum > 0\n            count += 1\n        end\n    end\n    return count\nend",
  "    count = 0\n    for i in arr\n        if i > 0\n            s = sum(digits(i))\n\
    \        else\n            s = sum(digits(-i))\n        end\n        if s > 0\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    #\
    \ local variables\n    count = 0\n    sum_digits = 0\n    # loop through the array\n\
    \    for i in arr\n        if i < 0\n            sum_digits = i - (i % 10)\n \
    \           while (sum_digits != 0)\n                sum_digits += i % 10\n  \
    \              i = i / 10\n            end\n        else\n            sum_digits\
    \ = i - (i % 10)\n            while (sum_digits != 0)\n                sum_digits\
    \ += i % 10\n                i = i / 10\n            end\n        end\n      \
    \  if sum_digits > 0\n            count += 1\n        end\n    end\n    # return\
    \ the counter\n    return count\nend", "    count = 0\n    for i in arr\n    \
    \    sum = 0\n        if i < 0\n            i = -i\n        end\n        while\
    \ i > 0\n            sum += i % 10\n            i = i // 10\n        end\n   \
    \     if sum > 0\n            count += 1\n        end\n    end\n    return count\n\
    end", "  n = 0\n  for i in arr\n    if sum(map(abs,digits(i))) != 0\n      n +=\
    \ 1\n    end\n  end\n  return n\nend", "    counter = 0\n    for x in arr\n  \
    \      if x>0\n            while x>0\n                rem = x%10\n           \
    \     x = x/10\n                counter += rem\n            end\n        else\n\
    \            while x<0\n                rem = -x%10\n                x = x/10\n\
    \                counter += rem\n            end\n        end\n    end\n    return\
    \ counter\nend\n\"\"\"\n    Write a function unique_lengths which takes a vector\
    \ of strings,\n    and returns a vector of the lengths of the unique strings.\n\
    \    >>> unique_lengths([\"a\", \"aa\", \"a\", \"a\", \"a\"])\n    1-element Array{Int64,1}:\n\
    \     1\n    >>> unique_lengths([\"cat\", \"dog\", \"cat\", \"dog\", \"cat\"])\n\
    \    2-element Array{Int64,1}:\n     3\n     3\n    \"\"\"", "    count = 0\n\
    \    for i in arr\n        if i < 0\n            i = i*-1\n        end\n     \
    \   sum = 0\n        while i > 0\n            sum += i%10\n            i = i \xF7\
    \ 10\n        end\n        if sum > 0\n            count += 1\n        end\n \
    \   end\n    return count\nend\nprintln(count_nums([-1, 11, -11]))\nprintln(count_nums([1,\
    \ 1, 2]))\nprintln(count_nums([]))", "    # YOUR CODE HERE\n    count = 0\n  \
    \  for i in arr\n        j = i\n        s = 0\n        if i < 0\n            j\
    \ = -i\n        end\n        while j > 0\n            s += j % 10\n          \
    \  j = div(j, 10)\n        end\n        if s > 0\n            count += 1\n   \
    \     end\n    end\n    return count\nend", "    \"\"\"Count positive-digit sum\
    \ integers\"\"\"\n    sum(1 for x in arr if sumdigits(x) > 0)\nend", "    count\
    \ = 0\n    for i in arr\n        if i < 0\n            count += (sum(map(x ->\
    \ abs(x), digits(i))) > 0)\n        else\n            count += (sum(digits(i))\
    \ > 0)\n        end\n    end\n    return count\nend", "    n = 0\n    for i in\
    \ arr\n        if i > 0\n            if sum_digits(i) > 0\n                n +=\
    \ 1\n            end\n        elseif i < 0\n            if sum_digits(abs(i))\
    \ > 0\n                n += 1\n            end\n        end\n    end\n    return\
    \ n\nend", "    num_sum = 0\n    for i in arr\n        if i < 0\n            i\
    \ = i*-1\n        end\n        digits = digits(i)\n        sum = 0\n        for\
    \ d in digits\n            sum += d\n        end\n        if sum > 0\n       \
    \     num_sum += 1\n        end\n    end\n    return num_sum\nend", "    counter\
    \ = 0\n    for i in arr\n        i = abs(i)\n        s = 0\n        while i !=\
    \ 0\n            j = mod(i, 10)\n            s += j\n            i = div(i, 10)\n\
    \        end\n        if s > 0\n            counter += 1\n        end\n    end\n\
    \    return counter\nend", "    count = 0\n    for i in arr\n        if i == 0\n\
    \            count = count\n        elseif i > 0\n            x = sum(digits(i))\n\
    \            if x > 0\n                count = count + 1\n            end\n  \
    \      else\n            x = i\n            j = -1\n            while x != 0\n\
    \                x = Int64(x / 10)\n                j = j * -1\n            end\n\
    \            x = sum(digits(i * j))\n            if x > 0\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend",
  "    cnt = 0\n    for i in arr\n        sum_digits = 0\n        while i != 0\n \
    \           sum_digits += abs(i%10)\n            i = i - (i%10)\n            i\
    \ = i/10\n        end\n        if sum_digits > 0\n            cnt += 1\n     \
    \   end\n    end\n    return cnt\nend\nprintln(count_nums([-1, 11, -11]))", " \
    \   c = 0\n    for i in arr\n        if sum(digits(abs(i))) > 0\n            c\
    \ += 1\n        end\n    end\n    return c\nend", "    count = 0\n    for x in\
    \ arr\n        sum = 0\n        if x < 0\n            x = -x\n        end\n  \
    \      while x > 0\n            sum += x % 10\n            x = div(x, 10)\n  \
    \      end\n        if sum > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for i in arr\n        if sum(digits(abs(i)))\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend\n \
    \   \n    ", "    s = 0\n    for i in arr\n        count = 0\n        while i\
    \ != 0\n            count += abs(i % 10)\n            i = i//10\n        end\n\
    \        if count > 0\n            s += 1\n        end\n    end\n    return s\n\
    end", "    n = 0\n    for v in arr\n        if v < 0\n            v = -v\n   \
    \     end\n        s = 0\n        while v > 0\n            s += v % 10\n     \
    \       v = div(v, 10)\n        end\n        if s > 0\n            n += 1\n  \
    \      end\n    end\n    return n\nend", "    counter::Int64 = 0\n    for n in\
    \ arr\n        if n > 0\n            digit_sum::Int64 = 0\n            while n\
    \ > 0\n                digit_sum += n % 10\n                n = n \xF7 10\n  \
    \          end\n            if digit_sum > 0\n                counter += 1\n \
    \           end\n        elseif n < 0\n            n = abs(n)\n            digit_sum::Int64\
    \ = 0\n            while n > 0\n                digit_sum += n % 10\n        \
    \        n = n \xF7 10\n            end\n            if digit_sum > 0\n      \
    \          counter += 1\n            end\n        end\n    end\n    return counter\n\
    end", "    sum = 0\n    for x in arr\n        if x < 0\n            if -x < 10\n\
    \                if -x > 0\n                    sum += 1\n                end\n\
    \            else\n                sum += 1\n            end\n        else\n \
    \           if x < 10\n                if x > 0\n                    sum += 1\n\
    \                end\n            else\n                sum += 1\n           \
    \ end\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i in\
    \ arr\n        if i < 0\n            if sum_digits(abs(i)) > 0\n             \
    \   sum += 1\n            end\n        else\n            if sum_digits(i) > 0\n\
    \                sum += 1\n            end\n        end\n    end\n    return sum\n\
    end", "    count = 0\n    for x in arr\n        if x < 0\n            x = -x\n\
    \        end\n        while x != 0\n            count += x % 10\n            x\
    \ = x \xF7 10\n        end\n    end\n    return count\nend\n \n\"\"\"\n    Write\
    \ a function sum_even_squares(n::Int64) which returns the sum of squares of all\n\
    \    even numbers smaller than or equal to n.\n    >>> sum_even_squares(4)\n \
    \   20\n    >>> sum_even_squares(9)\n    120\n    \"\"\"", "    count = 0\n  \
    \  for x in arr\n        if sum([i for i in digits(abs(x))]) != 0\n          \
    \  count += 1\n        end\n    end\n    return count\nend", "    count = 0\n\
    \    for num in arr\n        if sum_digits(num) > 0\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    count = 0\n    for item in\
    \ arr\n        sum = 0\n        for num in string(item)\n            sum += parse(Int64,\
    \ num)\n        end\n        if sum > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    count = 0\n    for elem in arr\n      \
    \  sum_digits = 0\n        abs_elem = abs(elem)\n        while abs_elem > 0\n\
    \            abs_elem, remainder = divrem(abs_elem, 10)\n            sum_digits\
    \ += remainder\n        end\n        if sum_digits > 0\n            count += 1\n\
    \        end\n    end\n    return count\nend\n \n    \"\"\"\n    Write a function\
    \ count_nums_enum which takes a vector of integers and returns\n    the number\
    \ of elements which has a sum of digits > 0.\n    If a number is negative, then\
    \ its first signed digit will be negative:\n    e.g. -123 has signed digits -1,\
    \ 2, and 3.\n    >>> count_nums_enum([])\n    0\n    >>> count_nums_enum([-1,\
    \ 11, -11])\n    1\n    >>> count_nums_enum([1, 1, 2])\n    3\n    \"\"\"", " \
    \   sum = 0\n    for i = 1:length(arr)\n        if arr[i] < 0\n            arr[i]\
    \ = -arr[i]\n        end\n        while arr[i] > 0\n            sum += arr[i]\
    \ % 10\n            arr[i] = arr[i] / 10\n        end\n        if sum > 0\n  \
    \          arr[i] = sum\n        else\n            arr[i] = 0\n        end\n \
    \       sum = 0\n    end\n    cnt = 0\n    for i = 1:length(arr)\n        if arr[i]\
    \ > 0\n            cnt += 1\n        end\n    end\n    return cnt\nend", "   \
    \ count = 0\n    for i in arr\n        if sumdigits(i) > 0\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    count::Int64 = 0\n\
    \    for i in arr\n        if abs(i) > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    count = 0\n    for x in arr\n        if\
    \ sum(map(abs, digits(x))) > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    cnt = 0\n    for i in arr\n        cnt += i != 0\n\
    \    end\n    return cnt\nend", "    count = 0\n    for elt in arr\n        if\
    \ elt > 0\n            if sum(digits(elt)) > 0\n                count += 1\n \
    \           end\n        else\n            if sum(digits(-elt)) > 0\n        \
    \        count += 1\n            end\n        end\n    end\n    return count\n\
    end", "    count = 0\n    for i in arr\n        if i < 0\n            i = -i\n\
    \        end\n        sum = 0\n        while i > 0\n            sum += i % 10\n\
    \            i = i // 10\n        end\n        if sum > 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "  count = 0\n  for i in arr\n\
    \    if i > 0\n      i = i\n    else\n      i = i*-1\n    end\n    digit_sum =\
    \ 0\n    while i != 0\n      digit_sum += i % 10\n      i = i \xF7 10\n    end\n\
    \    if digit_sum > 0\n      count += 1\n    end\n  end\n  return count\nend",
  "    count = 0\n    for i = 1:length(arr)\n        count += sum(digits(abs(arr[i])))\n\
    \    end\n    return count\nend", "    counter = 0\n    for num in arr\n     \
    \   if num >= 0\n            sum_of_num = sum(digits(num))\n        else\n   \
    \         sum_of_num = sum(digits(-num))\n        end\n        if sum_of_num >\
    \ 0\n            counter += 1\n        end\n    end\n    return counter\nend",
  "    count = 0\n    for i in arr\n        if sum(digits(abs(i))) > 0\n         \
    \   count += 1\n        end\n    end\n    return count\nend", "    count = 0\n\
    \    for i in arr\n        if i<0\n            s = collect(string(i))\n      \
    \      s[1] = 0\n            sum = 0\n            for n in s\n               \
    \ sum += parse(Int64, n)\n            end\n            if sum > 0\n          \
    \      count += 1\n            end\n        else\n            s = collect(string(i))\n\
    \            sum = 0\n            for n in s\n                sum += parse(Int64,\
    \ n)\n            end\n            if sum > 0\n                count += 1\n  \
    \          end\n        end\n    end\n    return count\nend", "    cnt = 0\n \
    \   for i in arr\n        if i < 0\n            i = -i\n        end\n        if\
    \ sum(map(x -> Int64(x)-48, collect(digits(i)))) > 0\n            cnt += 1\n \
    \       end\n    end\n    return cnt\nend", "    n = length(arr)\n    count =\
    \ 0\n    for i = 1:n\n        if sum(digits(arr[i])) > 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    n = 0\n    for i in arr\n\
    \        x = i\n        t = 0\n        while x != 0\n            t += x % 10\n\
    \            x = trunc(Int64, x / 10)\n        end\n        if t > 0\n       \
    \     n += 1\n        end\n    end\n    return n\nend", "    count = 0\n    for\
    \ e in arr\n        if e < 0\n            s = abs(e)\n        else\n         \
    \   s = e\n        end\n        digitsum = 0\n        while s > 0\n          \
    \  digitsum += s % 10\n            s = s \xF7 10\n        end\n        if digitsum\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   ctr = 0\n    for n in arr\n        sum_digits = 0\n        if n < 0\n    \
    \        sum_digits += n % 10\n            n = -n\n        end\n        while\
    \ n > 0\n            sum_digits += n % 10\n            n = div(n, 10)\n      \
    \  end\n        if sum_digits > 0\n            ctr += 1\n        end\n    end\n\
    \    return ctr\nend", "    count = 0\n    for i in arr\n        sdig = signed_digits(i)\n\
    \        if sum(sdig) > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    counter = 0\n    for i in arr\n        numsum = 0\n      \
    \  if i < 0\n            i = abs(i)\n            numsum = numsum + i % 10\n  \
    \          i = i / 10\n        end\n        numsum = numsum + (i % 10)\n     \
    \   i = i / 10\n        while i > 0\n            numsum = numsum + (i % 10)\n\
    \            i = i / 10\n        end\n        if numsum > 0\n            counter\
    \ = counter + 1\n        end\n    end\n    return counter\nend", "    count::Int64\
    \ = 0\n    for i = 1:length(arr)\n        sum = 0\n        if (arr[i] >= 0)\n\
    \            for j = 1:length(string(arr[i]))\n                sum += parse(Int64,\
    \ string(arr[i])[j])\n            end\n        else\n            for j = 2:length(string(arr[i]))\n\
    \                sum += parse(Int64, string(arr[i])[j])\n            end\n   \
    \     end\n        if (sum > 0)\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    res = 0\n    for i = 1:length(arr)\n        res\
    \ += sum(map(Int64, digits(abs(arr[i])))) > 0 ? 1 : 0\n    end\n    return res\n\
    end", "    count = 0 \n    for i in arr \n        temp = 0 \n        if i < 0\
    \ \n            i = -i \n        end \n        while i != 0 \n            temp\
    \ += i % 10 \n            i = i / 10 \n        end \n        if temp > 0 \n  \
    \          count += 1 \n        end \n    end \n    return count \nend ", "  \
    \  \"\"\"\n    count the number of elements in arr which has a sum of digits >\
    \ 0\n    if a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n  \
    \  for i = 1:length(arr)\n        if sum(digits(arr[i])) > 0\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    return length(filter(num\
    \ -> sum(abs.(digits(num))) != 0, arr))\nend;\n@testset \"test count_nums\" begin\n\
    \    @test count_nums([]) == 0\n    @test count_nums([-1, 11, -11]) == 1\n   \
    \ @test count_nums([1, 1, 2]) == 3\nend;\n \n \n\"\"\"\n    Write a function which\
    \ takes a vector of numbers as input and returns\n    a vector which only consists\
    \ of numbers which have unique digits.\n    For example, [111, 12, 212, 3] should\
    \ become [12, 3].\n    >>> unique_digits([1, 2, 3])\n    [1, 2, 3]\n    >>> unique_digits([111,\
    \ 12, 212, 3])\n    [12, 3]\n    >>> unique_digits([2, 2, 3, 2, 5, 2, 6, 2, 5,\
    \ 2, 1, 2, 5, 2, 5, 2, 5, 2, 8, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5", "    \n    count = 0\n\
    \    for num in arr\n        if num < 0\n            num *= -1\n        end\n\
    \        if sum(digits(num)) > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for i in arr\n        if i >= 0\n\
    \            count += i % 10\n            i /= 10\n        else\n            count\
    \ += abs(i % 10)\n            i /= 10\n        end\n    end\n    return count\n\
    end", "    count = 0\n    for i in arr\n        sum = 0\n        if i < 0\n  \
    \          i = -i\n        end\n        while i > 0\n            sum += i % 10\n\
    \            i = i//10\n        end\n        if sum > 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    counter = 0\n    for n\
    \ in arr\n        if n<0\n            n=n*-1\n        end\n        n_digit_sum\
    \ = sum(digits(n))\n        if n_digit_sum > 0\n            counter += 1\n   \
    \     end\n    end\n    return counter\nend", "    if arr == []\n        return\
    \ 0\n    end\n    counter = 0\n    for num in arr\n        if sumdigits(num) >\
    \ 0\n            counter += 1\n        end\n    end\n    return counter\nend",
  "    count = 0\n    # your code here\n    return count\nend\n@testset \"Simple tests\"\
    \ begin\n    @test count_nums([]) == 0\n    @test count_nums([-1, 11, -11]) ==\
    \ 1\n    @test count_nums([1, 1, 2]) == 3\nend", "    count = 0\n    for i in\
    \ arr\n        num = i\n        if num < 0\n            num = -num\n        end\n\
    \        sum = 0\n        while num > 0\n            sum += num % 10\n       \
    \     num = num \xF7 10\n        end\n        if sum > 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    n=0\n    for x in arr\n\
    \        sum=0\n        if x<0\n            x=x*-1\n        end\n        while\
    \ x>0\n            sum+=x%10\n            x=floor(x/10)\n        end\n       \
    \ if sum>0\n            n+=1\n        end\n    end\n    return n\nend", "    count\
    \ = 0\n    for i = 1:length(arr)\n        if arr[i] > 0\n            sum = 0\n\
    \            for j = 1:length(string(arr[i]))\n                sum += parse(Int64,\
    \ string(arr[i])[j])\n            end\n            if sum > 0\n              \
    \  count += 1\n            end\n        else\n            sum = 0\n          \
    \  for j = 2:length(string(arr[i]))\n                sum += parse(Int64, string(arr[i])[j])\n\
    \            end\n            if sum > 0\n                count += 1\n       \
    \     end\n        end\n    end\n    return count\nend", "    count = 0\n    for\
    \ i in arr\n        if sum(digits(abs(i))) > 0\n            count += 1\n     \
    \   end\n    end\n    return count\nend", "    count = 0\n    for item in arr\n\
    \        if item < 0\n            item = item * -1\n        end\n        if sum_digits(item)\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   sum(abs.(arr)) > 0 ? length(arr) : 0\nend", "    count = 0\n    for num in\
    \ arr\n        num_sum = 0\n        for d in digits(num)\n            num_sum\
    \ += d\n        end\n        if num_sum > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    count = 0\n    for i in arr\n        if\
    \ sum_digits(i) > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    \n    # Initialize a counter to store the number of elements\
    \ where the sum\n    # of digits is greater than 0\n    sum_counter = 0\n    \n\
    \    # Loop through the array\n    for i in 1:length(arr)\n        # Split the\
    \ number into digits\n        digit_array = digits(arr[i])\n        \n       \
    \ # Check if the number is negative\n        if arr[i] < 0\n            # Negate\
    \ the first digit in the number\n            digit_array[1] = -digit_array[1]\n\
    \        end\n        \n        # Initialize a counter to store the sum of the\
    \ digits\n        digit_sum = 0\n        \n        # Loop through the digit array\n\
    \        for j in 1:length(digit_array)\n            # Add the digit to the sum\n\
    \            digit_sum += digit_array[j]\n        end\n        \n        # Check\
    \ if the sum of the digits is greater than 0\n        if digit_sum > 0\n     \
    \       # Add 1 to the element counter\n            sum_counter += 1\n       \
    \ end\n    end\n    \n    # Return the number of elements where the sum of digits\
    \ is greater than 0\n    return sum_counter\nend", "    cnt = 0\n    for i in\
    \ arr\n        if i < 0\n            if sum(digits(-i)) > 0\n                cnt\
    \ += 1\n            end\n        else\n            if sum(digits(i)) > 0\n   \
    \             cnt += 1\n            end\n        end\n    end\n    return cnt\n\
    end", "    if length(arr) == 0\n        return 0\n    end\n    if (arr[1] > 0)\
    \ && (sum(digits(arr[1])) > 0)\n        return 1 + count_nums(arr[2:end])\n  \
    \  elseif (arr[1] < 0) && (sum(digits(-arr[1])) > 0)\n        return 1 + count_nums(arr[2:end])\n\
    \    else\n        return count_nums(arr[2:end])\n    end\nend", "    # your code\
    \ goes here\nend\n ", "    count = 0\n    for num in arr\n        sum_digits =\
    \ 0\n        while num != 0\n            sum_digits += num % 10\n            num\
    \ = num \xF7 10\n        end\n        if sum_digits > 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\ncount_nums([])", "    count\
    \ = 0\n    for i in arr\n        abs_i = abs(i)\n        if sum(digits(abs_i))\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   sum = 0\n    for i in 1:length(arr)\n        if arr[i] < 0\n            j\
    \ = 1\n            while arr[i] < -10\n                arr[i] = arr[i] / 10\n\
    \                j += 1\n            end\n            sum += j + abs(arr[i])\n\
    \        elseif arr[i] > 0\n            j = 1\n            while arr[i] > 10\n\
    \                arr[i] = arr[i] / 10\n                j += 1\n            end\n\
    \            sum += j + abs(arr[i])\n        end\n    end\n    sum\nend", "  \
    \  counts = 0\n    for i in arr\n        if i > 0 \n            s = sum(digits(i))\n\
    \            if s > 0\n                counts += 1\n            end\n        else\n\
    \            s = sum(digits(-i))\n            if s > 0\n                counts\
    \ += 1\n            end\n        end\n    end\n    return counts\nend", "    num_with_sum_gt_0\
    \ = 0\n    for i in arr\n        first_sign = ifelse(i < 0, -1, 1)\n        rem\
    \ = abs(i)\n        sum_digits = 0\n        while rem > 0\n            sum_digits\
    \ += rem % 10\n            rem = div(rem, 10)\n        end\n        if first_sign\
    \ * sum_digits > 0\n            num_with_sum_gt_0 += 1\n        end\n    end\n\
    \    return num_with_sum_gt_0\nend", "    count = 0\n    for i in arr\n      \
    \  if i < 0\n            i = -i\n        end\n        num_string = string(i)\n\
    \        sum = 0\n        for j in num_string\n            sum += parse(Int64,j)\n\
    \        end\n        if sum > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for x in arr\n        if x < 0\n\
    \            x = -x\n        end\n        sum = 0\n        while x > 0\n     \
    \       sum += x % 10\n            x = x \xF7 10\n        end\n        if sum\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   total = 0 \n    for i in arr \n        if abs(i) < 10 \n            total\
    \ += 1 \n        else \n            temp = 0 \n            while abs(i) > 0 \n\
    \                temp += i % 10 \n                i = trunc(Int64, i / 10)\n \
    \           end \n            if temp > 0 \n                total += 1 \n    \
    \        end \n        end \n    end \n    return total \nend \n \n \n \n\"\"\"\
    \n    Write a function count_nums2 which takes a vector of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums2([])\n    0\n    >>> count_nums2([-1,\
    \ 11, -11])\n    1\n    >>> count_nums2([1, 1, 2])\n    3\n    \"\"\"", "    cnt\
    \ = 0\n    for i in arr\n        sum = 0\n        for j in digits(i)\n       \
    \     sum += j\n        end\n        if sum > 0\n            cnt += 1\n      \
    \  end\n    end\n    return cnt\nend", "    count = 0\n    for i in arr\n    \
    \    if sum(digits(abs(i))) > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend\n    \n    \n\"\"\"\n    Write a function arr_min which\
    \ takes a vector of integers arr and returns\n    a tuple (min_index, min_value)\
    \ where min_index is the index of the smallest\n    element of arr and min_value\
    \ is the smallest element of arr. If arr is empty,\n    then return (-1, 0).\n\
    \    >>> arr_min([1, 2, 3])\n    (1, 1)\n    >>> arr_min([1, 0, 3])\n    (2, 0)\n\
    \    >>> arr_min([])\n    (-1, 0)\n    \"\"\"", "    count = 0\n    for x in arr\n\
    \        if x > 0\n            if sum(digits(x)) > 0\n                count +=\
    \ 1\n            end\n        else\n            if sum(digits(-x)) > 0\n     \
    \           count += 1\n            end\n        end\n    end\n    return count\n\
    end", "    num = 0\n    for x in arr\n        if x < 0\n            x = x * -1\n\
    \        end\n        if x >= 10\n            num += 1\n        end\n    end\n\
    \    return num\nend", "    count = 0\n    for x in arr\n        if (x < 0) &&\
    \ (sum(map(abs, digits(x))) > 0)\n            count += 1\n        elseif sum(digits(x))\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   count = 0\n    for i in arr\n        if i > 0 \n            count += count_digits(i)\n\
    \        else\n            count += count_digits(-i)\n        end\n    end\n \
    \   return count\nend", "    count = 0\n    for i in arr\n        if i < 0\n \
    \           count += abs(i%10)\n        else\n            while i > 0\n      \
    \          count += i%10\n                i = i//10\n            end\n       \
    \ end\n    end\n    return count\nend", "    count = 0\n    for num in arr\n \
    \       if num < 0\n            num = -num\n        end\n        sum_digits =\
    \ 0\n        while num != 0\n            digit = num % 10\n            sum_digits\
    \ += digit\n            num = (num - digit) / 10\n        end\n        if sum_digits\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   res = 0\n    for i in arr\n        a = abs(i)\n        while a > 0\n     \
    \       res += a % 10\n            a = div(a, 10)\n        end\n    end\n    res\n\
    end\ncount_nums([1, 1, 2])", "    nums = 0\n    for x in arr\n        if x < 0\n\
    \            if (x % 10) + (x % 100) > 0\n                nums += 1\n        \
    \    end\n        else\n            if (x % 10) + (x % 100) > 0\n            \
    \    nums += 1\n            end\n        end\n    end\n    return nums\nend",
  "  count = 0\n  for i in arr\n    num_sum = 0\n    if i == 0\n      continue\n \
    \   end\n    if i < 0\n      i = -i\n    end\n    while i > 0\n      num_sum +=\
    \ i % 10\n      i = i \xF7 10\n    end\n    if num_sum > 0\n      count += 1\n\
    \    end\n  end\n  return count\nend", "    nums = length(arr)\n    counter =\
    \ 0\n    for i in 1:nums\n        num = arr[i]\n        if (num > 0) & (sum(digits(num))\
    \ != 0)\n            counter += 1\n        elseif (num < 0) & (sum(digits(-num))\
    \ != 0)\n            counter += 1\n        end\n    end\n    return counter\n\
    end", "    count = 0\n    for n in arr\n        if n < 0\n            sum_digits\
    \ = 0 - n % 10\n            n = -n\n            while n > 0\n                n\
    \ = n / 10\n                sum_digits += n % 10\n            end\n        else\
    \ \n            sum_digits = n % 10\n            while n > 0\n               \
    \ n = n / 10\n                sum_digits += n % 10\n            end\n        end\n\
    \        if sum_digits > 0\n            count += 1\n        end\n    end\n   \
    \ return count\nend", "    ctr = 0\n    for x in arr\n        if digitsum(x) >\
    \ 0\n            ctr += 1\n        end\n    end\n    return ctr\nend", "    count\
    \ = 0\n    for i in arr\n        if i < 0\n            i = -i\n        end\n \
    \       digits = digits_of_num(i)\n        sum_digits = 0\n        for j in digits\n\
    \            sum_digits += j\n        end\n        if sum_digits > 0\n       \
    \     count += 1\n        end\n    end\n    return count\nend", "    n_num::Int64\
    \ = 0\n    for i in arr\n        if (sumdigits(i)>0)\n            n_num += 1\n\
    \        end\n    end\n    return n_num\nend", "    count = 0\n    for i in arr\n\
    \        sum = 0\n        if i < 0\n            i = i * -1\n        end\n    \
    \    while i != 0\n            sum += i % 10\n            i = i / 10\n       \
    \ end\n        if sum > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    \n    count = 0\n    total = 0\n    \n    for i in arr\n \
    \       if i < 0\n            i = i*-1\n        end\n        \n        while i\
    \ > 0\n            total += i%10\n            i = i/10\n        end\n        \n\
    \        if total > 0\n            count += 1\n        end\n        \n       \
    \ total = 0\n    end\n    \n    return count\nend", "    if length(arr) == 0\n\
    \        return 0\n    end\n    if arr[1] >= 0\n        return count_nums(arr[2:end])\
    \ + (Int64(arr[1]/10) + arr[1]%10) > 0\n    else\n        return count_nums(arr[2:end])\
    \ + (Int64(-arr[1]/10) + (-arr[1])%10) > 0\n    end\nend", "    return sum(map(abs,\
    \ x -> sum(digits(x)), arr))\nend", "    total = 0\n    for num in arr\n     \
    \   # if num >= 0\n        #     total += num % 10\n        # else\n        #\
    \     total += abs(num % 10)\n        # end\n        total += abs(num % 10) +\
    \ abs(num % 100 - num % 10) + abs(num % 1000 - num % 100)\n    end\n    return\
    \ total\nend", "    count = 0\n    for el in arr\n        if sum(digits(el)) >\
    \ 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   count = 0\n    for i in arr\n        sum = 0\n        if i < 0\n         \
    \   i = -i\n        end\n        while i > 0\n            sum += i % 10\n    \
    \        i = div(i, 10)\n        end\n        if sum > 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    count = 0\n    for i in\
    \ arr\n        sum = 0\n        while i != 0\n            sum += abs(i % 10)\n\
    \            i /= 10\n        end\n        if sum > 0\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    \n    # initialising counter\n\
    \    count::Int64 = 0\n    \n    # looping through input array and taking the\
    \ signed digits and summing them\n    for i in arr\n        if sum(digits(abs(i)))\
    \ > 0\n            count += 1\n        end\n    end\n    \n    return count\n\
    end", "    # YOUR CODE HERE\n    count = 0\n    for i in arr\n        if i ==\
    \ 0\n            count = count + 1\n        elseif i > 0\n            count =\
    \ count + i > 9 ? 1 : 2\n        else\n            count = count + (-i > 9 ? 1\
    \ : 2)\n        end\n    end\n    return count\nend", "    r = 0\n    if (length(arr)\
    \ == 0) \n        return r\n    end\n    for n in arr\n        dsum = 0\n    \
    \    if (n < 0)\n            dsum = dsum + abs(n % 10)\n            n = abs(n)\n\
    \        end\n        while (n > 0)\n            dsum = dsum + n % 10\n      \
    \      n = div(n, 10)\n        end\n        if (dsum > 0)\n            r = r +\
    \ 1\n        end\n    end\n    return r\nend\n\"\"\"\n    Write a function count_pairs\
    \ which takes a vector of integers and returns\n    the number of unordered pairs\
    \ in the vector which sum up to a multiple of\n    10.\n    >>> count_pairs([])\n\
    \    0\n    >>> count_pairs([1, 11, 11])\n    1\n    >>> count_pairs([1, 1, 20])\n\
    \    2\n    \"\"\"", "    count = 0\n    for num in arr\n        if num >= 0\n\
    \            digits = digits(num)\n        else\n            digits = digits(-num)\n\
    \        end\n        if sum(digits) > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    count = 0\n    for i in arr\n        if\
    \ abs(i) < 10\n            if i < 0\n                if -i > 0\n             \
    \       count += 1\n                end\n            else\n                if\
    \ i > 0\n                    count += 1\n                end\n            end\n\
    \        elseif abs(i) >= 10\n            sum = 0\n            for i in digits(abs(i))\n\
    \                sum += i\n            end\n            if sum > 0\n         \
    \       count += 1\n            end\n        end\n    end\n    return count\n\
    end\n    \n    ", "    x = 0\n    for i in arr\n        x += 1\n        if i <\
    \ 0\n            i = -i\n        end\n        digitsum = 0\n        while i >\
    \ 0\n            digitsum += i % 10\n            i = i \xF7 10\n        end\n\
    \        if digitsum == 0\n            x -= 1\n        end\n    end\n    return\
    \ x\nend", "    return length(find(abs.(arr) .>= 10 & abs.(arr) .< 100))\nend\n\
    @testset \"count_nums_test\" begin\n    @test count_nums([]) == 0\n    @test count_nums([-1,\
    \ 11, -11]) == 1\n    @test count_nums([1, 1, 2]) == 3\nend", "    (sum(abs.(arr))\
    \ > 0) ? length(arr) : 0\nend", "    r\"\"\"\n    A vector of integers is passed\
    \ in, and the number of elements which has a sum of digits > 0 is returned.\n\
    \    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    -Return:\n        [sum_of_digits_in_element]\n\
    \    -Parameters:\n        [arr] -- A vector of integers is passed in.\n    -Examples:\n\
    \        count_nums([]) === 0\n        count_nums([-1, 11, -11]) === 1\n     \
    \   count_nums([1, 1, 2]) === 3\n    \"\"\"\n    sum_of_digits_in_element = 0\n\
    \    for element in arr\n        if element > 0\n            element_as_a_string\
    \ = string(element)\n            array_of_digits = split(element_as_a_string,\
    \ \"\")\n            local_sum_of_digits_in_element = 0\n            for digit\
    \ in array_of_digits\n                local_sum_of_digits_in_element += parse(Int64,\
    \ digit)\n            end\n            if local_sum_of_digits_in_element > 0\n\
    \                sum_of_digits_in_element += 1\n            end\n        elseif\
    \ element < 0\n            local_sum_of_digits_in_element = element\n        \
    \    if local_sum_of_digits_in_element < 0\n                sum_of_digits_in_element\
    \ += 1\n            end\n        end\n    end\n    return sum_of_digits_in_element\n\
    end", "    nums = 0\n    for num in arr\n        if num < 0\n            num =\
    \ -num\n        end\n        while num > 0\n            nums += num % 10\n   \
    \         num = num / 10\n        end\n    end\n    return nums\nend", "    n\
    \ = length(arr)\n    count = 0\n    for i = 1:n\n        x = abs(arr[i])\n   \
    \     while x > 0\n            count += x % 10\n            x = floor(x / 10)\n\
    \        end\n    end\n    return count\nend", "    len = length(arr)\n    count\
    \ = 0\n    for i in 1:len\n        x = arr[i]\n        sm = 0\n        if x <\
    \ 0\n            while x < 0\n                sm += x % 10\n                x\
    \ = x/10\n            end\n        else\n            while x > 0\n           \
    \     sm += x % 10\n                x = x/10\n            end\n        end\n \
    \       if sm > 0\n            count += 1\n        end\n    end\n    return count\n\
    end", "    count = 0\n    for i in arr\n        val = 0\n        if i < 0\n  \
    \          val += -i % 10\n            i = -(i//10)\n        end\n        while\
    \ i > 0\n            val += i % 10\n            i = i//10\n        end\n     \
    \   if val > 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nprintln(count_nums([1, 1, 2]))", "    n = 0\n    for i in arr\n        sum\
    \ = 0\n        if i < 0\n            i = -i\n        end\n        while i > 0\n\
    \            sum += i % 10\n            i = div(i, 10)\n        end\n        if\
    \ sum > 0\n            n += 1\n        end\n    end\n    return n\nend", "   \
    \ count = 0\n    for x in arr\n        sum = 0\n        y = x\n        while y\
    \ != 0\n            sum += abs(y % 10)\n            y = y \xF7 10\n        end\n\
    \        if sum > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    n = length(arr)\n    i = 1\n    count = 0\n    while i <=\
    \ n\n        cur = arr[i]\n        sum = 0\n        if cur < 0\n            cur\
    \ = -cur\n        end\n        while cur > 0\n            sum += cur % 10\n  \
    \          cur = floor(cur / 10)\n        end\n        if sum > 0\n          \
    \  count += 1\n        end\n        i += 1\n    end\n    return count\nend", " \
    \   counter = 0\n    for i in arr\n        sum = 0\n        if i < 0\n       \
    \     sum += -i % 10\n            i /= -10\n        end\n        while i > 0\n\
    \            sum += i % 10\n            i /= 10\n        end\n        if sum >\
    \ 0\n            counter += 1\n        end\n    end\n    return counter\nend\n\
    \"\"\"\n    Write a function count_nums which takes a vector of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n    >>> count_nums([-1,\
    \ 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n    \"\"\"", "    count\
    \ = 0\n    for e in arr\n        if sum(e) > 0\n            count += 1\n     \
    \   end\n    end\n    return count\nend", "    count = 0\n    for i in arr\n \
    \       sum = 0\n        if i < 0\n            i = -i\n        end\n        while\
    \ i > 0\n            sum += i % 10\n            i = div(i, 10)\n        end\n\
    \        if sum > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    cnt = 0 \n    for i in arr \n        if i < 0 \n         \
    \   if -i < 10\n                if -i > 0\n                    cnt += 1\n    \
    \            end\n            else\n                while -i > 0\n           \
    \         if -i < 10\n                        if -i > 0\n                    \
    \        cnt += 1\n                        end\n                        break\n\
    \                    end\n                    -i = div(-i, 10)\n             \
    \   end\n            end\n        else\n            if i < 10\n              \
    \  if i > 0\n                    cnt += 1\n                end\n            else\n\
    \                while i > 0\n                    if i < 10\n                \
    \        if i > 0\n                            cnt += 1\n                    \
    \    end\n                        break\n                    end\n           \
    \         i = div(i, 10)\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend", "    count = 0\n    for i = 1:length(arr)\n  \
    \      if sum_digits(arr[i]) > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for x in arr\n        sum = 0\n \
    \       if x >= 0\n            while x != 0\n                sum += x % 10\n \
    \               x = x \xF7 10\n            end\n        else\n            while\
    \ x != 0\n                sum += x % 10\n                x = x \xF7 10\n     \
    \       end\n        end\n        if sum > 0\n            count += 1\n       \
    \ end\n    end\n    return count\nend", "    num = 0\n    for i = 1:length(arr)\n\
    \        num += (arr[i] < 0 ? -arr[i] : arr[i])\n    end\n    return num\nend",
  "    sum_digits = x -> reduce(+, digits(x))\n    count = 0\n    for i in arr\n \
    \       if sum_digits(i) > 0\n            count += 1\n        end\n    end\n \
    \   return count\nend", "    count = 0\n    for i in arr\n        if sum(digits(abs(i)))\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend\n \
    \   ", "    sum = 0\n    for i in arr\n        if i < 0\n            i = -i\n\
    \        end\n        while i > 0\n            sum += i % 10\n            i =\
    \ i % 10\n        end\n    end\n    return sum\nend", "    count = 0\n    for\
    \ x in arr\n        digit_sum = 0\n        for y in digits(x)\n            digit_sum\
    \ += y\n        end\n        if digit_sum > 0\n            count += 1\n      \
    \  end\n    end\n    return count\nend", "    n = 0\n    for a in arr\n      \
    \  if sum_digits(a) > 0\n            n += 1\n        end\n    end\n    return\
    \ n\nend", "    \nend\n        ", "    cnt = 0\n    for i in arr\n        if i\
    \ == 0\n            continue\n        end\n        s_digits = digits(abs(i))\n\
    \        if sum(s_digits) > 0\n            cnt += 1\n        end\n    end\n  \
    \  return cnt\nend", "  i::Int64 = 0\n  count::Int64 = 0\n  while i <= length(arr)\n\
    \    if signed_sum(arr[i]) > 0\n      count += 1\n    end\n    i += 1\n  end\n\
    \  return count\nend", "    count = 0\n    for i in arr\n        if sum_digits(i)\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   n = 0\n    for i in arr\n        if sum(digits(abs(i))) > 0\n            n\
    \ += 1\n        end\n    end\n    return n\nend", "    num = 0\n    for i in arr\n\
    \        if abs(i) >= 10\n            sum = 0\n            for j in digits(abs(i))\n\
    \                sum += j\n            end\n            if sum > 0\n         \
    \       num += 1\n            end\n        else\n            if i > 0\n      \
    \          num += 1\n            end\n        end\n    end\n    return num\nend\n\
    \ ", "    count = 0\n    for i in arr\n        if sum_digits(i) > 0\n        \
    \    count += 1\n        end\n    end\n    return count\nend", "    count = 0\n\
    \    for i in arr\n        if i < 0\n            i = -i\n        end\n       \
    \ if sum(digits(i)) > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    cnt = 0\n    for i in arr\n        cnt += sum(digits(abs(i)))\
    \ > 0 ? 1 : 0\n    end\n    return cnt\nend", "    return sum(digit_sum.(abs.(arr))\
    \ .> 0)\nend\n\"\"\"\n    Write a function which takes a vector of integers, and\
    \ returns the number\n    of elements whose sum of digits is not equal to 1.\n\
    \    >>> count_sum(1)\n    0\n    >>> count_sum(12)\n    1\n    >>> count_sum(11)\n\
    \    2\n    \"\"\"", "    count = 0\n    for i in arr\n        if sum_digits(i)\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend\n\"\
    \"\"\n    Write a function sum_digits which takes a single integer and returns\n\
    \    the sum of the digits of the integer.\n    If a number is negative, then\
    \ its first signed digit will be negative:\n    e.g. -123 has signed digits -1,\
    \ 2, and 3.\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(-1)\n    -1\n  \
    \  >>> sum_digits(11)\n    2\n    >>> sum_digits(-11)\n    -2\n    >>> sum_digits(123)\n\
    \    6\n    >>> sum_digits(-123)\n    -6\n    \"\"\"", "    # https://docs.julialang.org/en/v1/manual/interfaces/#man-interface-with-c-fortran-1\n\
    \    # will have to be a C function \n    # \n    a = zeros(length(arr))\n   \
    \ for i in 1:length(arr)\n        a[i] = sum(digits(abs(arr[i])))\n    end\n \
    \   n = 0\n    for i in 1:length(a)\n        if a[i] > 0\n            n += 1\n\
    \        end\n    end\n    return n\nend", "    cnt = 0\n    for i in arr\n  \
    \      cnt += if abs(i) < 10 ? 1 : abs(i) // 10 + abs(i) % 10 > 0 ? 1 : 0 end\n\
    \    end\n    return cnt\nend", "    \n    count = 0\n    if length(arr) > 0\n\
    \        for i in arr\n            sum = 0\n            if i > 0\n           \
    \     while i > 0\n                    sum += i % 10\n                    i =\
    \ i // 10\n                end\n            else\n                while i < 0\n\
    \                    sum += i % 10\n                    i = i // 10\n        \
    \        end\n            end\n            if sum > 0\n                count +=\
    \ 1\n            end\n        end\n    end\n    return count\nend", "    cnt =\
    \ 0\n    for i in arr\n        if sum(digits(abs(i))) > 0\n            cnt +=\
    \ 1\n        end\n    end\n    return cnt\nend", "    n = 0\n    for x in arr\n\
    \        a = x\n        s = 0\n        while a != 0\n            s += a % 10\n\
    \            a = div(a, 10)\n        end\n        if s > 0\n            n += 1\n\
    \        end\n    end\n    return n\nend", "    count = 0\n    for i in arr\n\
    \        if abs(i) >= 10\n            abs(i) = string(abs(i))\n            count\
    \ += sum(int(digit) for digit in abs(i))\n        else \n            count +=\
    \ abs(i)\n        end\n    end\n    return count\nend\n    ", "    count = 0\n\
    \    for i in arr\n        if i < 0\n            digits = length(digits(abs(i)))\
    \ + 1\n        else \n            digits = length(digits(i))\n        end\n  \
    \      if sum(digits(i)) > 0\n            count += 1\n        end\n    end\n \
    \   return count\nend\n\"\"\"\n    Find the index of the first non-zero element\
    \ of an array.\n    If the array contains only zeros, return -1.\n    >>> first_nonzero([0,0,0,0,0])\n\
    \    -1\n    >>> first_nonzero([1,2,3,4,5])\n    1\n    >>> first_nonzero([0,1,2,3,4,5])\n\
    \    2\n    \"\"\"", "    count = 0\n    for i in arr\n        if sum(abs.(digits(i)))\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   count = 0\n    for i in arr\n        if i < 0\n            i = -i\n      \
    \  end\n        if i < 10\n            count += 1\n        else\n            s\
    \ = 0\n            while i > 0\n                s += i % 10\n                i\
    \ = i \xF7 10\n            end\n            if s > 0\n                count +=\
    \ 1\n            end\n        end\n    end\n    return count\nend", "    sum =\
    \ 0\n    for i in arr\n        if (i < 0)\n            if (i % 10 > 0)\n     \
    \           sum += 1\n            end\n        else\n            if (i % 10 >\
    \ 0)\n                sum += 1\n            end\n        end\n    end\n    return\
    \ sum\nend", "    total = 0\n    for x in arr\n        if get_digit_sum(x) > 0\n\
    \            total += 1\n        end\n    end\n    return total\nend", "    cnt\
    \ = 0\n    for elem in arr\n        #print(elem)\n        if sumdigits(elem) >\
    \ 0\n            cnt += 1\n        end\n    end\n    return cnt\nend", "    arr\
    \ = map(abs, arr)\n    sum_num = map(sum, map(digits, arr))\n    t = sum_num .>\
    \ 0\n    count = 0\n    for i in t\n        if i == true\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    count = 0\n    for element\
    \ in arr\n        if sum(digits(element)) > 0\n            count += 1\n      \
    \  end\n    end\n    return count\nend\n ", "    ctr = 0\n    for item in arr\n\
    \        ctr += sum_digits(item) > 0 ? 1 : 0\n    end\n    return ctr\nend", " \
    \   count::Int64 = 0\n    for i in arr\n        sum = 0\n        if i < 0\n  \
    \          i = -i\n        end\n        while i > 0\n            sum += i % 10\n\
    \            i = div(i, 10)\n        end\n        if sum > 0\n            count\
    \ += 1\n        end\n    end\n    return count\nend\n ", "    result = 0 \n  \
    \  for i in arr \n        if i >= 0 \n            num_digits = floor(log10(i))\
    \ + 1\n        else \n            num_digits = floor(log10(-i)) + 1\n        end\n\
    \        sum_digits = 0\n        while num_digits > 0 \n            sum_digits\
    \ += i % 10\n            i = i / 10\n            num_digits -= 1\n        end\n\
    \        if sum_digits > 0 \n            result += 1\n        end\n    end\n \
    \   return result\nend\nprintln(count_nums([-1, 11, -11]))\n\"\"\"\n    Write\
    \ a function which takes a vector of integers, and returns a vector of\n    vectors.\
    \ The first vector consists of all elements in the input which have\n    a sum\
    \ of digits > 0, and the second vector consists of all elements\n    which have\
    \ a sum of digits == 0.\n    >>> by_sum_digits([-1, -123, 0, 1, 123, -33])\n \
    \   ([1, 123], [-1, -123, 0, -33])\n    \"\"\"", "    count = 0\n    for i in\
    \ arr\n        x = i\n        sum = 0\n        while x != 0\n            sum +=\
    \ x % 10\n            x = floor(x / 10)\n        end\n        if sum > 0\n   \
    \         count += 1\n        end\n    end\n    return count\nend", "    count\
    \ = 0\n    for i in arr\n        sum = 0\n        if i > 0\n            while\
    \ i != 0\n                sum += i % 10\n                i = i - i % 10\n    \
    \            i = i / 10\n            end\n        else\n            i = -i\n \
    \           while i != 0\n                sum += i % 10\n                i = i\
    \ - i % 10\n                i = i / 10\n            end\n        end\n       \
    \ if sum > 0\n            count += 1\n        end\n    end\n    return count\n\
    end\n# b)\n\"\"\"\n    Write a function count_nums_comp which does the same thing\
    \ as count_nums,\n    but with a comprehension.\n    >>> count_nums_comp([])\n\
    \    0\n    >>> count_nums_comp([-1, 11, -11])\n    1\n    >>> count_nums_comp([1,\
    \ 1, 2])\n    3\n    \"\"\"", "    sum, count = 0, 0\n    for i in arr\n     \
    \   if i < 0 \n            i = -i\n        end\n        sum = sum_digits(i)\n\
    \        if sum > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    count = 0\n    for i in arr\n        s = sum(digits(abs(i)))\n\
    \        if s > 0\n            count += 1\n        end\n    end\n    return count\n\
    end", "    return length(findall(x -> sum(digits(x)) > 0, arr))\nend;\n@testset\
    \ \"count_nums\" begin\n    @test count_nums([]) == 0\n    @test count_nums([-1,\
    \ 11, -11]) == 1\n    @test count_nums([1, 1, 2]) == 3\nend;", "    if length(arr)==0\n\
    \        return 0\n    end\n    if sum(abs.(sign.(arr)))>0\n        return length(arr)\n\
    \    end\n    return 0\nend", "  s = 0\n  for i = 1:length(arr)\n    if (arr[i]\
    \ < 0)\n      arr[i] = -arr[i]\n    end\n    while (arr[i] != 0)\n      s += arr[i]\
    \ % 10\n      arr[i] = arr[i] / 10\n    end\n  end\n  s\nend\ncount_nums([-1,\
    \ 11, -11])\ncount_nums([1, 1, 2])", "    count = 0\n    for i in arr\n      \
    \  sum = 0\n        if i < 0\n            i = -i\n        end\n        while i\
    \ > 0\n            sum += i % 10\n            i = div(i, 10)\n        end\n  \
    \      if sum > 0\n            count += 1\n        end\n    end\n    return count\n\
    end", "    # TODO: your code here\n    count = 0\n    for i in arr\n        if\
    \ i >= 0\n            if sum(digits(i)) > 0\n                count += 1\n    \
    \        end\n        else\n            if sum(digits(-i)) > 0\n             \
    \   count += 1\n            end\n        end\n    end\n    return count\nend",
  "    cnt = 0\n    if length(arr) == 0\n        return cnt\n    end\n    for x in\
    \ arr\n        if x < 0\n            x = -x\n        end\n        cnt += 1\n \
    \       while x > 0\n            cnt -= x % 10 == 0\n            x = div(x, 10)\n\
    \        end\n    end\n    return cnt\nend", "    count = 0\n    for x in arr\n\
    \        if sum(digits(abs(x))) > 0\n            count += 1\n        end\n   \
    \ end\n    return count\nend", "    s = 0\n    for x in arr\n        if sum(abs.(digits(x)))\
    \ > 0\n            s += 1\n        end\n    end\n    return s\nend\ncount_nums([-1,\
    \ 11, -11])", "    count = 0\n    for a in arr\n        x = abs(a)\n        sum\
    \ = 0\n        while x != 0\n            sum += x % 10\n            x = div(x,\
    \ 10)\n        end\n        if sum > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    count = 0\n    for x in arr\n        sum_x\
    \ = 0\n        while x != 0\n            sum_x += x % 10\n            x = x//10\n\
    \        end\n        if sum_x > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for i in arr\n        sum_digits\
    \ = 0\n        while i != 0\n            sum_digits += abs(i % 10)\n         \
    \   i = div(i, 10)\n        end\n        if sum_digits > 0\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    count = 0\n    for\
    \ i in arr\n        if i < 0\n            abs_i = abs(i)\n            if abs_i\
    \ % 10 > 0\n                count += 1\n            end\n        else\n      \
    \      abs_i = i\n            if abs_i % 10 > 0\n                count += 1\n\
    \            end\n        end\n    end\n    return count\nend", "    nums::Int64\
    \ = 0\n    for i in 1:length(arr)\n        sum::Int64 = 0\n        if arr[i] <\
    \ 0\n            arr[i] = arr[i] * -1\n        end\n        while (arr[i] != 0)\n\
    \            sum = sum + (arr[i] % 10)\n            arr[i] = trunc(Int64, arr[i]\
    \ / 10)\n        end\n        if sum > 0\n            nums = nums + 1\n      \
    \  end\n    end\n    return nums\nend", "    count = 0\n    for i in arr\n   \
    \     if i < 0\n            i = i*-1\n        end\n        digits = digits(i)\n\
    \        s = sum(digits)\n        if s > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
