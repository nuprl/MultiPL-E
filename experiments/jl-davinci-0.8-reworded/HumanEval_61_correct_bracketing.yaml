name: HumanEval_61_correct_bracketing
language: jl
prompt: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
  \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
  (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
  (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\
  \nfunction correct_bracketing(brackets::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
  ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
  ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
  ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
  (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\")\
  \ == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
  ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
completions: ["    bracket_counter = 0\n    for i in 1:length(brackets)\n        if\
    \ brackets[i] == '('\n            bracket_counter += 1\n        elseif brackets[i]\
    \ == ')'\n            bracket_counter -= 1\n        end\n        if bracket_counter\
    \ < 0\n            return false\n        end\n    end\n    if bracket_counter\
    \ == 0\n        return true\n    else\n        return false\n    end\nend", " \
    \   if brackets==\"\"\n        return true\n    elseif brackets[1]==\"(\" && brackets[end]==\"\
    )\"\n        return correct_bracketing(brackets[2:end-1])\n    elseif brackets[1]==\"\
    (\" && brackets[end]!=\")\"\n        return false\n    elseif brackets[1]!=\"\
    (\" && brackets[end]==\")\"\n        return false\n    elseif brackets[1]!=\"\
    (\" && brackets[end]!=\")\"\n        return false\n    end\nend", "    count =\
    \ 0\n    for char in brackets\n        if char == '('\n            count += 1\n\
    \        elseif char == ')'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    if count == 0\n   \
    \     return true\n    else\n        return false\n    end\nend", "    counter\
    \ = 0\n    for letter in brackets\n        if letter == '('\n            counter\
    \ += 1\n        elseif letter == ')'\n            counter -= 1\n        end\n\
    \    end\n    return counter == 0\nend", "    num_open = count(p -> p == '(',\
    \ brackets)\n    num_close = count(p -> p == ')', brackets)\n    if num_open ==\
    \ num_close\n        return true\n    else\n        return false\n    end\nend",
  "    open = 0\n    close = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '('\n            open += 1\n        elseif brackets[i] == ')'\n         \
    \   close += 1\n        end\n    end\n    if open == close\n        return true\n\
    \    else\n        return false\n    end\nend", "    stack = Int[]\n    for bracket\
    \ in brackets\n        if bracket == '('\n            push!(stack, 1)\n      \
    \  elseif bracket == ')'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    is_open = (c) -> c=='('\n\
    \    open_n = 0\n    for c in brackets\n        if is_open(c)\n            open_n\
    \ += 1\n        elseif open_n <= 0\n            return false\n        else\n \
    \           open_n -= 1\n        end\n    end\n    return open_n == 0\nend", " \
    \   n_open = 0 \n    for bracket in brackets \n        if bracket == '(' \n  \
    \          n_open += 1 \n        elseif bracket == ')' \n            n_open -=\
    \ 1 \n        end \n        if n_open < 0 \n            return false \n      \
    \  end \n    end \n    if n_open != 0 \n        return false \n    end \n    return\
    \ true \nend", "    \"\"\"\n    Brackets is a string of \"(\" and \")\".\n   \
    \ return true if every opening bracket has a corresponding closing bracket.\n\
    \    \"\"\"\n    \n    stack = []\n    for bracket in brackets\n        if bracket\
    \ == '('\n            push!(stack, bracket)\n        elseif bracket == ')'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "     n = length(brackets)\n     i = 1\n     stack = []\n\
    \     while i <= n\n        if brackets[i] == '('\n            push!(stack, brackets[i])\n\
    \        elseif brackets[i] == ')'\n            if isempty(stack)\n          \
    \      return false\n            else\n                pop!(stack)\n         \
    \   end\n        end\n        i += 1\n     end\n     if isempty(stack)\n     \
    \   return true\n     else\n        return false\n     end\nend", "    lparen\
    \ = 0\n    rparen = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '('\n            lparen += 1\n        elseif brackets[i] == ')'\n       \
    \     rparen += 1\n        end\n    end\n    if lparen == rparen\n        return\
    \ true\n    else\n        return false\n    end\nend", "    counter = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            counter += 1\n        elseif\
    \ i == \")\"\n            counter -= 1\n        end\n        if counter < 0\n\
    \            return false\n        end\n    end\n    return counter == 0 ? true\
    \ : false\nend", "    if length(brackets)==0\n        return true\n    elseif\
    \ brackets[1]=='('\n        if search(brackets,\")\")==0\n            return false\n\
    \        else\n            return correct_bracketing(brackets[2:end])\n      \
    \  end\n    else\n        return false\n    end\nend", "    count_open, count_close\
    \ = 0, 0\n    for i in brackets\n        if i == '('\n            count_open +=\
    \ 1\n        elseif i == ')'\n            count_close += 1\n        end\n    end\n\
    \    if count_open == count_close\n        return true\n    else\n        return\
    \ false\n    end\nend", "    open_parens = 0\n    for c in brackets\n        if\
    \ c == '('\n            open_parens += 1\n        elseif c == ')'\n          \
    \  open_parens -= 1\n        end\n        if open_parens < 0\n            return\
    \ false\n        end\n    end\n    return open_parens == 0\nend", "    len = length(brackets)\n\
    \    if len == 0 \n        return true\n    end\n    if len % 2 != 0\n       \
    \ return false\n    end\n    if brackets[1] == \")\"\n        return false\n \
    \   end\n    open = 0\n    closed = 0\n    for i in 1:len\n        if brackets[i]\
    \ == \"(\"\n            open += 1\n        elseif brackets[i] == \")\"\n     \
    \       closed += 1\n        end\n        if closed > open\n            return\
    \ false\n        end\n    end\n    if open == closed\n        return true\n  \
    \  else\n        return false\n    end\nend", "    # Your code here\n    stack\
    \ = Array{Char,1}()\n    for i = 1:length(brackets)\n        push!(stack, brackets[i])\n\
    \        if stack[end] == ')'\n            pop!(stack)\n            if stack[end]\
    \ != '('\n                return false\n            end\n            pop!(stack)\n\
    \        end\n    end\n    if length(stack) != 0\n        return false\n    end\n\
    \    return true\nend", "    open_bracket_count = 0\n    for bracket in brackets\n\
    \        if bracket == '('\n            open_bracket_count += 1\n        elseif\
    \ bracket == ')'\n            open_bracket_count -= 1\n        end\n    end\n\
    \    return open_bracket_count == 0\nend", "    depth = 0\n    for b in brackets\n\
    \        if b == '('\n            depth += 1\n        elseif b == ')'\n      \
    \      depth -= 1\n        end\n        if depth < 0\n            return false\n\
    \        end\n    end\n    return depth == 0\nend", "    open_brackets = 0\n \
    \   for letter in brackets\n        if letter == '('\n            open_brackets\
    \ += 1\n        elseif letter == ')'\n            open_brackets -= 1\n       \
    \ end\n        if open_brackets < 0\n            return false\n        end\n \
    \   end\n    if open_brackets != 0\n        return false\n    end\n    return\
    \ true\nend", "    open_count = 0\n    for x in brackets\n        if x == '('\n\
    \            open_count += 1\n        elseif x == ')'\n            open_count\
    \ -= 1\n        end\n    end\n    return open_count == 0\nend", "    for b in\
    \ brackets\n        count = 0\n        if b == \"(\"\n            count += 1\n\
    \        elseif b == \")\"\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end\nprintln(correct_bracketing(\"(()\"))\nprintln(correct_bracketing(\"(())\"\
    ))", '    """Returns true if every opening bracket has a corresponding closing
    bracket.', "    while bracket_at(brackets, 1) == \"(\"\n        brackets = popfirst!(brackets)\n\
    \    end\n    while bracket_at(brackets, length(brackets)) == \")\"\n        brackets\
    \ = poplast!(brackets)\n    end\n    if (length(brackets) == 0)\n        return\
    \ true\n    else\n        return false\n    end\nend", "    s = Stack()\n    for\
    \ c in brackets\n        if c == '('\n            push!(s, c)\n        else\n\
    \            if isempty(s)\n                return false\n            else\n \
    \               pop!(s)\n            end\n        end\n    end\n    return isempty(s)\n\
    end", "    open_brackets = 0\n    for char in brackets\n        if char == '('\n\
    \            open_brackets += 1\n        elseif char == ')'\n            open_bracket\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    \n    #opening\
    \ brackets will be added to this\n    open_brackets = Int[]\n    \n    #loop through\
    \ each letter in brackets\n    for bracket in brackets\n        \n        #if\
    \ it is an opening bracket add it to open_brackets\n        if bracket == '('\n\
    \            push!(open_brackets, 1)\n        #else we have a closing bracket.\
    \ If the list is empty it means there are more closing brackets than opening brackets\n\
    \        else\n            if isempty(open_brackets)\n                return false\n\
    \            else\n                #there is an opening bracket so remove from\
    \ the list of open brackets\n                pop!(open_brackets)\n           \
    \ end\n        end\n    end\n    \n    #if the list is not empty then we have\
    \ more opening brackets than closing brackets\n    return open_brackets == Int[]\n\
    \    \nend", "    if (count(brackets, '(') != count(brackets, ')'))\n        return\
    \ false\n    end\n    bracket_count = 0\n    for char in brackets\n        if\
    \ (char == '(')\n            bracket_count += 1\n        elseif (char == ')')\n\
    \            bracket_count -= 1\n        end\n        if (bracket_count < 0)\n\
    \            return false\n        end\n    end\n    return true\nend", "    open_bracket_count::Int\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_bracket_count\
    \ += 1\n        elseif c == ')'\n            open_bracket_count -= 1\n       \
    \ end\n        if open_bracket_count < 0\n            return false\n        end\n\
    \    end\n    return open_bracket_count == 0\nend", "    num_open = sum(brackets\
    \ .== '(')\n    num_close = sum(brackets .== ')')\n    last_open = lastindex(brackets)\
    \ == '('\n    return num_open == num_close && !last_open\nend", "    brackets[1]\
    \ == \"(\" && brackets[end] == \")\" && (length(brackets) % 2 == 0) ? true : false\n\
    end", "    if brackets == \"\"\n        return true\n    elseif brackets[1] ==\
    \ \")\"\n        return false\n    elseif brackets[end] == \"(\"\n        return\
    \ false\n    else\n        return correct_bracketing(brackets[2:end-1])\n    end\n\
    end", "  bracket_stack = []\n  for bracket in brackets\n    if bracket == '('\n\
    \      push!(bracket_stack, bracket)\n    elseif bracket == ')'\n      pop!(bracket_stack)\n\
    \    end\n  end\n  return isempty(bracket_stack)\nend", "    o = 0\n    for c\
    \ in brackets\n        o += (c == '(') ? 1 : -1\n        if o < 0\n          \
    \  return false\n        end\n    end\n    return o == 0\nend", "    open_brackets\
    \ = 0\n    for ch in brackets\n        if ch == '('\n            open_brackets\
    \ += 1\n        elseif ch == ')'\n            open_bracket -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    num_left, num_right = 0, 0\n    for\
    \ char in brackets\n        if char == '('\n            num_left += 1\n      \
    \  elseif char == ')'\n            num_right += 1\n        end\n    end\n    num_left\
    \ == num_right\nend", "    bracket_count = 0\n    for char in brackets\n     \
    \   if char == '('\n            bracket_count += 1\n        elseif char == ')'\n\
    \            bracket_count -= 1\n        end\n    end\n    bracket_count == 0\n\
    end", "    depth::Int = 0\n    for bracket in brackets\n        if bracket ==\
    \ '('\n            depth += 1\n        elseif bracket == ')'\n            depth\
    \ -= 1\n        end\n        if depth < 0\n            return false\n        end\n\
    \    end\n    if depth == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    num_open, num_close = 0, 0\n    for c in brackets\n     \
    \   if c == '('\n            num_open += 1\n        elseif c == ')'\n        \
    \    num_close += 1\n        end\n    end\n    num_open == num_close\nend", " \
    \   #\"\"\"\n    #\"\"\"\n    open_brackets = 0\n    for b in brackets\n     \
    \   if b == '('\n            open_brackets += 1\n        elseif b == ')'\n   \
    \         open_brackets -= 1\n        end\n        if open_brackets < 0\n    \
    \        return false\n        end\n    end\n    return open_brackets == 0\nend\n\
    correct_bracketing(\"(((\")", "    open_brackets = []\n    for i in brackets\n\
    \        if i == '('\n            push!(open_brackets, i)\n        elseif i ==\
    \ ')'\n            if length(open_brackets) == 0\n                return false\n\
    \            else\n                pop!(open_brackets)\n            end\n    \
    \    end\n    end\n    if length(open_brackets) == 0\n        return true\n  \
    \  else\n        return false\n    end\nend", "    L = brackets\n    count = 0\n\
    \    for i in 1:length(L)\n        if L[i] == '('\n            count += 1\n  \
    \      else\n            count -= 1\n        end\n        if count < 0\n     \
    \       return false\n        end\n    end\n    return count == 0\nend", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \nend", "    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n    end\n    return open_brackets == 0\nend", "    count\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n      \
    \      count += 1\n        elseif brackets[i] == ')'\n            count -= 1\n\
    \        end\n    end\n    return count == 0\nend", "    opn_brckt = 0\n    for\
    \ ch in brackets\n        if ch == '('\n            opn_brckt += 1\n        elseif\
    \ ch == ')'\n            opn_brckt -= 1\n        end\n        if opn_brckt < 0\n\
    \            return false\n        end\n    end\n    if opn_brckt == 0\n     \
    \   return true\n    else\n        return false\n    end\nend", "    open = 0\n\
    \    for c in brackets\n        if c == '('\n            open += 1\n        elseif\
    \ c == ')'\n            open -= 1\n        end\n        if open < 0\n        \
    \    return false\n        end\n    end\n    return open == 0\nend", "    s =\
    \ Stack{Char}()\n    for ch in brackets\n        if ch == '('\n            push!(s,\
    \ ch)\n        elseif ch == ')'\n            if isempty(s)\n                return\
    \ false\n            else\n                pop!(s)\n            end\n        end\n\
    \    end\n    isempty(s)\nend", "    if contains(brackets, \")\")\n        brackets\
    \ = replace(brackets, \")\", \"\")\n    end\n    if contains(brackets, \"(\")\n\
    \        brackets = replace(brackets, \"(\", \"\")\n    end\n    if brackets ==\
    \ \"\"\n        return true\n    else\n        return false\n    end\nend", " \
    \   # initialize variables\n    left_bracket = 0\n    right_bracket = 0\n    #\
    \ go through each character\n    for i in brackets\n        # when there is a\
    \ left bracket, add 1 to variable left_bracket\n        if i == \"(\"\n      \
    \      left_bracket += 1\n        # when there is a right bracket, add 1 to variable\
    \ right_bracket\n        elseif i == \")\"\n            right_bracket += 1\n \
    \       end\n    end\n    # if the value of left_bracket is equal to that of right_bracket,\
    \ return true\n    if left_bracket == right_bracket\n        return true\n   \
    \ # if not, return false\n    else\n        return false\n    end\nend", "   \
    \ n = length(brackets)\n    if n % 2 != 0\n        return false\n    end\n   \
    \ for i in 1:n\n        if brackets[i] == \"(\"\n            for j in i+1:n\n\
    \                if brackets[j] == \")\"\n                    return true\n  \
    \              end\n            end\n            return false\n        end\n \
    \   end\n    return true\nend", "    is_open = (c::Char) -> c == '('\n    open_brackets\
    \ = count(is_open, brackets)\n    close_brackets = length(brackets) - open_brackets\n\
    \    return open_brackets == close_brackets\nend", "    counter = 0\n    for i\
    \ in 1:length(brackets)\n        if brackets[i] == '('\n            counter +=\
    \ 1\n        elseif brackets[i] == ')'\n            counter -= 1\n        end\n\
    \        if counter < 0\n            return false\n        end\n    end\n    return\
    \ counter == 0\nend", "    num_open = 0\n    for b in brackets\n        if b ==\
    \ '('\n            num_open += 1\n        elseif b == ')'\n            num_open\
    \ -= 1\n        end\n        if num_open < 0\n            return false\n     \
    \   end\n    end\n    return num_open == 0\nend", "    open_brackets = 0\n   \
    \ for i in 1:length(brackets)\n        if brackets[i] == '('\n            open_brackets\
    \ += 1\n        elseif brackets[i] == ')'\n            open_brackets -= 1\n  \
    \      end\n    end\n    return open_brackets == 0\nend", "    \n    open::Int\
    \ = 0\n    close::Int = 0\n    \n    for b in brackets\n        if b == '('\n\
    \            open += 1\n        elseif b == ')'\n            close += 1\n    \
    \    end\n        if close > open\n            return false\n        end\n   \
    \ end\n    return open == close\nend", "    counter = 0\n    for bracket in brackets\n\
    \        if bracket == '('\n            counter += 1\n        elseif bracket ==\
    \ ')'\n            counter -= 1\n        end\n        if counter < 0\n       \
    \     return false\n        end\n    end\n    return counter == 0\nend", "   \
    \ # use a count to check if we have matched \"(\"s and \")\"s\n    count = 0\n\
    \    for bracket in brackets\n        if bracket == \"(\"\n            count +=\
    \ 1\n        elseif bracket == \")\"\n            count -= 1\n        end\n  \
    \      if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend", "    num_open_paren = 0\n    num_close_paren = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            num_open_paren += 1\n    \
    \    elseif i == \")\"\n            num_close_paren += 1\n        end\n    end\n\
    \    return num_open_paren == num_close_paren\nend", "    brack_count = 0\n  \
    \  for i in 1:length(brackets)\n        if (brackets[i] == '(')\n            brack_count\
    \ += 1\n        elseif (brackets[i] == ')')\n            brack_count -= 1\n  \
    \      end\n        if (brack_count < 0)\n            return false\n        end\n\
    \    end\n    if (brack_count == 0)\n        return true\n    else\n        return\
    \ false\n    end\nend", "   \n    if brackets == \"(\" || brackets == \")\"\n\
    \        return false\n    end\n    \n    bracket_number = (count(x -> x == '(',\
    \ brackets) - count(x -> x == ')', brackets))\n    \n    if bracket_number !=\
    \ 0\n        return false\n    end\n    \n    return true\nend", "    left=0\n\
    \    for x in brackets\n        if x==\"(\"\n            left+=1\n        elseif\
    \ x==\")\"\n            left-=1\n        end\n        if left<0\n            return\
    \ false\n        end\n    end\n    return left==0\nend", "    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            bracket_count\
    \ += 1\n        elseif bracket == ')'\n            bracket_count -= 1\n      \
    \  end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend", "    \"\"\" correct_bracketing\
    \ is a function which takes a string of ( and ).\n    It returns true if every\
    \ opening bracket has a corresponding closing bracket. \"\"\"\n    last_state\
    \ = 0 \n    for char in brackets \n        if char == '('\n            last_state\
    \ += 1\n        elseif char == ')'\n            last_state -= 1\n        end\n\
    \        if last_state < 0\n            return false\n        end\n    end\n \
    \   if last_state == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    s = []\n    for char in brackets\n        if char == '('\n\
    \            push!(s, char)\n        elseif char == ')'\n            if isempty(s)\
    \ \n                return false\n            else \n                pop!(s)\n\
    \            end\n        end\n    end\n    return isempty(s)\nend", "    count\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            count\
    \ += 1\n        elseif bracket == ')'\n            count -= 1\n        end\n \
    \   end\n    return count == 0\nend", "    stack = []\n    for c in brackets\n\
    \        if c == '('\n            push!(stack, c)\n        else\n            if\
    \ length(stack) == 0\n                return false\n            else\n       \
    \         pop!(stack)\n            end\n        end\n    end\n    if length(stack)\
    \ == 0\n        return true\n    else\n        return false\n    end\nend", " \
    \   return brackets==\"\" || (brackets[1]==\"(\" && correct_bracketing(brackets[2:end])\
    \ && brackets[end]==\")\")\nend\n#Test\ncorrect_bracketing(\"(\") #false\ncorrect_bracketing(\"\
    ()\") #true\ncorrect_bracketing(\"(()())\") #true\ncorrect_bracketing(\")(()\"\
    ) #false", "    n_l = count(x -> x == '(', brackets)\n    n_r = count(x -> x ==\
    \ ')', brackets)\n    return n_l == n_r\nend", "    num_open = 0\n    for bracket\
    \ in brackets\n        if bracket == '('\n            num_open += 1\n        elseif\
    \ bracket == ')'\n            num_open -= 1\n        end\n    end\n    num_open\
    \ == 0\nend", "    open_brackets = 0\n    closed_brackets = 0\n    for i in brackets\n\
    \        if i == \"(\"\n            open_brackets += 1\n        elseif i == \"\
    )\"\n            closed_brackets += 1\n        end\n    end\n    if open_brackets\
    \ == closed_brackets\n        return true\n    else\n        return false\n  \
    \  end\nend", "    \n    count_open = 0\n    count_close = 0\n    \n    for c\
    \ in brackets\n        if c == '('\n            count_open += 1\n        elseif\
    \ c == ')'\n            count_close += 1\n        end\n    end\n    \n    return\
    \ count_open == count_close\nend", "    open_brackets = 0\n    for ch in brackets\n\
    \        if ch == '('\n            open_brackets += 1\n        elseif ch == ')'\n\
    \            open_bracket -= 1\n        end\n        if open_brackets < 0\n  \
    \          return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "   \n    if length(brackets)==0\n        return true\n    end", "    n_open\
    \ = 0\n    for c in brackets\n        if c == '('\n            n_open += 1\n \
    \       elseif c == ')'\n            n_open -= 1\n        end\n        if n_open\
    \ < 0\n            return false\n        end\n    end\n    if n_open == 0\n  \
    \      return true\n    else\n        return false\n    end\nend", "    s = Stack(length(brackets))\n\
    \    for c in brackets\n        if c == '('\n            push!(s, c)\n       \
    \ else\n            try\n                pop!(s)\n            catch\n        \
    \        return false\n            end\n        end\n    end\n    return isempty(s)\n\
    end", "    count = 0\n    for bracket in brackets\n        if bracket == '('\n\
    \            count += 1\n        elseif bracket == ')'\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \  end\n    return count == 0\nend", "    open_bracket_count = 0\n    for bracket\
    \ in brackets\n        if bracket == '('\n            open_bracket_count += 1\n\
    \        elseif bracket == ')'\n            open_bracket_count -= 1\n        end\n\
    \        if open_bracket_count < 0\n            return false\n        end\n  \
    \  end\n    return open_bracket_count == 0\nend", "  count_opening = 0\n  count_closing\
    \ = 0\n \n  for i in 1:length(brackets)\n    if brackets[i] == '('\n        count_opening\
    \ += 1\n    elseif brackets[i] == ')'\n        count_closing += 1\n    end\n \
    \ end", "    n = 1\n    while n <= length(brackets)\n        if brackets[n] ==\
    \ '('\n            brackets = brackets[1:n-1] * brackets[n+1:end]\n          \
    \  n = 1\n        elseif brackets[n] == ')'\n            brackets = brackets[1:n-1]\
    \ * brackets[n+1:end]\n            n = 1\n        else\n            n += 1\n \
    \       end\n    end\n    return length(brackets) == 0\nend", "    n = 0\n   \
    \ for b in brackets\n        if b == '('\n            n += 1\n        elseif b\
    \ == ')'\n            n -= 1\n        end\n        if n < 0\n            return\
    \ false\n        end\n    end\n    return n == 0\nend", "    count_brackets =\
    \ 0\n    for i in brackets\n        if i == \"(\"\n            count_brackets\
    \ += 1\n        elseif i == \")\"\n            count_brackets -= 1\n        end\n\
    \    end\n    return count_brackets == 0\nend", "    stack = []\n    for i = 1:length(brackets)\n\
    \        if brackets[i] == '('\n            push!(stack, '(')\n        elseif\
    \ brackets[i] == ')'\n            if stack == []\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    if stack == []\n        return true\n    else\n        return false\n\
    \    end\nend", "    if any(ch -> ch == ')' && brackets[1] == ')', brackets) \n\
    \        return false\n    end \n    N = length(brackets)\n    bracket = 0\n \
    \   for i in 1:N\n        if brackets[i] == '(' \n            bracket += 1\n \
    \       elseif brackets[i] == ')'\n            bracket -= 1\n        end\n   \
    \     if bracket < 0\n            return false\n        end\n    end\n    return\
    \ bracket == 0\nend", "    \"\"\"\n    numberOfLeftBrackets = 0\n    for char\
    \ in brackets:\n        if char == \"(\":\n            numberOfLeftBrackets +=\
    \ 1\n        else:\n            if numberOfLeftBrackets == 0:\n              \
    \  return false\n            else:\n                numberOfLeftBrackets -= 1\n\
    \    return numberOfLeftBrackets == 0\nend", "    #Only open brackets will be\
    \ on the stack.\n    #When we see a closing bracket, pop off the last open bracket\
    \ from the stack\n    stack = []\n    for c in brackets\n        if c == '('\n\
    \            push!(stack, c)\n        elseif c == ')'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    #Stack should be empty if bracketing\
    \ is correct.\n    return isempty(stack)\nend", "    # think about the case of\
    \ a single bracket. what should happen? \n    length_brackets = length(brackets)\n\
    \    if length_brackets == 1 \n        return false\n    end\n    bracket_indices\
    \ = findall(x -> x == \"(\" || x == \")\", brackets)\n    if length(bracket_indices)\
    \ == 0\n        return true\n    end\n    pair_indices = []\n    for x in bracket_indices\n\
    \        for y in bracket_indices\n            if y > x && brackets[x] == \"(\"\
    \ && brackets[y] == \")\"\n                push!(pair_indices, [x, y])\n     \
    \           break\n            end\n        end\n    end\n    if isempty(pair_indices)\n\
    \        return false\n    end\n    # print(pair_indices)\n    # exit()\n    if\
    \ pair_indices[end][2] == length_brackets && pair_indices[1][1] == 1\n       \
    \ return true\n    end\n    if pair_indices[end][2] == length_brackets || pair_indices[1][1]\
    \ == 1\n        return false\n    end\n    pairs_sorted = sort(pair_indices, by\
    \ = x -> x[1])\n    # print(pairs_sorted)\n    # exit()\n    length_pairs = length(pairs_sorted)\n\
    \    for i in 1:length_pairs-1\n        if pairs_sorted[i][2] > pairs_sorted[i+1][1]\n\
    \            return false\n        end\n    end\n    return true\nend", "  if\
    \ brackets == \"(\" || brackets == \")\"\n    return false\n  end\n  i = 0\n \
    \ for n in brackets\n    if n == \"(\"\n      i += 1\n    else\n      i -= 1\n\
    \    end\n    if i < 0\n      return false\n    end\n  end\n  return i == 0\n\
    end", "    leftcount=0\n    rightcount=0\n    for i in 1:length(brackets)\n  \
    \      if brackets[i]==\"(\"\n            leftcount+=1\n        elseif brackets[i]==\"\
    )\"\n            rightcount+=1\n        end\n    end\n    if leftcount==rightcount\n\
    \        return true\n    else\n        return false\n    end\nend\n    \n   \
    \ \n   ", "    opening_brackets = \"(\"\n    closing_brackets = \")\"\n    num_opening_brackets\
    \ = count(char -> char in opening_brackets, brackets)\n    num_closing_brackets\
    \ = count(char -> char in closing_brackets, brackets)\n    if num_opening_brackets\
    \ != num_closing_brackets\n        return false\n    end\n    return brackets[1]\
    \ != closing_brackets\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '('\n            open_brackets += 1\n        elseif bracket\
    \ == ')'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    close_paren = 0\n    open_paren = 0\n    for i in brackets\n\
    \        if i == \"(\"\n            open_paren += 1\n        elseif i == \")\"\
    \n            close_paren += 1\n        end\n    end\n    return open_paren ==\
    \ close_paren\nend", "    n = length(brackets)\n    opened = 0\n    closed = 0\n\
    \    for i in 1:n\n        if brackets[i] == '('\n            opened += 1\n  \
    \      elseif brackets[i] == ')'\n            closed += 1\n        end\n    end\n\
    \    opened == closed\nend", "    bracket_count = 0\n    for bracket in brackets\n\
    \        if bracket == '('\n            bracket_count += 1\n        elseif bracket\
    \ == ')'\n            bracket_count -= 1\n        end\n        if bracket_count\
    \ < 0\n            return false\n        end\n    end\n    if bracket_count ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend\n    \n\
    print(correct_bracketing(\"(()\"))\nprint(correct_bracketing(\"(()())\"))", " \
    \   count = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n\
    \            count += 1\n        elseif brackets[i] == ')'\n            count\
    \ -= 1\n        end\n    end\n    if count == 0\n        return true\n    else\n\
    \        return false\n    end\nend", "    count = 0\n    for b in brackets\n\
    \        if b == '('\n            count += 1\n        elseif b == ')'\n      \
    \      count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    n = length(brackets)\n\
    \    stack = Array{Int64,1}()\n    for i in 1:n\n        if brackets[i] == '('\n\
    \            push!(stack, i)\n        elseif brackets[i] == ')'\n            if\
    \ !isempty(stack)\n                pop!(stack)\n            else\n           \
    \     return false\n            end\n        end\n    end\n    return isempty(stack)\n\
    end\n    \n    ", "    l = Array{Char}(brackets)\n    count = 0\n    for i in\
    \ l\n        if i == '('\n            count += 1\n        elseif i == ')'\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    bracket_counter = 0 \n\
    \    for char in brackets\n        if char == '('\n            bracket_counter\
    \ += 1\n        elseif char == ')'\n            bracket_counter -= 1\n       \
    \ end\n        if bracket_counter < 0\n            return false\n        end\n\
    \    end\n    return bracket_counter == 0\nend", "    counter = 0\n    for char\
    \ in brackets\n        if char == '('\n            counter += 1\n        elseif\
    \ char == ')'\n            counter -= 1\n        end\n        if counter < 0\n\
    \            return false\n        end\n    end\n    return counter == 0\nend",
  "    # variable to keep track of how many brackets we've opened\n    bracket_count\
    \ = 0\n    # loop through all characters in brackets\n    for i in 1:length(brackets)\n\
    \        # if we see an opening bracket, increment bracket_count\n        if brackets[i]\
    \ == '('\n            bracket_count += 1\n        # if we see a closing bracket,\
    \ decrement bracket_count\n        elseif brackets[i] == ')'\n            bracket_count\
    \ -= 1\n        # if we see something else, this isn't a string of brackets!\n\
    \        else\n            return false\n        end\n        # if the bracket_count\
    \ is negative, we have a closing bracket with no corresponding opening bracket\n\
    \        if bracket_count < 0\n            return false\n        end\n    end\n\
    \    # if bracket_count is not zero, the number of opening brackets does not match\
    \ the number of closing brackets\n    if bracket_count != 0\n        return false\n\
    \    end\n    # if we've made it this far, the brackets must be correctly formatted!\n\
    \    return true\nend", "    # base case: no brackets\n    if length(brackets)\
    \ == 0\n        return true\n    end\n    # check for an opening bracket\n   \
    \ if brackets[1] == '('\n        # look for the matching closing bracket\n   \
    \     for i in 1:length(brackets)\n            if brackets[i] == ')'\n       \
    \         # if we find a closing bracket at the end of the string, then the brackets\
    \ are correctly matched\n                if i == length(brackets)\n          \
    \          return true\n                # otherwise, we need to check the remainder\
    \ of the string \n                else\n                    return correct_bracketing(brackets[i+1:end])\n\
    \                end\n            end\n        end\n        # if we didn't find\
    \ any closing brackets, then the brackets are not correctly matched\n        return\
    \ false\n    elseif brackets[1] == ')'\n        # if we see a closing bracket\
    \ before an opening bracket, then the brackets are not correctly matched\n   \
    \     return false\n    else\n        # if we see any other characters, then we\
    \ have to check the remainder of the string\n        return correct_bracketing(brackets[2:end])\n\
    \    end\nend\n \n \n \n    \"\"\" brainf*ck is a simple programming language\
    \ that is Turing-complete.\n    It consists of 8 commands.", "    # First check\
    \ if the string contains only () and nothing else\n    if brackets == \"\"\n \
    \       return true\n    elseif length(brackets) % 2 != 0\n        return false\n\
    \    elseif (findall(brackets, \"[^()]\") != nothing)\n        return false\n\
    \    else\n        return true\n    end\nend", "    opens = 0\n    for b in brackets\n\
    \        if b == '('\n            opens += 1\n        elseif b == ')'\n      \
    \      opens -= 1\n        end\n        if opens < 0 \n            return false\n\
    \        end\n    end\n    opens == 0\nend\n    \n ", "    if contains(brackets,\
    \ \"()\") == true\n        return true\n    elseif contains(brackets, \"())\"\
    ) == true\n        return false\n    else\n        for i in 1:length(brackets)\n\
    \            if brackets[i] == \"(\"\n                brackets[i] = \"[\"\n  \
    \          elseif brackets[i] == \")\"\n                brackets[i] = \"]\"\n\
    \            end\n        end\n        return brackets == \"[][][]\"\n    end\n\
    end\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\"()()()\")\ncorrect_bracketing(\"\
    (()())\")\ncorrect_bracketing(\")(()\")", "    count = 0\n    for b in brackets\n\
    \        if b == '('\n            count += 1\n        elseif b == ')'\n      \
    \      count -= 1\n        end\n    end\n    return count == 0\nend", "    count\
    \ = 0\n    for char in brackets\n        if char == '('\n            count +=\
    \ 1\n        elseif char == ')'\n            count -= 1\n        end\n    end\n\
    \    return count == 0\nend", "    left_count = 0\n    right_count = 0\n    for\
    \ char in brackets\n        if char == '('\n            left_count += 1\n    \
    \    elseif char == ')'\n            right_count += 1\n        end\n    end\n\
    \    return left_count == right_count\nend", "    open = 0\n    for a in brackets\n\
    \        if a == '('\n            open += 1\n        elseif a == ')'\n       \
    \     open -= 1\n        end\n        if open < 0\n            return false\n\
    \        end\n    end\n    if open == 0\n        return true\n    else\n     \
    \   return false\n    end\nend", "    for i in 1:length(brackets)\n        if\
    \ brackets[i] == \"(\"\n            if brackets[end] == \")\"\n              \
    \  correct_bracketing(brackets[1:end-1])\n            else \n                return\
    \ false\n            end\n        else \n            return false\n        end\n\
    \    end\nend", "    return _correct_bracketing(brackets,0)\nend", "    if brackets\
    \ == \"\" \n        return true\n    elseif brackets[1] == \")\"\n        return\
    \ false\n    elseif brackets[end] == \"(\"\n        return false\n    else\n \
    \       return correct_bracketing(brackets[2:end-1])\n    end\nend", "    nest::Int64\
    \ = 0 \n    for b in brackets \n        if b == '(' \n            nest += 1 \n\
    \        elseif b == ')' \n            nest -= 1 \n        end \n        if nest\
    \ < 0 \n            return false \n        end \n    end \n    return nest ==\
    \ 0 \nend ", "    stack = []\n    for ch in brackets\n        if ch == '('\n \
    \           push!(stack, ch)\n        elseif ch == ')'\n            if isempty(stack)\
    \ \n                return false\n            else \n                pop!(stack)\n\
    \            end\n        end\n    end\n    isempty(stack)\nend", "    bracket_count\
    \ = 0\n    for character in brackets\n        if character == '('\n          \
    \  bracket_count += 1\n        elseif character == ')'\n            bracket_count\
    \ -= 1\n        end\n        if bracket_count < 0\n            return false\n\
    \        end\n    end\n    if bracket_count == 0\n        return true\n    else\n\
    \        return false\n    end\nend", "    if brackets == \"\"\n        return\
    \ true\n    elseif brackets[1] == \")\"\n        return false\n    elseif brackets[end]\
    \ == \"(\"\n        return false\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif length(brackets) == 2\n        return true\n    else\n   \
    \     m=findnext(brackets, 1)\n        return correct_bracketing(brackets[1:m-1])\
    \ && correct_bracketing(brackets[m+1:end])\n    end\nend", "    # base case \n\
    \    if length(brackets) == 0\n        return true\n    end\n    # recursive case\n\
    \    if brackets[1] == '(' && brackets[end] == ')'\n        correct_bracketing(brackets[2:end-1])\n\
    \    else\n        false\n    end\nend", "    paren_array = []\n    for character\
    \ in brackets\n        if character == \"(\"\n            push!(paren_array, \"\
    (\")\n        elseif character == \")\"\n            if isempty(paren_array)\n\
    \                return false\n            else\n                pop!(paren_array)\n\
    \            end\n        end\n    end\n    return length(paren_array) == 0\n\
    end", "    # not solution\nend\n \n ", "    open_count = 0\n    close_count =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_count += 1\n\
    \        elseif c == ')'\n            close_count += 1\n        end\n    end\n\
    \    if open_count == close_count\n        return true\n    else\n        return\
    \ false\n    end\nend", "    counter::Int = 0\n    for b in brackets\n       \
    \ if b == '('\n            counter += 1\n        elseif b == ')'\n           \
    \ counter -= 1\n        end\n        if counter < 0\n            return false\n\
    \        end\n    end\n    if counter == 0\n        return true\n    else\n  \
    \      return false\n    end\nend", "    if brackets[1] == \")\"\n        return\
    \ false\n    end\n    stack = collect(0)\n    for c in brackets\n        if c\
    \ == \"(\"\n            push!(stack, c)\n        elseif c == \")\"\n         \
    \   pop!(stack)\n        end\n    end\n    return isempty(stack)\nend", "    opens\
    \ = close = 0\n    for b in brackets\n        if b == '('\n            opens +=\
    \ 1\n        elseif b == ')'\n            close += 1\n        end\n    end\n \
    \   return open == close\nend", "   left_brackets = 0\n   right_brackets = 0\n\
    \   \n   for char in brackets\n    if char == '('\n        left_brackets += 1\n\
    \    elseif char == ')'\n        right_brackets += 1\n    end\n    \n    if right_brackets\
    \ > left_brackets\n        return false\n    end\n   end\n   \n   if left_brackets\
    \ == right_brackets\n       return true\n   else\n       return false\n   end\n\
    end", "    left_count = 0\n    right_count = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '('\n            left_count += 1\n        elseif brackets[i]\
    \ == ')'\n            right_count += 1\n        end\n    end\n    return left_count\
    \ == right_count\nend", " \treturn brackets == \"()\" ? true : brackets == \"\
    (\" ? false : correct_bracketing(replace(brackets, \"()\", \"\"))\nend", "   \
    \ count_of_left_brackets = sum(brackets .== '(')\n    count_of_right_brackets\
    \ = sum(brackets .== ')')\n    if count_of_left_brackets == count_of_right_brackets\n\
    \        return true\n    else\n        return false\n    end\nend", "    stack\
    \ = []\n    for b in brackets\n        if b == '('\n            push!(stack, b)\n\
    \        elseif b == ')'\n            if stack == []\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return stack == []\nend", "    stack = []\n    for ch in brackets\n\
    \        if ch == '('\n            push!(stack, ch)\n        elseif ch == ')'\n\
    \            if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend\n \n \n \n ", "    open_p = 0\n    close_p = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '('\n            open_p +=\
    \ 1\n        elseif brackets[i] == ')'\n            close_p += 1\n        end\n\
    \    end\n    return open_p == close_p\nend", "    \n    counter::Int = 0\n  \
    \  \n    for i = 1:length(brackets)\n        if brackets[i] == '('\n         \
    \   counter += 1\n        elseif brackets[i] == ')'\n            counter -= 1\n\
    \        end\n        \n        if counter < 0\n            return false\n   \
    \     end\n    end\n    \n    return counter == 0\nend", "    n = length(brackets)\n\
    \    for i in 1:n\n        if brackets[i] == '('\n            open_count += 1\n\
    \        else\n            if open_count == 0\n                return false\n\
    \            else\n                open_count -= 1\n            end\n        end\n\
    \    end\n    return open_count == 0\nend", "    count = 0\n    for char in brackets\n\
    \        if char == '('\n            count += 1\n        elseif char == ')'\n\
    \            count -= 1\n        end\n        if count < 0\n            return\
    \ false\n        end\n    end\n    return count == 0\nend", "    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    open_bracket = 0\n    for c in brackets\n\
    \        if c == '('\n            open_bracket += 1\n        elseif c == ')'\n\
    \            open_bracket -= 1\n        end\n        if open_bracket < 0\n   \
    \         return false\n        end\n    end\n    return open_bracket == 0\nend",
  "    num = count(brackets,'(') - count(brackets,')')\n    if num == 0 \n       \
    \ return true\n    else\n        return false\n    end\nend", "    stack = Stack{Tuple{Char,Int}}()\n\
    \    for i = 1:length(brackets)\n        if brackets[i] == '('\n            push!(stack,\
    \ (brackets[i], i))\n        elseif brackets[i] == ')'\n            if length(stack)\
    \ == 0\n                return false\n            else\n                (c, j)\
    \ = pop!(stack)\n                if c != '('\n                    return false\n\
    \                end\n            end\n        end\n    end\n    if length(stack)\
    \ == 0\n        return true\n    else\n        return false\n    end\nend", " \
    \   bracket_stack = Stack{Char}()\n    for bracket in brackets\n        if bracket\
    \ == '('\n            push!(bracket_stack, bracket)\n        elseif bracket ==\
    \ ')'\n            if isempty(bracket_stack) || pop!(bracket_stack) != '('\n \
    \               return false\n            end\n        end\n    end\n    return\
    \ isempty(bracket_stack)\nend", "    opened=0\n    for br in brackets\n      \
    \  if br=='('\n            opened+=1\n        elseif br==')'\n            opened-=1\n\
    \        end\n        if opened<0\n            return false\n        end\n   \
    \ end\n    return opened==0\nend", "    count = 0\n    for i in brackets\n   \
    \     if i == '('\n            count += 1\n        elseif i == ')'\n         \
    \   count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count == 0\n        return true\n    else\n    \
    \    return false\n    end\nend", "    left = 0\n    right = 0\n    for i in brackets\n\
    \        if i == \"(\"\n            left += 1\n        elseif i == \")\"\n   \
    \         right += 1\n        end\n    end\n    return left == right\nend", " \
    \   stack = Array{Char,1}([])\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '('\n            push!(stack, brackets[i])\n        elseif brackets[i] ==\
    \ ')'\n            if isempty(stack)\n                return false\n         \
    \   else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return true\n    else\n        return false\n\
    \    end\nend", "    l = length(brackets)\n    i = 1\n    k = 0\n    while i <=\
    \ l\n        if brackets[i] == '('\n            k += 1\n        elseif brackets[i]\
    \ == ')'\n            k -= 1\n        end\n        if k < 0\n            return\
    \ false\n        end\n        i += 1\n    end\n    if k == 0\n        return true\n\
    \    else\n        return false\n    end\nend", "    count = 0\n    for bracket\
    \ in brackets\n        if bracket == '('\n            count += 1\n        elseif\
    \ bracket == ')'\n            count -= 1\n        end\n        if count < 0\n\
    \            return false\n        end\n    end\n    return count == 0\nend",
  "    stack = Stack{Char}()\n    for i in brackets\n        if i == '('\n       \
    \     push!(stack, i)\n        elseif i == ')'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ l_par, r_par = 0, 0\n    for i = 1:length(brackets)\n        if brackets[i]\
    \ == '('\n            l_par += 1\n        elseif brackets[i] == ')'\n        \
    \    r_par += 1\n        end\n        if r_par > l_par\n            return false\n\
    \        end\n    end\n    if l_par == r_par\n        return true\n    else\n\
    \        return false\n    end\nend", "    # This function is not complete.\n\
    \    num_open = 0\n    num_close = 0\n    for c in brackets\n        if c == '('\n\
    \            num_open += 1\n        elseif c == ')'\n            num_close +=\
    \ 1\n        end\n    end\n    return num_open == num_close\nend", "    # Initialize\
    \ counter.\n    counter = 0\n    # Iterate over string.\n    for bracket in brackets\n\
    \        # Increment when \"(\" is encountered.\n        if bracket == \"(\"\n\
    \            counter += 1\n        # Decrement when \")\" is encountered.\n  \
    \      elseif bracket == \")\"\n            counter -= 1\n        end\n      \
    \  # If counter is negative, a closing bracket is encountered without an opening\
    \ bracket.\n        if counter < 0\n            return false\n        end\n  \
    \  end\n    # Return true if counter is zero, false otherwise.\n    return counter\
    \ == 0\nend", "    open_brackets = count(x -> x == '(', brackets)\n    close_brackets\
    \ = count(x -> x == ')', brackets)\n    return open_brackets == close_brackets\n\
    end", "    bracket_count = 0\n    for bracket in brackets\n        if bracket\
    \ == '('\n            bracket_count += 1\n        elseif bracket == ')'\n    \
    \        bracket_count -= 1\n        end\n        if bracket_count < 0\n     \
    \       return false\n        end\n    end\n    return bracket_count == 0\nend",
  "    n_brackets = 0\n    for c in brackets\n        if c == '('\n            n_brackets\
    \ += 1\n        elseif c == ')'\n            n_brackets -= 1\n        end\n  \
    \      if n_brackets < 0\n            return false\n        end\n    end\n   \
    \ if n_brackets == 0\n        return true\n    else\n        return false\n  \
    \  end\nend", "    counter = 0\n    for char in brackets\n        if char == '('\n\
    \            counter += 1\n        elseif char == ')'\n            counter -=\
    \ 1\n        end\n        if counter < 0\n            return false\n        end\n\
    \    end\n    if counter != 0\n        return false\n    end\n    return true\n\
    end", "    \"Your code here\"\nend", "    # loop through each character in the\
    \ string\n    for i = 1:length(brackets)\n        # case 1: if the first character\
    \ is \")\" return false because it is not a proper bracketing\n        if i ==\
    \ 1 && brackets[i] == \")\"\n            return false\n        end", "    opening_brackets\
    \ = 0\n    for c in brackets\n        if c == '('\n            opening_brackets\
    \ += 1\n        elseif c == ')'\n            opening_brackets -= 1\n        end\n\
    \        if opening_brackets < 0\n            return false\n        end\n    end\n\
    \    return opening_brackets == 0\nend", "    open_brackets = 0\n    for b in\
    \ brackets\n        if b == '('\n            open_brackets += 1\n        elseif\
    \ b == ')'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    open_brackets = 0\n    for i = 1:length(brackets)\n       \
    \ if brackets[i] == '('\n            open_brackets += 1\n        elseif brackets[i]\
    \ == ')'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    open_brackets = 0\n    for b in brackets\n        if b == '('\n\
    \            open_brackets += 1\n        elseif b == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    if brackets ==\
    \ \"\" \n        return true\n    elseif brackets[1] == \")\"\n        return\
    \ false\n    else\n        return correct_bracketing(remove_matching_brackets(brackets))\n\
    \    end\nend", "    # A stack of opening brackets to keep track of what we have\
    \ seen so far\n    opening_brackets = Int[]\n    # Loop over each character of\
    \ the string\n    for bracket in brackets\n        # If we see an opening bracket,\
    \ push it to the stack\n        if bracket == '('\n            push!(opening_brackets,\
    \ 1)\n        # If we see a closing bracket, remove the top opening bracket from\
    \ the stack\n        elseif bracket == ')'\n            if isempty(opening_brackets)\n\
    \                return false\n            else\n                pop!(opening_brackets)\n\
    \            end\n        else\n            error(\"Input string is not valid\"\
    )\n        end\n    end\n    # We have seen a matching bracket for every opening\
    \ bracket if the stack is empty at the end\n    return isempty(opening_brackets)\n\
    end\n \ncorrect_bracketing(\"(\")\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\"\
    (()())\")\ncorrect_bracketing(\")(()\")\n \n \n \n\"\"\" Given a list of numbers,\n\
    \    move the numbers to the left or right so that the odd numbers are on the\
    \ left and the even ones on the right.", "    sum = 0\n    for b in brackets\n\
    \        if b == '('\n            sum += 1\n        elseif b == ')'\n        \
    \    sum -= 1\n        end\n        if sum < 0\n            return false\n   \
    \     end\n    end\n    if sum == 0\n        return true\n    else\n        return\
    \ false\n    end\nend", "    return false\nend", "    n = length(brackets)\n \
    \   balance = 0\n    for (i, bracket) in enumerate(brackets)\n        if bracket\
    \ == \"(\"\n            balance += 1\n        elseif bracket == \")\"\n      \
    \      balance -= 1\n        end\n        if balance < 0\n            return false\n\
    \        end\n    end\n    return balance == 0\nend", "    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return true if every opening bracket has a\
    \ corresponding closing bracket.", "    num_open = sum(brackets .== '(')\n   \
    \ num_close = sum(brackets .== ')')\n    return num_open == num_close\nend", " \
    \   end_bracket_count = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '('\n            end_bracket_count += 1\n        elseif brackets[i] == ')'\n\
    \            end_bracket_count -= 1\n        end\n        if end_bracket_count\
    \ < 0\n            return false\n        end\n    end\n    return end_bracket_count\
    \ == 0\nend\n        \n    \n    # YOUR CODE HERE", "    left_brackets_left =\
    \ count(brackets,'(')\n    left_brackets_right = count(brackets,')')\n    if left_brackets_left\
    \ == left_brackets_right\n        return true\n    else\n        return false\n\
    \    end\nend\ncorrect_bracketing(\"()(()\")", "    \"\"\" brackets is a string\
    \ of \"(\" and \")\".\n    return true if every opening bracket has a corresponding\
    \ closing bracket.", "    is_open = Dict(')' => false, '(' => true)\n    total_open\
    \ = 0\n    for c in brackets\n        if is_open[c]\n            total_open +=\
    \ 1\n        else\n            total_open -= 1\n        end\n        if total_open\
    \ < 0\n            return false\n        end\n    end\n    return total_open ==\
    \ 0\nend", "    for bracket in brackets\n        if bracket == '('\n         \
    \   push!(stack, bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ true\n    else\n        return false\n    end\nend", "    opencount = 0\n  \
    \  for i in 1:length(brackets)\n        if brackets[i] == '('\n            opencount\
    \ += 1\n        elseif brackets[i] == ')'\n            opencount -= 1\n      \
    \  end\n        if opencount < 0\n            return false\n        end\n    end\n\
    \    return opencount == 0\nend", "    length(brackets) == 0 || length(brackets)\
    \ > 1 && brackets[1] == '(' && brackets[end] == ')' && correct_bracketing(brackets[2:end-1])\n\
    end", "  open_brackets = 0\n  for bracket in brackets\n    if bracket == '('\n\
    \      open_brackets += 1\n    elseif bracket == ')'\n      open_brackets -= 1\n\
    \    end\n    if open_brackets < 0\n      return false\n    end\n  end\n  return\
    \ open_brackets == 0\nend", "    # string to be used as a temp\n    bracket_counter\
    \ = \"\"\n    # iterate through string and add the charachter to the bracket_counter\n\
    \    for i in brackets\n        bracket_counter *= i\n        # if the bracket\
    \ is closing and there are no opening before it, the counter will be less than\
    \ 0\n        if i == \")\" && length(bracket_counter) < 1\n            return\
    \ false\n        # if the counter is less than 0, that means there were more closing\
    \ brackets than opening brackets\n        elseif i == \")\" && length(bracket_counter)\
    \ < 0\n            return false\n        # if there are no more closing brackets\
    \ at the end of the code, then there were more opening than closing\n        elseif\
    \ i == \"(\" && length(brackets) < length(bracket_counter)\n            return\
    \ false\n        # if the bracket is opening and it is the only bracket, the counter\
    \ should equal 1\n        elseif i == \"(\" && length(bracket_counter) == 1\n\
    \            continue\n        end\n    end\n    return true\nend", "    score\
    \ = 0\n    for s in brackets\n        if s == '('\n            score += 1\n  \
    \      elseif s == ')'\n            score -= 1\n        end\n    end\n    return\
    \ score == 0\nend", "    open_brackets = [char for char in brackets if char ==\
    \ '(']\n    close_brackets = [char for char in brackets if char == ')']\n    return\
    \ length(open_brackets) == length(close_brackets)\nend", "    num = 0 \n    for\
    \ bracket in brackets \n        if bracket == '(' \n            num += 1 \n  \
    \      elseif bracket == ')' \n            num -= 1 \n        end \n        if\
    \ num < 0 \n            return false \n        end \n    end \n    return num\
    \ == 0 \nend ", "  if (count(x -> x == '(' , brackets) == count(x -> x == ')'\
    \ , brackets))\n    return true\n  else\n    return false\n  end\nend", "    left_brackets\
    \ = 0\n    right_brackets = 0\n    for b in brackets\n        if b == '('\n  \
    \          left_brackets += 1\n        elseif b == ')'\n            right_brackets\
    \ += 1\n        end\n    end\n    if left_brackets == right_brackets\n       \
    \ return true\n    else\n        return false\n    end\nend", "    if brackets\
    \ == \"\"\n        return true\n    elseif brackets[1] == \")\"\n        return\
    \ false\n    elseif brackets[end] == \"(\"\n        return false\n    elseif(length(brackets)%2==0)\n\
    \        return true\n    else\n        return false\n    end\nend", "    left_parenthesis_count\
    \ = 0\n    for c in brackets\n        if c == '('\n            left_parenthesis_count\
    \ += 1\n        elseif c == ')'\n            if left_parenthesis_count == 0\n\
    \                return false\n            end\n            left_parenthesis_count\
    \ -= 1\n        end\n    end\n    left_parenthesis_count == 0\nend\n    \n   \
    \ \n    \n    \n ", "    num_open = 0\n    for bracket in brackets\n        if\
    \ bracket == '('\n            num_open += 1\n        elseif bracket == ')'\n \
    \           num_open -= 1\n        end\n        if num_open < 0\n            return\
    \ false\n        end\n    end\n    if num_open == 0\n        return true\n   \
    \ else\n        return false\n    end\nend", "    openingbracket::Int=0\n    for\
    \ b in brackets\n        if b=='('\n            openingbracket=openingbracket+1\n\
    \        elseif b==')'\n            openingbracket=openingbracket-1\n        end\n\
    \        if openingbracket<0\n            return false\n        end\n    end\n\
    \    return openingbracket==0\nend", "    if brackets == \"\"\n        return\
    \ true\n    elseif brackets[1] == \")\"\n        return false\n    else\n    \
    \    return correct_bracketing(next_bracket(brackets))\n    end\nend", "    count_open\
    \ = 0\n    count_close = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '('\n            count_open += 1\n        elseif brackets[i] == ')'\n   \
    \         count_close += 1\n        end\n    end\n    if count_open == count_close\n\
    \        return true\n    else\n        return false\n    end\nend", "    bracket_opening\
    \ = 0\n    bracket_closing = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '('\n            bracket_opening += 1\n        elseif brackets[i] == ')'\n\
    \            bracket_closing += 1\n        end\n    end\n    if bracket_opening\
    \ == bracket_closing\n        return true\n    else\n        return false\n  \
    \  end\nend", "  open_brackets = 0 \n  for i = 1:length(brackets)\n      if brackets[i]\
    \ == '('\n        open_brackets += 1\n      elseif brackets[i] == ')'\n      \
    \  open_brackets -= 1\n      end\n      if open_brackets < 0\n        return false\n\
    \      end\n  end\n  if open_brackets == 0\n    return true\n  else\n    return\
    \ false\n  end\nend", "    stack = []\n    for i in brackets\n        if i ==\
    \ '('\n            push!(stack, i)\n        elseif i == ')'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ true\n    else\n        return false\n    end\nend", "    if brackets == \"\"\
    \n        return true\n    elseif brackets[1] == \")\"\n        return false\n\
    \    else\n        return correct_bracketing(brackets[2:end])\n    end\nend",
  "    b = 0\n    for c in brackets\n        if c == '('\n            b += 1\n   \
    \     elseif c == ')'\n            b -= 1\n        end\n        if b < 0\n   \
    \         return false\n        end\n    end\n    return b == 0\nend", "    balance\
    \ = 0\n    for c in brackets\n        if c == '('\n            balance += 1\n\
    \        elseif c == ')'\n            balance -= 1\n        end\n        if balance\
    \ < 0\n            return false\n        end\n    end\n    return balance == 0\n\
    end", "    if brackets == \"\"\n        return true\n    elseif brackets[1] ==\
    \ \")\"\n        return false\n    else\n        return correct_bracketing(find_first_closing_bracket(brackets))\n\
    \    end\nend", "    n = 0\n    for b in brackets\n        if b == '('\n     \
    \       n += 1\n        elseif b == ')'\n            n -= 1\n        end\n   \
    \     if n < 0\n            return false\n        end\n    end\n    return n ==\
    \ 0\nend", "    bracket_left = 0\n    bracket_right = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '('\n            bracket_left += 1\n        elseif\
    \ brackets[i] == ')'\n            bracket_right += 1\n        end\n    end\n \
    \   return bracket_left == bracket_right\nend", "    c = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '('\n            c += 1\n        elseif brackets[i]\
    \ == ')'\n            c -= 1\n        end\n    end\n    return c == 0\nend", " \
    \   left_bracket = 0\n    right_bracket = 0\n    for c in brackets\n        if\
    \ c == '('\n            left_bracket += 1\n        elseif c == ')'\n         \
    \   right_bracket += 1\n        end\n    end\n    if left_bracket == right_bracket\n\
    \        return true\n    else\n        return false\n    end\nend", "    stack\
    \ = []\n    left_brackets = [\"(\", \"[\", \"{\"]\n    right_brackets = [\")\"\
    , \"]\", \"}\"]\n    for b in brackets\n        if b in left_brackets\n      \
    \      push!(stack, b)\n        elseif b in right_brackets\n            if length(stack)\
    \ == 0\n                return false\n            elseif b == \")\" && stack[end]\
    \ == \"(\"\n                pop!(stack)\n            elseif b == \"]\" && stack[end]\
    \ == \"[\"\n                pop!(stack)\n            elseif b == \"}\" && stack[end]\
    \ == \"{\"\n                pop!(stack)\n            else\n                return\
    \ false\n            end\n        end\n    end\n    return length(stack) == 0\n\
    end", "    if brackets == \"\"\n        return true\n    elseif brackets[1] ==\
    \ \")\"\n        return false\n    else\n        return correct_bracketing(brackets[2:end])\n\
    \    end\nend", "    i = 0\n    while i < length(brackets)\n        if brackets[i]\
    \ == '('\n            i += 1\n        elseif brackets[i] == ')'\n            return\
    \ false\n        end\n    end\n    return true\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
