name: HumanEval_61_correct_bracketing
language: jl
prompt: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
  \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
  (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
  (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\"\
  \nfunction correct_bracketing(brackets::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
  ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
  ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
  ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
  (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\")\
  \ == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
  ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
completions: ["    bracket_counter = 0\n    for i in 1:length(brackets)\n        if\
    \ brackets[i] == '('\n            bracket_counter += 1\n        elseif brackets[i]\
    \ == ')'\n            bracket_counter -= 1\n        end\n        if bracket_counter\
    \ < 0\n            return false\n        end\n    end\n    if bracket_counter\
    \ == 0\n        return true\n    else\n        return false\n    end\nend", " \
    \   if brackets==\"\"\n        return true\n    elseif brackets[1]==\"(\" && brackets[end]==\"\
    )\"\n        return correct_bracketing(brackets[2:end-1])\n    elseif brackets[1]==\"\
    (\" && brackets[end]!=\")\"\n        return false\n    elseif brackets[1]!=\"\
    (\" && brackets[end]==\")\"\n        return false\n    elseif brackets[1]!=\"\
    (\" && brackets[end]!=\")\"\n        return false\n    end\nend", "    count =\
    \ 0\n    for char in brackets\n        if char == '('\n            count += 1\n\
    \        elseif char == ')'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    if count == 0\n   \
    \     return true\n    else\n        return false\n    end\nend", "    counter\
    \ = 0\n    for letter in brackets\n        if letter == '('\n            counter\
    \ += 1\n        elseif letter == ')'\n            counter -= 1\n        end\n\
    \    end\n    return counter == 0\nend", "    num_open = count(p -> p == '(',\
    \ brackets)\n    num_close = count(p -> p == ')', brackets)\n    if num_open ==\
    \ num_close\n        return true\n    else\n        return false\n    end\nend",
  "    open = 0\n    close = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '('\n            open += 1\n        elseif brackets[i] == ')'\n         \
    \   close += 1\n        end\n    end\n    if open == close\n        return true\n\
    \    else\n        return false\n    end\nend", "    stack = Int[]\n    for bracket\
    \ in brackets\n        if bracket == '('\n            push!(stack, 1)\n      \
    \  elseif bracket == ')'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    is_open = (c) -> c=='('\n\
    \    open_n = 0\n    for c in brackets\n        if is_open(c)\n            open_n\
    \ += 1\n        elseif open_n <= 0\n            return false\n        else\n \
    \           open_n -= 1\n        end\n    end\n    return open_n == 0\nend", " \
    \   n_open = 0 \n    for bracket in brackets \n        if bracket == '(' \n  \
    \          n_open += 1 \n        elseif bracket == ')' \n            n_open -=\
    \ 1 \n        end \n        if n_open < 0 \n            return false \n      \
    \  end \n    end \n    if n_open != 0 \n        return false \n    end \n    return\
    \ true \nend", "    \"\"\"\n    Brackets is a string of \"(\" and \")\".\n   \
    \ return true if every opening bracket has a corresponding closing bracket.\n\
    \    \"\"\"\n    \n    stack = []\n    for bracket in brackets\n        if bracket\
    \ == '('\n            push!(stack, bracket)\n        elseif bracket == ')'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "     n = length(brackets)\n     i = 1\n     stack = []\n\
    \     while i <= n\n        if brackets[i] == '('\n            push!(stack, brackets[i])\n\
    \        elseif brackets[i] == ')'\n            if isempty(stack)\n          \
    \      return false\n            else\n                pop!(stack)\n         \
    \   end\n        end\n        i += 1\n     end\n     if isempty(stack)\n     \
    \   return true\n     else\n        return false\n     end\nend", "    lparen\
    \ = 0\n    rparen = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '('\n            lparen += 1\n        elseif brackets[i] == ')'\n       \
    \     rparen += 1\n        end\n    end\n    if lparen == rparen\n        return\
    \ true\n    else\n        return false\n    end\nend", "    counter = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            counter += 1\n        elseif\
    \ i == \")\"\n            counter -= 1\n        end\n        if counter < 0\n\
    \            return false\n        end\n    end\n    return counter == 0 ? true\
    \ : false\nend", "    if length(brackets)==0\n        return true\n    elseif\
    \ brackets[1]=='('\n        if search(brackets,\")\")==0\n            return false\n\
    \        else\n            return correct_bracketing(brackets[2:end])\n      \
    \  end\n    else\n        return false\n    end\nend", "    count_open, count_close\
    \ = 0, 0\n    for i in brackets\n        if i == '('\n            count_open +=\
    \ 1\n        elseif i == ')'\n            count_close += 1\n        end\n    end\n\
    \    if count_open == count_close\n        return true\n    else\n        return\
    \ false\n    end\nend", "    open_parens = 0\n    for c in brackets\n        if\
    \ c == '('\n            open_parens += 1\n        elseif c == ')'\n          \
    \  open_parens -= 1\n        end\n        if open_parens < 0\n            return\
    \ false\n        end\n    end\n    return open_parens == 0\nend", "    len = length(brackets)\n\
    \    if len == 0 \n        return true\n    end\n    if len % 2 != 0\n       \
    \ return false\n    end\n    if brackets[1] == \")\"\n        return false\n \
    \   end\n    open = 0\n    closed = 0\n    for i in 1:len\n        if brackets[i]\
    \ == \"(\"\n            open += 1\n        elseif brackets[i] == \")\"\n     \
    \       closed += 1\n        end\n        if closed > open\n            return\
    \ false\n        end\n    end\n    if open == closed\n        return true\n  \
    \  else\n        return false\n    end\nend", "    # Your code here\n    stack\
    \ = Array{Char,1}()\n    for i = 1:length(brackets)\n        push!(stack, brackets[i])\n\
    \        if stack[end] == ')'\n            pop!(stack)\n            if stack[end]\
    \ != '('\n                return false\n            end\n            pop!(stack)\n\
    \        end\n    end\n    if length(stack) != 0\n        return false\n    end\n\
    \    return true\nend", "    open_bracket_count = 0\n    for bracket in brackets\n\
    \        if bracket == '('\n            open_bracket_count += 1\n        elseif\
    \ bracket == ')'\n            open_bracket_count -= 1\n        end\n    end\n\
    \    return open_bracket_count == 0\nend", "    depth = 0\n    for b in brackets\n\
    \        if b == '('\n            depth += 1\n        elseif b == ')'\n      \
    \      depth -= 1\n        end\n        if depth < 0\n            return false\n\
    \        end\n    end\n    return depth == 0\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
