language: jl
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    res = []\n    for v in values\n        if isa(v, Int64)\n            push!(res,\
    \ v)\n        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return collect(filter(x -> isa(x, Int64), values))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values) do x \n        isa(x, Integer) \n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = []\n    for value in values\n        if isinstance(value, types.IntType)\n\
    \            push!(filtered, value)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp_edzjf0a.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp_edzjf0a.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ types not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp_edzjf0a.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_edzjf0a.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_edzjf0a.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_edzjf0a.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: types\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp_edzjf0a.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_edzjf0a.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_edzjf0a.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(v -> typeof(v) === Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    result = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(result, value)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Vector{Int64}()\n    for value in values\n        if isinstance(value,\
    \ Int64)\n            append!(integers, value)\n        end\n    end\n    return\
    \ integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpge6owoko.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpge6owoko.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ isinstance not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpge6owoko.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpge6owoko.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpge6owoko.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpge6owoko.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: isinstance\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpge6owoko.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpge6owoko.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpge6owoko.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values) do value\n        !isnothing(value) && typeof(value)\
    \ == Int64\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(value -> isa(value, Int64), values)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [ value for value in values if isa(value, Int64) ]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ret = Vector{Int64}()\n    for i in values\n        if isa(i, Int64)\n\
    \            push!(ret, i)\n        end\n    end\n    return ret\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(ints, value)\n        end\n    end\n    return ints\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values) do v\n        typeof(v) === Int64\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter_integers = Vector{Int64}()\n    for value in values\n        if(isa(value,\
    \ Int64))\n            push!(filter_integers, value)\n        end\n    end\n \
    \   return filter_integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    for value in values\n        is_int = true\n \
    \       try\n            int(value)\n        catch\n            is_int = false\n\
    \        end\n        if is_int\n            push!(integers, int(value))\n   \
    \     end\n    end\n    return integers\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbhp021n.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpkbhp021n.jl:28\n  Expression: candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n   Evaluated: Int64[] == [4, 9]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbhp021n.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbhp021n.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpkbhp021n.jl:29\n  Expression: candidate([3, \"c\", 3, 3, \"\
    a\", \"b\"]) == [3, 3, 3]\n   Evaluated: Int64[] == [3, 3, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbhp021n.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbhp021n.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if is_integer(value)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpbi3q6ohj.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpbi3q6ohj.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(value::Int64)\n\
    \      @ Main ./none:0\n    [2] iterate(::Base.Iterators.Filter{var\"#1#2\", Vector{Any}})\n\
    \      @ Base.Iterators ./iterators.jl:447\n    [3] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [4] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Any}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpbi3q6ohj.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpbi3q6ohj.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpbi3q6ohj.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpbi3q6ohj.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(value::Int64)\n      @ Main\
    \ ./none:0\n    [2] iterate(::Base.Iterators.Filter{var\"#1#2\", Vector{Any}})\n\
    \      @ Base.Iterators ./iterators.jl:447\n    [3] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [4] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Any}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpbi3q6ohj.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpbi3q6ohj.jl:17 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-lev"
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = Vector{Int64}()\n    for v in values\n        if typeof(v)\
    \ == Int64\n            push!(filtered, v)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = filter(x -> isa(x, Int64), values)\n    return convert(Vector{Int64},\
    \ integers)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Vector{Int64}()\n    for val in values\n        if isa(val,\
    \ Int64)\n            push!(integers, val)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(isinteger, values)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp53sjpet_.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp53sjpet_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp53sjpet_.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53sjpet_.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53sjpet_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp53sjpet_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp53sjpet_.jl:8\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53sjpet_.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53sjpet_.jl:14\nTest Summary:\
    \ | Pass  "
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(Integer,values)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp7o3wxtgh.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp7o3wxtgh.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  TypeError:\
    \ non-boolean (Int64) used in boolean context\n  Stacktrace:\n   [1] filter(f::Type{Integer},\
    \ a::Vector{Any})\n     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp7o3wxtgh.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7o3wxtgh.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7o3wxtgh.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp7o3wxtgh.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  TypeError: non-boolean\
    \ (Int64) used in boolean context\n  Stacktrace:\n   [1] filter(f::Type{Integer},\
    \ a::Vector{Any})\n     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp7o3wxtgh.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7o3wxtgh.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7o3wxtgh.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013260
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = []\n    for e in values\n        if isinteger(e)\n        \
    \    push!(filtered, e)\n        end\n    end\n    return filtered\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp21kzhq56.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp21kzhq56.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp21kzhq56.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp21kzhq56.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp21kzhq56.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp21kzhq56.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp21kzhq56.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp21kzhq56.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp21kzhq56.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Vector{Int64}()\n    for value in values\n        if typeof(value)\
    \ == Int64\n            push!(integers, value)\n        end\n    end\n    return\
    \ integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    res = Int64[]\n    for v in values\n        if isa(v, Int64)\n       \
    \     push!(res, v)\n        end\n    end\n    return res\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\n    return [y::Int64\
    \ for y in values if typeof(y) == Int64]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\n \n\"\"\" Filter given\
    \ vector of any jlthon values only for booleans\n    >>> filter_booleans([\"a\"\
    , 3.14, 5, true, false])\n    [true, false]\n    >>> filter_booleans([1, 2, 3,\
    \ \"abc\", Dict(), [], true, false])\n    [true, false]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpucqp76hm.jl:11\nin expression starting at /tmp/tmpucqp76hm.jl:11\n"
  stdout: ''
  timestamp: 1660013259
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = []\n    for value in values\n        if isinstance(value, Int64)\n\
    \            push!(filtered, value)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp57qu9u5u.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp57qu9u5u.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ isinstance not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp57qu9u5u.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp57qu9u5u.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp57qu9u5u.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp57qu9u5u.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: isinstance\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp57qu9u5u.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp57qu9u5u.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp57qu9u5u.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013260
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = filter(x -> isa(x, Int64), values)\n    return integers\nend\n\
    ```\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zlzwa6d.jl:11\nin expression starting at\
    \ /tmp/tmp1zlzwa6d.jl:11\n"
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    out = Int64[]\n    for v in values\n        if isa(v, Int64)\n       \
    \     push!(out, v)\n        end\n    end\n    return out\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values) do v\n        isa(v, Int64)\n    end\nend\n```\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwyjc1r02.jl:12\nin expression starting at\
    \ /tmp/tmpwyjc1r02.jl:12\n"
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(function(v::Any)::Bool return is_integer(v) end, values)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: ambiguous signature in function definition. Try\
    \ adding a comma if this is a 1-argument anonymous function.\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpa1lhkwx7.jl:8\nin expression starting at /tmp/tmpa1lhkwx7.jl:8\n"
  stdout: ''
  timestamp: 1660013259
- exit_code: -1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return map(values) do x\n        if typeof(x) isa UnionAll\n         \
    \   if x in [Any, Nothing]\n                return nothing\n            end\n\
    \        end\n        (typeof(x) <: Int) ? x : nothing\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmprk8bffu8.jl:23\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::Nothing, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64,\
    \ src::Vector{Union{Nothing, Int64}}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{Union{Nothing,\
    \ Int64}})\n      @ Base ./array.jl:563\n    [9] convert(#unused#::Type{Vector{Int64}},\
    \ a::Vector{Union{Nothing, Int64}})\n      @ Base ./array.jl:554\n   [10] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmprk8bffu8.jl:8\n   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmprk8bffu8.jl:23 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmprk8bffu8.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprk8bffu8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.con"
  timestamp: 1660013262
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Vector{Int64}(0)\n    for value in values\n        if isa(value,\
    \ Integer)\n            push!(integers, value)\n        end\n    end\n    return\
    \ integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpsnbj880l.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpsnbj880l.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpsnbj880l.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsnbj880l.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsnbj880l.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsnbj880l.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpsnbj880l.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsnbj880l.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsnbj880l.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsnbj880l.jl:23\n  Test threw exception\n  Ex"
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \"\"\" This variant is used by Julia, because jlthon gets confused\n \
    \       when using 'Int' instead of 'Int64'\n        \"\"\"\n    v = []\n    for\
    \ i in values\n        if isa(i, Int64)\n            push!(v, i)\n        end\n\
    \    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ret = Int64[]\n    for value in values\n        if isa(value,Int64) \n\
    \            push!(ret, value)\n        end\n    end\n    return ret\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = []\n    for value in values\n        if is_integer(value)\n\
    \            push!(filtered, value)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp30ty0kw1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp30ty0kw1.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp30ty0kw1.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp30ty0kw1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp30ty0kw1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp30ty0kw1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp30ty0kw1.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp30ty0kw1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp30ty0kw1.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013260
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    output = Int64[]\n    for item in values\n        if isa(item, Int64)\n\
    \            push!(output, item)\n        end\n    end\n    return output\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Number) && x % 1 == 0]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    new_list = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(new_list, value)\n        end\n    end\n    return new_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \"\"\"\n    \"\"\"\n    res = Vector{Int64}()\n    for v in values\n \
    \       if isa(v, Int64)\n            push!(res, v)\n        end\n    end\n  \
    \  return res\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    valid_values = Vector{Int64}()\n    for v in values\n        if( isa(v,\
    \ Int64) )\n            push!(valid_values, v)\n        end\n    end\n    return\
    \ valid_values\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(integers, value)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013259
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    res = Int64[]\n    for val in values\n        if is_integer(val)\n   \
    \         push!(res, val)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp2vpo9tyj.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp2vpo9tyj.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp2vpo9tyj.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vpo9tyj.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vpo9tyj.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2vpo9tyj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp2vpo9tyj.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vpo9tyj.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vpo9tyj.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013261
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = []\n    for value in values\n        if typeof(value) is Int64\n\
    \            push!(integers, value)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"Int64\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu3pmvjqo.jl:10\nin expression starting at /tmp/tmpu3pmvjqo.jl:10\n"
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = Vector{Int64}()\n    for i in values\n        if isa(i, Int64)\n \
    \           push!(v, i)\n        end\n    end\n    return v\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    result = Vector{Int64}()\n    for value in values\n        if typeof(value)\
    \ == Int64\n            push!(result, value)\n        end\n    end\n    return\
    \ result\nend\n\"\"\" Filter given vector of any jlthon values only for Strings\n\
    \    >>> filter_strings([\"a\", 3.14, 5])\n    [\"a\"]\n    >>> filter_strings([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [\"abc\"]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpdnk_5a5a.jl:16\nin expression starting at /tmp/tmpdnk_5a5a.jl:16\n"
  stdout: ''
  timestamp: 1660013260
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = []\n    for value in values\n        if is_int(value) \n         \
    \   push!(v, value)\n        end\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp_ma_l4cq.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp_ma_l4cq.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_int not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp_ma_l4cq.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ma_l4cq.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ma_l4cq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_ma_l4cq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_int\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp_ma_l4cq.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ma_l4cq.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ma_l4cq.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values) do x\n        typeof(x) == Int64\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = Int64[]\n    for v in values\n        if typeof(v) == Int64\n \
    \           push!(ints, v)\n        end\n    end\n    return ints\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Number) && !isa(v, Float64)]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013260
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = []\n    for value in values\n        if (isinteger(value))\n  \
    \          push!(ints, value)\n        end\n    end\n    return ints\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpqpzimm7r.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpqpzimm7r.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpqpzimm7r.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqpzimm7r.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqpzimm7r.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqpzimm7r.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpqpzimm7r.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqpzimm7r.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqpzimm7r.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013263
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return Vector(filter(x -> typeof(x) == Int64, values))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013260
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # We will convert all values to `Int64` as Julia has a unified integer\
    \ type\n    # https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/index.html#Unified-Integer-Types-1\n\
    \    return filter(isinteger, values)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpdi_ok70f.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpdi_ok70f.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpdi_ok70f.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdi_ok70f.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdi_ok70f.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpdi_ok70f.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpdi_ok70f.jl:10\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdi_ok70f.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdi_ok70f.jl:16\nTest Summary:\
    \ | Pass"
  timestamp: 1660013263
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = []\n    for v in values\n        if isa(v, Int64)\n       \
    \     push!(filtered, v)\n        end\n    end\n    return filtered\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013260
- exit_code: -1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nfilter_integers(values::Vector{Any})::Vector{Int64}\
    \ = filter_integers(values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013264
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    isempty(values) && return Vector{Int64}()\n    filter(isinteger, values)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpa0iv5875.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa0iv5875.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpa0iv5875.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa0iv5875.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa0iv5875.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa0iv5875.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpa0iv5875.jl:9\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa0iv5875.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa0iv5875.jl:15\nTest Summary:\
    \ | Pass  "
  timestamp: 1660013263
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # Replace with your code.\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0if2_7xe.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp0if2_7xe.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp0if2_7xe.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0if2_7xe.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0if2_7xe.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp0if2_7xe.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp0if2_7xe.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0if2_7xe.jl:16 [in"
  timestamp: 1660013263
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    int_values = Vector{Int64}()\n    for val in values\n        if isa(val,\
    \ Int64)\n            push!(int_values, val)\n        end\n    end\n    return\
    \ int_values\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013260
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(v -> is_integer(v), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmprkprlj0j.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmprkprlj0j.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(v::Int64)\n  \
    \   @ Main /tmp/tmprkprlj0j.jl:8\n   [2] filter(f::var\"#1#2\", a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [3] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmprkprlj0j.jl:8\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprkprlj0j.jl:16 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprkprlj0j.jl:14\ntest set:\
    \ Error During Test at /tmp/tmprkprlj0j.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(v::Int64)\n     @ Main /tmp/tmprkprlj0j.jl:8\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [3] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmprkprlj0j.jl:8\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprkprlj0j.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprkprlj0j.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013263
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Vector{Int64}()\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(integers, value)\n        end\n    end\n    return\
    \ integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = Vector{Int64}()\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(v, value)\n        end\n    end\n    return v\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = Any[]\n    for (i, el) in enumerate(values)\n        if isa(el, Int64)\n\
    \            push!(v, el)\n        end\n    end\n    return v\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013260
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\n```\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi195kq_2.jl:10\nin expression starting at\
    \ /tmp/tmpi195kq_2.jl:10\n"
  stdout: ''
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = []\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(filtered, value)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013260
- exit_code: -1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Integer), values)\nend\nfilter_integers(values::Array{Any,\
    \ 1})::Array{Int64, 1} = filter_integers(Array(values))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = []\n    for value in values\n        if is_integer(value)\n\
    \            append!(filtered, value)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp7g2l4y3o.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp7g2l4y3o.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp7g2l4y3o.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7g2l4y3o.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7g2l4y3o.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7g2l4y3o.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp7g2l4y3o.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7g2l4y3o.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7g2l4y3o.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013263
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # for each value\n    filtered = Vector{Int64}()\n    for value in values\n\
    \        # if value is an integer -> add to filtered\n        if typeof(value)\
    \ == Int64\n            push!(filtered, value)\n        end\n    end\n    # return\
    \ filtered\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013261
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isinteger(value)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpzii306pt.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpzii306pt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(value::Dict{Any, Any})\n    \
    \  @ Main ./none:0\n    [2] iterate(f::Base.Iterators.Filter{var\"#1#2\", Vector{Any}},\
    \ state::Int64)\n      @ Base.Iterators ./iterators.jl:447\n    [3] iterate\n\
    \      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Any}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:819\n\
    \    [5] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Any}}, typeof(identity)})\n      @ Base ./array.jl:801\n    [6]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [7] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpzii306pt.jl:8\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpzii306pt.jl:16 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpzii306pt.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpzii306pt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n  "
  timestamp: 1660013265
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    vector(i::Int64 for i in values if isa(i, Int64))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpu79bwldv.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpu79bwldv.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ vector not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpu79bwldv.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu79bwldv.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu79bwldv.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpu79bwldv.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: vector\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpu79bwldv.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu79bwldv.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu79bwldv.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpu79bwldv.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: vector\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpu79bwldv.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu79bwldv.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu79bwldv.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013264
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if is_integer(value)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpbi3q6ohj.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpbi3q6ohj.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(value::Int64)\n\
    \      @ Main ./none:0\n    [2] iterate(::Base.Iterators.Filter{var\"#1#2\", Vector{Any}})\n\
    \      @ Base.Iterators ./iterators.jl:447\n    [3] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [4] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Any}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpbi3q6ohj.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpbi3q6ohj.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpbi3q6ohj.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpbi3q6ohj.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(value::Int64)\n      @ Main\
    \ ./none:0\n    [2] iterate(::Base.Iterators.Filter{var\"#1#2\", Vector{Any}})\n\
    \      @ Base.Iterators ./iterators.jl:447\n    [3] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [4] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Any}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpbi3q6ohj.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpbi3q6ohj.jl:17 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-lev"
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    new_vector = Vector{Int64}()\n    for x in values\n        if isa(x, Int64)\n\
    \            push!(new_vector, x)\n        end\n    end\n    return new_vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Number) && !isa(x, AbstractFloat), values)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Vector{Int64}()\n    for value in values\n        if isa(value,\
    \ Integer)\n            push!(integers, value)\n        end\n    end\n    return\
    \ integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  i = 1\n  while i <= length(values)\n    if typeof(values[i]) != Int64\n\
    \      deleteat!(values, i)\n    else\n      i += 1\n    end\n  end\n  return\
    \ values\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013262
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(x -> isa(x, Int64), values)\n    convert(Vector{Int64},\
    \ values)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013262
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [integer for integer in values if typeof(integer) == Int64]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013262
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(v -> isa(v, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013262
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # filter\n    integers = filter(x -> isa(x, Int64), values)\n    # convert\
    \ to array\n    return collect(integers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013262
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    r = Int64[]\n    for v in values\n        if isa(v, Int64)\n         \
    \   push!(r, v)\n        end\n    end\n    return r\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013262
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(isinteger, values)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp53sjpet_.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp53sjpet_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp53sjpet_.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53sjpet_.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53sjpet_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp53sjpet_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp53sjpet_.jl:8\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53sjpet_.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53sjpet_.jl:14\nTest Summary:\
    \ | Pass  "
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isempty(values)\n        return Vector{Int64}()\n    end\n    return\
    \ filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013262
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> x isa(Int64), values)\nend\n```\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21m9tvh7.jl:10\nin expression starting at\
    \ /tmp/tmp21m9tvh7.jl:10\n"
  stdout: ''
  timestamp: 1660013263
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013261
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \"\"\" Filter given vector of any jlthon values only for dictionaries\n\
    \    >>> filter_dictionaries([\"a\", 3.14, 5, Dict()])\n    [Dict()]\n    >>>\
    \ filter_dictionaries([1, 2, 3, \"abc\", Dict(), []])\n    [Dict()]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7pk23dex.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7pk23dex.jl:1\n\
    in expression starting at /tmp/tmp7pk23dex.jl:1\n"
  stdout: ''
  timestamp: 1660013263
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    temp = Int64[]\n    for x in values\n        if is_int(x)\n          \
    \  push!(temp, x)\n        end\n    end\n    return temp\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpbxsszyvm.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpbxsszyvm.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_int not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpbxsszyvm.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbxsszyvm.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbxsszyvm.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpbxsszyvm.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_int\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpbxsszyvm.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbxsszyvm.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbxsszyvm.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013265
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = Vector{Int64}()\n    for v in values\n        if isa(v, Int64)\n\
    \            push!(ints, v)\n        end\n    end\n    return ints\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013262
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  nv = length(values)\n  ret = Vector{Int64}(undef, nv)\n  k = 0\n  for i\
    \ in 1:nv\n    v = values[i]\n    if typeof(v) == Int64\n      k += 1\n      ret[k]\
    \ = v\n    end\n  end\n  return ret[1:k]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013262
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isinteger(x), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpy8yds2n0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpy8yds2n0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Dict{Any, Any})\n     @ Main\
    \ /tmp/tmpy8yds2n0.jl:8\n   [2] filter(f::var\"#1#2\", a::Vector{Any})\n     @\
    \ Base ./array.jl:2484\n   [3] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpy8yds2n0.jl:8\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy8yds2n0.jl:16 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy8yds2n0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpy8yds2n0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(x::String)\n     @ Main /tmp/tmpy8yds2n0.jl:8\n   [2]\
    \ filter(f::var\"#1#2\", a::Vector{Any})\n     @ Base ./array.jl:2484\n   [3]\
    \ filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpy8yds2n0.jl:8\n  \
    \ [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy8yds2n0.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1660013267
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # pass\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_a23r2ux.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp_a23r2ux.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp_a23r2ux.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_a23r2ux.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_a23r2ux.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_a23r2ux.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp_a23r2ux.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_a23r2ux.jl:16 [in"
  timestamp: 1660013267
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(isinteger, values)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp53sjpet_.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp53sjpet_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp53sjpet_.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53sjpet_.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53sjpet_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp53sjpet_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp53sjpet_.jl:8\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53sjpet_.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53sjpet_.jl:14\nTest Summary:\
    \ | Pass  "
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = []\n    for value in values\n        if (typeof(value) == Int64)\n\
    \            push!(integers, value)\n        end\n    end\n    return integers\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013263
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    list = Vector{Int64}()\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(list, value)\n        end\n    end\n    return list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013263
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Dict)\n        return [v for (k, v) in values]\n    else\n\
    \        return Int64[v for v in values if isa(v, Int64)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013263
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = Int64[]\n    for x in values\n        if isa(x, Int64)\n         \
    \   push!(v, x)\n        end\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013263
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    value_array = map(value -> Int64(value), values)\n    filter(value ->\
    \ isa(value, Int64), value_array)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpduhivjuw.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpduhivjuw.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching Int64(::Dict{Any, Any})\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n\
    \    (::Type{T})(!Matched::AbstractChar) where T<:Union{AbstractChar, Number}\
    \ at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#3\")(value::Dict{Any, Any})\n    \
    \  @ Main /tmp/tmpduhivjuw.jl:8\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] collect_to!(dest::Vector{Int64}, itr::Base.Generator{Vector{Any}, var\"\
    #1#3\"}, offs::Int64, st::Int64)\n      @ Base ./array.jl:782\n    [4] collect_to_with_first!(dest::Vector{Int64},\
    \ v1::Int64, itr::Base.Generator{Vector{Any}, var\"#1#3\"}, st::Int64)\n     \
    \ @ Base ./array.jl:760\n    [5] _collect(c::Vector{Any}, itr::Base.Generator{Vector{Any},\
    \ var\"#1#3\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:754\n    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [7] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [8] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpduhivjuw.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpduhivjuw.jl:17 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpduhivjuw.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpduhivjuw.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching Int64(::String)\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda"
  timestamp: 1660013267
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Vector{Int64}(undef, 0)\n    for value in values\n        if\
    \ isa(value, Int64)\n            push!(integers, value)\n        end\n    end\n\
    \    return integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013263
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    res = []\n    for v in values\n        if isa(v, Int64)\n            push!(res,\
    \ v)\n        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = Vector{Int64}()\n    for v in values\n        if isa(v, Int64)\n\
    \            push!(filtered, v)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013263
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integervalues = Int64[]\n    for value in values\n        if typeof(value)\
    \ == Int64\n            push!(integervalues, value)\n        end\n    end\n  \
    \  return integervalues\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: -1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # do not think about the performance of the below loop ... :)\n    # this\
    \ is for demonstration only.\n    for v in values\n        if isa(v,Int64) ==\
    \ false \n            # in Julia, \"delete\" is not an in-place operation.\n \
    \           # a new vector is created, and then it gets assigned back to the variable.\n\
    \            # source: https://docs.julialang.org/en/v1/base/collections/#Base.delete!\n\
    \            delete!(values, v)\n        end\n    end\n    return values\nend\n\
    filter_integers([\"a\", 3.14, 5])\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: MethodError: no method matching delete!(::Vector{Any},
    ::String)'
  stdout: ''
  timestamp: 1660013268
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x)==Int64]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    retval = Vector{Int64}(undef, 0)\n    for v in values\n        if typeof(v)\
    \ == Int64\n            append!(retval, v)\n        end\n    end\n    return retval\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    to_return = Vector{Int64}()\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(to_return, value)\n        end\n    end\n    return\
    \ to_return\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Integer), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    valid_values = filter(values) do x\n        x isa Int64\n    end\n   \
    \ return valid_values\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(isinteger, values)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp53sjpet_.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp53sjpet_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp53sjpet_.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53sjpet_.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53sjpet_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp53sjpet_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp53sjpet_.jl:8\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53sjpet_.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53sjpet_.jl:14\nTest Summary:\
    \ | Pass  "
  timestamp: 1660013261
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> is_integer(x), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpu81n47xe.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpu81n47xe.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n  \
    \   @ Main /tmp/tmpu81n47xe.jl:8\n   [2] filter(f::var\"#1#2\", a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [3] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpu81n47xe.jl:8\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpu81n47xe.jl:16 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpu81n47xe.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpu81n47xe.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpu81n47xe.jl:8\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [3] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpu81n47xe.jl:8\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpu81n47xe.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpu81n47xe.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013267
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    output = Vector{Int64}()\n    for v in values\n        if isa(v, Int64)\n\
    \            push!(output, v)\n        end\n    end\n    return output\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(value -> isa(value, Int64), values)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Integer), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    f = []\n    for value in values\n        if typeof(value) == Int64\n \
    \           push!(f, value)\n        end\n    end\n    return f\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(filtered, value)\n        end\n    end\n    return filtered\n\
    end\n \nfilter_integers([\"a\", 3.14, 5])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(ints, value)\n        end\n    end\n    return ints\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    temp = []\n    for value in values\n        if typeof(value) == Int64\n\
    \            push!(temp, value)\n        end\n    end\n    return temp\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # create an empty vector which will be populated with positive numbers\n\
    \    positive_values = Int64[]\n    # loop through all given values\n    for value\
    \ in values\n        # value type is Int64 - if so add it to vector\n        if\
    \ typeof(value) == Int64\n            push!(positive_values, value)\n        end\n\
    \    end\n    # return vector of positive values \n    return positive_values\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013264
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(x -> isa(x, Int64), values)\n    return convert(Vector{Int64},\
    \ values)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = []\n    for value in values\n        if typeof(value) == Int64\n\
    \            push!(integers, value)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    res = Vector{Int64}()\n    for value in values\n        if typeof(value)\
    \ == Int64\n            push!(res, value)\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = filter(isinteger, values)\n    return Int[i for i in ints]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpv2d81i0a.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpv2d81i0a.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpv2d81i0a.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv2d81i0a.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv2d81i0a.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpv2d81i0a.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpv2d81i0a.jl:8\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv2d81i0a.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv2d81i0a.jl:15\nTest Summary:\
    \ | Pass  "
  timestamp: 1660013268
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    res = []\n    for value in values\n        if isa(value, Int64)\n    \
    \        push!(res, value)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    #error(\"Not implemented\") # replace with your implementation\n    a\
    \ = []\n    for i in values\n        if isa(i, Int64)\n            push!(a, i)\n\
    \        end\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if typeof(v) == Int64]\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    tt = Vector{Int64}(undef, 0)\n    for v in values\n        if v isa Int64\n\
    \            push!(tt, v)\n        end\n    end\n    return tt\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [ x for x in values if typeof(x) == Int64 ]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(v -> isa(v, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013262
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    @assert isvector(values) \"Values must be a vector of jlthon values!\"\
    \n    return [v for v in values if isinstance(v, Int64)]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcm333jng.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpcm333jng.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ isvector not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpcm333jng.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm333jng.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm333jng.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpcm333jng.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: isvector\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpcm333jng.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm333jng.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm333jng.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpcm333jng.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: isvector\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpcm333jng.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm333jng.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm333jng.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013268
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = Int64[]\n    for value in values\n        if is_integer(value)\n\
    \            append!(filtered, value)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp6kiuvaet.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp6kiuvaet.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp6kiuvaet.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6kiuvaet.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kiuvaet.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp6kiuvaet.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp6kiuvaet.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6kiuvaet.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kiuvaet.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013268
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if is_integer(value)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpbi3q6ohj.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpbi3q6ohj.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(value::Int64)\n\
    \      @ Main ./none:0\n    [2] iterate(::Base.Iterators.Filter{var\"#1#2\", Vector{Any}})\n\
    \      @ Base.Iterators ./iterators.jl:447\n    [3] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [4] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Any}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpbi3q6ohj.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpbi3q6ohj.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpbi3q6ohj.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpbi3q6ohj.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(value::Int64)\n      @ Main\
    \ ./none:0\n    [2] iterate(::Base.Iterators.Filter{var\"#1#2\", Vector{Any}})\n\
    \      @ Base.Iterators ./iterators.jl:447\n    [3] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [4] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Any}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpbi3q6ohj.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpbi3q6ohj.jl:17 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-lev"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values) do v\n        returnisa(v,Int64)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp3xy74_gk.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp3xy74_gk.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ returnisa not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(v::Int64)\n   \
    \  @ Main /tmp/tmp3xy74_gk.jl:9\n   [2] filter(f::var\"#1#2\", a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [3] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp3xy74_gk.jl:8\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3xy74_gk.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3xy74_gk.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp3xy74_gk.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: returnisa\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(v::Int64)\n     @ Main /tmp/tmp3xy74_gk.jl:9\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [3] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp3xy74_gk.jl:8\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3xy74_gk.jl:19 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3xy74_gk.jl:16\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013268
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if is_integer(v)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpgm28qbcp.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgm28qbcp.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(v::Int64)\n \
    \     @ Main ./none:0\n    [2] iterate(::Base.Iterators.Filter{var\"#1#2\", Vector{Any}})\n\
    \      @ Base.Iterators ./iterators.jl:447\n    [3] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [4] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Any}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpgm28qbcp.jl:8\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpgm28qbcp.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpgm28qbcp.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgm28qbcp.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(v::Int64)\n      @ Main\
    \ ./none:0\n    [2] iterate(::Base.Iterators.Filter{var\"#1#2\", Vector{Any}})\n\
    \      @ Base.Iterators ./iterators.jl:447\n    [3] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [4] grow_to!(dest::Vector{Any}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Any}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpgm28qbcp.jl:8\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpgm28qbcp.jl:17 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpgm2"
  timestamp: 1660013268
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    n = length(values)\n    result = zeros(Int64, n)\n    j = 0\n    for i\
    \ in 1:n\n        value = values[i]\n        if typeof(value) is Int64\n     \
    \       j += 1\n            result[j] = value\n        end\n    end\n    return\
    \ result[1:j]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"Int64\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwigktn_v.jl:13\nin expression starting at /tmp/tmpwigktn_v.jl:13\n"
  stdout: ''
  timestamp: 1660013266
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    int_values = filter(x -> typeof(x) == Int64, values)\n    return convert(Vector{Int64},\
    \ int_values)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if typeof(values) <: Vector{Any}\n        return [v for v in values if\
    \ typeof(v) <: Int64]\n    else\n        throw(ArgumentError(\"values\"))\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013266
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = Vector{Int64}()\n    for val in values\n        if isa(val,\
    \ Int64)\n            push!(filtered, val)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # First, construct vector of converted values\n    converted_values =\
    \ Vector{Int64}(undef, length(values))\n    for (idx, val) in enumerate(values)\n\
    \        try\n            converted_values[idx] = convert(Int64, val)\n      \
    \  catch err\n            # Silently ignore conversion errors\n        end\n \
    \   end\n    # Filter vector\n    return filter(x -> !ismissing(x), converted_values)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp88e8bewf.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp88e8bewf.jl:26\n  Expression: candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n   Evaluated: [4, 0, 0, 0, 9, 0]\
    \ == [4, 9]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88e8bewf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88e8bewf.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp88e8bewf.jl:27\n  Expression: candidate([3, \"c\", 3, 3, \"\
    a\", \"b\"]) == [3, 3, 3]\n   Evaluated: [3, 0, 3, 3, 0, 0] == [3, 3, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88e8bewf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88e8bewf.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660013267
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    out = []\n    for v in values\n        if isa(v, Int64)\n            push!(out,\
    \ v)\n        end\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013266
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\n \n \n\"\"\" Filter\
    \ given vector of any jlthon values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp462f4lll.jl:12\nin expression starting at /tmp/tmp462f4lll.jl:12\n"
  stdout: ''
  timestamp: 1660013267
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    vector_is_empty = true\n    for value in values\n        if is_integer(value)\n\
    \            vector_is_empty = false\n            break\n        end\n    end\n\
    \    if vector_is_empty\n        return Vector{Int64}()\n    end\n    result =\
    \ Vector{Int64}()\n    for value in values\n        if is_integer(value)\n   \
    \         push!(result, value)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmphh0bjuqu.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmphh0bjuqu.jl:32\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmphh0bjuqu.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphh0bjuqu.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphh0bjuqu.jl:30\ntest set:\
    \ Error During Test at /tmp/tmphh0bjuqu.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmphh0bjuqu.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphh0bjuqu.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphh0bjuqu.jl:30\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013268
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(filtered, value)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013266
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(integers, value)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013266
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013261
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for i in 1:length(values)\n        if typeof(values[i]) != Int64\n   \
    \         deleteat!(values, i)\n        end\n    end\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpt0z86m5e.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpt0z86m5e.jl:21\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  BoundsError:\
    \ attempt to access 3-element Vector{Any} at index [5]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpt0z86m5e.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt0z86m5e.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt0z86m5e.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpt0z86m5e.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  BoundsError: attempt\
    \ to access 4-element Vector{Any} at index [5]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpt0z86m5e.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt0z86m5e.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt0z86m5e.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013269
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = Vector{Int64}()\n    for value in values\n        if isinteger(value)\n\
    \            push!(ints, value)\n        end\n    end\n    return ints\nend\n\"\
    \"\" Filter given vector of any jlthon values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp_ho2a8yh.jl:16\nin expression starting at /tmp/tmp_ho2a8yh.jl:16\n"
  stdout: ''
  timestamp: 1660013267
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(integers, value)\n        end\n    end\n    return integers\n\
    end\n    \n\"\"\" Sort given vector of any jlthon values\n    >>> sort([2, 3,\
    \ 1])\n    [1, 2, 3]\n    >>> sort([\"a\", \"c\", \"b\"])\n    [\"a\", \"b\",\
    \ \"c\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpef_rnqbo.jl:17\nin expression starting at /tmp/tmpef_rnqbo.jl:17\n"
  stdout: ''
  timestamp: 1660013267
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(a -> isa(a, Int64), values)\nend\n\"\"\" Filter given vector\
    \ of any jlthon values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n\
    \    [3.14]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    []\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpqvt576xc.jl:10\nin expression starting at /tmp/tmpqvt576xc.jl:10\n"
  stdout: ''
  timestamp: 1660013267
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values) do x\n        isa(x, Int64)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013266
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if typeof(v) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013266
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(isinteger, values)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp53sjpet_.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp53sjpet_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp53sjpet_.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53sjpet_.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53sjpet_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp53sjpet_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp53sjpet_.jl:8\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53sjpet_.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53sjpet_.jl:14\nTest Summary:\
    \ | Pass  "
  timestamp: 1660013261
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if typeof(v) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013266
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(value -> typeof(value) == Int64, values)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013267
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> x isa Int64, values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013267
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013267
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) === Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013267
