name: HumanEval_121_solution
language: jl
prompt: "\"\"\"Given a non-empty vector of integers, return the sum of all of the\
  \ odd elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
  \ 8, 7, 1])\n    12\n    >>> solution([3, 3, 3, 3, 3])\n    9\n    >>> solution([30,\
  \ 13, 24, 321])\n    0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
  \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
  \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4,\
  \ 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13,\
  \ 2, 9]) == 3)\nend\n"
completions: ["    odds = [lst[i] for i in eachindex(lst) if lst[i] % 2 == 1 && i\
    \ % 2 == 0]\n    return sum(odds)\nend", "    sum(lst[2:2:end][lst[2:2:end] %\
    \ 2 == 1])\nend", "    sum = 0\n    for (i, v) in enumerate(lst)\n        if mod(i,\
    \ 2) == 0 && mod(v, 2) == 1\n            sum += v\n        end\n    end\n    return\
    \ sum\nend", "    return sum(lst[2:2:end][lst[2:2:end] % 2 == 1])\nend", "   \
    \ \"\"\"Solution\n    \"\"\"\n    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!=\
    \ 0])\nend\n@time solution(test)\n@time solution([5, 8, 7, 1])\n@time solution([3,\
    \ 3, 3, 3, 3])\n@time solution([30, 13, 24, 321])", "    return sum(i for (i,\
    \ v) in enumerate(lst) if i % 2 == 0 && v % 2 == 1)\nend", "    if length(lst)\
    \ == 0 \n        return 0\n    end\n    if length(lst) == 1\n        return 0\n\
    \    end\n    n = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 == 1\n\
    \            n += lst[i]\n        end\n    end\n    return n\nend", "    return\
    \ sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend", "    indices = [i for i in\
    \ 1:length(lst) if i % 2 == 0]\n    return sum([x for x in lst[indices] if x %\
    \ 2 == 1])\nend", "    x=0\n    for i in 2:2:length(lst)\n       if(lst[i]%2!=0)\n\
    \        x=x+lst[i]\n       end\n    end\n    return x\nend", "    even_ints =\
    \ [i for i in lst if i % 2 == 0]\n    return sum(even_ints)\nend", "    ind =\
    \ 1:2:length(lst) # find indices of even position elements\n    sum(lst[ind[lst[ind]\
    \ .% 2 .!= 0]]) # sum the odd elements in even position\nend", "    return sum(lst[2:2:end][lst[2:2:end]\
    \ % 2 == 1])\nend", "    sum(lst[2:2:end][lst[2:2:end] % 2 .!= 0])\nend", "  \
    \  return sum(odd(lst[i]) && iseven(i) ? lst[i] : 0 for i = 1:length(lst))\nend",
  "    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend", "    return sum(lst[2:2:end])\n\
    end", "    #Vectors are passed as a pointer by default.\n    #So you don't have\
    \ to use the @views macro here.\n    return sum(lst[2:2:end])\nend\nsolution([5,\
    \ 8, 7, 1])", "    \n    index::Int64 = 1 \n    sum::Int64 = 0 \n    \n    while\
    \ index <= length(lst)\n        if mod(index, 2) == 0 && mod(lst[index], 2) ==\
    \ 1\n            sum += lst[index]\n        end\n        index += 1\n    end\n\
    \    \n    return sum\nend", "    ans = 0\n    i = 2\n    while i <= length(lst)\n\
    \        if lst[i] % 2 == 1\n            ans += lst[i]\n        end\n        i\
    \ += 2\n    end\n    return ans\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
