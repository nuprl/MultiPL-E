name: HumanEval_71_triangle_area
language: jl
prompt: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return the\
  \ area of\n    the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n    than the third side.\n    Example:\n\
  \    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n\
  \    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
  \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
  \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\
  \t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1,\
  \ 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
completions: ["    # YOUR CODE HERE\n    if a + b > c && a + c > b && b + c > a\n\
    \        area = (a + b + c) / 2\n        return sqrt(area * (area - a) * (area\
    \ - b) * (area - c))\n    else\n        return -1\n    end\nend", "    if (a +\
    \ b > c) & (a + c > b) & (b + c > a)\n        p = (a + b + c) / 2.0\n        return\
    \ sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return -1\n    end\n\
    end", "    # use type annotation and default to 0.0\n    # YOUR CODE HERE\n  \
    \  if a+b>c && a+c>b && b+c>a\n        s=(a+b+c)/2\n        return sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \    else\n        return -1\n    end\nend", "    \"\"\"Return the area of the\
    \ triangle when the sides form a valid triangle. \n    If not a valid triangle,\
    \ return -1\"\"\"\n    if (a + b > c) && (a + c > b) && (b + c > a)\n        #S\
    \ = (a + b + c) / 2\n        return sqrt(4 * a * b - (a - b)^2) / 4\n    else\n\
    \        return -1\n    end\nend", "    # find the semiperimeter\n    s = (a +\
    \ b + c) / 2", "    if a+b > c and a+c > b and b+c > a\n        return sqrt( (a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c)\
    \ )/4\n    else\n        return -1\n    end\nend", "    a, b, c = sorted([a, b,\
    \ c])\n    if a + b <= c\n        return -1\n    else\n        p = (a + b + c)\
    \ / 2\n        area = sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(area,\
    \ 2)\n    end\nend", "    \n    if (a+b > c) && (a+c > b) && (b+c > a)\n     \
    \   return sqrt( (a+b+c) * (-a+b+c) * (a-b+c) * (a+b-c) )/4.0\n    else\n    \
    \    return -1\n    end\nend", "    side_lengths = [a, b, c]\n    sorted_lengths\
    \ = sort(side_lengths)\n    if (sorted_lengths[1] + sorted_lengths[2] > sorted_lengths[3])\n\
    \        return sqrt(\n            (sorted_lengths[2] + sorted_lengths[3] - sorted_lengths[1])*\n\
    \            (sorted_lengths[1] + sorted_lengths[2] - sorted_lengths[3])*\n  \
    \          (sorted_lengths[1] + sorted_lengths[3] - sorted_lengths[2])*\n    \
    \        (sorted_lengths[1] + sorted_lengths[2] + sorted_lengths[3])\n       \
    \ )/4\n    else \n        return -1\n    end\nend", "    # YOUR CODE HERE\n  \
    \  if(a+b>c && a+c>b && b+c>a)\n        return sqrt(a+b+c)*(a+b+c/2)\n    else\n\
    \        return -1\n    end\nend", "    if a + b <= c || a + c <= b || b + c <=\
    \ a\n        return -1\n    else\n        s = (a + b + c) / 2\n        return\
    \ sqrt(s * (s - a) * (s - b) * (s - c))\n    end\nend", "    if ((a+b) > c) &&\
    \ ((a+c) > b) && ((b+c) > a)\n        p = (a+b+c)/2\n        return sqrt(p*(p-a)*(p-b)*(p-c))\n\
    \    else\n        return -1\n    end\nend", "    if a+b<c || a+c<b || b+c<a\n\
    \        return -1\n    else\n        s = (a+b+c)/2\n        return round(sqrt(s*(s-a)*(s-b)*(s-c)),2)\n\
    \    end\nend", "    \n    if a + b > c && a + c > b && b + c > a\n        s =\
    \ 0.5 * (a + b + c)\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n  \
    \      return area\n    else\n        return -1\n    end\nend", "    # Your code\
    \ here\n    if (a + b > c) && (a + c > b) && (b + c > a)\n        half_perimeter\
    \ = (a + b + c) / 2\n        area = sqrt(half_perimeter * (half_perimeter - a)\
    \ * (half_perimeter - b) * (half_perimeter - c))\n        return round(area, 2)\n\
    \    else\n        return -1\n    end\nend", "    if a+b > c && a+c > b && b+c\
    \ > a\n        p = (a+b+c)/2\n        s = sqrt(p*(p-a)*(p-b)*(p-c))\n        return\
    \ round(s, digits=2)\n    else\n        return -1\n    end\nend", "    return\
    \ 0.5*a*b\nend", "    a, b, c = sort([a, b, c])\n    if a + b <= c\n        return\
    \ -1\n    else\n        return (sqrt(s * (s - a) * (s - b) * (s - c)))\n    end\n\
    end", "    if c + b > a > 0 && c + a > b > 0 && a + b > c > 0\n        s = (a\
    \ + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n       \
    \ return round(area, 2)\n    else\n        return -1\n    end\nend", "    if (a+b>c)\
    \ && (a+c>b) && (b+c>a)\n        s = 0.5*(a+b+c)\n        area = sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \        return round(area,2)\n    else\n        return -1\n    end\nend", " \
    \   if a + b > c && a + c > b && b + c > a\n        p = (a + b + c) / 2\n    \
    \    sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        -1\n    end\nend",
  "    if (a + b <= c) || (a + c <= b) || (b + c <= a)\n        return -1\n    else\n\
    \        s = (a + b + c) / 2.0\n        area = sqrt(s * (s - a) * (s - b) * (s\
    \ - c))\n        return round(area, digits=2)\n    end\nend", "    return -1.0\n\
    end", "    if ((a + b) > c) && ((a + c) > b) && ((b + c) > a)\n        p = (a\
    \ + b + c) / 2.0\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)),\
    \ 2)\n    else\n        return -1\n    end\nend", "    if a > 0 && b > 0 && c\
    \ > 0 && (a + b > c) && (a + c > b) && (b + c > a)\n        # Use Heron's formula\n\
    \        p = (a + b + c) / 2.0\n        area = sqrt(p * (p - a) * (p - b) * (p\
    \ - c))\n        return round(area, 2)\n    else\n        return -1\n    end\n\
    end", "    #using (a + b > c) && (a + c > b) && (b + c > a)\n    if a + b > c\
    \ && a + c > b && b + c > a\n        s = (a + b + c) / 2\n        return sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n    else\n        return -1\n    end\nend",
  "    if (a + b > c) && (a + c > b) && (b + c > a)\n        p = (a + b + c) / 2\n\
    \        return sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return\
    \ -1\n    end\nend", "    \"\"\"\n    DOCSTRING\n    \"\"\"\n    s = (a + b +\
    \ c) / 2\n    return sqrt(s * (s - a) * (s - b) * (s - c))\nend", "    if (a +\
    \ b > c) && (a + c > b) && (b + c > a)\n        p = (a + b + c) / 2\n        return\
    \ sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return -1\n    end\n\
    end", "    a, b, c = sorted([a, b, c])\n    if a + b <= c\n        return -1\n\
    \    else\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n    end\nend", "    # Write your code here\n    return\nend",
  "    #add your code here\nend\n@test triangle_area(3, 4, 5) == 6.0\n@test triangle_area(1,\
    \ 2, 10) == -1\n ", "    x = a + b\n    y = b + c\n    z = a + c\n    if (x >\
    \ c && y > a && z > b)\n        s = (a + b + c)/2\n        return sqrt(s * (s\
    \ - a) * (s - b) * (s - c))\n    else\n        return -1\n    end\nend", "   \
    \ if a < b + c && b < a + c && c < a + b\n        p = (a + b + c) / 2\n      \
    \  return sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return -1\n\
    \    end\nend", "    \n    max_side_length = max(a, b, c)\n    max_side_length_index\
    \ = argmax(a, b, c)\n    \n    if max_side_length_index == 1\n        side_sum\
    \ = b + c\n    elseif max_side_length_index == 2\n        side_sum = a + c\n \
    \   elseif max_side_length_index == 3\n        side_sum = a + b\n    end\n   \
    \ \n    if side_sum > max_side_length\n        s = 0.5 * (a + b + c)\n       \
    \ area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, digits=2)\n\
    \    else\n        return -1\n    end\nend", "    if a > 0 && b > 0 && c > 0 &&\
    \ a + b > c && a + c > b && b + c > a\n        s = (a + b + c) / 2\n        return\
    \ sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        return -1\n    end\n\
    end", "    # your code here\nend", "    if a < b + c && b < a + c && c < a + b\n\
    \        p = (a + b + c) / 2\n        return sqrt(p * (p - a) * (p - b) * (p -\
    \ c))\n    else\n        return -1\n    end\nend", "    if a + b > c && a + c\
    \ > b && b + c > a\n        p = (a + b + c) / 2.0\n        return (p * (p - a)\
    \ * (p - b) * (p - c)) ^ 0.5\n    else\n        return -1\n    end\nend", "  \
    \  if (a+b > c) && (a+c > b) && (b+c > a)\n        p = (a+b+c)/2.0\n        area\
    \ = sqrt(p*(p-a)*(p-b)*(p-c))\n        return round(area, digits=2)\n    else\n\
    \        return -1\n    end\nend", "    if (a + b > c) && (a + c > b) && (b +\
    \ c > a)\n        return (a + b + c) / 2\n    else\n        return -1\n    end\n\
    end", "    if (a + b < c) || (a + c < b) || (b + c < a)\n        return -1\n \
    \   else \n        p = (a + b + c) / 2\n        S = sqrt(p * (p - a) * (p - b)\
    \ * (p - c))\n        return round(S, digits=2)\n    end\nend", "    if ((a +\
    \ b > c) && (a + c > b) && (b + c > a))\n        p = (a + b + c) / 2\n       \
    \ area = sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(area, 2)\n\
    \    else\n        return -1\n    end\nend", "    if a + b <= c || a + c <= b\
    \ || b + c <= a\n        return -1\n    else\n        s = (a + b + c) / 2\n  \
    \      return sqrt(s * (s - a) * (s - b) * (s - c))\n    end\nend", "    if a\
    \ <= 0 || b <= 0 || c <= 0\n        return -1\n    end\n    if a + b <= c || a\
    \ + c <= b || b + c <= a\n        return -1\n    end\n    p = (a + b + c) / 2\n\
    \    return sqrt(p * (p - a) * (p - b) * (p - c))\nend", "    \"\"\"\n    Calculate\
    \ the area of a triangle given 3 sides\n    \"\"\"\n    if (a+b > c) & (a+c >\
    \ b) & (b+c > a)\n        return (a*b)/2\n    else\n        return -1\n    end\n\
    end", "    if (a + b <= c) || (a + c <= b) || (b + c <= a)\n        return -1\n\
    \    else \n        p = (a + b + c) / 2\n        return sqrt(p * (p - a) * (p\
    \ - b) * (p - c))\n    end\nend", "    # using the Heron's formula to compute\
    \ the area of a triangle \n    # since it does not matter the way the three points\
    \ are arranged\n    # the area will be the same\n    # for more detail: https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \    if (a + b > c) && (a + c > b) && (b + c > a)\n        p = (a + b + c) / 2.0\
    \ # semiperimeter\n        s = sqrt(p * (p - a) * (p - b) * (p - c))\n       \
    \ return round(s, 2)\n    else\n        return -1.0\n    end\nend", "    if(a\
    \ < 0 || b < 0 || c < 0)\n        return -1\n    end\n    if(a + b > c && a +\
    \ c > b && b + c > a)\n        p = (a + b + c) / 2\n        return (p * (p - a)\
    \ * (p - b) * (p - c)) ^ 0.5\n    else\n        return -1\n    end\nend", "  \
    \  if (a+b>c) && (a+c>b) && (b+c>a)\n        p = (a+b+c)/2\n        area = sqrt(p*(p-a)*(p-b)*(p-c))\n\
    \        return round(area, 2)\n    else\n        return -1\n    end\nend", " \
    \   if a+b > c && a+c > b && b+c > a\n        if a == b && b == c\n          \
    \  return triangle_area_helper(a, b, c) / 4\n        elseif a == b || b == c ||\
    \ a == c\n            return triangle_area_helper(a, b, c) / 2\n        else\n\
    \            return triangle_area_helper(a, b, c)\n        end\n    else\n   \
    \     return -1\n    end\nend", "    if a+b>c && a+c>b && b+c>a\n        return\
    \ -1\n    else\n        half_p = (a+b+c)/2\n        return sqrt(half_p*(half_p-a)*(half_p-b)*(half_p-c))\n\
    \    end\nend", "    s = a + b + c\n    v = (s - a) * (s - b) * (s - c)\n    if\
    \ v <= 0:\n        return -1\n    else\n        return sqrt(v) * 0.25\n    end\n\
    end\n\"\"\"\n    Given an amount of change in cents, print out the optimal solution\
    \ by \n    printing one line for each way to make change. First, print the number\
    \ of \n    quarters. Second, print the number of dimes. Third, print the number\
    \ of \n    nickels. Fourth, print the number of pennies.\n    Note: Use int division\
    \ to convert between float division.\n    Example:\n    >>> change(75)\n    3\
    \ quarters\n    0 dimes\n    0 nickels\n    0 pennies\n    >>> change(96)\n  \
    \  3 quarters\n    1 dimes\n    1 nickels\n    1 pennies\n    \"\"\"", "    if\
    \ a+b>c && a+c>b && b+c>a\n        p = (a+b+c)/2\n        x = p*(p-a)*(p-b)*(p-c)\n\
    \        s = round(sqrt(x),digits=2)\n        return s\n    else\n        return\
    \ -1\n    end\nend\n\"\"\"\n    Given a list of numbers, return the smallest and\
    \ the largest numbers in the list.\n    Example:\n    >>> min_max([3, 5, 1, -1,\
    \ -5])\n    [-5, 5]\n    \"\"\"", "    \"\"\"\n    Given the lengths of the three\
    \ sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal\
    \ points if the three sides form a valid triangle. \n    Otherwise return -1\n\
    \    Three sides make a valid triangle when the sum of any two sides is greater\
    \ \n    than the third side.\n    Example:\n    >>> triangle_area(3, 4, 5)\n \
    \   6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    # Fill in your\
    \ code here.\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) *\
    \ (s - c))\n    if a + b > c and a + c > b and b + c > a\n        return round(area,\
    \ 2)\n    else\n        return -1\nend", "    if (a + b > c) && (a + c > b) &&\
    \ (b + c > a)\n        p = (a + b + c) / 2\n        return sqrt(p * (p - a) *\
    \ (p - b) * (p - c))\n    else\n        return -1\n    end\nend", "    c1 = 0.5*a*b\n\
    \    c2 = 0.5*a*c\n    c3 = 0.5*b*c\n    if c1 > c2 && c1 > c3\n        return\
    \ c1\n    elseif c2 > c1 && c2 > c3\n        return c2\n    elseif c3 > c1 &&\
    \ c3 > c2\n        return c3\n    else\n        return -1\n    end\nend", "  \
    \  hypotenuse = cmp(a*a + b*b, c*c)\n    return (a*b*sqrt(1 + hypotenuse))/2 if\
    \ hypotenuse != 0 else -1\nend", "    if is_triangle(a, b, c)\n        area =\
    \ 0.25*sqrt((a+b+c)*(-a+b+c)*(a-b+c)*(a+b-c))\n        return round(area, digits=2)\n\
    \    else\n        return -1\n    end\nend", "    return -1\nend", "    return\
    \ a * b * c < 0 ? -1 : -1\nend", "    # your code here\nend", "    if (a+b>c)\
    \ && (a+c>b) && (b+c>a)\n        return sqrt(a*a+b*b+c*c)\n    else\n        return\
    \ -1\n    end\nend", "    \"\"\"\n    Given the lengths of the three sides of\
    \ a triangle. Return the area of\n    the triangle rounded to 2 decimal points\
    \ if the three sides form a valid triangle. \n    Otherwise return -1\n    Three\
    \ sides make a valid triangle when the sum of any two sides is greater \n    than\
    \ the third side.\n    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n   \
    \ >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    \n    s = 1/2 * (a + b\
    \ + c)\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    if area < 0\n  \
    \      area = -1\n    end\n    return round(area, digits=2)\nend", "    if a +\
    \ b > c && a + c > b && b + c > a\n        p = (a + b + c) / 2\n        return\
    \ sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return -1\n    end\n\
    end", "    if (a + b > c) && (a + c > b) && (b + c > a)\n        p = (a + b +\
    \ c) / 2\n        # This is Heron's formula for area of a triangle\n        area\
    \ = sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(area, 2)\n   \
    \ else\n        return -1\n    end\nend", "    return -1.0 \nend", "    if (a\
    \ + b > c) && (a + c > b) && (b + c > a)\n        return sqrt(s * (s - a) * (s\
    \ - b) * (s - c))\n    else\n        return -1\n    end\nend", "    # TODO: write\
    \ code here\nend", "    # WRITE CODE HERE!\n    if(a+b>c && a+c>b && b+c>a)\n\
    \        p = (a+b+c)/2\n        area = sqrt(p*(p-a)*(p-b)*(p-c))\n        return\
    \ round(area,2)\n    else\n        return -1\n    end\nend", "    if (a + b >\
    \ c) && (a + c > b) && (b + c > a)\n        p = (a + b + c) / 2.0\n        return\
    \ sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return -1\n    end\n\
    end", "    if (a+b) <= c || (a+c) <= b || (b+c) <= a\n        return -1\n    else\n\
    \        s = (a+b+c)/2\n        return sqrt(s*(s-a)*(s-b)*(s-c))\n    end\nend",
  "    if a <= 0 || b <= 0 || c <= 0\n        return -1\n    end\n    if a+b <= c\
    \ || a+c <= b || b+c <= a\n        return -1\n    end\n    x = (a+b+c)/2\n   \
    \ area = sqrt(x*(x-a)*(x-b)*(x-c))\n    return round(area, digits=2)\nend", " \
    \   # write code to solve the problem here\n    return -1.0\nend", "    a, b,\
    \ c = sorted([a, b, c])\n    if a + b <= c\n        return -1\n    end\n    s\
    \ = (a + b + c) / 2\n    return sqrt(s * (s - a) * (s - b) * (s - c))\nend", " \
    \   if (a + b > c) & (a + c > b) & (b + c > a)\n        p = (a + b + c) / 2\n\
    \        area = sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(area,\
    \ 2)\n    else\n        return -1\n    end\nend", "    if a + b > c && a + c >\
    \ b && b + c > a\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n        return round(area, 2)\n    else\n        return\
    \ -1\n    end\nend", "    if(a + b > c) && (a + c > b) && (b + c > a)\n      \
    \  s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \    else\n        return -1\n    end\nend", "    s = (a + b + c) / 2\n    area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c))\n    if area == 0\n        return -1\n\
    \    else\n        return round(area, 2)\n    end\nend", "    \n    sorted = sort([a,\
    \ b, c])\n    a = sorted[1]\n    b = sorted[2]\n    c = sorted[3]\n    \n    s\
    \ = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    \n\
    \    if(a + b > c)\n        return round(area, 2)\n    else\n        return -1\n\
    \    end\nend", "    \n    # YOUR CODE HERE\n    \nend", "    if a + b > c &&\
    \ a + c > b && b + c > a \n        s = (a + b + c) / 2\n        return sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n    else\n        return -1\n    end\nend",
  "    if a + b > c && a + c > b && b + c > a\n        p = (a + b + c) / 2\n     \
    \   sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        -1\n    end\nend\n\
    @test triangle_area(3, 4, 5) == 6.0\n@test triangle_area(1, 2, 10) == -1", " \
    \   if a + b > c && a + c > b && b + c > a\n        p = (a + b + c) / 2\n    \
    \    sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        -1\n    end\nend",
  "    if (a + b) < c || (a + c) < b || (b + c) < a\n        return -1\n    else\n\
    \        # calculate the half-perimeter\n        p = (a + b + c) / 2", "    sum\
    \ = a + b + c\n    if a + b > c && a + c > b && b + c > a \n        return sqrt(sum(sum\
    \ - a)(sum - b)(sum - c)) / 4\n    else \n        return -1\n    end\nend", " \
    \   if((a + b) > c) && ((a + c) > b) && ((b + c) > a)\n        p = (a + b + c)\
    \ / 2.0\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), digits=2)\n\
    \    else\n        return -1\n    end\nend", "    if (a < b + c) && (b < a + c)\
    \ && (c < a + b)\n        p = (a + b + c) / 2.0\n        return sqrt(p * (p -\
    \ a) * (p - b) * (p - c))\n    else\n        return -1\n    end\nend", "    if\
    \ a + b > c && a + c > b && b + c > a\n        return sqrt(s(a, b, c) * (s(a,\
    \ b, c) - a) * (s(a, b, c) - b) * (s(a, b, c) - c))\n    else\n        return\
    \ -1\n    end\nend\n\"\"\"\n    Given a string and a number return a string that\
    \ has each letter of the original string\n    repeated as many times as the corresponding\
    \ number in the list of numbers.\n    There should be commas separating each string.\n\
    \    Example:\n    >>> repeat_letters(\"abcd\", [1, 2, 3, 4])\n    \"a,bb,ccc,dddd\"\
    \n    \"\"\"", "    \n    if((a+b > c) && (a+c > b) && (b+c > a))\n        # Calculate\
    \ the perimeter of the triangle\n        p = (a + b + c)/2.0\n        # Calculate\
    \ the area using Heron's formula\n        area = sqrt(p*(p-a)*(p-b)*(p-c))\n \
    \       return round(area, digits=2)\n    else\n        return -1\n    end\nend",
  "    #pre-define variables\n    half_perimeter::Float64 = 0.0\n    area::Float64\
    \ = 0.0\n    triangle::Bool = false\n    \n    #logic for returning -1 if not\
    \ triangle\n    if a <= 0 || b <= 0 || c <= 0 || a + b <= c || a + c <= b || b\
    \ + c <= a\n        return -1\n    else\n        triangle = true\n    end\n  \
    \  \n    #if triangle, then return area\n    if triangle == true\n        half_perimeter\
    \ = (a + b + c) / 2\n        area = sqrt(half_perimeter * (half_perimeter - a)\
    \ * (half_perimeter - b) * (half_perimeter - c))\n        return round(area, digits=2)\n\
    \    end\nend", "  if (a + b > c) && (a + c > b) && (b + c > a)\n    ((a + b +\
    \ c) / 2) * (sqrt(((a + b + c) / 2) * (((a + b + c) / 2) - a) * (((a + b + c)\
    \ / 2) - b) * (((a + b + c) / 2) - c)))\n  else\n    -1\n  end\nend", "    sides\
    \ = [a, b, c]\n    if is_valid_triangle(sides)\n        return area(sides)\n \
    \   else\n        return -1\n    end\nend", "    \n    if (a + b > c) && (a +\
    \ c > b) && (b + c > a) \n        s = (a + b + c) / 2.0\n        return sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n    else\n        return -1\n    end\nend",
  "    if(a + b > c && a + c > b && b + c > a)\n        return 0.5 * a * b\n    else\n\
    \        return -1\n    end\nend\nprintln(triangle_area(3, 4, 5))\nprintln(triangle_area(1,\
    \ 2, 10))\nprintln(triangle_area(3, 4, 5))\nprintln(triangle_area(1, 2, 10))\n\
    println(triangle_area(3, 4, 5))\nprintln(triangle_area(1, 2, 10))", "    if a\
    \ + b > c && a + c > b && b + c > a\n        p = (a + b + c) / 2\n        area\
    \ = p * (p - a) * (p - b) * (p - c)\n        return area ^ 0.5\n    else\n   \
    \     return -1\n    end\nend", "    if a + b > c && a + c > b && b + c > a\n\
    \        p = (a + b + c) / 2\n        s = sqrt(p * (p - a) * (p - b) * (p - c))\n\
    \        floor(s * 100) / 100\n    else\n        -1\n    end\nend", "    if (a\
    \ + b > c) && (a + c > b) && (b + c > a)\n        # calculate the semi-perimeter\n\
    \        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\n        return round(area, digits=2)\n    else\n        return -1\n   \
    \ end\nend", "    if a + b > c and a + c > b and b + c > a\n        p = (a + b\
    \ + c) / 2\n        sqrt(p * (p - a) * (p - b) * (p - c))\n    else -1\nend",
  "    \n    if a <= 0 || b <= 0 || c <= 0\n        return -1\n    end\n    \n   \
    \ if (a + b <= c) || (a + c <= b) || (b + c <= a)\n        return -1\n    end\n\
    \    \n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \    return area\nend", "    if ((a+b)>c) && ((a+c)>b) && ((b+c)>a)\n        return\
    \ sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4\n    else\n        return -1\n    end\n\
    end\nprintln(triangle_area(3, 4, 5))\nprintln(triangle_area(1, 2, 10))\n ", " \
    \   s = (a + b + c) / 2\n    return ((s * (s - a) * (s - b) * (s - c)) ^ 0.5)\n\
    end", "    if (a+b > c) & (a+c > b) & (b+c > a)\n        S = (a+b+c)/2\n     \
    \   return sqrt(S*(S-a)*(S-b)*(S-c))\n    else\n        return -1\n    end\nend",
  "    if (a + b) > c && (a + c) > b && (b + c) > a\n        p = (a + b + c) / 2\n\
    \        return sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return\
    \ -1\n    end\nend", "    if a+b > c && a+c > b && b+c > a\n        return sqrt(half_perimeter(a,\
    \ b, c) * (half_perimeter(a, b, c) - a) * \n                    (half_perimeter(a,\
    \ b, c) - b) * (half_perimeter(a, b, c) - c))\n    else\n        return -1\n \
    \   end\nend\n    \n    ", "    if a + b > c && a + c > b && b + c > a\n     \
    \   return sqrt(p*(p-a)*(p-b)*(p-c))\n    else\n        return -1\n    end\nend",
  "    if a+b>c && a+c>b && b+c>a\n        p = (a+b+c)/2\n        return sqrt(p*(p-a)*(p-b)*(p-c))\n\
    \    else\n        return -1\n    end\nend\n\"\"\"\n    Given the lengths of the\
    \ three sides of a triangle. Return the area of\n    the triangle rounded to 2\
    \ decimal points if the three sides form a valid triangle. \n    Otherwise return\
    \ -1\n    Three sides make a valid triangle when the sum of any two sides is greater\
    \ \n    than the third side.\n    Example:\n    >>> triangle_area(3, 4, 5)\n \
    \   6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"", "    if a + b >\
    \ c && a + c > b && b + c > a\n        p = (a + b + c) / 2\n        return round(sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\n    else\n        return -1\n    end\nend",
  "    if (a + b) < c || (a + c) < b || (b + c) < a \n        return -1.0\n    else\
    \ \n        p = (a + b + c) / 2.0\n        return sqrt(p * (p - a) * (p - b) *\
    \ (p - c))\n    end\nend", "    if a + b > c && a + c > b && b + c > a \n    \
    \    p = (a + b + c) / 2 \n        s = sqrt(p * (p - a) * (p - b) * (p - c))\n\
    \        round(s, 2)\n    else\n        -1\n    end\nend", "    return 0.0\nend",
  "    len = [a, b, c]\n    len.sort()\n    if (len[1] + len[2] <= len[3])\n     \
    \   return -1\n    else\n        # Heron's Formula\n        p = sum(len) / 2\n\
    \        area = sqrt(p * (p - len[1]) * (p - len[2]) * (p - len[3]))\n       \
    \ return round(area, 2)\n    end\nend", "    if a + b > c && a + c > b && b +\
    \ c > a \n        # Heron's formula\n        s = (a + b + c) / 2\n        area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c))\n        round(area, digits=2)\n   \
    \ else\n        -1\n    end\nend", "    if(a + b > c && a + c > b && b + c > a)\n\
    \        p = (a + b + c)/2\n        return sqrt(p*(p-a)*(p-b)*(p-c))\n    else\n\
    \        return -1\n    end\nend", "    if (a + b > c) && (a + c > b) && (b +\
    \ c > a)\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s\
    \ - b) * (s - c))\n    else\n        return -1\n    end\nend", "    triangle =\
    \ (a, b, c)\n    if isvalidtriangle(triangle)\n        return base(triangle) *\
    \ height(triangle) / 2\n    else\n        return -1\n    end\nend", "    if !(a\
    \ + b > c && a + c > b && b + c > a)\n        return -1\n    end\n    t = (a +\
    \ b + c) / 2.0\n    return sqrt(t * (t - a) * (t - b) * (t - c))\nend", "    if\
    \ ((a + b) > c) && ((a + c) > b) && ((b + c) > a)\n        p = (a + b + c) / 2\n\
    \        return sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return\
    \ -1\n    end\nend\n \nprintln(triangle_area(3, 4, 5))\nprintln(triangle_area(1,\
    \ 2, 10))", "    # if (a+b>c) && (a+c>b) && (b+c>a)\n    #     s = (a+b+c)/2\n\
    \    #     area = sqrt(s*(s-a)*(s-b)*(s-c))\n    #     return round(area, 2)\n\
    \    # else\n    #     return -1\n    (a+b>c) && (a+c>b) && (b+c>a) ? round(sqrt((a+b+c)/2*(a+b+c)/2-a)*(a+b+c)/2-b)*(a+b+c)/2-c),\
    \ 2) : -1\nend", "    \n    if (a + b > c) && (a + c > b) && (b + c > a)\n   \
    \     s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \        return round(area, 2)\n    else\n        return -1\n    end", "    if\
    \ (a + b) > c && (a + c) > b && (b + c) > a\n        s = (a + b + c) / 2\n   \
    \     return round(sqrt(s * (s - a) * (s - b) * (s - c)), digits=2)\n    else\n\
    \        return -1\n    end\nend\n\"\"\"\n    In an array of only positive integers,\
    \ find the maximum possible difference \n    between two elements such that larger\
    \ element appears after the smaller number.\n    Example:\n    >>> max_diff([2,\
    \ 3, 10, 6, 4, 8, 1])\n    8\n    >>> max_diff([7, 9, 5, 6, 3, 2])\n    2\n  \
    \  \"\"\"", "    if a + b > c && a + c > b && b + c > a\n        return 0.5 *\
    \ sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a))\n    else\n    \
    \    return -1\n    end\nend\nprintln(triangle_area(3, 4, 5))\nprintln(triangle_area(1,\
    \ 2, 10))", "    if a + b > c && a + c > b && b + c > a\n        s = 0.5 * (a\
    \ + b + c)\n        sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        -1\n\
    \    end\nend", "    if a + b > c && a + c > b && b + c > a\n        p = (a +\
    \ b + c) / 2.0\n        return sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n\
    \        return -1\n    end\nend", "    if (a < b + c) && (b < a + c) && (c <\
    \ a + b)\n        p = (a + b + c) / 2\n        return sqrt(p * (p - a) * (p -\
    \ b) * (p - c))\n    else\n        return -1\n    end\nend", "    if (a+b>c) &&\
    \ (a+c>b) && (b+c>a)\n        s = (a+b+c)/2\n        area = sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \        return round(area,2)\n    else\n        return -1\n    end\nend", " \
    \   if a+b > c && a+c > b && b+c > a\n        s = (a+b+c)/2.0\n        area =\
    \ sqrt(s*(s-a)*(s-b)*(s-c))\n        return round(area,2)\n    else\n        return\
    \ -1\n    end\nend", "    return -1\nend", "    if a+b<c || a+c<b || b+c<a\n \
    \       return -1\n    else\n        return (a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c)/24\n\
    \    end\nend", "    # your code here\n    if (a + b > c) & (a + c > b) & (b +\
    \ c > a)\n        return sqrt((a + b + c) * (a + b - c) * (a - b + c) * (-a +\
    \ b + c)) / 4\n    else\n        return -1\n    end\nend", "    if (a+b > c) &&\
    \ (a+c > b) && (b+c > a)\n        p = (a+b+c)/2\n        sqrt(p*(p-a)*(p-b)*(p-c))\n\
    \    else\n        -1\n    end\nend", "    if is_valid_triangle(a, b, c)\n   \
    \     p = (a + b + c) / 2\n        sqrt(p * (p - a) * (p - b) * (p - c))\n   \
    \ else\n        -1\n    end\nend", "    # test if it is a valid triangle \n  \
    \  if (a+b>c) && (a+c>b) && (b+c>a) \n        # Heron's formula\n        s = (a+b+c)/2.0\n\
    \        return sqrt(s*(s-a)*(s-b)*(s-c))\n    else\n        return -1\n    end\n\
    end", "    if a + b > c || a + c > b || b + c > a\n        return sqrt((a + b\
    \ + c) * (a + b - c) * (a - b + c) * (-a + b + c)) / 4\n    else\n        return\
    \ -1\n    end\nend", "    if (a + b > c) && (a + c > b) && (b + c > a)\n     \
    \   p = (a + b + c) / 2.0\n        return sqrt(p * (p - a) * (p - b) * (p - c))\n\
    \    else\n        return -1\n    end\nend", "    if a+b>c && a+c>b && b+c>a\n\
    \        return 0.5*a*b\n    else\n        return -1\n    end\nend\nprintln(triangle_area(3,\
    \ 4, 5))\nprintln(triangle_area(1, 2, 10))", "    #check if a valid triangle\n\
    \    if a+b>c && a+c>b && b+c>a\n        #use Heron's formula\n        p = (a+b+c)/2\n\
    \        return sqrt(p*(p-a)*(p-b)*(p-c))\n    else\n        return -1\n    end\n\
    end\nprintln(triangle_area(3, 4, 5))\nprintln(triangle_area(1, 2, 10))\n \n \n\
    \ \n \n\"\"\"\n    Given an integer n, return an array containing n random integers\
    \ that \n    range from 0 to 10.\n    Example:\n    >>> ten_random_ints(10)\n\
    \    [2, 3, 1, 9, 5, 3, 4, 9, 5, 4]\n    \"\"\"", "    if a + b > c && a + c >\
    \ b && b + c > a\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s -\
    \ a) * (s - b) * (s - c))\n    else\n        return -1\n    end\nend\n@test triangle_area(3,\
    \ 4, 5) == 6.0\n@test triangle_area(1, 2, 10) == -1", "    if (a + b > c) && (a\
    \ + c > b) && (b + c > a)\n        p = (a + b + c) / 2\n        return round(sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\n    else\n        return -1\n    end\nend",
  "    if (a > b+c) || (b > a+c) || (c > a+b)\n        return -1\n    else\n     \
    \   p = (a+b+c)/2\n        area = sqrt(p*(p-a)*(p-b)*(p-c))\n        return round(area,\
    \ digits=2)\n    end\nend", "    if a + b > c && a + c > b && b + c > a\n    \
    \    p = (a + b + c) / 2\n        return sqrt(p * (p - a) * (p - b) * (p - c))\n\
    \    else\n        return -1\n    end\nend", "  if a + b > c && a + c > b && b\
    \ + c > a\n    sqrt(s(a, b, c) * (s(a, b, c) - a) * (s(a, b, c) - b) * (s(a, b,\
    \ c) - c))\n  else\n    -1\n  end\nend", "    if a+b>c && a+c>b && b+c>a\n   \
    \     p = (a+b+c)/2\n        area = sqrt(p*(p-a)*(p-b)*(p-c))\n        return\
    \ round(area, digits=2)\n    else\n        return -1\n    end\nend", "    if (a+b\
    \ > c) & (a+c > b) & (b+c > a)\n        p = (a+b+c)/2.0\n        return sqrt(p*(p-a)*(p-b)*(p-c))\n\
    \    else\n        return -1\n    end\nend", "    if a + b > c && a + c > b &&\
    \ b + c > a\n        return 0.5 * a * b\n    else\n        return -1\n    end\n\
    end", "    if a + b <= c || a + c <= b || b + c <= a\n        return -1\n    else\n\
    \        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\n    end\nend", "    if (a + b) > c && (a + c) > b && (b + c) > a\n    \
    \    p = (a + b + c) / 2\n        area = sqrt(p * (p - a) * (p - b) * (p - c))\n\
    \        return round(area, 2)\n    else\n        return -1\n    end\nend", " \
    \   if (a+b > c) && (a+c > b) && (b+c > a)\n        p = (a+b+c)/2\n        area\
    \ = sqrt(p*(p-a)*(p-b)*(p-c))\n        round(area, digits=2)\n    else\n     \
    \   -1\n    end\nend", "    if (a+b)>c && (a+c)>b && (b+c)>a\n        return (a+b+c)/2\n\
    \    else\n        return -1\n    end\nend", "    if a + b > c && a + c > b &&\
    \ b + c > a\n        s = 0.5 * (a + b + c)\n        return (s * (s - a) * (s -\
    \ b) * (s - c)) ^ 0.5\n    else\n        return -1\n    end\nend", "    if((a\
    \ + b > c) && (a + c > b) && (b + c > a))\n        p = (a + b + c)/2.0\n     \
    \   return sqrt(p*(p-a)*(p-b)*(p-c))\n    else\n        return -1\n    end\nend",
  "    a, b, c = sort((a, b, c))\n    if a + b <= c\n        return -1\n    end\n\
    \    p = (a + b + c) / 2\n    return sqrt(p * (p - a) * (p - b) * (p - c))\nend",
  "    if a+b > c && a+c > b && b+c > a\n        return area(a, b, c)\n    else\n\
    \        return -1\n    end\nend", "    if (a + b > c) && (a + c > b) && (b +\
    \ c > a)\n        p = (a + b + c) / 2\n        sqrt(p * (p - a) * (p - b) * (p\
    \ - c))\n    else \n        -1\n    end\nend", "    \n    # Error check if the\
    \ three sides form a valid triangle.\n    if (a + b) < c || (a + c) < b || (b\
    \ + c) < a\n        return -1\n    end\n    \n    # Compute the area of the triangle.\n\
    \    p = (a + b + c) / 2\n    s = sqrt(p * (p - a) * (p - b) * (p - c))\n    \n\
    \    # Return the area of the triangle rounded to 2 decimal points.\n    return\
    \ round(s, digits=2)\nend", "    s = (a + b + c) / 2\n    if (s - a) * (s - b)\
    \ * (s - c) < 0\n        return -1\n    else\n        return sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n    end\nend", "    c1 = a + b\n    c2 = b + c\n    c3\
    \ = a + c\n    if a > 0 && b > 0 && c > 0 && (c1 > c && c2 > a && c3 > b)\n  \
    \      p = (a + b + c) / 2\n        area = sqrt(p * (p - a) * (p - b) * (p - c))\n\
    \        return round(area, digits=2)\n    else\n        return -1\n    end\n\
    end", "    # Base case\n    if (a+b <= c) || (a+c <= b) || (b+c <= a)\n      \
    \  return -1.0\n    end\n    # Recursive case\n    return (a + b + c) / 2 * 1.0\n\
    end", "    if (a + b > c) && (a + c > b) && (b + c > a)\n        p = (a + b +\
    \ c) / 2\n        s = sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(s,\
    \ 2)\n    else\n        return -1\n    end\nend", "    if (a + b > c) && (a +\
    \ c > b) && (b + c > a)\n        s = (a + b + c) / 2.0\n        (s * (s - a) *\
    \ (s - b) * (s - c)) ^ 0.5\n    else\n        -1\n    end\nend", "    #check if\
    \ valid\n    if a + b > c && a + c > b && b + c > a\n        #calculate area\n\
    \        s = (a + b + c) / 2.0\n        sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \    else\n        -1\n    end\nend", "    if a < b + c && b < a + c && c < a\
    \ + b \n        p = (a + b + c) / 2.0\n        return sqrt(p * (p - a) * (p -\
    \ b) * (p - c))\n    else\n        return -1\n    end\nend", "    if a + b > c\
    \ && a + c > b && b + c > a\n        x = (a + b + c) / 2\n        x * (x - a)\
    \ * (x - b) * (x - c) |> \u221A |> round(digits=2)\n    else\n        -1\n   \
    \ end\nend", "    if (a > b + c) || (b > a + c) || (c > a + b)\n        return\
    \ -1\n    else \n        s = (a + b + c) / 2\n        return sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n    end\nend", "    if (a + b > c) && (a + c > b) && (b\
    \ + c > a)\n        return sqrt(semi_perimeter(a, b, c) * (semi_perimeter(a, b,\
    \ c) - a) * (semi_perimeter(a, b, c) - b) * (semi_perimeter(a, b, c) - c))\n \
    \   else\n        return -1\n    end\nend", "    if(a<=0 || b<=0 || c<=0)\n  \
    \      return -1\n    end\n    if(a+b<=c || a+c<=b || b+c<=a)\n        return\
    \ -1\n    end\n    p = (a+b+c)/2\n    return sqrt(p*(p-a)*(p-b)*(p-c))\nend",
  "    if (a + b > c) && (a + c > b) && (b + c > a)\n        p = (a + b + c) / 2\n\
    \        sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        -1\n    end\n\
    end", "    if (a + b > c) && (a + c > b) && (b + c > a)\n        s = (a + b +\
    \ c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return\
    \ round(area, 2)\n    else\n        return -1\n    end\nend", "    if((a+b) >\
    \ c && (a+c) > b && (b+c) > a)\n        p = (a+b+c)/2\n        return sqrt(p*(p-a)*(p-b)*(p-c))\n\
    \    else\n        return -1\n    end\nend", "    if a + b <= c || a + c <= b\
    \ || b + c <= a \n        return -1\n    else\n        return sqrt( (a + b + c)*(a\
    \ + b - c)*(a - b + c)*(-a + b + c) ) / 4\n    end\nend", "    if a + b > c &&\
    \ a + c > b && b + c > a\n        p = (a + b + c) / 2\n        s = sqrt(p * (p\
    \ - a) * (p - b) * (p - c))\n        return round(s, 2)\n    else\n        return\
    \ -1\n    end\nend", "    \"\"\"\n    Compute triangle area\n    \"\"\"\n    if(a\
    \ < b+c && b < a+c && c < a+b)\n        p = (a+b+c)/2.0\n        return sqrt(p*(p-a)*(p-b)*(p-c))\n\
    \    else\n        return -1\n    end\nend", "    if (a + b > c) && (a + c > b)\
    \ && (b + c > a)\n        p = (a + b + c) / 2.0\n        sqrt(p * (p - a) * (p\
    \ - b) * (p - c))\n    else\n        -1\n    end\nend", "    if a + b > c && a\
    \ + c > b && b + c > a\n        return sqrt(s(a, b, c) * (s(a, b, c) - a) * (s(a,\
    \ b, c) - b) * (s(a, b, c) - c))\n    else\n        return -1\n    end\nend",
  "    a, b, c = sorted([a, b, c])\n    if (a + b) <= c\n        -1\n    else\n  \
    \      p = (a + b + c) / 2\n        sqrt(p * (p - a) * (p - b) * (p - c))\n  \
    \  end\nend", "    return -1\nend", "    if (a+b > c) && (a+c > b) && (b+c > a)\n\
    \        perimeter = (a+b+c)/2\n        area = sqrt(perimeter*(perimeter-a)*(perimeter-b)*(perimeter-c))\n\
    \        return round(area, 2)\n    else\n        return -1\n    end\nend", " \
    \   if a + b > c && a + c > b && b + c > a\n        return (sqrt(s*(s-a)*(s-b)*(s-c)))\n\
    \    else\n        return -1\n    end\nend", "    if (a + b > c) && (a + c > b)\
    \ && (b + c > a)\n        return (sqrt((a + b + c) * (a + b - c) * (a - b + c)\
    \ * (-a + b + c)) / 4)\n    else\n        return -1\n    end\nend", "    if (a\
    \ + b > c) && (a + c > b) && (b + c > a)\n        p = (a + b + c) / 2\n      \
    \  area = sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(area, 2)\n\
    \    else\n        return -1\n    end\nend", "    if (a+b>c) && (a+c>b) && (b+c>a)\n\
    \        return sqrt(halfperi(a,b,c)*(halfperi(a,b,c)-a)*(halfperi(a,b,c)-b)*(halfperi(a,b,c)-c))\n\
    \    else\n        return -1\n    end\nend", "    if a + b > c && a + c > b &&\
    \ b + c > a\n        p = (a + b + c) / 2\n        return sqrt(p * (p - a) * (p\
    \ - b) * (p - c))\n    else\n        return -1\n    end\nend", "    return (if\
    \ a + b > c && a + c > b && b + c > a\n        a * b / 2\n    else\n        -1\n\
    \    end)\nend", "    if a + b > c && a + c > b && b + c > a\n        return round(sqrt(((a\
    \ + b + c)/2) * (((a + b + c)/2) - a) * (((a + b + c)/2) - b) * (((a + b + c)/2)\
    \ - c)), digits=2)\n    else\n        return -1\n    end\nend", "    return @pyimport\
    \ math.sqrt * (s * (s - a) * (s - b) * (s - c))\nend", "  if a < b + c && b <\
    \ a + c && c < a + b\n    p = (a + b + c) / 2\n    sqrt(p * (p - a) * (p - b)\
    \ * (p - c))\n  else\n    -1\n  end\nend\n  \nprintln(triangle_area(3, 4, 5))\n\
    println(triangle_area(1, 2, 10))", "    if(a+b<c || a+c<b || b+c<a)\n        return\
    \ -1\n    else\n        s = (a+b+c)/2\n        return sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \    end\nend", "    return -1\nend", "    if a + b > c && a + c > b && b + c\
    \ > a\n        s = 0.5 * (a + b + c)\n        area = sqrt(s * (s - a) * (s - b)\
    \ * (s - c))\n        return round(area, 2)\n    else\n        return -1\n   \
    \ end\nend", "    sides = [a, b, c]\n    sides = sort(sides)\n    if sides[1]\
    \ + sides[2] > sides[3]\n        return sides[1] * sqrt(sides[2]^2 - sides[1]^2)\
    \ / 2\n    else\n        return -1\n    end\nend", "    if a+b > c && a+c > b\
    \ && b+c > a\n        s = (a+b+c)/2\n        A = sqrt(s*(s-a)*(s-b)*(s-c))\n \
    \       round(A, 2)\n    else\n        -1\n    end\nend", "    s = (a + b + c)\
    \ / 2\n    # Determines if a, b, and c can form a triangle\n    if s > a and s\
    \ > b and s > c\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n\
    \        return -1\n    end\nend", "    if (a+b) < c || (a+c) < b || (b+c) < a\n\
    \        return -1\n    else \n        s = (a+b+c)/2\n        area = sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \        return round(area, 2)\n    end\nend\nprintln(triangle_area(3, 4, 5))\n\
    println(triangle_area(1, 2, 10))\nprintln(triangle_area(6, 6, 6))", "    area::Float64\
    \ = -1\n    # Write your code here\n    \n    return area\nend", "    v = 0.0\n\
    \    if a + b > c && a + c > b && b + c > a\n        s = (a + b + c) / 2\n   \
    \     v = sqrt(s * (s - a) * (s - b) * (s - c))\n    end\n    return v\nend",
  "    \n    # Note that a and b are parameters, whereas c is a variable\n    # If\
    \ the equation is not satisfied, c must not be less than the other parameters\n\
    \    if(a + b < c)\n        return -1\n    elseif(b + c < a)\n        return -1\n\
    \    elseif(c + a < b)\n        return -1\n    end\n    \n    # If we are here,\
    \ then we have a valid triangle\n    # Take the semi-perimeter s\n    s = (a +\
    \ b + c)/2\n    \n    # Take the root of the 4th power of the expression\n   \
    \ r = sqrt(s*(s-a)*(s-b)*(s-c))\n    \n    # Return the area\n    return r\nend",
  "    if a + b > c && a + c > b && b + c > a\n        sides = [a, b, c]\n       \
    \ s = sum(sides) / 2.0\n        T = sqrt(s * (s - a) * (s - b) * (s - c))\n  \
    \      return round(T, digits=2)\n    else\n        return -1\n    end\nend",
  "    if(a+b>c)&&(a+c>b)&&(b+c>a)\n        p = (a+b+c)/2\n        return sqrt(p*(p-a)*(p-b)*(p-c))\n\
    \    else\n        return -1\n    end\nend", "    if(a + b > c && a + c > b &&\
    \ b + c > a)\n        return sqrt(s*(s-a)*(s-b)*(s-c))\n    else\n        return\
    \ -1\n    end\nend\ns = (a + b + c)/2\ntriangle_area(3, 4, 5)", "    if (a + b\
    \ > c) && (a + c > b) && (b + c > a)\n        p = (a + b + c) / 2\n        \u221A\
    (p * (p - a) * (p - b) * (p - c))\n    else\n        -1\n    end\nend\n@assert\
    \ triangle_area(3, 4, 5) == 6.0\n@assert triangle_area(1, 2, 10) == -1\n \n \n\
    \ \n########## Calculator ########\n\"\"\"\n    In mathematics, a function is\
    \ a relation between sets that associates to \n    every element of a first set\
    \ exactly one element of the second set.\n    Write a function calculate(f::Function,\
    \ x::Int64, y::Int64) that takes in 3 arguments:\n    f: the function that takes\
    \ in two arguments\n    x: the first argument (integer)\n    y: the second argument\
    \ (integer)\n    The function returns the result of the function f operating on\
    \ the inputs x and y.\n    Example:\n    >>> f(x, y) = x * y\n    >>> calculate(f,\
    \ 10, 20)\n    200\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
