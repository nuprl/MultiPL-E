language: jl
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    a = [string(i) for i in 0:n]\n    return join(a, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    l = []\n    for i in 0:n\n        append!(l, i)\n    end\n    return join(l,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    num_str = \"\"\n    for i in range(0, n + 1)\n        num_str = join([num_str,\
    \ string(i)])\n        num_str = join([num_str, \" \"])\n    end\n    return num_str\n\
    end\n \noutput = string_sequence(5)\nprintln(output)\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp012n6xh3.jl:20

    '
  stdout: "0 1 2 3 4 5 6 \ntest set: Test Failed at /tmp/tmp012n6xh3.jl:23\n  Expression:\
    \ candidate(0) == \"0\"\n   Evaluated: \"0 1 \" == \"0\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp012n6xh3.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp012n6xh3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp012n6xh3.jl:24\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 4 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp012n6xh3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp012n6xh3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp012n6xh3.jl:25\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 11 \" == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp012n6xh3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp012n6xh3.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    output = \"\"\n    for i in 0:n\n        output = string(output, i, \" \"\
    )\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg29eahhm.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpg29eahhm.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg29eahhm.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg29eahhm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg29eahhm.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg29eahhm.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg29eahhm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg29eahhm.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg29eahhm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg29eahhm.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    seq = \"\"\n    for i = 0:n\n        seq = seq * string(i) * \" \"\n    end\n\
    \    return seq\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7y6frc9b.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp7y6frc9b.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7y6frc9b.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7y6frc9b.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7y6frc9b.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7y6frc9b.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7y6frc9b.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7y6frc9b.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7y6frc9b.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7y6frc9b.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(\", \", 0:n)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7rox8ri2.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmp7rox8ri2.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \",0:0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rox8ri2.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rox8ri2.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp7rox8ri2.jl:16\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \",0:3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rox8ri2.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rox8ri2.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp7rox8ri2.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \",0:10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rox8ri2.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rox8ri2.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(num) for num in 0:n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpetnmrrsc.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpetnmrrsc.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpetnmrrsc.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpetnmrrsc.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpetnmrrsc.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpetnmrrsc.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpetnmrrsc.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpetnmrrsc.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpetnmrrsc.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpetnmrrsc.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpetnmrrsc.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpetnmrrsc.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpetnmrrsc.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \  return \" \".join(string(a) for a in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2grot_ej.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp2grot_ej.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp2grot_ej.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2grot_ej.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2grot_ej.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2grot_ej.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp2grot_ej.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2grot_ej.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2grot_ej.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2grot_ej.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp2grot_ej.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2grot_ej.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2grot_ej.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, \" \", i)\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvliokcxv.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpvliokcxv.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvliokcxv.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvliokcxv.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    strings = []\n    for i in 0:n\n        push!(strings, i)\n    end\n    join(strings,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n\n        s = s * string(i) * \" \"\n    end\n \
    \   return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfixwdop3.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpfixwdop3.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpfixwdop3.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpfixwdop3.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5on69c7d.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp5on69c7d.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp5on69c7d.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5on69c7d.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5on69c7d.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5on69c7d.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp5on69c7d.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5on69c7d.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5on69c7d.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5on69c7d.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp5on69c7d.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5on69c7d.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5on69c7d.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(num) for num in 0:n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcvp7kqok.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpcvp7kqok.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpcvp7kqok.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcvp7kqok.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcvp7kqok.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpcvp7kqok.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpcvp7kqok.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcvp7kqok.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcvp7kqok.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpcvp7kqok.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpcvp7kqok.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcvp7kqok.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcvp7kqok.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0:\n        return \"0\"\n    end\n    if n > 0:\n        print(string_sequence(n-1),\
    \ n)\n    end\nend\nstring_sequence(5)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp97e4p60x.jl:9\nin expression starting at /tmp/tmp97e4p60x.jl:9\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n \n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjypm9jn0.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpjypm9jn0.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjypm9jn0.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjypm9jn0.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjypm9jn0.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjypm9jn0.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjypm9jn0.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjypm9jn0.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjypm9jn0.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjypm9jn0.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp57m10kkf.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp57m10kkf.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp57m10kkf.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp57m10kkf.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp57m10kkf.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp57m10kkf.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp57m10kkf.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp57m10kkf.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp57m10kkf.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp57m10kkf.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp57m10kkf.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp57m10kkf.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp57m10kkf.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return string(n)\n    else \n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nstring_sequence(10)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # *** INSERT CODE HERE ***\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyulr6gv6.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpyulr6gv6.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpyulr6gv6.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyulr6gv6.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyulr6gv6.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpyulr6gv6.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpyulr6gv6.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyulr6gv6.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\n    \"\"\"\n    s = \"\"\n    for i in 0:n\n        s = s * string(i)\
    \ * \" \"\n    end\n    return s[1:end-1] # trim trailing space and return\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(collect(0:n)), \" \")\nend\nstring_sequence(0)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: -1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \"\"\n    for i in 0:n\n        str = str * i * \" \"\n    end\n  \
    \  return str\nend\n \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at '''
  timestamp: 1659978146
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i in 0:n\n        string = string * string(i) * \"\
    \ \"\n    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpe3lh1s1s.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpe3lh1s1s.jl:19\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: objects of type String are\
    \ not callable\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpe3lh1s1s.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe3lh1s1s.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe3lh1s1s.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpe3lh1s1s.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: objects of type String are not callable\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpe3lh1s1s.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe3lh1s1s.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe3lh1s1s.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpe3lh1s1s.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: objects of type\
    \ String are not callable\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n \
    \    @ Main /tmp/tmpe3lh1s1s.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe3lh1s1s.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe3lh1s1s.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978145
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i in 0:n\n        string_seq = string_seq * string(i)\
    \ * \" \"\n    end\n    return string_seq\nend\nstring_sequence(0)\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9zd0pffv.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp9zd0pffv.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9zd0pffv.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9zd0pffv.jl:19\ntest set: Test Failed at /tmp/tmp9zd0pffv.jl:21\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9zd0pffv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9zd0pffv.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9zd0pffv.jl:22\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9zd0pffv.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9zd0pffv.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978143
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    nums = []\n    for i in 0:n\n        push!(nums, string(i))\n    end\n  \
    \  return join(nums, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join([\"$i \" for i in 0:n], \"\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwr0y1j8r.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpwr0y1j8r.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwr0y1j8r.jl:15 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwr0y1j8r.jl:14\ntest set: Test Failed at /tmp/tmpwr0y1j8r.jl:16\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwr0y1j8r.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwr0y1j8r.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpwr0y1j8r.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwr0y1j8r.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwr0y1j8r.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978143
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    result = string(\"0\")\n    \n    for i in 1:n\n        result = string(result,\"\
    \ \",i)\n    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7h78ekfa.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7h78ekfa.jl:1\n\
    in expression starting at /tmp/tmp7h78ekfa.jl:1\n"
  stdout: ''
  timestamp: 1659978143
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    res = \"\"\n    for i in 0:n \n        res = res * \" \" * string(i)\n  \
    \  end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq9bsnctq.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpq9bsnctq.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq9bsnctq.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq9bsnctq.jl:18\ntest set: Test Failed at /tmp/tmpq9bsnctq.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq9bsnctq.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq9bsnctq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpq9bsnctq.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq9bsnctq.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq9bsnctq.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978143
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    new_list = [string(x) for x in 0:n]\n    return join(new_list, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i in 0:n\n        string_sequence = string_sequence\
    \ * string(i) * \" \"\n    end\n    return string_sequence\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwxv__d6i.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpwxv__d6i.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwxv__d6i.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwxv__d6i.jl:18\ntest set: Test Failed at /tmp/tmpwxv__d6i.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwxv__d6i.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwxv__d6i.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwxv__d6i.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwxv__d6i.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwxv__d6i.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978144
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    numbers = [string(i) for i in 0:n]\n    return join(numbers, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        throw(ArgumentError(\"Input should be non-negative\"))\n\
    \    end\n    if n == 0\n        return \"0\"\n    end\n    return string_sequence(n-1)\
    \ * \" \" * string(n)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return string( 0:(n+1) )\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp32mn_g8_.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp32mn_g8_.jl:16\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0:1\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp32mn_g8_.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp32mn_g8_.jl:15\ntest set: Test Failed at /tmp/tmp32mn_g8_.jl:17\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0:4\" == \"0 1 2 3\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32mn_g8_.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32mn_g8_.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp32mn_g8_.jl:18\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0:11\" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32mn_g8_.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32mn_g8_.jl:15\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978144
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    temp = \"\"\n    i = 0\n    while i <= n\n        temp = string(temp,i,\"\
    \ \")\n        i = i + 1\n    end\n    return temp\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9c2iyea5.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp9c2iyea5.jl:21\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9c2iyea5.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9c2iyea5.jl:20\ntest set: Test Failed at /tmp/tmp9c2iyea5.jl:22\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9c2iyea5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9c2iyea5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9c2iyea5.jl:23\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9c2iyea5.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9c2iyea5.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978143
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    i = 0\n    ans = \"\"\n    while i <= n\n        ans = ans * string(i) *\
    \ \" \"\n        i += 1\n    end\n    return ans\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9bqsdjf_.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp9bqsdjf_.jl:21\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9bqsdjf_.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9bqsdjf_.jl:20\ntest set: Test Failed at /tmp/tmp9bqsdjf_.jl:22\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bqsdjf_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bqsdjf_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9bqsdjf_.jl:23\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bqsdjf_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bqsdjf_.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978143
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return string(n)\n    else\n        return string(n) *\
    \ \" \" * string_sequence(n-1)\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3430ec43.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp3430ec43.jl:20\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"3 2 1 0\" == \"0 1 2 3\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3430ec43.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3430ec43.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp3430ec43.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"10 9 8 7 6 5 4 3 2 1 0\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3430ec43.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3430ec43.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659978143
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa_3ze4j3.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpa_3ze4j3.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpa_3ze4j3.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa_3ze4j3.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa_3ze4j3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpa_3ze4j3.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpa_3ze4j3.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa_3ze4j3.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa_3ze4j3.jl:14\ntest set:\
    \ Error "
  timestamp: 1659978145
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    result = \"0\"\n    for i in 1:n\n        result = result * \" \" * string(i)\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(number) for number in 0:n)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp1tf8lsve.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp1tf8lsve.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp1tf8lsve.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1tf8lsve.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1tf8lsve.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1tf8lsve.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp1tf8lsve.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1tf8lsve.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1tf8lsve.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1tf8lsve.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp1tf8lsve.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1tf8lsve.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1tf8lsve.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978144
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join([\"$(i)\" for i in 0:n], \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"0\"\n    for i in 1:n\n        s = s * \" \" * string(i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    sequence = \"\"\n    for k = 0:n\n        sequence = string(sequence, k,\
    \ \" \")\n    end\n    return sequence\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzu165fbh.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpzu165fbh.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzu165fbh.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzu165fbh.jl:18\ntest set: Test Failed at /tmp/tmpzu165fbh.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzu165fbh.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzu165fbh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpzu165fbh.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzu165fbh.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzu165fbh.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978143
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    ans = \"\"\n    for i = 0:n\n        ans = ans * \" \" * string(i)\n    end\n\
    \    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf05g7jtk.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpf05g7jtk.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf05g7jtk.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpf05g7jtk.jl:18\ntest set: Test Failed at /tmp/tmpf05g7jtk.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf05g7jtk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf05g7jtk.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpf05g7jtk.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf05g7jtk.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf05g7jtk.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978144
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # n is the number of numbers in the string sequence\n    i::Int64 = 0\n \
    \   output::String = \"\"\n    while i <= n \n        output = string(output,\
    \ \" \", i)\n        i = i + 1\n    end\n    return output\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkf_x1uf5.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpkf_x1uf5.jl:22\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkf_x1uf5.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkf_x1uf5.jl:21\ntest set: Test Failed at /tmp/tmpkf_x1uf5.jl:23\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkf_x1uf5.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkf_x1uf5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkf_x1uf5.jl:24\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkf_x1uf5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkf_x1uf5.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978144
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    seq = [string(i) for i in 0:n]\n    return join(seq, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        return \"undefined\"\n    end\n    return \" \".join(string.(0:n))\n\
    end\n@assert(string_sequence(5) == \"0 1 2 3 4 5\")\n@assert(string_sequence(0)\
    \ == \"0\")\n@assert(string_sequence(-1) == \"undefined\")\n@assert(string_sequence(5)\
    \ == \"0 1 2 3 4 5\")\n \n \n\"\"\" Return the nth term of the Fibonacci sequence.\n\
    \    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n\
    \    5\n    >>> fibonacci(10)\n    55\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: type String has no field join\nStacktrace:\n [1] getproperty\n\
    \   @ ./Base.jl:42 [inlined]\n [2] string_sequence(n::Int64)\n   @ Main /tmp/tmpwca6th2s.jl:11\n\
    \ [3] top-level scope\n   @ /tmp/tmpwca6th2s.jl:13\nin expression starting at\
    \ /tmp/tmpwca6th2s.jl:13\n"
  stdout: ''
  timestamp: 1659978144
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n \n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjypm9jn0.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpjypm9jn0.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjypm9jn0.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjypm9jn0.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjypm9jn0.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjypm9jn0.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjypm9jn0.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjypm9jn0.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjypm9jn0.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjypm9jn0.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return string(collect(0:n))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9j598e2c.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmp9j598e2c.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"[0]\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9j598e2c.jl:15 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9j598e2c.jl:14\ntest set: Test Failed at /tmp/tmp9j598e2c.jl:16\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"[0, 1, 2, 3]\" ==\
    \ \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9j598e2c.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9j598e2c.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp9j598e2c.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\" == \"0\
    \ 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9j598e2c.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9j598e2c.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978144
- exit_code: -1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    answer = \"\"\n    for i in 0:n\n        answer = answer * i * \" \"\n  \
    \  end\n    return answer\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpnhqaudjn.jl:19\n  Test threw
    exception\n  Expression: candidate(0) == "0"\n  MethodError: no method matching
    *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    *(::String, ::Int64, ::String)\n     @ Base ./operators.jl:655\n   [2] string_sequence(n::Int64)\n     @
    Main /tmp/tmpnhqaudjn.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnhqaudjn.jl:19 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnhqaudjn.jl:18\n'''
  timestamp: 1659978147
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = string(0)\n    for i in 1:n\n        str = str * \" \" * string(i)\n\
    \    end\n    return str\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    numbers = [string(i) for i in 0:n]\n    return join(numbers, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: -1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpqu5jrjcs.jl:20\n  Test threw
    exception\n  Expression: candidate(3) == "0 1 2 3"\n  MethodError: no method matching
    *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    *(::String, ::String, ::Int64)\n     @ Base ./operators.jl:655\n   [2] string_sequence(n::Int64)
    (repeats 3 times)\n     @ Main /tmp/tmpqu5jrjcs.jl:11\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpqu5jrjcs.jl:20 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpqu5jrjcs.jl:18\n'''
  timestamp: 1659978147
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    num = []\n    for i in range(0,n+1)\n        push!(num,i)\n    end\n    join(num,\"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpndmovtui.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpndmovtui.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 1\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpndmovtui.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpndmovtui.jl:18\ntest set: Test Failed at /tmp/tmpndmovtui.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 4\" == \"\
    0 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndmovtui.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndmovtui.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpndmovtui.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 11\" == \"0 1 2 3 4 5\
    \ 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndmovtui.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndmovtui.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978145
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(map(string, 0:n), \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978143
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    (0:n) |> string\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpszt_4ka9.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpszt_4ka9.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0:0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpszt_4ka9.jl:15 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpszt_4ka9.jl:14\ntest set: Test Failed at /tmp/tmpszt_4ka9.jl:16\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0:3\" == \"0 1 2 3\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpszt_4ka9.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpszt_4ka9.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpszt_4ka9.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0:10\" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpszt_4ka9.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpszt_4ka9.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978145
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    sequence = \"\"\n    for i in 0:n\n        sequence = string(sequence, \"\
    \ \", i)\n    end\n    return(sequence)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdykgqd78.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpdykgqd78.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdykgqd78.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdykgqd78.jl:18\ntest set: Test Failed at /tmp/tmpdykgqd78.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdykgqd78.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdykgqd78.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpdykgqd78.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdykgqd78.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdykgqd78.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978145
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \"\"\n    for i in range(0, n+1)\n        str = string(str, \" \",\
    \ i)\n    end\n    return lstrip(str)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsg3d1nwe.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpsg3d1nwe.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 1\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsg3d1nwe.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsg3d1nwe.jl:18\ntest set: Test Failed at /tmp/tmpsg3d1nwe.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 4\" == \"\
    0 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsg3d1nwe.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsg3d1nwe.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpsg3d1nwe.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 11\" == \"0 1 2 3 4 5\
    \ 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsg3d1nwe.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsg3d1nwe.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978146
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0 \n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978144
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    nStr = string(n)\n    if n > 0\n        nStr = nStr * \" \" * string_sequence(n-1)\n\
    \    end\n    return nStr\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmqu1rz85.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpmqu1rz85.jl:20\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"3 2 1 0\" == \"0 1 2 3\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmqu1rz85.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmqu1rz85.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpmqu1rz85.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"10 9 8 7 6 5 4 3 2 1 0\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmqu1rz85.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmqu1rz85.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659978146
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    nums = zeros(Int64,n+1)\n    for i = 0:n\n        nums[i+1] = i\n    end\n\
    \    return join(nums,\" \")\nend\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978144
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\n \n        \nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978144
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwd8t7r6b.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpwd8t7r6b.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\ntest set: Test Failed at /tmp/tmpwd8t7r6b.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwd8t7r6b.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978146
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\n</code>\nThe above function\
    \ uses the <code>string</code> function to convert the elements in the output\
    \ array to strings.\nI.e. the type of the elements of the array passed to <code>join</code>\
    \ must be <code>String</code>.\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpginvf33x.jl:10\nin expression starting at\
    \ /tmp/tmpginvf33x.jl:10\n"
  stdout: ''
  timestamp: 1659978145
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    for i in 0:n\n        print(i)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmphxny5ex1.jl:14

    '
  stdout: "0test set: Error During Test at /tmp/tmphxny5ex1.jl:17\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmphxny5ex1.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphxny5ex1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphxny5ex1.jl:16\n0123test set:\
    \ Error During Test at /tmp/tmphxny5ex1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmphxny5ex1.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphxny5ex1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphxny5ex1.jl:16\n01234567891"
  timestamp: 1659978148
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s=\"\"\n    if n==0\n        s=\"0\"\n    else\n        for i in 0:n-1\n\
    \            s=s*\"$(i) \"\n        end\n        s=s*\"$n\"\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978144
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwd8t7r6b.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpwd8t7r6b.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\ntest set: Test Failed at /tmp/tmpwd8t7r6b.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwd8t7r6b.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978146
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, \" \", i)\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvliokcxv.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpvliokcxv.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvliokcxv.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvliokcxv.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n\n        s = string(s, i, \" \")\n    end\n   \
    \ return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz5f6z_dn.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpz5f6z_dn.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz5f6z_dn.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpz5f6z_dn.jl:18\ntest set: Test Failed at /tmp/tmpz5f6z_dn.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz5f6z_dn.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz5f6z_dn.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpz5f6z_dn.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz5f6z_dn.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz5f6z_dn.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978147
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    counter = 0\n    sequence = \"\"\n    while counter <= n\n        sequence\
    \ = \"$sequence $counter\"\n        counter += 1\n    end\n    return sequence\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf3s5kvqg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpf3s5kvqg.jl:21\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf3s5kvqg.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpf3s5kvqg.jl:20\ntest set: Test Failed at /tmp/tmpf3s5kvqg.jl:22\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3s5kvqg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3s5kvqg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpf3s5kvqg.jl:23\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3s5kvqg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3s5kvqg.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978146
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    res = string(0)\n    for i in 1:n\n        res = res * \" \" * string(i)\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978145
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # note that we don't need to create an array here, the return statement takes\
    \ care of that!\n    return join(string.(collect(0:n)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl_ryrjfo.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpl_ryrjfo.jl:17\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"0123\" == \"0 1 2 3\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl_ryrjfo.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl_ryrjfo.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpl_ryrjfo.jl:18\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"012345678910\" == \"0 1 2 3 4 5 6 7 8 9 10\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl_ryrjfo.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl_ryrjfo.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659978147
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    num = \"\"\n    for i in 0:n\n        num = num * \" \" * string(i)\n   \
    \ end\n    return num\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpit5kt_tm.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpit5kt_tm.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpit5kt_tm.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpit5kt_tm.jl:18\ntest set: Test Failed at /tmp/tmpit5kt_tm.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpit5kt_tm.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpit5kt_tm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpit5kt_tm.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpit5kt_tm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpit5kt_tm.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978147
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    ret_string = \"\"\n    for i in 0:n\n        ret_string = \"$ret_string$i\
    \ \"\n    end\n    return ret_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpumtk9rip.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpumtk9rip.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpumtk9rip.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpumtk9rip.jl:18\ntest set: Test Failed at /tmp/tmpumtk9rip.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpumtk9rip.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpumtk9rip.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpumtk9rip.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpumtk9rip.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpumtk9rip.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978147
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n\n        s = s * string(i) * \" \"\n    end\n \
    \   return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfixwdop3.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpfixwdop3.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpfixwdop3.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpfixwdop3.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978145
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        return \"0\"\n    else\n        s = string_sequence(n-1)\n\
    \        return \"$s $n\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978145
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp57m10kkf.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp57m10kkf.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp57m10kkf.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp57m10kkf.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp57m10kkf.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp57m10kkf.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp57m10kkf.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp57m10kkf.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp57m10kkf.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp57m10kkf.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp57m10kkf.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp57m10kkf.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp57m10kkf.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    ans = \"\"\n    for i in 0:n \n        ans = string(ans, i)\n        if i\
    \ != n\n            ans = string(ans, \" \")\n        end\n    end\n    return\
    \ ans\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978145
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        \"0\"\n    else\n        string_sequence(n-1) * \" \"\
    \ * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978145
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    a = \"\"\n    for i in 0:n\n        a *= string(i)\n        a *= \" \"\n\
    \    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7zv56vwo.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7zv56vwo.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7zv56vwo.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7zv56vwo.jl:19\ntest set: Test Failed at /tmp/tmp7zv56vwo.jl:21\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7zv56vwo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7zv56vwo.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7zv56vwo.jl:22\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7zv56vwo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7zv56vwo.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978148
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return string(join(collect(0:n), ' '))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978146
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    acc = \"\"\n    for i = 0:n\n        acc = acc * \" \" * string(i)\n    end\n\
    \    return acc\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9_l389z4.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp9_l389z4.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9_l389z4.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9_l389z4.jl:18\ntest set: Test Failed at /tmp/tmp9_l389z4.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_l389z4.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_l389z4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp9_l389z4.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_l389z4.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_l389z4.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978148
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    a = \"\"\n    for i in 0:n\n        a = a * string(i) * \" \"\n    end\n\
    \    return a\nend\n# Tests:\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1txegt_9.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp1txegt_9.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1txegt_9.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1txegt_9.jl:19\ntest set: Test Failed at /tmp/tmp1txegt_9.jl:21\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1txegt_9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1txegt_9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1txegt_9.jl:22\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1txegt_9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1txegt_9.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978148
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = string(0)\n    for i = 1:n\n        string = string * \" \" * string(i)\n\
    \    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpntm9thvl.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpntm9thvl.jl:19\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  UndefVarError: string not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpntm9thvl.jl:8\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpntm9thvl.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpntm9thvl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpntm9thvl.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  UndefVarError: string not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpntm9thvl.jl:8\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpntm9thvl.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpntm9thvl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpntm9thvl.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: string not defined\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpntm9thvl.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpntm9thvl.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpntm9thvl.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978148
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # line added to make this block a function\n    k = 0\n    s = string(k)\n\
    \    for k in 1:n\n        s = string(s, \" \", k)\n    end\n    return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978146
- exit_code: -1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s=\"\"\n    for i in 0:n \n        s=s*i*\" \"\n    end\n    return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpdzytic4k.jl:19\n  Test threw
    exception\n  Expression: candidate(0) == "0"\n  MethodError: no method matching
    *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    *(::String, ::Int64, ::String)\n     @ Base ./operators.jl:655\n   [2] string_sequence(n::Int64)\n     @
    Main /tmp/tmpdzytic4k.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdzytic4k.jl:19 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdzytic4k.jl:18\n'''
  timestamp: 1659978150
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    output = \"\"\n    for i in 0:n\n        output = string(output, i, \" \"\
    )\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg29eahhm.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpg29eahhm.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg29eahhm.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg29eahhm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg29eahhm.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg29eahhm.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg29eahhm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg29eahhm.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg29eahhm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg29eahhm.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    temp = \"\"\n    for i in 0:n\n        temp *= string(i) * \" \"\n\
    \    end\n    return temp\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5irv38rn.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp5irv38rn.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5irv38rn.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5irv38rn.jl:19\ntest set: Test Failed at /tmp/tmp5irv38rn.jl:21\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5irv38rn.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5irv38rn.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp5irv38rn.jl:22\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5irv38rn.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5irv38rn.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978148
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    out = \"\"\n    for i in 0:n\n        out = out * \" \" * string(i)\n   \
    \ end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbzzig5z1.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpbzzig5z1.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbzzig5z1.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbzzig5z1.jl:18\ntest set: Test Failed at /tmp/tmpbzzig5z1.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbzzig5z1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbzzig5z1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbzzig5z1.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbzzig5z1.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbzzig5z1.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978148
- exit_code: -1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i in 0:n\n        string *= string(i) * \" \"\n  \
    \  end\n    return string\nend\nstring_sequence(0)\nstring_sequence(5)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: objects of type String are not callable'''
  stdout: None
  timestamp: 1659978150
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"0\"\n    for i in 1:n\n        s = string(s, \" \", i)\n    end\n \
    \   return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978146
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    num_list = []\n    string_list = []\n    for i in 0:n\n        push!(num_list,i)\n\
    \    end\n    for j in num_list\n        push!(string_list,string(j))\n    end\n\
    \    return join(string_list, \" \")\nend\nprintln(string_sequence(5))\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: '0 1 2 3 4 5

    Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978146
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    seq::String = \"\"\n    for i in 0:n\n        seq = string(seq, i, \" \"\
    )\n    end\n    seq = rstrip(seq)\n    return seq\nend\n    \n    \n    \n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978146
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978146
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    result=\"\"\n    for i=0:n\n        result*=\"$i \"\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_vac5f1q.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp_vac5f1q.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_vac5f1q.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_vac5f1q.jl:18\ntest set: Test Failed at /tmp/tmp_vac5f1q.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vac5f1q.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vac5f1q.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp_vac5f1q.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vac5f1q.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vac5f1q.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978148
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    output = \"\"\n    for i in 0:n\n        output = string(output, i, \" \"\
    )\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg29eahhm.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpg29eahhm.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg29eahhm.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg29eahhm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg29eahhm.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg29eahhm.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg29eahhm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg29eahhm.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg29eahhm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg29eahhm.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \"\"\n    for i in 0:n \n        str = str * string(i) * \" \"\n  \
    \  end\n    return str\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9p5131bq.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp9p5131bq.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9p5131bq.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9p5131bq.jl:18\ntest set: Test Failed at /tmp/tmp9p5131bq.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9p5131bq.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9p5131bq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp9p5131bq.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9p5131bq.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9p5131bq.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978149
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\"\n    else \n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978147
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    seq = 0:n\n    str = \"\"\n    for i in seq\n        str = string(str,i)\n\
    \        str = string(str,\" \")\n    end\n    return str\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcn3bwy4j.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpcn3bwy4j.jl:21\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcn3bwy4j.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcn3bwy4j.jl:20\ntest set: Test Failed at /tmp/tmpcn3bwy4j.jl:22\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcn3bwy4j.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcn3bwy4j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcn3bwy4j.jl:23\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcn3bwy4j.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcn3bwy4j.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978149
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    for i=0:n \n        print(i)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpbxhc15xr.jl:14

    '
  stdout: "0test set: Error During Test at /tmp/tmpbxhc15xr.jl:17\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpbxhc15xr.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbxhc15xr.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbxhc15xr.jl:16\n0123test set:\
    \ Error During Test at /tmp/tmpbxhc15xr.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpbxhc15xr.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbxhc15xr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbxhc15xr.jl:16\n01234567891"
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return space_separated_numbers(0:n)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfrii1vns.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpfrii1vns.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  UndefVarError: space_separated_numbers\
    \ not defined\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpfrii1vns.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfrii1vns.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfrii1vns.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfrii1vns.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  UndefVarError: space_separated_numbers not defined\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpfrii1vns.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfrii1vns.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfrii1vns.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfrii1vns.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: space_separated_numbers\
    \ not defined\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpfrii1vns.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfrii1vns.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfrii1vns.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978150
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    x = \"\"\n    for i in 0:n\n        x = x * string(i) * \" \"\n    end\n\
    \    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr3d2_fu2.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpr3d2_fu2.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr3d2_fu2.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpr3d2_fu2.jl:18\ntest set: Test Failed at /tmp/tmpr3d2_fu2.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3d2_fu2.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3d2_fu2.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpr3d2_fu2.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3d2_fu2.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3d2_fu2.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978149
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    assert n >= 0\n    sequence = \"\"\n    for i in 0:n\n        sequence =\
    \ sequence * string(i) * \" \"\n    end\n    return sequence\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpuip1pmcb.jl:7 expected\
    \ \"end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuip1pmcb.jl:8\n\
    in expression starting at /tmp/tmpuip1pmcb.jl:8\n"
  stdout: ''
  timestamp: 1659978148
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \n    for i in 0:n\n        println(i)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzwno7owb.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpzwno7owb.jl:18\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpzwno7owb.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzwno7owb.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzwno7owb.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzwno7owb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpzwno7owb.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzwno7owb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzwno7owb.jl:17\ntest set:\
    \ Error "
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return string(join(zero(n)::Array{Int64,1},\" \"))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvgm7__1v.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpvgm7__1v.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  TypeError: in typeassert, expected Vector{Int64},\
    \ got a value of type Int64\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpvgm7__1v.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvgm7__1v.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvgm7__1v.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvgm7__1v.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  TypeError: in typeassert, expected Vector{Int64},\
    \ got a value of type Int64\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpvgm7__1v.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvgm7__1v.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvgm7__1v.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvgm7__1v.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  TypeError: in typeassert, expected\
    \ Vector{Int64}, got a value of type Int64\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpvgm7__1v.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvgm7__1v.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvgm7__1v.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978150
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwd8t7r6b.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpwd8t7r6b.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\ntest set: Test Failed at /tmp/tmpwd8t7r6b.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwd8t7r6b.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978146
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(collect(0:n),\" \")\nend\n@time string_sequence(10000000)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: '  1.948870 seconds (20.01 M allocations: 1.157 GiB, 14.07% gc time, 1.46%
    compilation time)

    Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978150
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(collect(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978147
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string(0:n)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5_td7501.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmp5_td7501.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0:0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5_td7501.jl:15 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5_td7501.jl:14\ntest set: Test Failed at /tmp/tmp5_td7501.jl:16\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0:3\" == \"0 1 2 3\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_td7501.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_td7501.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp5_td7501.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0:10\" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_td7501.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_td7501.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978150
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\";\n    for i in 0:n \n        string *= string(i) * \" \"\n\
    \    end\n    return strip(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcpdlolb1.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpcpdlolb1.jl:19\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: objects of type String are\
    \ not callable\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpcpdlolb1.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcpdlolb1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcpdlolb1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpcpdlolb1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: objects of type String are not callable\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpcpdlolb1.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcpdlolb1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcpdlolb1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpcpdlolb1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: objects of type\
    \ String are not callable\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n \
    \    @ Main /tmp/tmpcpdlolb1.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcpdlolb1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcpdlolb1.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        return \"\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9bifk_o2.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp9bifk_o2.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9bifk_o2.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9bifk_o2.jl:18\ntest set: Test Failed at /tmp/tmp9bifk_o2.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bifk_o2.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bifk_o2.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp9bifk_o2.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bifk_o2.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bifk_o2.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978150
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        return \"0\"\n    else\n        s=0\n        for i=1:n\n\
    \            s=s*10+i\n        end\n        return s\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpsx0jhbew.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpsx0jhbew.jl:24\n  Test threw exception\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpsx0jhbew.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsx0jhbew.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsx0jhbew.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpsx0jhbew.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpsx0jhbew.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsx0jhbew.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsx0jhbew.jl"
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(str.(0:n))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpne856mji.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpne856mji.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  UndefVarError: str not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpne856mji.jl:8\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpne856mji.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpne856mji.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpne856mji.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  UndefVarError: str not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpne856mji.jl:8\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpne856mji.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpne856mji.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpne856mji.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: str not defined\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpne856mji.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpne856mji.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpne856mji.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(x) for x in 0:n)\nend\nstring_sequence(5)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: type String has no field join\nStacktrace:\n [1] getproperty\n\
    \   @ ./Base.jl:42 [inlined]\n [2] string_sequence(n::Int64)\n   @ Main /tmp/tmp87kbdnuk.jl:8\n\
    \ [3] top-level scope\n   @ /tmp/tmp87kbdnuk.jl:10\nin expression starting at\
    \ /tmp/tmp87kbdnuk.jl:10\n"
  stdout: ''
  timestamp: 1659978150
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join([\"$i \" for i in 0:n], \"\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwr0y1j8r.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpwr0y1j8r.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwr0y1j8r.jl:15 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwr0y1j8r.jl:14\ntest set: Test Failed at /tmp/tmpwr0y1j8r.jl:16\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwr0y1j8r.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwr0y1j8r.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpwr0y1j8r.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwr0y1j8r.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwr0y1j8r.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978143
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(map(x->string(x), 0:n))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpca21e7k7.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpca21e7k7.jl:16\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"0123\" == \"0 1 2 3\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpca21e7k7.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpca21e7k7.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpca21e7k7.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"012345678910\" == \"0 1 2 3 4 5 6 7 8 9 10\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpca21e7k7.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpca21e7k7.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659978150
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"Negative numbers not supported\")\n    end\n  \
    \  return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978148
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # your code here\n    pass\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmgeoe0mt.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpmgeoe0mt.jl:17\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpmgeoe0mt.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmgeoe0mt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmgeoe0mt.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpmgeoe0mt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpmgeoe0mt.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmgeoe0mt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmgeoe0mt.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpmgeoe0mt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: pass not defined\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpmgeoe0mt.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmgeoe0mt.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmgeoe0mt.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978151
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    myString = String[]\n    for i in 0:n\n        push!(myString, string(i))\n\
    \    end\n    return join(myString, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978149
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\"\n    else \n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978147
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwd8t7r6b.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpwd8t7r6b.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\ntest set: Test Failed at /tmp/tmpwd8t7r6b.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwd8t7r6b.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwd8t7r6b.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd8t7r6b.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978146
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    values = collect(0:n)\n    return join(string.(values))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gwysfp6.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp5gwysfp6.jl:17\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"0123\" == \"0 1 2 3\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gwysfp6.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gwysfp6.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp5gwysfp6.jl:18\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"012345678910\" == \"0 1 2 3 4 5 6 7 8 9 10\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gwysfp6.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gwysfp6.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    arr = zeros(n+1)\n    for i in 1:n+1\n        arr[i] = i-1\n    end\n   \
    \ return join(arr, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphgg29p12.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmphgg29p12.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0.0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphgg29p12.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphgg29p12.jl:18\ntest set: Test Failed at /tmp/tmphgg29p12.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0.0 1.0 2.0 3.0\"\
    \ == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgg29p12.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgg29p12.jl:18\ntest set: Test\
    \ Failed at /tmp/tmphgg29p12.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0\"\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgg29p12.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgg29p12.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \"\"\n    for i in 0:n\n        str = str * string(i) * \" \"\n   \
    \ end\n    return str\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr9a931oz.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpr9a931oz.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr9a931oz.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpr9a931oz.jl:18\ntest set: Test Failed at /tmp/tmpr9a931oz.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9a931oz.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9a931oz.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpr9a931oz.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9a931oz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9a931oz.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i in 0:n \n        string = string * string(i) * \"\
    \ \"\n    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2mqxmfr0.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp2mqxmfr0.jl:19\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: objects of type String are\
    \ not callable\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp2mqxmfr0.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2mqxmfr0.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2mqxmfr0.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp2mqxmfr0.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: objects of type String are not callable\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp2mqxmfr0.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2mqxmfr0.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2mqxmfr0.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp2mqxmfr0.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: objects of type\
    \ String are not callable\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n \
    \    @ Main /tmp/tmp2mqxmfr0.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2mqxmfr0.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2mqxmfr0.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978153
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    seq = \"\"\n    for i in 0:n\n        seq = string(seq, i)\n        if i\
    \ != n\n            seq = string(seq, \" \")\n        end\n    end\n    return\
    \ seq\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978149
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978146
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        \"0\"\n    else\n        str_n = string(n)\n        string_sequence(n-1)\
    \ * \" \" * str_n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978150
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    arr = []\n    for i = 0:n\n        push!(arr, string(i))\n    end\n    return\
    \ join(arr, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978150
- exit_code: -1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i in range(0, n+1)\n        string = string * \" \"\
    \ * string(i)\n    end\n    return string\nend\nstring_sequence(0)\nstring_sequence(5)\n\
    string(string_sequence(0))\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: objects of type String are not callable\nStacktrace:\n
    [1] '''
  stdout: None
  timestamp: 1659978154
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa_3ze4j3.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpa_3ze4j3.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpa_3ze4j3.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa_3ze4j3.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa_3ze4j3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpa_3ze4j3.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpa_3ze4j3.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa_3ze4j3.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa_3ze4j3.jl:14\ntest set:\
    \ Error "
  timestamp: 1659978145
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in range(0, n+1)\n        s = string(s, \" \", i)\n \
    \   end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpph1d8iqs.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpph1d8iqs.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0 1\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpph1d8iqs.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpph1d8iqs.jl:18\ntest set: Test Failed at /tmp/tmpph1d8iqs.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3 4\" == \"\
    0 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpph1d8iqs.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpph1d8iqs.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpph1d8iqs.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10 11\" == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpph1d8iqs.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpph1d8iqs.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978152
- exit_code: -1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * i * \" \"\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmph02efysi.jl:19\n  Test threw
    exception\n  Expression: candidate(0) == "0"\n  MethodError: no method matching
    *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    *(::String, ::Int64, ::String)\n     @ Base ./operators.jl:655\n   [2] string_sequence(n::Int64)\n     @
    Main /tmp/tmph02efysi.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmph02efysi.jl:19 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmph02efysi.jl:18\n'''
  timestamp: 1659978155
- exit_code: -1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpqu5jrjcs.jl:20\n  Test threw
    exception\n  Expression: candidate(3) == "0 1 2 3"\n  MethodError: no method matching
    *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    *(::String, ::String, ::Int64)\n     @ Base ./operators.jl:655\n   [2] string_sequence(n::Int64)
    (repeats 3 times)\n     @ Main /tmp/tmpqu5jrjcs.jl:11\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpqu5jrjcs.jl:20 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpqu5jrjcs.jl:18\n'''
  timestamp: 1659978147
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    result = \"\"\n    for i = 0:n\n        result = string(result, i, \" \"\
    )\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0yillsbx.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0yillsbx.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0yillsbx.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0yillsbx.jl:18\ntest set: Test Failed at /tmp/tmp0yillsbx.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yillsbx.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yillsbx.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0yillsbx.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yillsbx.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yillsbx.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        return string(n)\n    else\n        return string(n) * \"\
    \ \" * string_sequence(n-1)\n    end\nend\n@test string_sequence(5) == \"0 1 2\
    \ 3 4 5\"\n@test string_sequence(0) == \"0\"\n@test string_sequence(1) == \"1\
    \ 0\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmpcihpxu5t.jl:14

    in expression starting at /tmp/tmpcihpxu5t.jl:14

    '
  stdout: ''
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        return \"\".strip()\n    else\n        string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\n@test string_sequence(5) == \"0 1 2 3 4 5\"\
    \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmpd2f90ei7.jl:14

    in expression starting at /tmp/tmpd2f90ei7.jl:14

    '
  stdout: ''
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    tmp = \"\"\n    for i in 0:n\n        tmp = tmp * string(i) * \" \"\n   \
    \ end\n    return tmp\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm4oqjamm.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpm4oqjamm.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm4oqjamm.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpm4oqjamm.jl:18\ntest set: Test Failed at /tmp/tmpm4oqjamm.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4oqjamm.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4oqjamm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpm4oqjamm.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4oqjamm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4oqjamm.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join([\"$i \" for i in 0:n], \"\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwr0y1j8r.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpwr0y1j8r.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwr0y1j8r.jl:15 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwr0y1j8r.jl:14\ntest set: Test Failed at /tmp/tmpwr0y1j8r.jl:16\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwr0y1j8r.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwr0y1j8r.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpwr0y1j8r.jl:17\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwr0y1j8r.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwr0y1j8r.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978143
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return string(join(collect(0:n), \" \"))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978150
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    # Concatenate a range of integers (String version)\n    return join(string.(0:n),\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp57m10kkf.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp57m10kkf.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp57m10kkf.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp57m10kkf.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp57m10kkf.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp57m10kkf.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp57m10kkf.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp57m10kkf.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp57m10kkf.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp57m10kkf.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmp57m10kkf.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp57m10kkf.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp57m10kkf.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 0:n\n        string *= string(i) * \" \"\n   \
    \ end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfp5do_fx.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpfp5do_fx.jl:19\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: objects of type String are\
    \ not callable\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpfp5do_fx.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfp5do_fx.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfp5do_fx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpfp5do_fx.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: objects of type String are not callable\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpfp5do_fx.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfp5do_fx.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfp5do_fx.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpfp5do_fx.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: objects of type\
    \ String are not callable\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n \
    \    @ Main /tmp/tmpfp5do_fx.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfp5do_fx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfp5do_fx.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978154
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(map(string, 0:n), \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978143
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    numbers = [string(i) for i in 0:n]\n    return join(numbers, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    xs = Array{Int64}(1:n)\n    xs2 = join(xs, \" \")\n    return xs2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppml_0zro.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmppml_0zro.jl:17\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppml_0zro.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppml_0zro.jl:16\ntest set: Test Failed at /tmp/tmppml_0zro.jl:18\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"1 2 3\" == \"0 1 2\
    \ 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppml_0zro.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppml_0zro.jl:16\ntest set: Test\
    \ Failed at /tmp/tmppml_0zro.jl:19\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6 7\
    \ 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppml_0zro.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppml_0zro.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    temp = \"\"\n    for i in 0:n\n        temp *= string(i) * \" \"\n    end\n\
    \    return temp\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpicl__6i5.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpicl__6i5.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpicl__6i5.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpicl__6i5.jl:18\ntest set: Test Failed at /tmp/tmpicl__6i5.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpicl__6i5.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpicl__6i5.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpicl__6i5.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpicl__6i5.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpicl__6i5.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(x) for x in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpab_qkgzi.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpab_qkgzi.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpab_qkgzi.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpab_qkgzi.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpab_qkgzi.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpab_qkgzi.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpab_qkgzi.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpab_qkgzi.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpab_qkgzi.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpab_qkgzi.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_sequence(n::Int64)\n\
    \     @ Main /tmp/tmpab_qkgzi.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpab_qkgzi.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpab_qkgzi.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978154
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    nums = []\n    for i in 0:n\n        push!(nums, i)\n    end\n    join(nums,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return (string(i) for i in 0:n)...\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"...\" expression outside call around /tmp/tmpt8e5bdmg.jl:8\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpt8e5bdmg.jl:1\nin expression starting\
    \ at /tmp/tmpt8e5bdmg.jl:1\n"
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    i = 0\n    a = []\n    while i <= n\n        push!(a, string(i))\n      \
    \  i += 1\n    end\n    return join(a)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw5a8m9q8.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpw5a8m9q8.jl:22\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n   Evaluated: \"0123\" == \"0 1 2 3\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5a8m9q8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5a8m9q8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw5a8m9q8.jl:23\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"012345678910\" == \"0 1 2 3 4 5 6 7 8 9 10\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5a8m9q8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5a8m9q8.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659978153
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        \"0\"\n    else\n        string_sequence(n-1) * \" \"\
    \ * string(n)\n    end\nend\n \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \"\"\n    for i in 0:n\n        str *= string(i) * \" \"\n    end\n\
    \    return str\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptdo8m7c7.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmptdo8m7c7.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptdo8m7c7.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptdo8m7c7.jl:18\ntest set: Test Failed at /tmp/tmptdo8m7c7.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptdo8m7c7.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptdo8m7c7.jl:18\ntest set: Test\
    \ Failed at /tmp/tmptdo8m7c7.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptdo8m7c7.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptdo8m7c7.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978154
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = string(0)\n    for i in 1:n\n        str = str * \" \" * string(i)\n\
    \    end\n    return str\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978142
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    n = n + 1 # The intention is that n is inclusive, so add 1\n    \n\
    \    # Create an array of numbers starting from 0 till n, then convert to string\n\
    \    numbers = Int64[]\n    for i in 0:n-1\n        push!(numbers, i)\n    end\n\
    \    return join(map(string, numbers), \" \")\n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978152
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return(join(map(string,collect(0:n)), \" \"))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n\n        s = s * string(i) * \" \"\n    end\n \
    \   return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfixwdop3.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpfixwdop3.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpfixwdop3.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpfixwdop3.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    \"\"\"\n    out = \"\"\n    for i in 0:n\n        out\
    \ = string(out,i,\" \")\n    return out\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw9gdb4bg.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw9gdb4bg.jl:1\n\
    in expression starting at /tmp/tmpw9gdb4bg.jl:1\n"
  stdout: ''
  timestamp: 1659978153
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    A = \"0\"\n    for i in 1:n\n        A = A * \" \" * string(i)\n    end\n\
    \    return A\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, \" \", i)\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvliokcxv.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpvliokcxv.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvliokcxv.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvliokcxv.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    seq = \"\"\n    for i in range(0, n + 1)\n        seq = seq * \" \" * string(i)\n\
    \    end\n    return seq\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw8ffby49.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpw8ffby49.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0 1\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw8ffby49.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpw8ffby49.jl:18\ntest set: Test Failed at /tmp/tmpw8ffby49.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3 4\" == \"\
    0 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8ffby49.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8ffby49.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpw8ffby49.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10 11\" == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8ffby49.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8ffby49.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978154
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \  num_list = list(\"\")\n  for i = 0:n\n    push!(num_list, string(i))\n  end\n\
    \  join(num_list, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpx_tfjhml.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpx_tfjhml.jl:19\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  UndefVarError: list not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpx_tfjhml.jl:8\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_tfjhml.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_tfjhml.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpx_tfjhml.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  UndefVarError: list not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpx_tfjhml.jl:8\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_tfjhml.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_tfjhml.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpx_tfjhml.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: list not defined\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpx_tfjhml.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_tfjhml.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_tfjhml.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659978154
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    out = \"\"\n    for i in 0:n\n        out = string(out,i)\n        if i !=\
    \ n\n            out = string(out,\" \")\n        end\n    end\n    return out\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978152
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \  if n == 0\n    return \"0\"\n  else\n    return string_sequence(n-1) * \" \"\
    \ * string(n)\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    out = \"\"\n    for i = 0:n\n        out = string(out, i, \" \")\n    end\n\
    \    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt_c9jk7q.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpt_c9jk7q.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt_c9jk7q.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt_c9jk7q.jl:18\ntest set: Test Failed at /tmp/tmpt_c9jk7q.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt_c9jk7q.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt_c9jk7q.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpt_c9jk7q.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt_c9jk7q.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt_c9jk7q.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978154
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        s = \"0\"\n    else\n        s = string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    for i in 1:n\n        println(i)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpejlpz3kn.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpejlpz3kn.jl:17\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpejlpz3kn.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejlpz3kn.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejlpz3kn.jl:16\n1\n2\n3\n\
    test set: Error During Test at /tmp/tmpejlpz3kn.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpejlpz3kn.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejlpz3kn.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejlpz3kn.jl:16\n1\n2\n3\n\
    4\n5\n"
  timestamp: 1659978156
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return string(join([\"$x \" for x = 0:n], \"\"))\nend\n \n \n\"\"\" Return\
    \ a string in the form \"n=value\" where n is the given parameter name, and value\
    \ is\n    the value of the variable.\n    >>> variable_string(\"param\")\n   \
    \ \"param=0\"\n    >>> variable_string(\"param\", 10)\n    \"param=10\"\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpigbdyjng.jl:12\nin expression starting at /tmp/tmpigbdyjng.jl:12\n"
  stdout: ''
  timestamp: 1659978154
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978146
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    out = \"\"\n    for i in 0:n\n        out = string(out, i, \" \")\n    end\n\
    \    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp80g6b6y0.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp80g6b6y0.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp80g6b6y0.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp80g6b6y0.jl:18\ntest set: Test Failed at /tmp/tmp80g6b6y0.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80g6b6y0.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80g6b6y0.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp80g6b6y0.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80g6b6y0.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80g6b6y0.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i = 0:n\n        s = s * string(i) * \" \"\n    end\n \
    \   return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfixwdop3.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpfixwdop3.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpfixwdop3.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"0 1 2 3 \" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpfixwdop3.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfixwdop3.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfixwdop3.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = string(0)\n    for i = 1:n \n        s = string(s, \" \", i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978153
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    nums = string(0)\n    for i = 1:n\n        nums = nums * \" \" * string(i)\n\
    \    end\n    return nums\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978153
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(map(string, 0:n), \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978143
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"Can't do negative\")\n    end\n    if n < 1\n \
    \       return \"\"\n    end\n    return string_sequence(n-1) * \" \" * string(n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiz9_stkx.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpiz9_stkx.jl:21\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiz9_stkx.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpiz9_stkx.jl:20\ntest set: Test Failed at /tmp/tmpiz9_stkx.jl:22\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 1 2 3\" == \"0 1\
    \ 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiz9_stkx.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiz9_stkx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpiz9_stkx.jl:23\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6 7\
    \ 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiz9_stkx.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiz9_stkx.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978155
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \"\"\n    for i = 0:n\n        str = string(str, i)\n        if i !=\
    \ n\n            str = string(str, \" \")\n        end\n    end\n    return str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978153
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \  res = \"0\"\n  for i in 1:n \n      res = string(res, \" \", i)\n  end\n  return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    space = \" \"\n    return space*join(collect(0:n))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8qver3jr.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp8qver3jr.jl:16\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8qver3jr.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8qver3jr.jl:15\ntest set: Test Failed at /tmp/tmp8qver3jr.jl:17\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0123\" == \"0 1 2\
    \ 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8qver3jr.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8qver3jr.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp8qver3jr.jl:18\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 012345678910\" == \"0 1 2 3 4 5 6 7 8 9 10\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8qver3jr.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8qver3jr.jl:15\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978155
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = string(0)\n    for i = 1:n\n        s = s * \" \" * string(i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978153
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else \n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * \" \" * string(i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsgttgh7q.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpsgttgh7q.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsgttgh7q.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsgttgh7q.jl:18\ntest set: Test Failed at /tmp/tmpsgttgh7q.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsgttgh7q.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsgttgh7q.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpsgttgh7q.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsgttgh7q.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsgttgh7q.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978155
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    result = string(0)\n   \n    for i in 1:n \n        result = result\
    \ * \" \" * string(i) \n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978154
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str_array = []\n    for i in 0:n\n        push!(str_array, i)\n    end\n\
    \    return join(str_array, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978154
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    output = \"\"\n    for i in 0:n\n        output = string(output, i)\n   \
    \     if i < n\n            output = string(output, \" \")\n        end\n    end\n\
    \    return output\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978154
- exit_code: -1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join([\" \"*i for i in 0:n], \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpk1i8szq6.jl:15\n  Test threw
    exception\n  Expression: candidate(0) == "0"\n  MethodError: no method matching
    *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    (::var"#1#2")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47
    [inlined]\n   [3] collect\n     @ ./array.jl:724 [inlined]\n   [4] string_sequence(n::Int64)\n     @
    Main /tmp/tmpk1i8szq6.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpk1i8szq6.jl:15 [inlined]\n   [7]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpk1i8szq6.jl:14\n'''
  timestamp: 1659978158
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\n \n \n \n@assert string_sequence(0) == \"\
    0\"\n@assert string_sequence(5) == \"0 1 2 3 4 5\"\n@assert string_sequence(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n \n \n\"\"\" Transpose a string containing space-delimited\
    \ numbers. \n    >>> string_transpose(\"0 1 2 3 4 5\")\n    \"0 0 0 0 0 0\n  \
    \   1 1 1 1 1 1\n     2 2 2 2 2 2\n     3 3 3 3 3 3\n     4 4 4 4 4 4\n     5\
    \ 5 5 5 5 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpan5plhhs.jl:22\nin expression starting at /tmp/tmpan5plhhs.jl:22\n"
  stdout: ''
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \  res = \"\"\n  for i in 0:n\n    res = res * string(i) * \" \"\n  end\n  return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5s2gb6a_.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp5s2gb6a_.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5s2gb6a_.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5s2gb6a_.jl:18\ntest set: Test Failed at /tmp/tmp5s2gb6a_.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s2gb6a_.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s2gb6a_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5s2gb6a_.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s2gb6a_.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s2gb6a_.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978155
- exit_code: 0
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \  if n == 0\n    return \"0\"\n  else\n    return string_sequence(n-1) * \" \"\
    \ * string(n)\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    my_string = \"\"\n    for i in range(0,n+1)\n        my_string = my_string\
    \ * string(i) * \" \"\n    end\n    return my_string\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprmj76s6h.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmprmj76s6h.jl:21\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 1 \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprmj76s6h.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprmj76s6h.jl:20\ntest set: Test Failed at /tmp/tmprmj76s6h.jl:22\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 4 \" == \"\
    0 1 2 3\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprmj76s6h.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprmj76s6h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprmj76s6h.jl:23\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"0 1 2 3 4 5 6 7 8 9 10 11 \" == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprmj76s6h.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprmj76s6h.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        return \"argument must be non-negative\"\n    end\n   \
    \ # your code here\nend\n \nstring_sequence(5)\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n [1] string_sequence(n::Int64)\n   @ Main /tmp/tmpjimb3ipr.jl:9\n\
    \ [2] top-level scope\n   @ /tmp/tmpjimb3ipr.jl:14\nin expression starting at\
    \ /tmp/tmpjimb3ipr.jl:14\n"
  stdout: ''
  timestamp: 1659978157
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, \" \", i)\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvliokcxv.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpvliokcxv.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvliokcxv.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \" 0 1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvliokcxv.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \" 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6\
    \ 7 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvliokcxv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvliokcxv.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
