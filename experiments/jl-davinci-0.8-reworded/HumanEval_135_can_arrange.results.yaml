name: HumanEval_135_can_arrange
language: jl
results:
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    ##can_arrange 1\n    ##for i in\
    \ 2:lastindex(arr)\n    ##    if arr[i] <= arr[i-1]\n    ##        return i-1\n\
    \    ##    end\n    ##end\n    ##return -1\n    ##can_arrange 2\n    ##for i in\
    \ 2:lastindex(arr)\n    ##    if arr[i] <= arr[i-1]\n        ##return i-1\n  \
    \  ##    end\n    ##end\n    ##return -1\n    ##can_arrange 3\n    ##if arr[2]\
    \ <= arr[1]\n    ##    return 1\n    ##end\n    ##for i in 3:lastindex(arr)\n\
    \    ##    if arr[i] <= arr[i-1]\n    ##        return i-1\n    ##    end\n  \
    \  ##end\n    ##return -1\n    ##can_arrange 4\n    ##for i in 2:lastindex(arr)\n\
    \    ##    if arr[i] <= arr[i-1]\n    ##        return i-1\n    ##    end\n  \
    \  ##end\n    ##return -1\n    ##can_arrange 5\n    ##for i in 2:lastindex(arr)\n\
    \    ##    if arr[i] <= arr[i-1]\n    ##        return i-1\n    ##    end\n  \
    \  ##end\n    ##return -1\n    ##can_arrange 6\n    for i in 2:lastindex(arr)\n\
    \        if arr[i] <= arr[i-1]\n            return i-1\n        end\n    end\n\
    \    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpffrpwq6p.jl:67\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpffrpwq6p.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpffrpwq6p.jl:63\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpffrpwq6p.jl:61\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    temp = [arr[1]]\n    i = 2\n  \
    \  while i <= length(arr)\n        if temp[end] >= arr[i]\n            push!(temp,\
    \ arr[i])\n        else\n            break\n        end\n        i += 1\n    end\n\
    \    if length(temp) == length(arr)\n        return -1\n    else\n        return\
    \ length(temp)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpusnx0_rc.jl:34\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpusnx0_rc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpusnx0_rc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpusnx0_rc.jl:35\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 1 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpusnx0_rc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpusnx0_rc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpusnx0_rc.jl:36\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpusnx0_rc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpusnx0_rc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpusnx0_rc.jl:37\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpusnx0_rc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpusnx0_rc.jl:33\ntest set: Error\
    \ During Test at /tmp/tmpusnx0_rc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] get"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpusnx0_rc.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # TODO: write code here\nend;\n\
    \ \ncan_arrange([1, 2, 4, 3, 5]) == 3\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\nClosest candidates are:\\n  convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n  convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n  ...\\nStacktrace:\\n [1] can_arrange(arr::Vector{Int64})\\n   @ '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    ans = -1 \n    prev = arr[1] \n\
    \    for i in 1:length(arr) \n        if prev > arr[i] \n            ans = i-1\
    \ \n            break \n        end \n        prev = arr[i] \n    end \n    return\
    \ ans \nend \nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0yqozqz5.jl:32\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yqozqz5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yqozqz5.jl:28\ntest set: Error\
    \ During Test at /tmp/tmp0yqozqz5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmp0yqozqz5.jl:14\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0yqozqz5.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0yqozqz5.jl:28\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    3     1      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0yqozqz5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i]>=arr[i+1] \n            continue\n        else\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqtfavr5q.jl:27\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtfavr5q.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtfavr5q.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqtfavr5q.jl:28\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 1 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtfavr5q.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtfavr5q.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqtfavr5q.jl:29\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtfavr5q.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtfavr5q.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqtfavr5q.jl:30\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtfavr5q.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtfavr5q.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqtfavr5q.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    if arr[end] < arr[end-1]\n    \
    \    return end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt0aq0hlp.jl:17\nin expression starting at /tmp/tmpt0aq0hlp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    if length(arr) <= 1\n        return\
    \ -1\n    end\n    for i in length(arr)-1:-1:1\n        if arr[i] <= arr[i+1]\n\
    \            return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppfe03xla.jl:28\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfe03xla.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfe03xla.jl:27\ntest set: Test\
    \ Failed at /tmp/tmppfe03xla.jl:29\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 3 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfe03xla.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfe03xla.jl:27\ntest set: Test\
    \ Failed at /tmp/tmppfe03xla.jl:30\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 8 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfe03xla.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfe03xla.jl:27\ntest set: Test\
    \ Failed at /tmp/tmppfe03xla.jl:31\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfe03xla.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfe03xla.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppfe03xla.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    # Write your code here\nend\n \n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqx_m3ka1.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpqx_m3ka1.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqx_m3ka1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqx_m3ka1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqx_m3ka1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpqx_m3ka1.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqx_m3ka1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqx_m3ka1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    if length(arr) <= 1\n        return\
    \ -1\n    end\n    index = 2\n    while arr[index] >= arr[index - 1] && index\
    \ < length(arr)\n        index += 1\n    end\n    if index >= length(arr)\n  \
    \      return -1\n    else\n        return index\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjvq2ce6c.jl:31\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvq2ce6c.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvq2ce6c.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjvq2ce6c.jl:33\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvq2ce6c.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvq2ce6c.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjvq2ce6c.jl:34\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvq2ce6c.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvq2ce6c.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjvq2ce6c.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    ans = -1\n\
    \    # You can use `arr[i]` to access the ith element of `arr`\n    for i in 2:n\n\
    \        if arr[i] < arr[i-1]\n            ans = i-1\n            break\n    \
    \    end\n    end\n    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq3kyk1z8.jl:32\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3kyk1z8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3kyk1z8.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq3kyk1z8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in length(arr):-1:2\n   \
    \     if arr[i] < arr[i-1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\n \ncan_arrange([1, 2, 4, 3, 5])\ncan_arrange([1, 2, 3])\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp58uw6azz.jl:28\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp58uw6azz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp58uw6azz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp58uw6azz.jl:30\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp58uw6azz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp58uw6azz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp58uw6azz.jl:31\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp58uw6azz.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp58uw6azz.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp58uw6azz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    \n    for i in 1:length(arr)-1\n\
    \        if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwggcg61y.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwggcg61y.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwggcg61y.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwggcg61y.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    for i in 1:length(arr)-1\n    \
    \    if arr[i] >= arr[i+1]\n            return i\n        end\n    end\n    return\
    \ -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppbpppot9.jl:28\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppbpppot9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppbpppot9.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppbpppot9.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    l = length(arr)\n    if l < 2\n\
    \        return -1\n    end\n    indx = 0\n    while indx < l\n        if arr[indx]\
    \ < arr[indx + 1]\n            indx += 1\n        else\n            break\n  \
    \      end\n    end\n    if indx == l\n        return -1\n    else\n        return\
    \ indx\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3dltcxa4.jl:36\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3dltcxa4.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3dltcxa4.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3dltcxa4.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3dltcxa4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmp3dltcxa4.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3dltcxa4.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3dltcxa4.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3dltcxa4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3dltcxa4.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3dltcxa4.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3dltcxa4.jl:35\ntest set:\
    \ Error Durin"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3dltcxa4.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    largest_index = -1 \n    for i\
    \ in 2:length(arr)\n        if arr[i] <= arr[i-1]\n            largest_index =\
    \ i\n        end\n    end\n    return largest_index\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpus2dzby3.jl:26\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpus2dzby3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpus2dzby3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpus2dzby3.jl:28\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpus2dzby3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpus2dzby3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpus2dzby3.jl:29\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpus2dzby3.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpus2dzby3.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpus2dzby3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    return _can_arrange(arr, length(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa2ac3_rj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  UndefVarError: _can_arrange\
    \ not defined\n  Stacktrace:\n   [1] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpa2ac3_rj.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa2ac3_rj.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa2ac3_rj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpa2ac3_rj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  UndefVarError: _can_arrange not defined\n \
    \ Stacktrace:\n   [1] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpa2ac3_rj.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa2ac3_rj.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa2ac3_rj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpa2ac3_rj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  UndefVarError: _can_arrange\
    \ not defined\n  Stacktrace:\n   [1] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpa2ac3_rj.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa2ac3_rj.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa2ac3_rj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpa2ac3_rj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 8, 5, 7, 3]) == 4\n  UndefVarError: _can_arrange not defined\n\
    \  Stacktrace:\n   [1] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpa2ac3_rj.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2ac3_rj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    maxval = -Inf\n    maxi = -1\n\
    \    for i in eachindex(arr)\n        if arr[i] > maxval\n            maxval =\
    \ arr[i]\n            maxi = i\n        end\n    end\n    return maxi\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2,\
    \ 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpewgj3doj.jl:28\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewgj3doj.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewgj3doj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpewgj3doj.jl:29\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 4 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewgj3doj.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewgj3doj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpewgj3doj.jl:30\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 9 == 2\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewgj3doj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewgj3doj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpewgj3doj.jl:31\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewgj3doj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewgj3doj.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewgj3doj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    max = -1\n\
    \    for i in 1:n\n        if i > 1 && arr[i] < arr[i-1]\n            max = i\
    \ - 1\n        end\n    end\n    return max\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    \"\"\"Return the index of the next\
    \ largest element\"\"\"\n    @inbounds for i in 2:length(arr)\n        if arr[i]\
    \ < arr[i-1]\n            return i-1\n        end\n    end\n    return -1\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp143nxyj4.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp143nxyj4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp143nxyj4.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp143nxyj4.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given vector will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2,\
    \ 4, 3, 5])\n    3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction\
    \ can_arrange(arr::Vector{Int64})::Int64 \n    highest = -1\n    for (i, e) in\
    \ enumerate(arr)\n        if i > 1\n            if e <= arr[i-1]\n           \
    \     if i-1 > highest\n                    highest = i-1\n                end\n\
    \            end\n        end\n    end\n    return highest\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
