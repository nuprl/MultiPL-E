name: HumanEval_101_words_string
language: jl
prompt: "\"\"\"\n    You will be given a string of words separated by commas or spaces.\
  \ Your task is\n    to split the string into words and return a vector of the words.\n\
  \    \n    For example:\n    >>> words_string(\"Hi, my name is John\")\n    [\"\
  Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One, two, three,\
  \ four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
  ]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
  Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
  One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"\
  five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
  ])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
  , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
  \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
completions: ["    words = split(s)\n    return words\nend", "    ws = split(s, r\"\
    [, ]+\")\n    filter(str -> str != \"\", ws)\nend", "    return split(s, [\" \"\
    , \",\"])\nend", "    v = split(s, [\",\", \" \"])\n    return v\nend", "    split(split(s,\
    \ \",\"), \" \")\nend", "    return split(s)\nend", "    return split(s, [\" \"\
    , \",\"])\nend", "    s = replace(s, \",\", \" \")\n    return split(s)\nend",
  "    words = split(s, [\" \", \",\"])\n    return words\nend", "    split(s, ',')\n\
    end", "    s = strip(s)\n    output = split(s, [\" \", \",\"])\n    return output\n\
    end", "    ws = split(s, \" ,;\") # Splits by both spaces and commas\n    # return\
    \ ws[1:end-1] # Ignore the last \"\" string\n    return ws\nend", "    words =\
    \ split(s)\n    return words\nend", "    split(s)\nend", "    \n    words = split(s,\
    \ [\" \", \",\", \".\"])\n    return [x for x in words if x != \"\"]\nend", " \
    \   words = split(s)\n    return words\nend", "    return split(s, r\"[\\s,]+\"\
    )\nend", "    s =  replace(s, \",\" => \" \")\n    out = split(s)\n    return\
    \ out\nend", "    return split(s, \"[ \\\\,]+\")\nend", "    a = split(s, [\"\
    \ \", \",\"])\n    return a\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
