name: HumanEval_155_even_odd_count
language: jl
prompt: "\"\"\"Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n\
  \    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
  \ Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
  \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
  \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\
  \t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0)\
  \ == (1, 0))\nend\n"
completions: ["    evencount = 0\n    oddcount = 0\n    while num != 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            evencount += 1\n        else\n\
    \            oddcount += 1\n        end\n        num = num \xF7 10\n    end\n\
    \    return (evencount, oddcount)\nend", "    num_string = string(num)\n    even_count\
    \ = 0\n    odd_count = 0\n    for i in 1:length(num_string)\n        if parse(Int64,\
    \ num_string[i]) % 2 == 0\n            even_count += 1\n        else\n       \
    \     odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end", "    \n    even_count = 0\n    odd_count = 0\n    \n    if num < 0\n   \
    \     num = -num\n    end\n    while num > 0\n        x = num % 10\n        if\
    \ x % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n        num = num \xF7 10\n    end\n    return even_count,\
    \ odd_count\nend", "    even, odd = 0, 0\n    while num != 0\n        if rem(num,\
    \ 2) == 0\n            even += 1\n        else\n            odd += 1\n       \
    \ end\n        num = div(num, 10)\n    end\n    return even, odd\nend", "    even_count\
    \ = 0\n    odd_count = 0\n    for i in abs(num)\n        if i % 2 == 0\n     \
    \       even_count += 1\n        else\n            odd_count += 1\n        end\n\
    \    end\n    return even_count, odd_count\nend", "    odd_count = 0\n    even_count\
    \ = 0\n    for i in num:\n        if i % 2 == 0:\n            even_count += 1\n\
    \        else:\n            odd_count += 1\n    return even_count, odd_count\n\
    end", "    evens, odds = 0, 0\n    for i in abs(num)\n        if i % 2 == 0\n\
    \            evens += 1\n        else\n            odds += 1\n        end\n  \
    \  end\n    return evens, odds\nend", "    even = 0\n    odd = 0\n    for i in\
    \ digits(num)\n        if iseven(i)\n            even += 1\n        else\n   \
    \         odd += 1\n        end\n    end\n    return (even, odd)\nend", "    \n\
    \    # evens = 0, odds = 0\n    count_evens = 0\n    count_odds = 0\n    \n  \
    \  # convert to string and check every digit\n    num_str = string(num)\n    for\
    \ i in num_str\n        # check if even and increment counter\n        if parse(Int64,\
    \ i) % 2 == 0\n            count_evens += 1\n        else # else the digit is\
    \ odd\n            count_odds += 1\n        end\n    end\n    \n    # return tuple\
    \ with even and odd digit counts\n    return (count_evens, count_odds)\nend",
  "    evens = 0\n    odds = 0\n    for digit in digits(num)\n        if digit % 2\
    \ == 0\n            evens += 1\n        else\n            odds += 1\n        end\n\
    \    end\n    return evens, odds\nend", "    even_num, odd_num = 0, 0\n    if\
    \ num >= 0\n        while num != 0\n            if num % 2 == 0\n            \
    \    even_num += 1\n            else\n                odd_num += 1\n         \
    \   end\n            num = num \xF7 10\n        end\n    else\n        while num\
    \ != 0\n            if num % 2 == 0\n                even_num += 1\n         \
    \   else\n                odd_num += 1\n            end\n            num = num\
    \ \xF7 10\n        end\n    end\n    return even_num, odd_num\nend", "    even,\
    \ odd = 0, 0\n    if num < 0\n        num = -num\n    end\n    while num > 0\n\
    \        if num % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num = div(num, 10)\n    end\n    return even, odd\n\
    end", "  # TODO\nend", "    even = 0\n    odd = 0\n    for d in digits(num)\n\
    \        if d % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend", "    evens = 0\n    odds\
    \ = 0\n    for i in digits(num)\n        if i%2 == 0\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    return\
    \ evens, odds\nend", "    even_count = 0\n    odd_count = 0\n    for i in num:\n\
    \        if i % 2 == 0:\n            even_count += 1\n        else:\n        \
    \    odd_count += 1\n    return even_count, odd_count\nend", "    even = 0\n \
    \   odd = 0\n    for i in 1:digits(num)\n        if num[i] == 0 || num[i] == 2\
    \ || num[i] == 4 || num[i] == 6 || num[i] == 8\n            even += 1\n      \
    \  else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end", "    even_count = 0\n    odd_count = 0\n    for digit in digits(num)\n \
    \       if iseven(digit)\n            even_count += 1\n        else\n        \
    \    odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end", "    evens = 0\n    odds = 0\n    num = abs(num)\n    while num > 0\n  \
    \      if num % 2 == 0\n            evens += 1\n        else\n            odds\
    \ += 1\n        end\n        num = floor(num/10)\n    end\n    return (evens,\
    \ odds)\nend", "    \"\"\"Returns the number of even and odd digits in a number\"\
    \"\"\n    even_count = 0\n    odd_count = 0\n    for d in digits(num)\n      \
    \  if d % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return even_count, odd_count\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
