name: HumanEval_155_even_odd_count
language: jl
prompt: "\"\"\"Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n\
  \    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
  \ Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
  \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
  \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\
  \t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0)\
  \ == (1, 0))\nend\n"
completions: ["    evencount = 0\n    oddcount = 0\n    while num != 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            evencount += 1\n        else\n\
    \            oddcount += 1\n        end\n        num = num \xF7 10\n    end\n\
    \    return (evencount, oddcount)\nend", "    num_string = string(num)\n    even_count\
    \ = 0\n    odd_count = 0\n    for i in 1:length(num_string)\n        if parse(Int64,\
    \ num_string[i]) % 2 == 0\n            even_count += 1\n        else\n       \
    \     odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end", "    \n    even_count = 0\n    odd_count = 0\n    \n    if num < 0\n   \
    \     num = -num\n    end\n    while num > 0\n        x = num % 10\n        if\
    \ x % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n        num = num \xF7 10\n    end\n    return even_count,\
    \ odd_count\nend", "    even, odd = 0, 0\n    while num != 0\n        if rem(num,\
    \ 2) == 0\n            even += 1\n        else\n            odd += 1\n       \
    \ end\n        num = div(num, 10)\n    end\n    return even, odd\nend", "    even_count\
    \ = 0\n    odd_count = 0\n    for i in abs(num)\n        if i % 2 == 0\n     \
    \       even_count += 1\n        else\n            odd_count += 1\n        end\n\
    \    end\n    return even_count, odd_count\nend", "    odd_count = 0\n    even_count\
    \ = 0\n    for i in num:\n        if i % 2 == 0:\n            even_count += 1\n\
    \        else:\n            odd_count += 1\n    return even_count, odd_count\n\
    end", "    evens, odds = 0, 0\n    for i in abs(num)\n        if i % 2 == 0\n\
    \            evens += 1\n        else\n            odds += 1\n        end\n  \
    \  end\n    return evens, odds\nend", "    even = 0\n    odd = 0\n    for i in\
    \ digits(num)\n        if iseven(i)\n            even += 1\n        else\n   \
    \         odd += 1\n        end\n    end\n    return (even, odd)\nend", "    \n\
    \    # evens = 0, odds = 0\n    count_evens = 0\n    count_odds = 0\n    \n  \
    \  # convert to string and check every digit\n    num_str = string(num)\n    for\
    \ i in num_str\n        # check if even and increment counter\n        if parse(Int64,\
    \ i) % 2 == 0\n            count_evens += 1\n        else # else the digit is\
    \ odd\n            count_odds += 1\n        end\n    end\n    \n    # return tuple\
    \ with even and odd digit counts\n    return (count_evens, count_odds)\nend",
  "    evens = 0\n    odds = 0\n    for digit in digits(num)\n        if digit % 2\
    \ == 0\n            evens += 1\n        else\n            odds += 1\n        end\n\
    \    end\n    return evens, odds\nend", "    even_num, odd_num = 0, 0\n    if\
    \ num >= 0\n        while num != 0\n            if num % 2 == 0\n            \
    \    even_num += 1\n            else\n                odd_num += 1\n         \
    \   end\n            num = num \xF7 10\n        end\n    else\n        while num\
    \ != 0\n            if num % 2 == 0\n                even_num += 1\n         \
    \   else\n                odd_num += 1\n            end\n            num = num\
    \ \xF7 10\n        end\n    end\n    return even_num, odd_num\nend", "    even,\
    \ odd = 0, 0\n    if num < 0\n        num = -num\n    end\n    while num > 0\n\
    \        if num % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num = div(num, 10)\n    end\n    return even, odd\n\
    end", "  # TODO\nend", "    even = 0\n    odd = 0\n    for d in digits(num)\n\
    \        if d % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend", "    evens = 0\n    odds\
    \ = 0\n    for i in digits(num)\n        if i%2 == 0\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    return\
    \ evens, odds\nend", "    even_count = 0\n    odd_count = 0\n    for i in num:\n\
    \        if i % 2 == 0:\n            even_count += 1\n        else:\n        \
    \    odd_count += 1\n    return even_count, odd_count\nend", "    even = 0\n \
    \   odd = 0\n    for i in 1:digits(num)\n        if num[i] == 0 || num[i] == 2\
    \ || num[i] == 4 || num[i] == 6 || num[i] == 8\n            even += 1\n      \
    \  else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end", "    even_count = 0\n    odd_count = 0\n    for digit in digits(num)\n \
    \       if iseven(digit)\n            even_count += 1\n        else\n        \
    \    odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end", "    evens = 0\n    odds = 0\n    num = abs(num)\n    while num > 0\n  \
    \      if num % 2 == 0\n            evens += 1\n        else\n            odds\
    \ += 1\n        end\n        num = floor(num/10)\n    end\n    return (evens,\
    \ odds)\nend", "    \"\"\"Returns the number of even and odd digits in a number\"\
    \"\"\n    even_count = 0\n    odd_count = 0\n    for d in digits(num)\n      \
    \  if d % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return even_count, odd_count\nend", "    even\
    \ = 0\n    odd = 0\n    while num > 0\n        val = num % 10\n        if val\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n        num = div(num, 10)\n    end\n    return (even, odd)\nend", " \
    \   if num < 0 \n        num = abs(num)\n    end\n    even_num = 0\n    odd_num\
    \ = 0\n    while num > 0\n        if num % 2 == 0\n            even_num += 1\n\
    \        else\n            odd_num += 1\n        end\n        num = div(num, 10)\n\
    \    end\n    return (even_num, odd_num)\nend", "    even_cnt, odd_cnt = 0, 0\n\
    \    for i in 1:length(digits(num))\n        if digits(num)[i] % 2 == 0\n    \
    \        even_cnt += 1\n        else\n            odd_cnt += 1\n        end\n\
    \    end\n    return even_cnt, odd_cnt\nend\neven_odd_count(-12)", "    \nend\n\
    even_odd_count(1223)", "    even_count = 0\n    odd_count = 0\n    while num !=\
    \ 0\n        last_digit = num % 10\n        if last_digit % 2 == 0\n         \
    \   even_count += 1\n        else\n            odd_count += 1\n        end\n \
    \       num = num \xF7 10\n    end\n    return (even_count, odd_count)\nend",
  "    even_count, odd_count = 0, 0\n    for digit in collect(digits(num))\n     \
    \   if iseven(digit)\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return even_count, odd_count\nend", "    odd_cnt\
    \ = 0\n    even_cnt = 0\n    for i in num:\n        if i % 2 == 0:\n         \
    \   even_cnt += 1\n        else:\n            odd_cnt += 1\n    return even_cnt,\
    \ odd_cnt\nend", "    evens = 0\n    odds = 0\n    if num < 0\n        num = -num\n\
    \    end\n    while num > 0\n        if (num % 10) % 2 == 0\n            evens\
    \ += 1\n        else\n            odds += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (evens, odds)\nend", "    even_count = 0\n    odd_count\
    \ = 0\n    for x in digits(num)\n        if iseven(x)\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n    end\n    return\
    \ even_count, odd_count\nend\n\"\"\"\nA 3 x 3 magic square is a 3 x 3 grid filled\
    \ with distinct numbers from 1 to 9 such that each row, column, and both diagonals\
    \ all have the same sum.\nGiven an grid of integers, how many 3 x 3 \"magic square\"\
    \ subgrids are there?  (Each subgrid is contiguous).\n     Example:\n    >>> numMagicSquaresInside([[4,3,8,4],\n\
    \    [9,5,1,9],\n    [2,7,6,2]])\n    1\n    \"\"\"", "    odd, even = 0, 0\n\
    \    for i = abs(num)\n        if i%2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    return even, odd\nend", "   \
    \ even::Int64 = 0\n    odd::Int64 = 0\n    while num > 0\n        if rem(num,\
    \ 10)%2 == 0\n            even += 1\n        else\n            odd += 1\n    \
    \    end\n        num = div(num, 10)\n    end\n    return (even, odd)\nend", " \
    \   evens = 0\n    odds = 0\n    if num < 0\n        num = abs(num)\n    end\n\
    \    while num > 0\n        if num % 2 == 0\n            evens += 1\n        else\n\
    \            odds += 1\n        end\n        num = num \xF7 10\n    end\n    return\
    \ (evens, odds)\nend", "    \n    count_odd = 0\n    count_even = 0\n    \n  \
    \  for i = 1:abs(num)\n        if abs(i) % 2 == 0\n            count_even += 1\n\
    \        else\n            count_odd += 1\n        end\n    end\n    return count_even,\
    \ count_odd\nend", "    count_even = 0\n    count_odd = 0\n    for i in 1:len(string(num))\n\
    \        if(parse(Int64, split(string(num), \"\")[i]) % 2 == 0)\n            count_even\
    \ += 1\n        else\n            count_odd += 1\n        end\n    end\n    return\
    \ (count_even, count_odd)\nend", "    even_count = 0\n    odd_count = 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (even_count, odd_count)\nend", "    even = 0; odd =\
    \ 0\n    for i in collect(digits(num, base=10))\n        if i % 2 == 0\n     \
    \       even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend", "    even_count = 0\n    odd_count = 0\n    num\
    \ = abs(num)\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            even_count += 1\n        else\n            odd_count +=\
    \ 1\n        end\n        num = num / 10\n    end\n    return (even_count, odd_count)\n\
    end", "    evens, odds = 0, 0\n    for n in num \n        if n % 2 == 0\n    \
    \        evens += 1\n        else\n            odds += 1\n        end\n    end\n\
    \    return evens, odds\nend", "    count_even = 0\n    count_odd = 0\n    num\
    \ = abs(num)\n    while num > 0\n        r = num % 10\n        if r % 2 == 0\n\
    \            count_even += 1\n        else\n            count_odd += 1\n     \
    \   end\n        num = num // 10\n    end\n    return count_even, count_odd\n\
    end", "    #Tuple is immutable\n    evens = 0\n    odds = 0\n    for i in string(num)\n\
    \        if (parse(Int64, i) % 2 == 0)\n            evens += 1\n        else\n\
    \            odds += 1\n        end\n    end\n    return (evens, odds)\nend",
  "    even::Int64 = 0\n    odd::Int64 = 0\n    while num != 0\n        if num % 2\
    \ == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num = div(num, 10)\n    end\n    return (even, odd)\nend", "    even_digits\
    \ = 0\n    odd_digits = 0\n    for digit in digits(num)\n        if digit % 2\
    \ == 0\n            even_digits += 1\n        else\n            odd_digits +=\
    \ 1\n        end\n    end\n    return even_digits, odd_digits\nend", "    num_s\
    \ = string(num)\n    even = 0\n    odd = 0\n    for i in num_s\n        if (i\
    \ == '-') && (even == 0)\n            continue\n        elseif parse(Int64, i)\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n    end\n    return even, odd\nend", "    odd_cnt = even_cnt = 0\n   \
    \ for i in num\n        if i % 2 == 0\n            even_cnt += 1\n        else\n\
    \            odd_cnt += 1\n        end\n    end\n    return (even_cnt, odd_cnt)\n\
    end", "    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num\
    \ > 0\n        if rem(num, 10) % 2 == 0\n            even_count += 1\n       \
    \ else\n            odd_count += 1\n        end\n        num = div(num, 10)\n\
    \    end\n    return (even_count, odd_count)\nend", "    evens = 0\n    odds =\
    \ 0\n    for digit in digits(num)\n        if digit % 2 == 0\n            evens\
    \ += 1\n        else\n            odds += 1\n        end\n    end\n    return\
    \ evens, odds\nend", "    even = 0\n    odd = 0\n    if num < 0\n        num =\
    \ -num\n    end\n    for i in split(string(num))\n        if i == \"0\" || i ==\
    \ \"2\" || i == \"4\" || i == \"6\" || i == \"8\"\n            even += 1\n   \
    \     else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end", "    c = 0 # c = even numbers\n    d = 0 # d = odd numbers\n    for i in\
    \ collect(num)\n        if (i % 2 == 0)\n            c += 1\n        else\n  \
    \          d += 1\n        end\n    end\n    return (c, d)\nend", "    even_count\
    \ = 0\n    odd_count = 0\n    for i in digits(num)\n        if i % 2 == 0\n  \
    \          even_count += 1\n        else\n            odd_count += 1\n       \
    \ end\n    end\n    return (even_count, odd_count)\nend", "    even = 0\n    odd\
    \ = 0\n    for i in 1:length(string(num))\n        if parse(Int64, string(num)[i])\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n    end\n    (even, odd)\nend", "    even = 0\n    odd = 0\n    s = abs(num)\n\
    \    while s > 0\n        t = s % 10\n        if t % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        s = (s - t) /\
    \ 10\n    end\n    return (even, odd)\nend", "    even = 0\n    odd = 0\n    for\
    \ i in 1:length(digits(num))\n        if  digits(num)[i] % 2 == 0\n          \
    \  even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend", "    even = 0\n    odd = 0\n    for digit in digits(num)\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n    end\n    return (even, odd)\nend", "    even = 0\n  \
    \  odd = 0\n    for a in num\n        if a % 2 == 0\n            even += 1\n \
    \       else\n            odd += 1\n        end\n    end\n    return even, odd\n\
    end", "    num = abs(num)\n    even, odd = 0, 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num = num / 10\n    end\n    return\
    \ even, odd\nend", "    if num == 0\n        return (1, 0)\n    end\n    even_num\
    \ = 0\n    odd_num = 0\n    while num != 0\n        if num % 2 == 0\n        \
    \    even_num += 1\n        else\n            odd_num += 1\n        end\n    \
    \    num = num \xF7 10\n    end\n    return (even_num, odd_num)\nend", "    a\
    \ = 0\n    b = 0\n    for i in 1:floor(log10(abs(num)))+1\n        c = num%10\n\
    \        if c%2 == 0\n            a += 1\n        else\n            b += 1\n \
    \       end\n        num = div(num,10)\n    end\n    return a,b\nend", "    nums\
    \ = []\n    if num < 0\n        num = -num\n    end\n    while num > 0\n     \
    \   push!(nums, num % 10)\n        num = num \xF7 10\n    end\n    even_count\
    \ = 0\n    odd_count = 0\n    for i in nums\n        if mod(i, 2) == 0\n     \
    \       even_count += 1\n        else\n            odd_count += 1\n        end\n\
    \    end\n    return (even_count, odd_count)\nend", "    even_count, odd_count\
    \ = 0, 0\n    for i in digits(num)\n        if i % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n    end\n    return\
    \ even_count, odd_count\nend", "    # your code here\nend\n@test even_odd_count(-12)\
    \ == (1, 1)\n@test even_odd_count(123) == (1, 2)\n \n \n \n@testset \"remove_duplicates\"\
    \ begin\n    \"\"\"Given a list of numbers return a list with unique elements.",
  "  even_count = 0\n  odd_count = 0\n  for i in abs(num)\n    x = i % 2 == 0 ? even_count\
    \ += 1 : odd_count += 1\n  end\n  return (even_count, odd_count)\nend", "    even_count\
    \ = 0\n    odd_count = 0\n    for i in digits(num)\n        if i % 2 == 0\n  \
    \          even_count += 1\n        else\n            odd_count += 1\n       \
    \ end\n    end\n    return (even_count, odd_count)\nend", "    # TODO: complete\
    \ this function\n    odd_count = 0\n    even_count = 0\n    num_str = string(num)\n\
    \    for i in num_str\n        # print(i)\n        if i == \"-\"\n           \
    \ continue\n        end\n        if parse(Int64, i) % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n    end\n    return\
    \ even_count, odd_count\nend", "    even = 0\n    odd = 0\n    if num > 0\n  \
    \      for i in num\n            if i % 2 == 0\n                even += 1\n  \
    \          else\n                odd += 1\n            end\n        end\n    else\n\
    \        for i in -num\n            if i % 2 == 0\n                even += 1\n\
    \            else\n                odd += 1\n            end\n        end\n  \
    \  end\n    return (even, odd)\nend", "    even_count = 0\n    odd_count = 0\n\
    \    for d in digits(num)\n        if d % 2 == 0\n            even_count += 1\n\
    \        else\n            odd_count += 1\n        end\n    end\n    return (even_count,\
    \ odd_count)\nend\n \n@testset \"even_odd_count\" begin\n    @test even_odd_count(-12)\
    \ == (1, 1)\n    @test even_odd_count(123) == (1, 2)\nend\n    \n    \n\"\"\"\
    Given a lower and upper integer. return all the numbers between them (including\
    \ the upper and lower bounds).\nThe numbers should be in their string representations\n\
    Note that the lower bound is inclusive and the upper bound is exclusive.", " \
    \   # compute the number of even numbers\n    even_count = 0\n    # compute the\
    \ number of odd numbers\n    odd_count = 0\n    # iterate through each digit in\
    \ a given number\n    for digit in digits(num)\n        # check if digit is even\
    \ or odd\n        if digit % 2 == 0\n            # increment even_count if digit\
    \ is even\n            even_count += 1\n        else\n            # increment\
    \ odd_count if digit is odd\n            odd_count += 1\n        end\n    end\n\
    \    # return tuple of even_count and odd_count\n    return (even_count, odd_count)\n\
    end", "    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num\
    \ > 0\n        if num % 2 == 0\n            even_count += 1\n        else\n  \
    \          odd_count += 1\n        end\n        num = div(num, 10)\n    end\n\
    \    return (even_count, odd_count)\nend", "    even = 0; odd = 0;\n    while\
    \ num != 0\n        if num % 2 == 0\n            even += 1\n        else\n   \
    \         odd += 1\n        end\n        num = floor(num/10)\n    end\n    return\
    \ (even, odd)\nend", "    even_count = 0\n    odd_count = 0\n    while num > 0\n\
    \        temp = mod(num, 10)\n        if mod(temp, 2) == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (even_count, odd_count)\nend", "    (positive(num),\
    \ negative(num))\nend ", "    even = 0\n    odd = 0\n    for i in string(num)\n\
    \        if i == '-'\n            continue\n        end\n        if isodd(Int64(i))\n\
    \            odd += 1\n        else\n            even += 1\n        end\n    end\n\
    \    (even, odd)\nend", "    if num >= 0\n        return (sum([num % 10 % 2 ==\
    \ 0 for num in collect(digits(num))]), sum([num % 10 % 2 != 0 for num in collect(digits(num))]))\n\
    \    else\n        num *= -1\n        return (sum([num % 10 % 2 == 0 for num in\
    \ collect(digits(num))]), sum([num % 10 % 2 != 0 for num in collect(digits(num))]))\n\
    \    end\nend", "    even = 0\n    odd = 0\n    if num < 0\n        num = -num\n\
    \    end\n    while num != 0\n        if mod(num, 2) == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num = num \xF7 10\n\
    \    end\n    return (even, odd)\nend", "    even_count = 0\n    odd_count = 0\n\
    \    for i in 1:length(num)\n        if(num[i]%2 == 0)\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n    end\n    return even_count, odd_count\nend", "    even = 0\n   \
    \ odd = 0\n    for i in eachindex(digits(num))\n        if mod(num[i], 2) == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return even, odd\nend", "    even_count, odd_count = 0, 0\n    if num ==\
    \ 0\n        return (1, 0)\n    end\n    if num < 0\n        num = abs(num)\n\
    \    end\n    while num > 0\n        digit = num % 10\n        if digit % 2 ==\
    \ 0\n            even_count += 1\n        else\n            odd_count += 1\n \
    \       end\n        num = num / 10\n    end\n    return (even_count, odd_count)\n\
    end", "    (even_digits, odd_digits) = (0, 0)\n    if num < 0\n        num = -num\n\
    \    end\n    while num > 0\n        digit = num % 10\n        if digit % 2 ==\
    \ 0\n            even_digits += 1\n        else\n            odd_digits += 1\n\
    \        end\n        num = trunc(Int64, num / 10)\n    end\n    return (even_digits,\
    \ odd_digits)\nend", "    n_even = 0\n    n_odd = 0\n    for d in digits(num)\n\
    \        if mod(d, 2) == 0\n            n_even += 1\n        else\n          \
    \  n_odd += 1\n        end\n    end\n    return (n_even, n_odd)\nend", "    even\
    \ = 0\n    odd = 0\n    if num < 0\n        num = -num\n    end\n    while num\
    \ != 0\n        if num % 2 == 0\n            even += 1\n        else\n       \
    \     odd += 1\n        end\n        num = num // 10\n    end\n    return (even,\
    \ odd)\nend", "    if num < 0\n        num = -num\n    end\n    even_count = 0\n\
    \    odd_count = 0\n    for i in digits(num)\n        if i % 2 == 0\n        \
    \    even_count += 1\n        else\n            odd_count += 1\n        end\n\
    \    end\n    return even_count, odd_count\nend", "    even_count = 0\n    odd_count\
    \ = 0\n    abs_num = abs(num)\n    while abs_num > 0\n        remainder = abs_num\
    \ % 10\n        if remainder % 2 == 0\n            even_count += 1\n        else\n\
    \            odd_count += 1\n        end\n        abs_num = abs_num \xF7 10\n\
    \    end\n    return (even_count, odd_count)\nend", "    \n    even = 0\n    odd\
    \ = 0\n    \n    for i in digits(num)\n        if iseven(i)\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n    end\n    \n    return\
    \ (even, odd)\nend", "    if num == 0\n        return (1, 0)\n    end\n    even\
    \ = 0\n    odd = 0\n    while num != 0\n        if (num % 10) % 2 == 0\n     \
    \       even += 1\n        else\n            odd += 1\n        end\n        num\
    \ = num / 10\n    end\n    return (even, odd)\nend", "    evens = 0\n    odds\
    \ = 0\n    while num > 0\n        dig = num % 10\n        if dig % 2 == 0\n  \
    \          evens += 1\n        else\n            odds += 1\n        end\n    \
    \    num = div(num, 10)\n    end\n    return (evens, odds)\nend\n \n ", "    even_count\
    \ = 0\n    odd_count = 0\n    for i in num:\n        if i % 2 == 0:\n        \
    \    even_count += 1\n        else:\n            odd_count += 1\n    return (even_count,\
    \ odd_count)\nend", "    num_copy = num\n    even = 0\n    odd = 0\n    if num\
    \ < 0\n        num = -num\n    end\n    while num != 0\n        if num % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num = div(num, 10)\n    end\n    if num_copy < 0\n        odd += 1\n\
    \    end\n    return (even, odd)\nend", "    even = odd = 0\n    for i in 1:length(digits(num))\n\
    \        if digits(num)[i] % 2 == 0\n            even += 1\n        else\n   \
    \         odd += 1\n        end\n    end\n    return (even, odd)\nend", "    return\
    \ length( filter( x -> x%2 == 0, num2digits(num))),\n           length( filter(\
    \ x -> x%2 == 1, num2digits(num)))\nend", "    even_count = 0\n    odd_count =\
    \ 0\n    if num < 0\n        num = abs(num)\n    end\n    while num > 0\n    \
    \    if num % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n        num = div(num, 10)\n    end\n    return (even_count,\
    \ odd_count)\nend", "    evens = 0\n    odds = 0\n    for i in 1:length(num)\n\
    \        if mod(num[i], 2) == 0\n            evens += 1\n        else\n      \
    \      odds += 1\n        end\n    end\n    return evens, odds\nend", "    even_count\
    \ = 0\n    odd_count = 0\n    for i = 1:length(digits(num))\n        if digits(num)[i]\
    \ % 2 == 0\n            even_count += 1\n        else\n            odd_count +=\
    \ 1\n        end\n    end\n    return (even_count, odd_count)\nend", "    even\
    \ = 0\n    odd = 0\n    for ch in string(num)\n        if isnumber(ch)\n     \
    \       if parse(Int64, ch) % 2 == 0\n                even += 1\n            else\n\
    \                odd += 1\n            end\n        end\n    end\n    return (even,\
    \ odd)\nend", "    evens = 0\n    odds = 0\n    for digit in digits(num)\n   \
    \     digit % 2 == 0 ? evens += 1 : odds += 1\n    end\n    return (evens, odds)\n\
    end", "    if num < 0 \n        num = abs(num)\n    end \n    even_count = 0\n\
    \    odd_count = 0\n    while num > 0 \n        if rem(num, 10) % 2 == 0 \n  \
    \          even_count += 1\n        else \n            odd_count += 1\n      \
    \  end \n        num = div(num, 10)\n    end \n    return (even_count, odd_count)\n\
    end ", "    evens = 0\n    odds = 0\n    for i in num:abs:to_string\n        if\
    \ i % 2 == 0\n            evens += 1\n        else\n            odds += 1\n  \
    \      end\n    end\n    return evens, odds\nend", "     even_count = 0\n    \
    \ odd_count = 0\n     num = abs(num)\n     while num > 0\n         digit = num\
    \ % 10\n         if digit % 2 == 0\n             even_count += 1\n         else\n\
    \             odd_count += 1\n         end\n         num = div(num, 10)\n    \
    \ end\n     return (even_count, odd_count)\nend", "    evens = 0\n    odds = 0\n\
    \    for x in num:\n        if x % 2 == 0:\n            evens += 1\n        else:\n\
    \            odds += 1\n    return (evens, odds)", "    odd_count = 0\n    even_count\
    \ = 0\n    for digit in digits(num)\n        if digit % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n    end\n    return\
    \ even_count, odd_count\nend", "    even_num = 0\n    odd_num = 0\n    while num\
    \ != 0\n        if num % 2 == 0\n            even_num += 1\n        else\n   \
    \         odd_num += 1\n        end\n        num = floor(num / 10)\n    end\n\
    \    return (even_num, odd_num)\nend", "    even, odd = 0, 0\n    for i in num\n\
    \        if i%2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return even, odd\nend\nprintln(even_odd_count(-12))\n\
    println(even_odd_count(123))", "  # your code here\n  end\nend", "    \"\"\"Given\
    \ an integer. return a tuple that has the number of even and odd digits respectively.\n\
    \        Args:\n            num: the number to count\n        Returns:\n     \
    \       a tuple that has the number of even and odd digits respectively.\n   \
    \     \"\"\"\n    even_digit_count = 0\n    odd_digit_count = 0\n    for i in\
    \ num\n        if i % 2 == 0\n            even_digit_count += 1\n        else\n\
    \            odd_digit_count += 1\n        end\n    end\n    return even_digit_count,\
    \ odd_digit_count\nend", "    even_digits = odd_digits = 0\n    if num < 0\n \
    \       num = -num\n    end\n    while num > 0\n        current_digit = num %\
    \ 10\n        if current_digit % 2 == 0\n            even_digits += 1\n      \
    \  else\n            odd_digits += 1\n        end\n        num = num // 10\n \
    \   end\n    (even_digits, odd_digits)\nend", "    even = 0\n    odd = 0\n   \
    \ (num < 0) && (num = -num)\n    while num > 0\n        last_digit = num % 10\n\
    \        if last_digit % 2 == 0\n            even += 1\n        else\n       \
    \     odd += 1\n        end\n        num = div(num, 10)\n    end\n    return (even,\
    \ odd)\nend\neven_odd_count(-12)\neven_odd_count(123)", "    even_digits = even_count(num)\n\
    \    odd_digits = odd_count(num)\n    return even_digits, odd_digits\nend", " \
    \   even_count = 0\n    odd_count = 0\n    for digit in digits(num)\n        if\
    \ digit % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return (even_count, odd_count)\nend", "    even,\
    \ odd = 0, 0 \n    while num > 0\n        r = num % 10\n        if r % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num = num / 10\n    end\n    return even, odd\nend", "    even_count, odd_count\
    \ = 0, 0\n    for digit in digits(num)\n        if digit % 2 == 0\n          \
    \  even_count += 1\n        else\n            odd_count += 1\n        end\n  \
    \  end\n    return even_count, odd_count\nend", "    even_count = 0\n    odd_count\
    \ = 0\n    str_num = string(num)\n    for i in 1:length(str_num)\n        if(parse(Int64,\
    \ str_num[i]) % 2 == 0)\n            even_count += 1\n        else\n         \
    \   odd_count += 1\n        end\n    end\n    return even_count, odd_count\nend",
  "    even = 0\n    odd = 0\n    for i in num\n        if (i%2 == 0)\n          \
    \  even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend", "    even_count = 0\n    odd_count = 0\n    num = abs(num)\n\
    \    while num > 0\n        last_digit = num % 10\n        if last_digit % 2 ==\
    \ 0\n            even_count += 1\n        else\n            odd_count += 1\n \
    \       end\n        num = num \xF7 10\n    end\n    return (even_count, odd_count)\n\
    end", "    evencount = 0\n    oddcount = 0\n    if num >= 0\n        while num\
    \ != 0\n            x = num % 10\n            if x % 2 == 0\n                evencount\
    \ += 1\n            else\n                oddcount += 1\n            end\n   \
    \         num = num \xF7 10\n        end\n    else\n        num = -num\n     \
    \   while num != 0\n            x = num % 10\n            if x % 2 == 0\n    \
    \            evencount += 1\n            else\n                oddcount += 1\n\
    \            end\n            num = num \xF7 10\n        end\n    end\n    return\
    \ (evencount, oddcount)\nend", "    even_cnt, odd_cnt = 0, 0\n    for c in string(num)\n\
    \        if(isdigit(c))\n            if(parse(Int64, c) % 2 == 0)\n          \
    \      even_cnt += 1\n            else\n                odd_cnt += 1\n       \
    \     end\n        end\n    end\n    return even_cnt, odd_cnt\nend", "    (positive_even_count,\
    \ positive_odd_count) = (0, 0)\n    pos_num = abs(num)\n    while pos_num > 0\n\
    \        if (pos_num % 10) % 2 == 0\n            positive_even_count += 1\n  \
    \      else\n            positive_odd_count += 1\n        end\n        pos_num\
    \ = pos_num \xF7 10\n    end\n    (positive_even_count, positive_odd_count)\n\
    end", "    if num < 0\n        num = -num\n    end\n    digits = Int64[]\n   \
    \ while num > 0\n        push!(digits, num % 10)\n        num = num \xF7 10\n\
    \    end\n    even_digits_count = sum([digit % 2 == 0 ? 1 : 0 for digit in digits])\n\
    \    odd_digits_count = sum([digit % 2 == 1 ? 1 : 0 for digit in digits])\n  \
    \  return (even_digits_count, odd_digits_count)\nend\neven_odd_count(-12)", " \
    \   e = 0\n    o = 0\n    num = abs(num)\n    while num > 0\n        r = rem(num,\
    \ 10)\n        if r % 2 == 0\n            e += 1\n        else\n            o\
    \ += 1\n        end\n        num = div(num, 10)\n    end\n    return (e, o)\n\
    end", "    even_counter = 0\n    odd_counter = 0\n    while num != 0\n       \
    \ last_digit = mod(num, 10)\n        if last_digit % 2 == 0\n            even_counter\
    \ += 1\n        else\n            odd_counter += 1\n        end\n        num =\
    \ div(num, 10)\n    end\n    return (even_counter, odd_counter)\nend", "    evens\
    \ = 0\n    odds = 0\n    if num == 0\n        return (1, 0)\n    end\n    if num\
    \ < 0\n        num = -num\n    end\n    while num != 0\n        if (num % 10)\
    \ % 2 == 0\n            evens += 1\n        else\n            odds += 1\n    \
    \    end\n        num = num \xF7 10\n    end\n    return (evens, odds)\nend\n\
    even_odd_count(-12)\neven_odd_count(123)", "  evens = 0\n  odds = 0\n  for i =\
    \ abs(num)\n    if i%2 == 0\n      evens += 1\n    else\n      odds += 1\n   \
    \ end\n  end\n  return evens, odds\nend", "    (evens, odds) = (0, 0)\n    while\
    \ num != 0\n        digit = num % 10\n        if digit % 2 == 0\n            evens\
    \ += 1\n        else\n            odds += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (evens, odds)\nend", "    evens = 0\n    odds = 0\n\
    \    if num >= 0\n        for i in 0:Int64(log10(num))\n            curr = num\
    \ % 10\n            if curr % 2 == 0\n                evens += 1\n           \
    \ else\n                odds += 1\n            end\n            num = num \xF7\
    \ 10\n        end\n    else\n        for i in 0:Int64(log10(-num))\n         \
    \   curr = num % 10\n            if curr % 2 == 0\n                evens += 1\n\
    \            else\n                odds += 1\n            end\n            num\
    \ = num \xF7 10\n        end\n    end\n    return (evens, odds)\nend", "    even_count,\
    \ odd_count = 0, 0\n    for i in str(num)\n        if i == \".\"\n           \
    \ continue\n        end\n        if(Int(i) % 2 == 0)\n            even_count +=\
    \ 1\n        else\n            odd_count += 1\n        end\n    end\n    return\
    \ (even_count, odd_count)\nend", "    even_count = 0\n    odd_count = 0\n    num\
    \ = abs(num)\n    while num > 0\n        if rem(num,10) % 2 == 0\n           \
    \ even_count += 1\n        else\n            odd_count += 1\n        end\n   \
    \     num = num // 10\n    end\n    return even_count, odd_count\nend", "    digits_list\
    \ = digits(num)\n    even_count = 0\n    odd_count = 0\n    for i in digits_list\n\
    \        if iseven(i)\n            even_count += 1\n        else\n           \
    \ odd_count += 1\n        end\n    end\n    return even_count, odd_count\nend",
  "    odd, even = 0, 0\n    for x in string(num)\n        if x != '-'\n         \
    \   x = parse(Int64, x)\n            if x % 2 == 0\n                even += 1\n\
    \            else\n                odd += 1\n            end\n        end\n  \
    \  end\n    return (even, odd)\nend", "    evens = 0\n    odds = 0\n    for i\
    \ = 1:length(num)\n        if num[i] % 2 == 0\n            evens = evens + 1\n\
    \        else\n            odds = odds + 1\n        end\n    end\n    return evens,\
    \ odds\nend", "    if num < 0\n        num = -num\n    end\n    even = 0\n   \
    \ odd = 0\n    for i in num \n        if i % 2 == 0\n            even += 1\n \
    \       else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end", "    is_even(x) = x % 2 == 0\n    even_count = sum(is_even, digits(num))\n\
    \    odd_count = length(digits(num)) - even_count\n    return (even_count, odd_count)\n\
    end", "    count_even = 0\n    count_odd = 0\n    while num != 0\n        if num\
    \ % 2 == 0\n            count_even += 1\n        else\n            count_odd +=\
    \ 1\n        end\n        num = trunc(Int64, num / 10)\n    end\n    return count_even,\
    \ count_odd\nend", "    n_odd = 0\n    n_even = 0\n    while num != 0\n      \
    \  if mod(num, 10) % 2 == 0\n            n_even += 1\n        else\n         \
    \   n_odd += 1\n        end\n        num = div(num, 10)\n    end\n    return (n_even,\
    \ n_odd)\nend", "    even = 0\n    odd = 0\n    for x in abs(num)\n        if\
    \ x % 2 == 0\n            even += 1\n        else\n            odd += 1\n    \
    \    end\n    end\n    return even, odd\nend", "    \n    even_digit_count = 0\n\
    \    odd_digit_count = 0\n    \n    while num != 0\n        last_digit = mod(num,\
    \ 10)\n        if last_digit % 2 == 0\n            even_digit_count += 1\n   \
    \     else\n            odd_digit_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    \n    return (even_digit_count, odd_digit_count)\nend", " \
    \   even_count = 0\n    odd_count = 0\n    if num == 0\n        return (1, 0)\n\
    \    end\n    if num < 0\n        num = abs(num)\n    end\n    for digit in digits(num)\n\
    \        if (digit % 2) == 0\n            even_count += 1\n        else\n    \
    \        odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end", "    evens = count(x -> iseven(x), num)\n    odds = count(x -> !iseven(x),\
    \ num)\n    return evens, odds\nend", "    even_count = 0\n    odd_count = 0\n\
    \    if num > 0\n        while num > 0\n            x = mod(num, 10)\n       \
    \     if mod(x, 2) == 0\n                even_count += 1\n            else\n \
    \               odd_count += 1\n            end\n            num = div(num, 10)\n\
    \        end\n    elseif num < 0\n        num = -num\n        while num > 0\n\
    \            x = mod(num, 10)\n            if mod(x, 2) == 0\n               \
    \ even_count += 1\n            else\n                odd_count += 1\n        \
    \    end\n            num = div(num, 10)\n        end\n    else\n        return\
    \ (0, 0)\n    end\n    return (even_count, odd_count)\nend", "    even, odd =\
    \ 0, 0\n    for d in num\n        if iseven(d)\n            even += 1\n      \
    \  else\n            odd += 1\n        end\n    end\n    return even, odd\nend",
  "    even_count = 0\n    odd_count = 0\n    num_as_string = string(num)\n    for\
    \ i in 1:length(num_as_string)\n        if(parse(Int64, num_as_string[i]) % 2\
    \ == 0)\n            even_count += 1\n        else\n            odd_count += 1\n\
    \        end\n    end\n    return even_count, odd_count\nend", "    odd = 0\n\
    \    even = 0\n    if num == 0\n        return (0, 0)\n    end\n    while num\
    \ != 0\n        if num%2 == 0\n            even += 1\n        else\n         \
    \   odd += 1\n        end\n        num = div(num, 10)\n    end\n    return (even,\
    \ odd)\nend", "    num = abs(num)\n    evens = 0\n    odds = 0\n    while num\
    \ > 0\n        if num % 2 == 0\n            evens += 1\n        else\n       \
    \     odds += 1\n        end\n        num = div(num, 10)\n    end\n    return\
    \ evens, odds\nend", "    evens = 0\n    odds = 0\n    for digit in string(num)\n\
    \        if isodd(parse(Int64, digit))\n            odds += 1\n        else\n\
    \            evens += 1\n        end\n    end\n    (evens, odds)\nend", "    even\
    \ = 0\n    odd = 0\n    for i in abs(num) \n        if (i % 2 == 0) \n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return (even, odd)\nend", "    even_count = 0\n    odd_count = 0\n    for digit\
    \ in digits(num)\n        digit % 2 == 0 ? even_count += 1 : odd_count += 1\n\
    \    end\n    return (even_count, odd_count)\nend", "    even = 0\n    odd = 0\n\
    \    # Iterate through the digits of the number\n    while num != 0\n        #\
    \ If it's even, add 1 to even count\n        if num % 2 == 0\n            even\
    \ += 1\n        # Else it's odd\n        else\n            odd += 1\n        end\n\
    \        # Get the next digit\n        num = div(num, 10)\n    end\n    return\
    \ (even, odd)\nend", "    a = 0\n    b = 0\n    while num > 0 \n        rem =\
    \ num % 10\n        if rem % 2 == 0\n            a += 1\n        else\n      \
    \      b += 1\n        end\n        num = div(num, 10)\n    end\n    return a,\
    \ b\nend", "    even_count = 0\n    odd_count = 0\n    for char in num2str(num)\n\
    \        if parse(Int64, char) % 2 == 0\n            even_count += 1\n       \
    \ else\n            odd_count += 1\n        end\n    end\n    return (even_count,\
    \ odd_count)\nend", "    evens = 0\n    odds = 0\n    for char in string(num)\n\
    \        if parse(Int, char) % 2 == 0\n            evens += 1\n        else\n\
    \            odds += 1\n        end\n    end\n    return evens, odds\nend", " \
    \   even_count = 0\n    odd_count = 0\n    for i in num\n        if i % 2 == 0\n\
    \            even_count += 1\n        else\n            odd_count += 1\n     \
    \   end\n    end\n    return (even_count, odd_count)\nend", "    evens = 0\n \
    \   odds = 0\n    num > 0 ? sign = 1 : sign = -1\n    num = abs(num)\n    while\
    \ num != 0\n        digit = num % 10\n        digit % 2 == 0 ? evens += 1 : odds\
    \ += 1\n        num = num / 10\n    end\n    return (evens, odds)\nend\n@test\
    \ even_odd_count(-12) == (1, 1)\n@test even_odd_count(123) == (1, 2)", "    num_str\
    \ = string(num)\n    num_str_list = list(num_str)\n    even_count = 0\n    odd_count\
    \ = 0\n    if num < 0\n        num_str_list = num_str_list[2:end]\n    end\n \
    \   for i in num_str_list\n        num = parse(Int64, i)\n        if num % 2 ==\
    \ 0\n            even_count += 1\n        else\n            odd_count += 1\n \
    \       end\n    end\n    return (even_count, odd_count)\nend", "  \"\"\" Solution\
    \ using pattern matching and list comprehension.\n  \"\"\"\n  digits = map(x ->\
    \ string(x), abs(num))\n  evens = length([x for x in digits if x % 2 == 0])\n\
    \  odds = length([x for x in digits if x % 2 != 0])\n  return (evens, odds)\n\
    end", "    even, odd = 0, 0\n    for i in num\n        if i % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return even, odd\nend", "    even, odd = 0, 0\n    for x in num\n        if\
    \ x % 2 == 0\n            even += 1\n        else\n            odd += 1\n    \
    \    end\n    end\n    return even, odd\nend", "    num = abs(num)\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num = div(num, 10)\n\
    \    end\n    return even, odd\nend", "    even = 0\n    odd = 0\n    for i in\
    \ num\n        if i % 2 == 0\n            even += 1\n        else\n          \
    \  odd += 1\n        end\n    end\n    return (even, odd)\nend", "    evencount\
    \ = 0\n    oddcount = 0\n    if num < 0\n        num = -num\n    end\n    while\
    \ num > 0\n        if num % 2 == 0\n            evencount += 1\n        else\n\
    \            oddcount += 1\n        end\n        num = div(num, 10)\n    end\n\
    \    return (evencount, oddcount)\nend", "    evens = 0\n    odds = 0\n    for\
    \ digit in num |> string |> collect\n        is_even = parse(Int64, digit) % 2\
    \ == 0\n        is_odd = parse(Int64, digit) % 2 == 1\n        is_even && (evens\
    \ += 1)\n        is_odd && (odds += 1)\n    end\n    return (evens, odds)\nend",
  "    evens = 0\n    odds = 0\n    # Your code goes here.\n    return (evens, odds)\n\
    end\n ", "    evens = 0\n    odds = 0\n    for i in string(num)\n        if i\
    \ == \"0\" || i == \"2\" || i == \"4\" || i == \"6\" || i == \"8\"\n         \
    \   evens += 1\n        elseif i == \"1\" || i == \"3\" || i == \"5\" || i ==\
    \ \"7\" || i == \"9\"\n            odds += 1\n        end\n    end\n    return\
    \ (evens, odds)\nend", "    \n    even_count = 0;\n    odd_count = 0;\n    \n\
    \    # update the count using while loop\n    while num != 0\n        digit =\
    \ num % 10;\n        if digit % 2 == 0\n            even_count += 1;\n       \
    \ else\n            odd_count += 1;\n        end\n        num = div(num, 10);\n\
    \    end\n    \n    return (even_count, odd_count);\nend", "    \n    evens =\
    \ 0\n    odds = 0\n    \n    for digit in digits(num)\n        if digit % 2 ==\
    \ 0\n            evens += 1\n        else\n            odds += 1\n        end\n\
    \    end\n    return evens, odds\nend", "    evens = 0\n    odds = 0\n    num\
    \ = abs(num)\n    while num >= 1\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            evens += 1\n        else\n            odds += 1\n      \
    \  end\n        num = div(num, 10)\n    end\n    return (evens, odds)\nend\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)", "   \
    \ \n    even_num_list = []\n    odd_num_list = []\n    \n    while num != 0\n\
    \        rem = num % 10\n        if rem % 2 == 0\n            push!(even_num_list,\
    \ rem)\n        else\n            push!(odd_num_list, rem)\n        end\n    \
    \    num = num / 10\n    end\n    return (length(even_num_list), length(odd_num_list))\n\
    end", "    even_digits, odd_digits = 0, 0\n    for digit in digits(num)\n    \
    \    if digit % 2 == 0\n            even_digits += 1\n        else\n         \
    \   odd_digits += 1\n        end\n    end\n    return even_digits, odd_digits\n\
    end", "    even_count = 0\n    odd_count = 0\n    if num < 0\n        num = -num\n\
    \    end\n    while num != 0\n        if num % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return (even_count, odd_count)\nend", "    if num == 0\n \
    \       return 0,0\n    end\n    even, odd = 0, 0\n    if num < 0\n        num\
    \ = -num\n    end\n    while num > 0\n        remainder = num % 10\n        if\
    \ remainder % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n        num = num % 10\n    end\n    return even, odd\nend",
  "    new_num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while new_num\
    \ > 0\n        digit = new_num % 10\n        if digit % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        new_num\
    \ = new_num \xF7 10\n    end\n    return (even_count, odd_count)\nend", "    even_count\
    \ = 0\n    odd_count = 0\n    if num < 0\n        num = -num\n    end\n    while\
    \ num > 0\n        if num % 2 == 0\n            even_count += 1\n        else\n\
    \            odd_count += 1\n        end\n        num = div(num, 10)\n    end\n\
    \    return (even_count, odd_count)\nend", "    evens = odds = 0\n    while num\
    \ != 0\n        if num % 2 == 0\n            evens += 1\n        else\n      \
    \      odds += 1\n        end\n        num /= 10\n    end\n    return evens, odds\n\
    end", "    count_odd = 0\n    count_even = 0\n    for x in num\n        if x %\
    \ 2 == 0\n            count_even += 1\n        else \n            count_odd +=\
    \ 1\n        end\n    end\n    return (count_even, count_odd)\nend", "    even\
    \ = 0\n    odd = 0\n    while num != 0\n        digit = num % 10\n        if digit\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n        num = div(num, 10)\n    end\n    return (even, odd)\nend", " \
    \   even = 0\n    odd = 0\n    for i in string(num)\n        if i == '-'\n   \
    \         next\n        end\n        if i == '0'\n            even += 1\n    \
    \    elseif i == '2'\n            even += 1\n        elseif i == '4'\n       \
    \     even += 1\n        elseif i == '6'\n            even += 1\n        elseif\
    \ i == '8'\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n    end\n    return (even, odd)\nend", "    if num == 0\n        return\
    \ (1, 0)\n    end\n    even_count = 0\n    odd_count = 0\n    while num != 0\n\
    \        last_digit = num % 10\n        if last_digit % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = num/10\n\
    \    end\n    return (even_count, odd_count)\nend", "    even_count = 0\n    odd_count\
    \ = 0\n    num_abs = abs(num)\n    while num_abs != 0\n        last_digit = num_abs\
    \ % 10\n        if last_digit % 2 == 0\n            even_count += 1\n        else\n\
    \            odd_count += 1\n        end\n        num_abs = num_abs - last_digit\n\
    \        num_abs = num_abs / 10\n    end\n    return (even_count, odd_count)\n\
    end", "    count_even = 0\n    count_odd = 0\n    str_num = repr(num)\n    for\
    \ i = 1:length(str_num)\n        if parse(Int64, str_num[i]) % 2 == 0\n      \
    \      count_even += 1\n        else\n            count_odd += 1\n        end\n\
    \    end\n    return count_even, count_odd\nend", "    # initialize even and odd\
    \ counters\n    even_counter = 0\n    odd_counter = 0\n    \n    #check if num\
    \ is negative\n    if num < 0\n        num = -num\n    end\n    \n    # iterate\
    \ through the digits of num\n    while num > 0\n        digit = num % 10\n   \
    \     if digit % 2 == 0\n            even_counter += 1\n        else\n       \
    \     odd_counter += 1\n        end\n        num = num // 10\n    end\n    \n\
    \    return (even_counter, odd_counter)\nend", "    even = 0\n    odd = 0\n  \
    \  for i in string(num)\n        if i % 2 == 0\n            even += 1\n      \
    \  else\n            odd += 1\n        end\n    end\n    return even, odd\nend\n\
    \ \neven_odd_count(-12)", "    return (ceil(Int64,length(filter(i->(i%2==0),(digits(abs(num)))))/2),ceil(Int64,length(filter(i->(i%2!=0),(digits(abs(num)))))/2))\n\
    end", "    \"\"\"\n    Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    \"\"\"\n    str_num = string(num)\n \
    \   even = 0\n    odd = 0\n    for i in str_num\n        if !(i == \"-\" || i\
    \ == \"+\")\n            i = parse(Int64, i)\n            if i%2 == 0\n      \
    \          even += 1\n            else\n                odd += 1\n           \
    \ end\n        end\n    end\n    return (even, odd)\nend", "    even_count = 0\n\
    \    odd_count = 0\n    for i in 1:length(string(num))\n        if parse(Int64,\
    \ string(num)[i]) % 2 == 0\n            even_count += 1\n        else\n      \
    \      odd_count += 1\n        end\n    end\n    return even_count, odd_count\n\
    end", "    odd_count = 0\n    even_count = 0\n    for i in digits(num)\n     \
    \   if i % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return (even_count, odd_count)\nend", "    even_count,\
    \ odd_count = 0, 0\n    for digit in digits(num)\n        if digit % 2 == 0\n\
    \            even_count += 1\n        else\n            odd_count += 1\n     \
    \   end\n    end\n    return even_count, odd_count\nend", "    ############\n\
    \    # Your code here \n    ############\n    even = odd = 0\n    if num < 0\n\
    \        num = -num\n    end\n    while num > 0\n        digit = num % 10\n  \
    \      if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num = num // 10\n    end\n    return even, odd\n\
    end", "    even, odd = 0, 0\n    abs_num = abs(num)\n    while abs_num > 0\n \
    \       if (abs_num % 10) % 2 == 0\n            even += 1\n        else\n    \
    \        odd += 1\n        end\n        abs_num = div(abs_num, 10)\n    end\n\
    \    return even, odd\nend", "    return (sum([abs(Int64(char(d))) % 2 == 0 for\
    \ d in string(num)]),\n            sum([abs(Int64(char(d))) % 2 == 1 for d in\
    \ string(num)]))\nend", "    if num == 0\n        return (1, 0)\n    end\n   \
    \ if num < 0\n        num = -num\n    end\n    even_cnt = 0\n    odd_cnt = 0\n\
    \    for i = num\n        if i % 2 == 0\n            even_cnt += 1\n        else\n\
    \            odd_cnt += 1\n        end\n    end\n    return (even_cnt, odd_cnt)\n\
    end", "    odd = 0\n    even = 0\n    for i in num\n        if(i % 2 == 0)\n \
    \           even = even + 1\n        else\n            odd = odd + 1\n       \
    \ end\n    end\n    return (even, odd)\nend", "    odd_digits = 0\n    even_digits\
    \ = 0\n    if num < 0\n        num = -num\n    end\n    while num > 0\n      \
    \  digit = num % 10\n        if (digit % 2) == 0\n            even_digits += 1\n\
    \        else\n            odd_digits += 1\n        end\n        num = num / 10\n\
    \    end\n    return even_digits, odd_digits\nend", "    even_count = 0\n    odd_count\
    \ = 0\n    for i in digits(num)\n        if i%2 == 0\n            even_count +=\
    \ 1\n        else\n            odd_count += 1\n        end\n    end\n    return\
    \ (even_count, odd_count)\nend\n        ", "    odd = 0\n    even = 0\n    while\
    \ num != 0\n        if mod(num, 2) == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num = div(num, 10)\n    end\n    return\
    \ even, odd\nend", "    (even_count, odd_count) = (0, 0)\n    for digit in digits(num)\n\
    \        if (isodd(digit))\n            odd_count += 1\n        else\n       \
    \     even_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end", "    even_counter = 0\n    odd_counter = 0\n    for i in digits(num)\n \
    \       if i % 2 == 0\n            even_counter += 1\n        else\n         \
    \   odd_counter += 1\n        end\n    end\n    return (even_counter, odd_counter)\n\
    end", "    even = 0\n    odd = 0\n    while num != 0\n        num, rem = divrem(num,\
    \ 10)\n        rem == 0 ? even += 1 : odd += 1\n    end\n    return (even, odd)\n\
    end", "    even::Int64, odd::Int64 = 0, 0\n    while num > 0\n        if mod(num,\
    \ 2) == 0\n            even += 1\n        else\n            odd += 1\n       \
    \ end\n        num = div(num, 10)\n    end\n    return even, odd\nend", "    even_count\
    \ = 0\n    odd_count = 0\n    for i in digits(num)\n        if i % 2 == 0\n  \
    \          even_count += 1\n        else\n            odd_count += 1\n       \
    \ end\n    end\n    return (even_count, odd_count)\nend", "    even = 0\n    odd\
    \ = 0\n    num = abs(num)\n    while num > 0\n        if num % 2 == 0\n      \
    \      even += 1\n        else\n            odd += 1\n        end\n        num\
    \ = floor(num/10)\n    end\n    return (even, odd)\nend", "    even_count, odd_count\
    \ = 0, 0\n    while num != 0\n        if num % 2 == 0\n            even_count\
    \ += 1\n        else\n            odd_count += 1\n        end\n        num = div(num,\
    \ 10)\n    end\n    return even_count, odd_count\nend", "    odd_count = 0\n \
    \   even_count = 0\n    for digit in digits(num)\n        if digit % 2 == 0\n\
    \            even_count += 1\n        else\n            odd_count += 1\n     \
    \   end\n    end\n    return even_count, odd_count\nend", "    even_count = 0\n\
    \    odd_count = 0\n    for i in digits(num)\n        if i % 2 == 0\n        \
    \    even_count += 1\n        else\n            odd_count += 1\n        end\n\
    \    end\n    return (even_count, odd_count)\nend", "    even = odd = 0\n    for\
    \ n in digits(num)\n        if n % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    (even, odd)\nend", "    even\
    \ = 0\n    odd = 0\n    n = num\n    while n != 0\n        if n % 2 == 0\n   \
    \         even += 1\n        else\n            odd += 1\n        end\n       \
    \ n = n \xF7 10\n    end\n    return (even, odd)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
