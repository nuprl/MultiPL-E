language: jl
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    s = iterate(string)\n    len = 0\n    while !endof(s)\n        next!(s)\n\
    \        len += 1\n    end\n    return len\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_1ocfkyb.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp_1ocfkyb.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  UndefVarError: endof not defined\n  Stacktrace:\n\
    \   [1] strlen(string::String)\n     @ Main /tmp/tmp_1ocfkyb.jl:10\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_1ocfkyb.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_1ocfkyb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_1ocfkyb.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  UndefVarError: endof not defined\n  Stacktrace:\n \
    \  [1] strlen(string::String)\n     @ Main /tmp/tmp_1ocfkyb.jl:10\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_1ocfkyb.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_1ocfkyb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_1ocfkyb.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  UndefVarError: endof not defined\n  Stacktrace:\n\
    \   [1] strlen(string::String)\n     @ Main /tmp/tmp_1ocfkyb.jl:10\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_1ocfkyb.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_1ocfkyb.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    i::Int64 = 0\n    for c::Char in string\n        i += 1\n    end\n   \
    \ return i\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    N = length(string) \n    return N\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = size(string, 1)\n    return n\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvzjjehj9.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpvzjjehj9.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: no method matching size(::String,\
    \ ::Int64)\n  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.QR,\
    \ LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\n\
    \    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\n\
    \    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] strlen(string::String)\n     @ Main /tmp/tmpvzjjehj9.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvzjjehj9.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvzjjehj9.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpvzjjehj9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  MethodError: no method matching size(::String, ::Int64)\n\
    \  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY,\
    \ LinearAlgebra.QRPivoted}, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\n\
    \    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\n\
    \    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] strlen(string::String)\n     @ Main /tmp/tmpvzjjehj9.jl:8\n\
    \   [2]"
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    mylen = 0\n    for c in string\n        mylen += 1\n    end\n    return\
    \ mylen\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        return 0\n    else\n        return strlen(string[2:end])\
    \ + 1\n    end\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxe1wnkcf.jl:14\nin expression starting at\
    \ /tmp/tmpxe1wnkcf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    string |> length |> return\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz__72ce3.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpz__72ce3.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] strlen(string::String)\n     @ Main /tmp/tmpz__72ce3.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz__72ce3.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz__72ce3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpz__72ce3.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] strlen(string::String)\n     @ Main /tmp/tmpz__72ce3.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz__72ce3.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz__72ce3.jl:14\ntest set:"
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    x = size(string, 1)\n    return x\nend\n\"\"\"Return number of vowels\
    \ in given string\n    >>> countvowels(\"\")\n    0\n    >>> countvowels(\"abc\"\
    )\n    1\n    >>> countvowels(\"abec\")\n    2\n    >>> countvowels(\"dicojt\"\
    )\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpa6d46him.jl:11\nin expression starting at /tmp/tmpa6d46him.jl:11\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    string_length = length(string)\n    return string_length\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\n# Tests\nusing Base.Test\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: Test not defined

    in expression starting at /tmp/tmpv3oeczw_.jl:11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for i in 1:length(string)\n        n += 1\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for s in string\n        n += 1\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    # Note: The actual implementation is more complicated,\n    #       but\
    \ the following shows the general idea\n    n = 0\n    for c in string\n     \
    \   n += 1\n    end\n    return n\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    l = 0\n    for c in string\n        l += 1\n    end\n    return l\nend\n\
    \ \n\"\"\" Test if given string starts with given prefix\n    >>> startswith(\"\
    abc\", \"a\")\n    true\n    >>> startswith(\"abc\", \"b\")\n    false\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpjt16aoms.jl:15\nin expression starting at /tmp/tmpjt16aoms.jl:15\n"
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    strlen = length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    s = 0\n    for i in string\n        s += 1\n    end\n    return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\n    \n\"\"\" Return input string with each letter in reverse order\n    >>>\
    \ strrev(\"\")\n    \"\"\n    >>> strrev(\"abc\")\n    \"cba\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpi6g_jo2b.jl:15\nin expression starting at /tmp/tmpi6g_jo2b.jl:15\n"
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return Base.length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    l = 0\n    for c in string\n        l += 1\n    end\n    return l\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    l = 0\n    for c in string\n        l += 1\n    end\n    return l\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return n = length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i = 1:length(string)\n        len += 1\n    end\n   \
    \ return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    # length = 0\n    # for i in 1:length(string)\n    #     length += 1\n\
    \    # end\n    # return length\n    return length(string)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i = 1:length(string)\n        len += 1\n    end\n   \
    \ return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for i = 1:length(string)\n        n += 1\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for char in string\n        len += 1\n    end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    l = 0\n    for i = 1:length(string)\n        l += 1\n    end\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    x = 0\n    for c in string\n        x += 1\n    end\n    return x\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" \n        return 0\n    else \n        return strlen(string[2:end])\
    \ + 1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    string = parse(String, string)\n    n = 0\n    while n < length(string)\n\
    \        n += 1\n    end\n    return n\nend\n\"\"\" Return length of given string\n\
    \    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpdft5cbel.jl:15\nin expression starting at /tmp/tmpdft5cbel.jl:15\n"
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len::Int64 = 0\n    for i = 1:length(string)\n        len += 1\n    end\n\
    \    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    str = 0\n    for i = 1:length(string)\n        str += 1\n    end\n   \
    \ return str\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for i in 1:length(string)\n        n += 1\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    N = length(string)\n    return N\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    count = 0\n    for i = 1:length(string)\n        count += 1\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for i in 1:length(string)\n        n += 1\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for char in string\n        len += 1\n    end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = length(string)\n    return n\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for x in string\n        len += 1\n    end\n    return len\n\
    end\n```\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4w19sda.jl:14\nin expression starting at\
    \ /tmp/tmpz4w19sda.jl:14\n"
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for s in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    l = 0\n    for i in 1:length(string)\n        l += 1\n    end\n    return\
    \ l\nend\nstrlen(\"abc\")\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    l = 0\n    while string[l+1] != '\\0'\n        l += 1\n    end\n    return\
    \ l\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz2isgogq.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpz2isgogq.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  BoundsError: attempt to access empty String\
    \ at index [1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] strlen(string::String)\n\
    \     @ Main /tmp/tmpz2isgogq.jl:9\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz2isgogq.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz2isgogq.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpz2isgogq.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  BoundsError: attempt to access 1-codeunit String at\
    \ index [2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] strlen(string::String)\n\
    \     @ Main /tmp/tmpz2isgogq.jl:9\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpz2isgogq.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpz2isgogq.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpz2isgogq.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  BoundsError: attempt to access 9-codeunit String\
    \ at index [10]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] strlen(string::String)\n\
    \     @ Main /tmp/tmpz2isgogq.jl:9\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [in"
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    string.length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_akrg5mz.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp_akrg5mz.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmp_akrg5mz.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_akrg5mz.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_akrg5mz.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_akrg5mz.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  type String has no field length\n  Stacktrace:\n  \
    \ [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmp_akrg5mz.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_akrg5mz.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_akrg5mz.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_akrg5mz.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmp_akrg5mz.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_akrg5mz.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_akrg5mz.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string==\"\"\n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nstrlen(\"hello\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \n    if string == \"\"\n        return 0\n    else\n        return strlen(string[2:end])\
    \ + 1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    j = 0\n    for i in string\n        j = j + 1\n    end\n    return j\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for char in string\n        len += 1\n    end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return string == \"\" ? 0 : 1 + strlen(string[2:end])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return s.length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp95vavrhf.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp95vavrhf.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  UndefVarError: s not defined\n  Stacktrace:\n\
    \   [1] strlen(string::String)\n     @ Main /tmp/tmp95vavrhf.jl:8\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp95vavrhf.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95vavrhf.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp95vavrhf.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  UndefVarError: s not defined\n  Stacktrace:\n   [1]\
    \ strlen(string::String)\n     @ Main /tmp/tmp95vavrhf.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp95vavrhf.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95vavrhf.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp95vavrhf.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  UndefVarError: s not defined\n  Stacktrace:\n\
    \   [1] strlen(string::String)\n     @ Main /tmp/tmp95vavrhf.jl:8\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp95vavrhf.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95vavrhf.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n  i = 0\n  while string[i+1] != '\\0'\n    i = i + 1\n  end\n  return i\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5z24juu9.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp5z24juu9.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  BoundsError: attempt to access empty String\
    \ at index [1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] strlen(string::String)\n\
    \     @ Main /tmp/tmp5z24juu9.jl:9\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5z24juu9.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5z24juu9.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp5z24juu9.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  BoundsError: attempt to access 1-codeunit String at\
    \ index [2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] strlen(string::String)\n\
    \     @ Main /tmp/tmp5z24juu9.jl:9\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5z24juu9.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5z24juu9.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp5z24juu9.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  BoundsError: attempt to access 9-codeunit String\
    \ at index [10]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] strlen(string::String)\n\
    \     @ Main /tmp/tmp5z24juu9.jl:9\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [in"
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n::Int64 = 0\n    for i::Int64 in string\n        n += 1\n    end\n  \
    \  return n\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    strlen = length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n     return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    for i=1:length(string)\n        counter=i\n    end\n    return counter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwgiz4xc_.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpwgiz4xc_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  UndefVarError: counter not defined\n  Stacktrace:\n\
    \   [1] strlen(string::String)\n     @ Main /tmp/tmpwgiz4xc_.jl:11\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgiz4xc_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgiz4xc_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwgiz4xc_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  UndefVarError: counter not defined\n  Stacktrace:\n\
    \   [1] strlen(string::String)\n     @ Main /tmp/tmpwgiz4xc_.jl:11\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgiz4xc_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgiz4xc_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwgiz4xc_.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  UndefVarError: counter not defined\n  Stacktrace:\n\
    \   [1] strlen(string::String)\n     @ Main /tmp/tmpwgiz4xc_.jl:11\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgiz4xc_.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgiz4xc_.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i = 1:length(string)\n        len += 1\n    end\n   \
    \ return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \n    # \u4E3A\u4EC0\u4E48\u4E0D\u80FD\u662F strlen(string:String)::Int64\
    \ \n    # \u6B64\u5904\u7684 : \u662F\u533A\u5206\u8F93\u5165\u8F93\u51FA\u7684\
    \u610F\u601D\n    # \u82E5\u662F string::String\uFF0C\u5219\u662F\u7ED9\u4E00\u4E2A\
    \u540D\u4E3A string \u7684\u53D8\u91CF\u589E\u52A0\u7C7B\u578B\u4FE1\u606F\uFF0C\
    \u8868\u793A\u8BE5\u53D8\u91CF\u7684\u7C7B\u578B\u4E3A String\n    # \u82E5\u662F\
    \ string:String\uFF0C\u5219\u662F\u7ED9\u51FD\u6570\u7684\u8F93\u5165\u589E\u52A0\
    \u7C7B\u578B\u4FE1\u606F\uFF0C\u8868\u793A\u8F93\u5165\u7684\u7C7B\u578B\u4E3A\
    \ String\n    \n    length = 0\n    for c in string\n        length += 1\n   \
    \ end\n    return length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    strlen = Int64(length(string))\nend\n\"\"\" The `strlen` function is quite\
    \ straightforward, it simply returns the length of the string input.\n    The\
    \ return type is `Int64` since we expect to get a number, and that number should\
    \ be smaller than `Int64`.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpf018z5dt.jl:10\nin expression starting at /tmp/tmpf018z5dt.jl:10\n"
  stdout: ''
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i = 1:length(string)\n        len += 1\n    end\n   \
    \ return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = length(string)\n    return n\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i in 1:length(string)\n        len += 1\n    end\n  \
    \  return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    strlen = length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \n    # The counter to keep track of how long the string is\n    len =\
    \ 0\n    \n    # Loop through the string\n    for c in string\n        # Increment\
    \ the length\n        len += 1\n    end\n    \n    # Return the length\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    N = length(string)\n    return N\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    # iterate over UTF-8 bytes to compute length\n    len = 0\n    for i in\
    \ string\n        len += 1\n    end\n    return len\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    for i in 1:string length\n        println(string[i])\n    end\n    return\
    \ string length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpk426qoce.jl:7 expected\
    \ \"end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk426qoce.jl:11\n\
    in expression starting at /tmp/tmpk426qoce.jl:11\n"
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    counter::Int64 = 0\n    for c in string\n        counter += 1\n    end\n\
    \    return counter\nend\n# string.find(sub[, start[, end]]) -> int\n\"\"\" Return\
    \ the lowest index in the string where substring sub is found within the slice\
    \ s[start:end].  Optional arguments start and end are interpreted as in slice\
    \ notation.\n    >>> strfind(\"hello\", \"l\")\n    2\n    >>> strfind(\"hello\"\
    , \"o\")\n    4\n    >>> strfind(\"hello\", \"x\")\n    -1\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpcdzqg0bx.jl:15\nin expression starting at /tmp/tmpcdzqg0bx.jl:15\n"
  stdout: ''
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return size(string, 1)\nend\nstrlen(\"abc\")\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching size(::String, ::Int64)\n\
    Closest candidates are:\n  size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY,\
    \ LinearAlgebra.QRPivoted}, ::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\n\
    \  size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\n\
    \  size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\n\
    \  ...\nStacktrace:\n [1] strlen(string::String)\n   @ Main /tmp/tmp1rev0d6d.jl:8\n\
    \ [2] top-level scope\n   @ /tmp/tmp1rev0d6d.jl:10\nin expression starting at\
    \ /tmp/tmp1rev0d6d.jl:10\n"
  stdout: ''
  timestamp: 1659977965
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    count = 0\n    for c in string\n        count += 1\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for ch in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    a = 0\n    b = Base.lastindex(string) + 1\n    c = 1\n    while c <= b\n\
    \        a += 1\n        c += 1\n    end\n    return a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphhpbev93.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmphhpbev93.jl:22\n  Expression: candidate(\"\
    \") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphhpbev93.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphhpbev93.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphhpbev93.jl:23\n  Expression: candidate(\"x\") == 1\n   Evaluated:\
    \ 2 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphhpbev93.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphhpbev93.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphhpbev93.jl:24\n  Expression: candidate(\"asdasnakj\") ==\
    \ 9\n   Evaluated: 10 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphhpbev93.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphhpbev93.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    #length(string)\n    return length(string)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for i in eachindex(string)\n        n += 1\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    l = length(string)\n    return l\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i in 1:length(string)\n        len += 1\n    end\n  \
    \  return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for i = 1:length(string)\n        n += 1\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i = 1:length(string)\n        len += 1\n    end\n   \
    \ return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if isempty(string)\n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    count = 0\n    for c in string\n        count += 1\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    string == \"\" && return 0\n    i::Int64 = 0\n    for c in string\n  \
    \      i += 1\n    end\n    return i\nend\n \nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n     n = 0\n     for s in string\n         n += 1\n     end\n     return n\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i = 1:length(string)\n        len += 1\n    end\n   \
    \ return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i in 1:length(string)\n        len += 1\n    end\n  \
    \  return len\nend\n# strlen(\"\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    i = 0\n    for c in string\n        i += 1\n    end\n    return i\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for c in string\n        n += 1\n    end\n    return n\nend\n\
    \"\"\" Reverse given string\n    >>> strrev(\"\")\n    \"\"\n    >>> strrev(\"\
    abc\")\n    \"cba\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpz8m6vizm.jl:14\nin expression starting at /tmp/tmpz8m6vizm.jl:14\n"
  stdout: ''
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    c::Int64 = 0\n    for i in string\n        c += 1\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    l = 0\n    for c in string\n        l += 1\n    end\n    return l\nend\n\
    ```\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9z1_kmz.jl:14\nin expression starting at\
    \ /tmp/tmpn9z1_kmz.jl:14\n"
  stdout: ''
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        0\n    else\n        1 + strlen(string[2:end])\n\
    \    end\nend\n \nstrlen(\"\")\nstrlen(\"abc\")\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    l = 0\n    for c in string\n        l += 1\n    end\n    return l\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i in eachindex(string)\n        len += 1\n    end\n \
    \   return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len::Int64 = 0\n    for i in 1:length(string)\n        len = len + 1\n\
    \    end\n    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    strlen = 0\n    for i in 1:length(string)\n        strlen += 1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5rrk6wtx.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp5rrk6wtx.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] strlen(string::String)\n     @ Main /tmp/tmp5rrk6wtx.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5rrk6wtx.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5rrk6wtx.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp5rrk6wtx.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] strlen(string::String)\n     @ Main /tmp/tmp5rrk6wtx.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5rrk6wtx.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5rrk6wtx.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp5rrk6wtx.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"a"
  timestamp: 1659977965
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for c in string\n        len += 1\n    end\n    return len\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    string_length = 0\n    for i in eachindex(string)\n        string_length\
    \ += 1\n    end\n    return string_length\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i = 1:length(string)\n        len += 1\n    end\n   \
    \ return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    n = 0\n    for i = 1:length(string)\n        n += 1\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    end = 0\n    for c in string\n        end += 1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"function strlen(string::String)::Int64\n\
    \    # /tmp/tmpif03fvic.jl, line 7\n    # /tmp/tmpif03fvic.jl, line 8\nend\" around\
    \ /tmp/tmpif03fvic.jl:1\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpif03fvic.jl:1\n\
    in expression starting at /tmp/tmpif03fvic.jl:1\n"
  stdout: ''
  timestamp: 1659977964
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    return length(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    count = 0\n    for c in string\n        count += 1\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    i = 0\n    while !(string[i] == '\\0')\n        i += 1\n    end\n    return\
    \ i\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpw3ma1t23.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpw3ma1t23.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  BoundsError: attempt to access empty String\
    \ at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] strlen(string::String)\n\
    \     @ Main /tmp/tmpw3ma1t23.jl:9\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpw3ma1t23.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpw3ma1t23.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpw3ma1t23.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  BoundsError: attempt to access 1-codeunit String at\
    \ index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] strlen(string::String)\n\
    \     @ Main /tmp/tmpw3ma1t23.jl:9\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpw3ma1t23.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpw3ma1t23.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpw3ma1t23.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  BoundsError: attempt to access 9-codeunit String\
    \ at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] strlen(string::String)\n\
    \     @ Main /tmp/tmpw3ma1t23.jl:9\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1659977965
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    a=0\n    for i in string\n        a=a+1\n    end\n    return a\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for char in string\n        len += 1\n    end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        return 0\n    else\n        return 1 + strlen(string[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    string_length = 0\n    for i = 1:length(string)\n        string_length\
    \ += 1\n    end\n    return string_length\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    len = 0\n    for i in eachindex(string)\n        len += 1\n    end\n \
    \   return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
