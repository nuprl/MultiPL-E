name: HumanEval_81_numerical_letter_grade
language: jl
prompt: "\"\"\"It is the last week of the semester and the teacher has to give the\
  \ grades\n    to students. The teacher has been making her own algorithm for grading.\n\
  \    The only problem is, she has lost the code she used for grading.\n    She has\
  \ given you a vector of GPAs for some students and you have to write \n    a function\
  \ that can output a vector of letter grades using the following table:\n       \
  \      GPA       |    Letter grade\n              4.0                A+\n      \
  \      > 3.7                A \n            > 3.3                A- \n         \
  \   > 3.0                B+\n            > 2.7                B \n            >\
  \ 2.3                B-\n            > 2.0                C+\n            > 1.7\
  \                C\n            > 1.3                C-\n            > 1.0     \
  \           D+ \n            > 0.7                D \n            > 0.0        \
  \        D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
  \ 3, 1.7, 2, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction\
  \ numerical_letter_grade(grades::Vector{Float64})::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
  \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
  \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
  \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"\
  C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
completions: ["    letter_grades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\",\
    \ \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    rating = [4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]\n    grade_indices =\
    \ zeros(Int,length(grades))\n    for i in eachindex(grades)\n        for j in\
    \ eachindex(rating)\n            if grades[i] >= rating[j]\n                grade_indices[i]\
    \ = j\n                break\n            end\n        end\n    end\n    return\
    \ letter_grades[grade_indices]\nend", "    letter_grades = fill(\"\", length(grades))\n\
    \    for i in eachindex(grades)\n        numerical_grade = grades[i]\n       \
    \ if numerical_grade > 4.0\n            letter_grades[i] = \"A+\"\n        elseif\
    \ numerical_grade > 3.7\n            letter_grades[i] = \"A\"\n        elseif\
    \ numerical_grade > 3.3\n            letter_grades[i] = \"A-\"\n        elseif\
    \ numerical_grade > 3.0\n            letter_grades[i] = \"B+\"\n        elseif\
    \ numerical_grade > 2.7\n            letter_grades[i] = \"B\"\n        elseif\
    \ numerical_grade > 2.3\n            letter_grades[i] = \"B-\"\n        elseif\
    \ numerical_grade > 2.0\n            letter_grades[i] = \"C+\"\n        elseif\
    \ numerical_grade > 1.7\n            letter_grades[i] = \"C\"\n        elseif\
    \ numerical_grade > 1.3\n            letter_grades[i] = \"C-\"\n        elseif\
    \ numerical_grade > 1.0\n            letter_grades[i] = \"D+\"\n        elseif\
    \ numerical_grade > 0.7\n            letter_grades[i] = \"D\"\n        elseif\
    \ numerical_grade > 0.0\n            letter_grades[i] = \"D-\"\n        else\n\
    \            letter_grades[i] = \"E\"\n        end\n    end\n    return letter_grades\n\
    end", "        letter_grade_table = [\n        (4.0, \"A+\"), \n        (3.7,\
    \ \"A\"), \n        (3.3, \"A-\"), \n        (3.0, \"B+\"), \n        (2.7, \"\
    B\"), \n        (2.3, \"B-\"), \n        (2.0, \"C+\"), \n        (1.7, \"C\"\
    ), \n        (1.3, \"C-\"), \n        (1.0, \"D+\"), \n        (0.7, \"D\"), \n\
    \        (0.0, \"D-\"), \n        (0.0, \"E\")]\n    letter_grades = []\n    for\
    \ i in 1:length(grades)\n        for j in 1:length(letter_grade_table)\n     \
    \       if grades[i] >= letter_grade_table[j][1]\n                push!(letter_grades,\
    \ letter_grade_table[j][2])\n                break\n            end\n        end\n\
    \    end\n    return letter_grades\nend", "    \n    #if length(grades) == 0 #\
    \ check if the vector is empty\n        #return error(\"Empty Vector\")\n    #end\n\
    \    answer = []\n    for i in grades \n        if i > 4.0 \n            append!(answer,\
    \ \"A+\")\n        elseif 3.7 < i <= 4.0\n            append!(answer, \"A\")\n\
    \        elseif 3.3 < i <= 3.7\n            append!(answer, \"A-\")\n        elseif\
    \ 3.0 < i <= 3.3\n            append!(answer, \"B+\")\n        elseif 2.7 < i\
    \ <= 3.0\n            append!(answer, \"B\")\n        elseif 2.3 < i <= 2.7\n\
    \            append!(answer, \"B-\")\n        elseif 2.0 < i <= 2.3\n        \
    \    append!(answer, \"C+\")\n        elseif 1.7 < i <= 2.0\n            append!(answer,\
    \ \"C\")\n        elseif 1.3 < i <= 1.7\n            append!(answer, \"C-\")\n\
    \        elseif 1.0 < i <= 1.3\n            append!(answer, \"D+\")\n        elseif\
    \ 0.7 < i <= 1.0\n            append!(answer, \"D\")\n        elseif 0.0 < i <=\
    \ 0.7\n            append!(answer, \"D-\")\n        else 0.0 == i\n          \
    \  append!(answer, \"E\")\n        end\n    end\n    return answer\nend", "  \
    \  num_letter_vec = Vector{String}(length(grades))\n    for i = 1:length(grades)\n\
    \        gpa = grades[i]\n        if gpa >= 4.0\n            num_letter_vec[i]\
    \ = \"A+\"\n        elseif gpa >= 3.7 && gpa < 4.0\n            num_letter_vec[i]\
    \ = \"A\"\n        elseif gpa >= 3.3 && gpa < 3.7\n            num_letter_vec[i]\
    \ = \"A-\"\n        elseif gpa >= 3.0 && gpa < 3.3\n            num_letter_vec[i]\
    \ = \"B+\"\n        elseif gpa >= 2.7 && gpa < 3.0\n            num_letter_vec[i]\
    \ = \"B\"\n        elseif gpa >= 2.3 && gpa < 2.7\n            num_letter_vec[i]\
    \ = \"B-\"\n        elseif gpa >= 2.0 && gpa < 2.3\n            num_letter_vec[i]\
    \ = \"C+\"\n        elseif gpa >= 1.7 && gpa < 2.0\n            num_letter_vec[i]\
    \ = \"C\"\n        elseif gpa >= 1.3 && gpa < 1.7\n            num_letter_vec[i]\
    \ = \"C-\"\n        elseif gpa >= 1.0 && gpa < 1.3\n            num_letter_vec[i]\
    \ = \"D+\"\n        elseif gpa >= 0.7 && gpa < 1.0\n            num_letter_vec[i]\
    \ = \"D\"\n        elseif gpa >= 0.0 && gpa < 0.7\n            num_letter_vec[i]\
    \ = \"D-\"\n        elseif gpa == 0.0\n            num_letter_vec[i] = \"E\"\n\
    \        end\n    end\n    return num_letter_vec\nend", "    for i in 1:length(grades)\n\
    \        if grades[i] >= 4.0\n            grades[i] = \"A+\"\n        elseif grades[i]\
    \ > 3.7\n            grades[i] = \"A\"\n        elseif grades[i] > 3.3\n     \
    \       grades[i] = \"A-\"\n        elseif grades[i] > 3.0\n            grades[i]\
    \ = \"B+\"\n        elseif grades[i] > 2.7\n            grades[i] = \"B\"\n  \
    \      elseif grades[i] > 2.3\n            grades[i] = \"B-\"\n        elseif\
    \ grades[i] > 2.0\n            grades[i] = \"C+\"\n        elseif grades[i] >\
    \ 1.7\n            grades[i] = \"C\"\n        elseif grades[i] > 1.3\n       \
    \     grades[i] = \"C-\"\n        elseif grades[i] > 1.0\n            grades[i]\
    \ = \"D+\"\n        elseif grades[i] > 0.7\n            grades[i] = \"D\"\n  \
    \      elseif grades[i] > 0.0\n            grades[i] = \"D-\"\n        elseif\
    \ grades[i] == 0.0\n            grades[i] = \"E\"\n        end\n    end\n    return\
    \ grades\nend", "    \"\"\"It is the last week of the semester and the teacher\
    \ has to give the grades\n    to students. The teacher has been making her own\
    \ algorithm for grading.\n    The only problem is, she has lost the code she used\
    \ for grading.\n    She has given you a vector of GPAs for some students and you\
    \ have to write \n    a function that can output a vector of letter grades using\
    \ the following table:\n             GPA       |    Letter grade\n           \
    \   4.0                A+\n            > 3.7                A \n            >\
    \ 3.3                A- \n            > 3.0                B+\n            > 2.7\
    \                B \n            > 2.3                B-\n            > 2.0  \
    \              C+\n            > 1.7                C\n            > 1.3     \
    \           C-\n            > 1.0                D+ \n            > 0.7      \
    \          D \n            > 0.0                D-\n              0.0        \
    \        E\n    ", "    \"\"\"\n    Given a vector of GPAs, it returns a vector\
    \ of letter grades.\n    \"\"\"\n    letter_grades = []\n    for i in grades\n\
    \        if i == 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ i > 3.7\n            push!(letter_grades, \"A\")\n        elseif i > 3.3\n \
    \           push!(letter_grades, \"A-\")\n        elseif i > 3.0\n           \
    \ push!(letter_grades, \"B+\")\n        elseif i > 2.7\n            push!(letter_grades,\
    \ \"B\")\n        elseif i > 2.3\n            push!(letter_grades, \"B-\")\n \
    \       elseif i > 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ i > 1.7\n            push!(letter_grades, \"C\")\n        elseif i > 1.3\n \
    \           push!(letter_grades, \"C-\")\n        elseif i > 1.0\n           \
    \ push!(letter_grades, \"D+\")\n        elseif i > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif i > 0.0\n            push!(letter_grades, \"D-\")\n \
    \       elseif i == 0.0\n            push!(letter_grades, \"E\")\n        end\n\
    \    end\n    return letter_grades\nend", "    \"\"\"\n    Translates the numerical\
    \ grades in a vector to letter grades and outputs a\n    vector of letter grades.\n\
    \    \"\"\"\n    letters = []\n    for i in 1:length(grades)\n        if grades[i]\
    \ >= 4.0\n            push!(letters, \"A+\")\n        elseif grades[i] >= 3.7\n\
    \            push!(letters, \"A\")\n        elseif grades[i] >= 3.3\n        \
    \    push!(letters, \"A-\")\n        elseif grades[i] >= 3.0\n            push!(letters,\
    \ \"B+\")\n        elseif grades[i] >= 2.7\n            push!(letters, \"B\")\n\
    \        elseif grades[i] >= 2.3\n            push!(letters, \"B-\")\n       \
    \ elseif grades[i] >= 2.0\n            push!(letters, \"C+\")\n        elseif\
    \ grades[i] >= 1.7\n            push!(letters, \"C\")\n        elseif grades[i]\
    \ >= 1.3\n            push!(letters, \"C-\")\n        elseif grades[i] >= 1.0\n\
    \            push!(letters, \"D+\")\n        elseif grades[i] >= 0.7\n       \
    \     push!(letters, \"D\")\n        elseif grades[i] >= 0.0\n            push!(letters,\
    \ \"D-\")\n        else\n            push!(letters, \"E\")\n        end\n    end\n\
    \    return letters\nend", "    grades_letter = [\"E\" for i in 1:length(grades)]\n\
    \    for i in 1:length(grades)\n        if grades[i] == 4.0\n            grades_letter[i]\
    \ = \"A+\"\n        elseif 3.7 <= grades[i] < 4.0\n            grades_letter[i]\
    \ = \"A\"\n        elseif 3.3 <= grades[i] < 3.7\n            grades_letter[i]\
    \ = \"A-\"\n        elseif 3.0 <= grades[i] < 3.3\n            grades_letter[i]\
    \ = \"B+\"\n        elseif 2.7 <= grades[i] < 3.0\n            grades_letter[i]\
    \ = \"B\"\n        elseif 2.3 <= grades[i] < 2.7\n            grades_letter[i]\
    \ = \"B-\"\n        elseif 2.0 <= grades[i] < 2.3\n            grades_letter[i]\
    \ = \"C+\"\n        elseif 1.7 <= grades[i] < 2.0\n            grades_letter[i]\
    \ = \"C\"\n        elseif 1.3 <= grades[i] < 1.7\n            grades_letter[i]\
    \ = \"C-\"\n        elseif 1.0 <= grades[i] < 1.3\n            grades_letter[i]\
    \ = \"D+\"\n        elseif 0.7 <= grades[i] < 1.0\n            grades_letter[i]\
    \ = \"D\"\n        elseif 0.0 <= grades[i] < 0.7\n            grades_letter[i]\
    \ = \"D-\"\n        else\n            grades_letter[i] = \"E\"\n        end\n\
    \    end\n    return grades_letter\nend", "    \"\"\"The function numerical_letter_grade\
    \ takes in a vector of float \n    grades, converts them to letter grades and\
    \ returns a vector of \n    letter grades\"\"\"\n    letter_grades = [\"A+\",\
    \ \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\",\
    \ \"D-\", \"E\"]\n    output = []\n    for i in grades\n        if i > 4.0\n \
    \           push!(output, \"A+\")\n        elseif i > 3.7\n            push!(output,\
    \ \"A\")\n        elseif i > 3.3\n            push!(output, \"A-\")\n        elseif\
    \ i > 3.0\n            push!(output, \"B+\")\n        elseif i > 2.7\n       \
    \     push!(output, \"B\")\n        elseif i > 2.3\n            push!(output,\
    \ \"B-\")\n        elseif i > 2.0\n            push!(output, \"C+\")\n       \
    \ elseif i > 1.7\n            push!(output, \"C\")\n        elseif i > 1.3\n \
    \           push!(output, \"C-\")\n        elseif i > 1.0\n            push!(output,\
    \ \"D+\")\n        elseif i > 0.7\n            push!(output, \"D\")\n        elseif\
    \ i > 0.0\n            push!(output, \"D-\")\n        else\n            push!(output,\
    \ \"E\")\n        end\n    end\n    return output\nend", "    # Initialize an\
    \ empty vector to store grades \n    lettered_grades = String[]\n    # Loop through\
    \ grades\n    for i = 1:length(grades)\n        # Check what grade a student earned\n\
    \        if grades[i] >= 4.0\n            # If a student earned an A+, append\
    \ to vector\n            push!(lettered_grades, \"A+\")\n        elseif grades[i]\
    \ >= 3.7\n            # If a student earned an A, append to vector\n         \
    \   push!(lettered_grades, \"A\")\n        elseif grades[i] >= 3.3\n         \
    \   # If a student earned an A-, append to vector\n            push!(lettered_grades,\
    \ \"A-\")\n        elseif grades[i] >= 3.0\n            # If a student earned\
    \ an B+, append to vector\n            push!(lettered_grades, \"B+\")\n      \
    \  elseif grades[i] >= 2.7\n            # If a student earned an B, append to\
    \ vector\n            push!(lettered_grades, \"B\")\n        elseif grades[i]\
    \ >= 2.3\n            # If a student earned an B-, append to vector\n        \
    \    push!(lettered_grades, \"B-\")\n        elseif grades[i] >= 2.0\n       \
    \     # If a student earned an C+, append to vector\n            push!(lettered_grades,\
    \ \"C+\")\n        elseif grades[i] >= 1.7\n            # If a student earned\
    \ an C, append to vector\n            push!(lettered_grades, \"C\")\n        elseif\
    \ grades[i] >= 1.3\n            # If a student earned an C-, append to vector\n\
    \            push!(lettered_grades, \"C-\")\n        elseif grades[i] >= 1.0\n\
    \            # If a student earned an D+, append to vector\n            push!(lettered_grades,\
    \ \"D+\")\n        elseif grades[i] >= 0.7\n            # If a student earned\
    \ an D, append to vector\n            push!(lettered_grades, \"D\")\n        elseif\
    \ grades[i] >= 0.0\n            # If a student earned an D-, append to vector\n\
    \            push!(lettered_grades, \"D-\")\n       ", "    grade = [\"A+\", \"\
    A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\"]\n    grade_limits = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0,\
    \ 0.7, 0.0, 0.0]\n    grades_compare = repeat(grade_limits, outer=length(grades))\n\
    \    grades_transpose = repeat(grades, length(grade_limits))\n    final_grade\
    \ = map(x->x>y ? x : y, grades_compare, grades_transpose)\n    return grade[sum(final_grade,\
    \ dims=1)[2,:]]", "    grade = []\n    for x in grades\n        if x >= 4.0\n\
    \            push!(grade, \"A+\")\n        elseif x >= 3.7\n            push!(grade,\
    \ \"A\")\n        elseif x >= 3.3\n            push!(grade, \"A-\")\n        elseif\
    \ x >= 3.0\n            push!(grade, \"B+\")\n        elseif x >= 2.7\n      \
    \      push!(grade, \"B\")\n        elseif x >= 2.3\n            push!(grade,\
    \ \"B-\")\n        elseif x >= 2.0\n            push!(grade, \"C+\")\n       \
    \ elseif x >= 1.7\n            push!(grade, \"C\")\n        elseif x >= 1.3\n\
    \            push!(grade, \"C-\")\n        elseif x >= 1.0\n            push!(grade,\
    \ \"D+\")\n        elseif x >= 0.7\n            push!(grade, \"D\")\n        elseif\
    \ x >= 0.0\n            push!(grade, \"D-\")\n        else\n            push!(grade,\
    \ \"E\")\n        end\n    end\n    return grade\nend", "    \n    # create a\
    \ vector of letters\n    letters = String[]\n    \n    # iterate through the grades\
    \ vector\n    for grade in grades\n        # push a letter onto the end of the\
    \ letters vector based on the \n        # corresponding grade\n        if grade\
    \ == 4.0\n            push!(letters, \"A+\")\n        elseif grade > 3.7\n   \
    \         push!(letters, \"A\")\n        elseif grade > 3.3\n            push!(letters,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letters, \"B+\")\n  \
    \      elseif grade > 2.7\n            push!(letters, \"B\")\n        elseif grade\
    \ > 2.3\n            push!(letters, \"B-\")\n        elseif grade > 2.0\n    \
    \        push!(letters, \"C+\")\n        elseif grade > 1.7\n            push!(letters,\
    \ \"C\")\n        elseif grade > 1.3\n            push!(letters, \"C-\")\n   \
    \     elseif grade > 1.0\n            push!(letters, \"D+\")\n        elseif grade\
    \ > 0.7\n            push!(letters, \"D\")\n        elseif grade > 0.0\n     \
    \       push!(letters, \"D-\")\n        else\n            push!(letters, \"E\"\
    )\n        end\n    end\n    return letters\nend", "    # p.s. there are better\
    \ ways to implement this like \n    #       numerical_letter_grade(grades) = map(grade\
    \ -> get(grades_to_letter, grade, \"E\"), grades)\n    #       but I tried to\
    \ keep it simple for this problem\n    grades_to_letter = Dict(4.0 => \"A+\",\
    \ 3.7 => \"A\", 3.3 => \"A-\", 3.0 => \"B+\", 2.7 => \"B\", 2.3 => \"B-\", 2.0\
    \ => \"C+\", 1.7 => \"C\", 1.3 => \"C-\", 1.0 => \"D+\", 0.7 => \"D\", 0.0 =>\
    \ \"D-\")\n    letter_grades = Vector{String}(undef, length(grades))\n    for\
    \ (i, grade) in enumerate(grades)\n        letter_grades[i] = grades_to_letter[floor(grade*10)/10]\
    \ == nothing ? \"E\" : grades_to_letter[floor(grade*10)/10]\n    end\n    return\
    \ letter_grades\nend", "    letter_grades = [0 for x in 1:length(grades)]\n  \
    \  for x in 1:length(grades)\n        if grades[x] >= 4.0\n            letter_grades[x]\
    \ = \"A+\"\n        elseif grades[x] >= 3.7\n            letter_grades[x] = \"\
    A\"\n        elseif grades[x] >= 3.3\n            letter_grades[x] = \"A-\"\n\
    \        elseif grades[x] >= 3.0\n            letter_grades[x] = \"B+\"\n    \
    \    elseif grades[x] >= 2.7\n            letter_grades[x] = \"B\"\n        elseif\
    \ grades[x] >= 2.3\n            letter_grades[x] = \"B-\"\n        elseif grades[x]\
    \ >= 2.0\n            letter_grades[x] = \"C+\"\n        elseif grades[x] >= 1.7\n\
    \            letter_grades[x] = \"C\"\n        elseif grades[x] >= 1.3\n     \
    \       letter_grades[x] = \"C-\"\n        elseif grades[x] >= 1.0\n         \
    \   letter_grades[x] = \"D+\"\n        elseif grades[x] >= 0.7\n            letter_grades[x]\
    \ = \"D\"\n        elseif grades[x] >= 0.0\n            letter_grades[x] = \"\
    D-\"\n        elseif grades[x] >= 0.0\n            letter_grades[x] = \"E\"\n\
    \        end\n    end\n    \n    return letter_grades\nend", "    grade_array\
    \ = []\n    for gpas in grades\n        if gpas >= 4.0\n            push!(grade_array,\
    \ \"A+\")\n        elseif gpas >= 3.7\n            push!(grade_array, \"A\")\n\
    \        elseif gpas >= 3.3\n            push!(grade_array, \"A-\")\n        elseif\
    \ gpas >= 3.0\n            push!(grade_array, \"B+\")\n        elseif gpas >=\
    \ 2.7\n            push!(grade_array, \"B\")\n        elseif gpas >= 2.3\n   \
    \         push!(grade_array, \"B-\")\n        elseif gpas >= 2.0\n           \
    \ push!(grade_array, \"C+\")\n        elseif gpas >= 1.7\n            push!(grade_array,\
    \ \"C\")\n        elseif gpas >= 1.3\n            push!(grade_array, \"C-\")\n\
    \        elseif gpas >= 1.0\n            push!(grade_array, \"D+\")\n        elseif\
    \ gpas >= 0.7\n            push!(grade_array, \"D\")\n        elseif gpas >= 0.0\n\
    \            push!(grade_array, \"D-\")\n        elseif gpas == 0.0\n        \
    \    push!(grade_array, \"E\")\n        end\n    end\n    return grade_array\n\
    end", "    letter_grades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\"\
    , \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"] \n    numerical_grades = [4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]\n    letter_grades_return\
    \ = []\n    n = length(grades)\n    k = length(numerical_grades)\n    for i in\
    \ 1:n\n        for j in 1:k \n            if grades[i] >= numerical_grades[j]\n\
    \                push!(letter_grades_return, letter_grades[j])\n             \
    \   break\n            end\n        end\n    end\n    return letter_grades_return\n\
    end", "    # Define variables\n    new_grades = []\n    letter_grades = [\"A+\"\
    , \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\",\
    \ \"D-\", \"E\"]\n    grade_ranges = [(4.0,3.7), (3.7,3.3), (3.3,3.0), (3.0,2.7),\
    \ (2.7,2.3), (2.3,2.0), (2.0,1.7), (1.7,1.3), (1.3,1.0), (1.0,0.7), (0.7,0.0),\
    \ (0.0,0.0)]"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
