name: HumanEval_105_by_length
language: jl
results:
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    new_arr = sort(arr[arr .<= 9], rev=true)\n    return [\n        \"One\"\
    \ => \"One\",\n        \"Two\" => \"Two\",\n        \"Three\" => \"Three\",\n\
    \        \"Four\" => \"Four\",\n        \"Five\" => \"Five\",\n        \"Six\"\
    \ => \"Six\",\n        \"Seven\" => \"Seven\",\n        \"Eight\" => \"Eight\"\
    ,\n        \"Nine\" => \"Nine\"\n    ][new_arr]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxw5c67i5.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Pair{String, String} to an object of type String\n\
    \  Closest candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Pair{String,\
    \ String}, i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String},\
    \ doffs::Int64, src::Vector{Pair{String, String}}, soffs::Int64, n::Int64)\n \
    \     @ Base ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n\
    \    [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n  \
    \    @ ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n\
    \    [7] copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Pair{String,\
    \ String}})\n      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554\
    \ [inlined]\n   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpxw5c67i5.jl:20\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpxw5c67i5.jl:37 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpxw5c67i5.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpxw5c67i5.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{Pair{String, String}} at index [[1, -1]]\n  Stacktrace:\n   [1] throw_b"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxw5c67i5.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    _arr = filter(x -> x in 1:9, arr)\n    _arr = sort(_arr)\n    _arr = reverse(_arr)\n\
    \    _arr = [[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"][i] for i in _arr]\n    return _arr\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    if length(arr) ==\
    \ 1\n        if in(arr[1], 1:9)\n            return [str(arr[1])]\n        else\n\
    \            return []\n        end\n    end\n    arr2 = arr[in.(arr, 1:9)]\n\
    \    return sort(reverse(arr2))\nend\n@assert by_length([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\"]\n@assert by_length([-1, -2, -3, -4, -5, -6, -7, -8, -9]) ==\
    \ []\n@assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n@assert by_length([])\
    \ == []\n@assert by_length([1, -1, 55]) == [\"One\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n  [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \    @ Base ./array.jl:903\n  [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n    @ Base ./array.jl:253\n  [3]\
    \ unsafe_copyto!\n    @ ./array.jl:307 [inlined]\n  [4] _copyto_impl!\n    @ ./array.jl:331\
    \ [inlined]\n  [5] copyto!\n    @ ./array.jl:317 [inlined]\n  [6] copyto!\n  \
    \  @ ./array.jl:343 [inlined]\n  [7] copyto_axcheck!\n    @ ./abstractarray.jl:1104\
    \ [inlined]\n  [8] Vector{String}(x::Vector{Int64})\n    @ Base ./array.jl:563\n\
    \  [9] convert\n    @ ./array.jl:554 [inlined]\n [10] by_length(arr::Vector{Int64})\n\
    \    @ Main /tmp/tmp0zuak69l.jl:30\n [11] top-level scope\n    @ /tmp/tmp0zuak69l.jl:32\n\
    in expression starting at /tmp/tmp0zuak69l.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    d = Dict(1=>\"One\", 2=>\"Two\", 3=>\"Three\", 4=>\"Four\", 5=>\"Five\"\
    , 6=>\"Six\", 7=>\"Seven\", 8=>\"Eight\", 9=>\"Nine\")\n    a = sort(filter(x->x>0\
    \ && x<10, arr))\n    d[a]\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa1behvl0.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  KeyError: key [1, 1,\
    \ 2, 2, 3, 4, 5, 8] not found\n  Stacktrace:\n   [1] getindex(h::Dict{Int64, String},\
    \ key::Vector{Int64})\n     @ Base ./dict.jl:481\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpa1behvl0.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa1behvl0.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa1behvl0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpa1behvl0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  KeyError: key Int64[]\
    \ not found\n  Stacktrace:\n   [1] getindex(h::Dict{Int64, String}, key::Vector{Int64})\n\
    \     @ Base ./dict.jl:481\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpa1behvl0.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa1behvl0.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa1behvl0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpa1behvl0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  KeyError: key [1] not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{Int64, String}, key::Vector{Int64})\n     @ Base ./dict.jl:481\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpa1behvl0.jl:21\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa1behvl0.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa1behvl0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\n    println(\"hello\")\n    return [\"One\"]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "hello\ntest set: Test Failed at /tmp/tmpidxnhkfp.jl:28\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidxnhkfp.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidxnhkfp.jl:27\nhello\ntest set:\
    \ Test Failed at /tmp/tmpidxnhkfp.jl:29\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidxnhkfp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidxnhkfp.jl:27\nhello\nhello\n\
    test set: Test Failed at /tmp/tmpidxnhkfp.jl:31\n  Expression: candidate([1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidxnhkfp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidxnhkfp.jl:27\nhello\ntest set:\
    \ Test Failed at /tmp/tmpidxnhkfp.jl:32\n  Expression: candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidxnhkfp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidxnhkfp.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # 1. Sort\n    sort!(arr)\n    # 2. Find numbers between 1 and 9 inclusive\n\
    \    new_arr = [el for el in arr if el < 10 && el > 0]\n    # 3. Reverse\n   \
    \ reverse!(new_arr)\n    # 4. Change each digit to its corresponding name from\
    \ 1 to 9\n    for (i, el) in enumerate(new_arr)\n        if (el == 1)\n      \
    \      new_arr[i] = \"One\"\n        elseif (el == 2)\n            new_arr[i]\
    \ = \"Two\"\n        elseif (el == 3)\n            new_arr[i] = \"Three\"\n  \
    \      elseif (el == 4)\n            new_arr[i] = \"Four\"\n        elseif (el\
    \ == 5)\n            new_arr[i] = \"Five\"\n        elseif (el == 6)\n       \
    \     new_arr[i] = \"Six\"\n        elseif (el == 7)\n            new_arr[i] =\
    \ \"Seven\"\n        elseif (el == 8)\n            new_arr[i] = \"Eight\"\n  \
    \      elseif (el == 9)\n            new_arr[i] = \"Nine\"\n        end\n    end\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpamdsi8u0.jl:54\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpamdsi8u0.jl:42\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpamdsi8u0.jl:54 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpamdsi8u0.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpamdsi8u0.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpamdsi8u0.jl:28\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpamdsi8u0.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    v = [x for x in arr if (1 <= x <= 9)]\n    sort!(v)\n    reverse!(v)\n\
    \    v = [word(x) for x in v]\n    \n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmppyzdb83f.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: word\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmppyzdb83f.jl:23\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmppyzdb83f.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmppyzdb83f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmppyzdb83f.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: word not defined\n  Stacktrace:\n\
    \   [1] (::var\"#2#4\")(x::Int64)\n     @ Main ./none:0\n   [2] iterate\n    \
    \ @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmppyzdb83f.jl:23\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmppyzdb83f.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmppyzdb83f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmppyzdb83f.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ word not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppyzdb83f.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    new_arr = sort(arr)\n    push!(new_arr, 0)\n    push!(new_arr, 0)\n  \
    \  new_arr = reverse(new_arr)\n    new_arr = [x for x in new_arr if x < 10 &&\
    \ x > 0]\n    for i = 1:length(new_arr)\n        if new_arr[i] == 1\n        \
    \    new_arr[i] = \"One\"\n        elseif new_arr[i] == 2\n            new_arr[i]\
    \ = \"Two\"\n        elseif new_arr[i] == 3\n            new_arr[i] = \"Three\"\
    \n        elseif new_arr[i] == 4\n            new_arr[i] = \"Four\"\n        elseif\
    \ new_arr[i] == 5\n            new_arr[i] = \"Five\"\n        elseif new_arr[i]\
    \ == 6\n            new_arr[i] = \"Six\"\n        elseif new_arr[i] == 7\n   \
    \         new_arr[i] = \"Seven\"\n        elseif new_arr[i] == 8\n           \
    \ new_arr[i] = \"Eight\"\n        elseif new_arr[i] == 9\n            new_arr[i]\
    \ = \"Nine\"\n        end\n    end\n    return new_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2jgq1w2t.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2jgq1w2t.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2jgq1w2t.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2jgq1w2t.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp2jgq1w2t.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2jgq1w2t.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2jgq1w2t.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n    return [numbers[x] for x in reverse(sort(filter(x\
    \ -> x >= 1 && x <= 9, arr))) ]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    res = []\n    for i in arr\n        if i > 0 && i < 10\n            push!(res,\
    \ i)\n        end\n    end\n    sort!(res)\n    reverse!(res)\n    for i in 1:length(res)\n\
    \        res[i] = number_to_name(res[i])\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplhptab8b.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_to_name\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmplhptab8b.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplhptab8b.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplhptab8b.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplhptab8b.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number_to_name not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmplhptab8b.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplhptab8b.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplhptab8b.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplhptab8b.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ number_to_name not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmplhptab8b.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplhptab8b.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplhptab8b.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplhptab8b.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: number_to_"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplhptab8b.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Write your code here!\n    arr_filter = [i for i in arr if i > 0 &&\
    \ i < 10]\n    sort!(arr_filter)\n    reverse!(arr_filter)\n    for (i, number)\
    \ in enumerate(arr_filter)\n        arr_filter[i] = print_word(number)\n    end\n\
    \    return arr_filter\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpipr925z8.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: print_word\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpipr925z8.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpipr925z8.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpipr925z8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpipr925z8.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: print_word not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpipr925z8.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpipr925z8.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpipr925z8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpipr925z8.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ print_word not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpipr925z8.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpipr925z8.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpipr925z8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpipr925z8.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: print_word\
    \ not defined"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpipr925z8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    res = []\n    for i in arr\n        if i>=1 && i<=9\n            push!(res,i)\n\
    \        end\n    end\n    sort!(res)\n    reverse!(res)\n    res = map(i->string(i),res)\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4fdqlqou.jl:35\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fdqlqou.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fdqlqou.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4fdqlqou.jl:37\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fdqlqou.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fdqlqou.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4fdqlqou.jl:38\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fdqlqou.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fdqlqou.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4fdqlqou.jl:39\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fdqlqou.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4fdqlqou.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Step 1: Sort the integers between 1-9\n    # Step 2: Reverse the resulting\
    \ vector\n    # Step 3: Replace each digit by the corresponding string\n    (1:9)[reverse(sort(arr[(1:9).==arr]))]\
    \ |>\n    x -> [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][x]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpip807m9v.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 9\
    \ and 8\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpip807m9v.jl:22\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpip807m9v.jl:30 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpip807m9v.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpip807m9v.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 9 and\
    \ 0\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpip807m9v.jl:22\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpip807m9v.jl:31 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpip807m9v.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    new_arr = sort(filter(is_valid, arr))\n    new_arr = reverse(new_arr)\n\
    \    new_arr = [string(i) for i in new_arr]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprav3xmh3.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: is_valid\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprav3xmh3.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprav3xmh3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprav3xmh3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprav3xmh3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: is_valid\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprav3xmh3.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprav3xmh3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprav3xmh3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprav3xmh3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: is_valid not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprav3xmh3.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprav3xmh3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprav3xmh3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprav3xmh3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ is_valid not defined\n  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprav3xmh3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return Vector{String}()\n    end\n    new_arr\
    \ = sort(filter(x -> x < 10 && x > 0, arr))\n    return reverse(map(i -> digits[i],\
    \ new_arr))\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkffez2p3.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching getindex(::typeof(digits), ::Int64)\n  Stacktrace:\n    [1] (::var\"\
    #2#4\")(i::Int64)\n      @ Main /tmp/tmpkffez2p3.jl:23\n    [2] iterate\n    \
    \  @ ./generator.jl:47 [inlined]\n    [3] _collect\n      @ ./array.jl:744 [inlined]\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpkffez2p3.jl:23\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpkffez2p3.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpkffez2p3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkffez2p3.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching getindex(::typeof(digits),\
    \ ::Int64)\n  Stacktrace:\n    [1] (::var\"#2#4\")(i::Int64)\n      @ Main /tmp/tmpkffez2p3.jl:23\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect\n    \
    \  @ ./array.jl:744 [inlined]\n    [4] collect_similar\n      @ ./array.jl:653\
    \ [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpkffez2p3.jl:23\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpkffez2p3.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpkffez2p3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkffez2p3.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  Metho"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkffez2p3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # reverse it so that we can sort it\n    arr_rev = reverse(arr)\n    #\
    \ sort the elements\n    arr_sort = sort(arr_rev)\n    # check for negative numbers\n\
    \    for i in eachindex(arr_sort)\n        if arr_sort[i] < 0 \n            arr_sort[i]\
    \ = Int64(NaN)\n        end\n    end\n    # remove NaN values\n    arr_rm = filter(x\
    \ -> !isnan(x), arr_sort)\n    arr_final = []\n    # cover Int values with String\
    \ values\n    for i in eachindex(arr_rm)\n        if arr_rm[i] == 1\n        \
    \    push!(arr_final, \"One\")\n        elseif arr_rm[i] == 2\n            push!(arr_final,\
    \ \"Two\")\n        elseif arr_rm[i] == 3\n            push!(arr_final, \"Three\"\
    )\n        elseif arr_rm[i] == 4\n            push!(arr_final, \"Four\")\n   \
    \     elseif arr_rm[i] == 5\n            push!(arr_final, \"Five\")\n        elseif\
    \ arr_rm[i] == 6\n            push!(arr_final, \"Six\")\n        elseif arr_rm[i]\
    \ == 7\n            push!(arr_final, \"Seven\")\n        elseif arr_rm[i] == 8\n\
    \            push!(arr_final, \"Eight\")\n        elseif arr_rm[i] == 9\n    \
    \        push!(arr_final, \"Nine\")\n        end\n    end\n    return arr_final\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd9_p_8jh.jl:61\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"One\", \"Two\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9_p_8jh.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9_p_8jh.jl:60\ntest set: Error\
    \ During Test at /tmp/tmpd9_p_8jh.jl:63\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  InexactError: Int64(NaN)\n  Stacktrace:\n\
    \   [1] Int64(x::Float64)\n     @ Base ./float.jl:812\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpd9_p_8jh.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd9_p_8jh.jl:63 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd9_p_8jh.jl:60\ntest set:\
    \ Error During Test at /tmp/tmpd9_p_8jh.jl:64\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  InexactError: Int64(NaN)\n\
    \  Stacktrace:\n   [1] Int64(x::Float64)\n     @ Base ./float.jl:812\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpd9_p_8jh.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd9_p_8jh.jl:64 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd9_p_8jh.jl:60\ntest set:\
    \ Test Failed at /tmp/tmpd9_p_8jh.jl:65\n  Expression: candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\n   Eva"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd9_p_8jh.jl:58\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    temp = sort(arr[(arr .>= 1) .& (arr .<= 9)])\n    temp = reverse(temp)\n\
    \    temp = replace(temp, \"1\" => \"One\", \"2\" => \"Two\", \"3\" => \"Three\"\
    , \"4\" => \"Four\", \"5\" => \"Five\", \"6\" => \"Six\", \"7\" => \"Seven\",\
    \ \"8\" => \"Eight\", \"9\" => \"Nine\")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgx5lbrwh.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpgx5lbrwh.jl:21\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpgx5lbrwh.jl:28 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpgx5lbrwh.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgx5lbrwh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1."
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgx5lbrwh.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    arr = sort(arr)\n    # reverse the vector\n   \
    \ arr = reverse(arr)\n    # take out all negative numbers \n    arr = [if a >\
    \ 0 a else 0 for a in arr]\n    # convert each numbers to string\n    arr = [parse(Int64,\
    \ a) for a in arr]\n    # convert all digits to words\n    for i in 1:length(arr)\n\
    \        if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] ==\
    \ 2\n            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        else\n  \
    \          arr[i] = 0\n        end\n    end\n    # remove any zero\n    arr =\
    \ [if a != 0 a else \"\" for a in arr]\n    # remove duplicate\n    arr = filter(x\
    \ -> x != \"\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpgy868ard.jl:24 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgy868ard.jl:24\n\
    in expression starting at /tmp/tmpgy868ard.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    1 <= arr .<= 9 ? filter(x -> (1 <= x <= 9), arr) |> sort |> reverse |>\
    \ map(x -> number_to_string(x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpclmuzaz3.jl:20\nin expression starting at\
    \ /tmp/tmpclmuzaz3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \"\"\"Sorting numbers in arr that are between 1 and 9 and returning \n\
    \    resulting vector of strings corresponding to the digits in reversed order.\n\
    \    \"\"\"\n    #sorting function\n    sort!(arr)\n    #creating empty vector\
    \ of strings with length equal to that of arr\n    new_arr = Vector{String}(undef,\
    \ length(arr))\n    #creating a dict that maps the digits 1 to 9 to their corresponding\
    \ string\n    num_to_word = Dict(1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4\
    \ => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9\
    \ => \"Nine\")\n    #for loop that puts the corresponding string of each digit\
    \ in arr in new_arr\n    for i in 1:length(arr)\n        if arr[i] in keys(num_to_word)\n\
    \            new_arr[i] = num_to_word[arr[i]]\n        end\n    end\n    #reversing\
    \ the vector\n    return reverse(new_arr)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi9xr7ivj.jl:44\n  Test threw exception\n\
    \  Expression: candidate([1, -1, 55]) == [\"One\"]\n  UndefRefError: access to\
    \ undefined reference\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861\
    \ [inlined]\n    [2] reverse(A::Vector{String}, start::Int64, stop::Int64)\n \
    \     @ Base ./array.jl:1726\n    [3] _reverse\n      @ ./array.jl:1738 [inlined]\n\
    \    [4] #reverse#99\n      @ ./array.jl:1737 [inlined]\n    [5] reverse\n   \
    \   @ ./array.jl:1737 [inlined]\n    [6] by_length(arr::Vector{Int64})\n     \
    \ @ Main /tmp/tmpi9xr7ivj.jl:35\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpi9xr7ivj.jl:44 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpi9xr7ivj.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpi9xr7ivj.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefRefError:\
    \ access to undefined reference\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861\
    \ [inlined]\n    [2] reverse(A::Vector{String}, start::Int64, stop::Int64)\n \
    \     @ Base ./array.jl:1726\n    [3] _reverse\n      @ ./array.jl:1738 [inlined]\n\
    \    [4] #reverse#99\n      @ ./array.jl:1737 [inlined]\n    [5] reverse\n   \
    \   @ ./array.jl:1737 [inlined]\n    [6] by_length(arr::Vector{Int64})\n     \
    \ @ Main /tmp/tmpi9xr7ivj.jl:35\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpi9xr7ivj.jl:45 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpi9xr7ivj.jl:41\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9xr7ivj.jl:39\n"
  exit_code: 1
  status: SyntaxError
