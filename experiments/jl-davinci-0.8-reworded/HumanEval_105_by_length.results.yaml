language: jl
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    new_arr = sort(arr[arr .<= 9], rev=true)\n    return [\n        \"One\"\
    \ => \"One\",\n        \"Two\" => \"Two\",\n        \"Three\" => \"Three\",\n\
    \        \"Four\" => \"Four\",\n        \"Five\" => \"Five\",\n        \"Six\"\
    \ => \"Six\",\n        \"Seven\" => \"Seven\",\n        \"Eight\" => \"Eight\"\
    ,\n        \"Nine\" => \"Nine\"\n    ][new_arr]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxw5c67i5.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpxw5c67i5.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Pair{String, String} to an object of type String\n\
    \  Closest candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Pair{String,\
    \ String}, i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String},\
    \ doffs::Int64, src::Vector{Pair{String, String}}, soffs::Int64, n::Int64)\n \
    \     @ Base ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n\
    \    [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n  \
    \    @ ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n\
    \    [7] copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Pair{String,\
    \ String}})\n      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554\
    \ [inlined]\n   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpxw5c67i5.jl:20\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpxw5c67i5.jl:37 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpxw5c67i5.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpxw5c67i5.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{Pair{String, String}} at index [[1, -1]]\n  Stacktrace:\n   [1] throw_b"
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    _arr = filter(x -> x in 1:9, arr)\n    _arr = sort(_arr)\n    _arr = reverse(_arr)\n\
    \    _arr = [[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"][i] for i in _arr]\n    return _arr\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    if length(arr) ==\
    \ 1\n        if in(arr[1], 1:9)\n            return [str(arr[1])]\n        else\n\
    \            return []\n        end\n    end\n    arr2 = arr[in.(arr, 1:9)]\n\
    \    return sort(reverse(arr2))\nend\n@assert by_length([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\"]\n@assert by_length([-1, -2, -3, -4, -5, -6, -7, -8, -9]) ==\
    \ []\n@assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n@assert by_length([])\
    \ == []\n@assert by_length([1, -1, 55]) == [\"One\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n  [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \    @ Base ./array.jl:903\n  [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n    @ Base ./array.jl:253\n  [3]\
    \ unsafe_copyto!\n    @ ./array.jl:307 [inlined]\n  [4] _copyto_impl!\n    @ ./array.jl:331\
    \ [inlined]\n  [5] copyto!\n    @ ./array.jl:317 [inlined]\n  [6] copyto!\n  \
    \  @ ./array.jl:343 [inlined]\n  [7] copyto_axcheck!\n    @ ./abstractarray.jl:1104\
    \ [inlined]\n  [8] Vector{String}(x::Vector{Int64})\n    @ Base ./array.jl:563\n\
    \  [9] convert\n    @ ./array.jl:554 [inlined]\n [10] by_length(arr::Vector{Int64})\n\
    \    @ Main /tmp/tmp0zuak69l.jl:30\n [11] top-level scope\n    @ /tmp/tmp0zuak69l.jl:32\n\
    in expression starting at /tmp/tmp0zuak69l.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    d = Dict(1=>\"One\", 2=>\"Two\", 3=>\"Three\", 4=>\"Four\", 5=>\"Five\"\
    , 6=>\"Six\", 7=>\"Seven\", 8=>\"Eight\", 9=>\"Nine\")\n    a = sort(filter(x->x>0\
    \ && x<10, arr))\n    d[a]\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpa1behvl0.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpa1behvl0.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  KeyError: key [1, 1,\
    \ 2, 2, 3, 4, 5, 8] not found\n  Stacktrace:\n   [1] getindex(h::Dict{Int64, String},\
    \ key::Vector{Int64})\n     @ Base ./dict.jl:481\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpa1behvl0.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa1behvl0.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa1behvl0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpa1behvl0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  KeyError: key Int64[]\
    \ not found\n  Stacktrace:\n   [1] getindex(h::Dict{Int64, String}, key::Vector{Int64})\n\
    \     @ Base ./dict.jl:481\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpa1behvl0.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa1behvl0.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa1behvl0.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpa1behvl0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  KeyError: key [1] not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{Int64, String}, key::Vector{Int64})\n     @ Base ./dict.jl:481\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpa1behvl0.jl:21\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa1behvl0.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code here\n    println(\"hello\")\n    return [\"One\"]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpidxnhkfp.jl:25

    '
  stdout: "hello\ntest set: Test Failed at /tmp/tmpidxnhkfp.jl:28\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidxnhkfp.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidxnhkfp.jl:27\nhello\ntest set:\
    \ Test Failed at /tmp/tmpidxnhkfp.jl:29\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidxnhkfp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidxnhkfp.jl:27\nhello\nhello\n\
    test set: Test Failed at /tmp/tmpidxnhkfp.jl:31\n  Expression: candidate([1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidxnhkfp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidxnhkfp.jl:27\nhello\ntest set:\
    \ Test Failed at /tmp/tmpidxnhkfp.jl:32\n  Expression: candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidxnhkfp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # 1. Sort\n    sort!(arr)\n    # 2. Find numbers between 1 and 9 inclusive\n\
    \    new_arr = [el for el in arr if el < 10 && el > 0]\n    # 3. Reverse\n   \
    \ reverse!(new_arr)\n    # 4. Change each digit to its corresponding name from\
    \ 1 to 9\n    for (i, el) in enumerate(new_arr)\n        if (el == 1)\n      \
    \      new_arr[i] = \"One\"\n        elseif (el == 2)\n            new_arr[i]\
    \ = \"Two\"\n        elseif (el == 3)\n            new_arr[i] = \"Three\"\n  \
    \      elseif (el == 4)\n            new_arr[i] = \"Four\"\n        elseif (el\
    \ == 5)\n            new_arr[i] = \"Five\"\n        elseif (el == 6)\n       \
    \     new_arr[i] = \"Six\"\n        elseif (el == 7)\n            new_arr[i] =\
    \ \"Seven\"\n        elseif (el == 8)\n            new_arr[i] = \"Eight\"\n  \
    \      elseif (el == 9)\n            new_arr[i] = \"Nine\"\n        end\n    end\n\
    \    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpamdsi8u0.jl:51

    '
  stdout: "test set: Error During Test at /tmp/tmpamdsi8u0.jl:54\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpamdsi8u0.jl:42\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpamdsi8u0.jl:54 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpamdsi8u0.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpamdsi8u0.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpamdsi8u0.jl:28\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    v = [x for x in arr if (1 <= x <= 9)]\n    sort!(v)\n    reverse!(v)\n\
    \    v = [word(x) for x in v]\n    \n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppyzdb83f.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmppyzdb83f.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: word\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmppyzdb83f.jl:23\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmppyzdb83f.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmppyzdb83f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmppyzdb83f.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: word not defined\n  Stacktrace:\n\
    \   [1] (::var\"#2#4\")(x::Int64)\n     @ Main ./none:0\n   [2] iterate\n    \
    \ @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmppyzdb83f.jl:23\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmppyzdb83f.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmppyzdb83f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmppyzdb83f.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ word not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \   "
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    new_arr = sort(arr)\n    push!(new_arr, 0)\n    push!(new_arr, 0)\n  \
    \  new_arr = reverse(new_arr)\n    new_arr = [x for x in new_arr if x < 10 &&\
    \ x > 0]\n    for i = 1:length(new_arr)\n        if new_arr[i] == 1\n        \
    \    new_arr[i] = \"One\"\n        elseif new_arr[i] == 2\n            new_arr[i]\
    \ = \"Two\"\n        elseif new_arr[i] == 3\n            new_arr[i] = \"Three\"\
    \n        elseif new_arr[i] == 4\n            new_arr[i] = \"Four\"\n        elseif\
    \ new_arr[i] == 5\n            new_arr[i] = \"Five\"\n        elseif new_arr[i]\
    \ == 6\n            new_arr[i] = \"Six\"\n        elseif new_arr[i] == 7\n   \
    \         new_arr[i] = \"Seven\"\n        elseif new_arr[i] == 8\n           \
    \ new_arr[i] = \"Eight\"\n        elseif new_arr[i] == 9\n            new_arr[i]\
    \ = \"Nine\"\n        end\n    end\n    return new_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2jgq1w2t.jl:49

    '
  stdout: "test set: Error During Test at /tmp/tmp2jgq1w2t.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2jgq1w2t.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2jgq1w2t.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2jgq1w2t.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp2jgq1w2t.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2jgq1w2t.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n    return [numbers[x] for x in reverse(sort(filter(x\
    \ -> x >= 1 && x <= 9, arr))) ]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    res = []\n    for i in arr\n        if i > 0 && i < 10\n            push!(res,\
    \ i)\n        end\n    end\n    sort!(res)\n    reverse!(res)\n    for i in 1:length(res)\n\
    \        res[i] = number_to_name(res[i])\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplhptab8b.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmplhptab8b.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_to_name\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmplhptab8b.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplhptab8b.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplhptab8b.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplhptab8b.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number_to_name not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmplhptab8b.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplhptab8b.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplhptab8b.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplhptab8b.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ number_to_name not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmplhptab8b.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplhptab8b.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplhptab8b.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplhptab8b.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: number_to_"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Write your code here!\n    arr_filter = [i for i in arr if i > 0 &&\
    \ i < 10]\n    sort!(arr_filter)\n    reverse!(arr_filter)\n    for (i, number)\
    \ in enumerate(arr_filter)\n        arr_filter[i] = print_word(number)\n    end\n\
    \    return arr_filter\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpipr925z8.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpipr925z8.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: print_word\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpipr925z8.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpipr925z8.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpipr925z8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpipr925z8.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: print_word not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpipr925z8.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpipr925z8.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpipr925z8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpipr925z8.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ print_word not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpipr925z8.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpipr925z8.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpipr925z8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpipr925z8.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: print_word\
    \ not defined"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    res = []\n    for i in arr\n        if i>=1 && i<=9\n            push!(res,i)\n\
    \        end\n    end\n    sort!(res)\n    reverse!(res)\n    res = map(i->string(i),res)\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4fdqlqou.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp4fdqlqou.jl:35\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fdqlqou.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fdqlqou.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4fdqlqou.jl:37\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fdqlqou.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fdqlqou.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4fdqlqou.jl:38\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"3\", \"2\", \"1\"] == [\"Three\"\
    , \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fdqlqou.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fdqlqou.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4fdqlqou.jl:39\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fdqlqou.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Step 1: Sort the integers between 1-9\n    # Step 2: Reverse the resulting\
    \ vector\n    # Step 3: Replace each digit by the corresponding string\n    (1:9)[reverse(sort(arr[(1:9).==arr]))]\
    \ |>\n    x -> [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][x]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpip807m9v.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpip807m9v.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 9\
    \ and 8\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpip807m9v.jl:22\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpip807m9v.jl:30 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpip807m9v.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpip807m9v.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 9 and\
    \ 0\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpip807m9v.jl:22\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpip807m9v.jl:31 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    new_arr = sort(filter(is_valid, arr))\n    new_arr = reverse(new_arr)\n\
    \    new_arr = [string(i) for i in new_arr]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprav3xmh3.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmprav3xmh3.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: is_valid\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprav3xmh3.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprav3xmh3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprav3xmh3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprav3xmh3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: is_valid\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprav3xmh3.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprav3xmh3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprav3xmh3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprav3xmh3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: is_valid not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprav3xmh3.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprav3xmh3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprav3xmh3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprav3xmh3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ is_valid not defined\n  Stac"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return Vector{String}()\n    end\n    new_arr\
    \ = sort(filter(x -> x < 10 && x > 0, arr))\n    return reverse(map(i -> digits[i],\
    \ new_arr))\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpkffez2p3.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpkffez2p3.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching getindex(::typeof(digits), ::Int64)\n  Stacktrace:\n    [1] (::var\"\
    #2#4\")(i::Int64)\n      @ Main /tmp/tmpkffez2p3.jl:23\n    [2] iterate\n    \
    \  @ ./generator.jl:47 [inlined]\n    [3] _collect\n      @ ./array.jl:744 [inlined]\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpkffez2p3.jl:23\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpkffez2p3.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpkffez2p3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkffez2p3.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching getindex(::typeof(digits),\
    \ ::Int64)\n  Stacktrace:\n    [1] (::var\"#2#4\")(i::Int64)\n      @ Main /tmp/tmpkffez2p3.jl:23\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect\n    \
    \  @ ./array.jl:744 [inlined]\n    [4] collect_similar\n      @ ./array.jl:653\
    \ [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpkffez2p3.jl:23\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpkffez2p3.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpkffez2p3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkffez2p3.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  Metho"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # reverse it so that we can sort it\n    arr_rev = reverse(arr)\n    #\
    \ sort the elements\n    arr_sort = sort(arr_rev)\n    # check for negative numbers\n\
    \    for i in eachindex(arr_sort)\n        if arr_sort[i] < 0 \n            arr_sort[i]\
    \ = Int64(NaN)\n        end\n    end\n    # remove NaN values\n    arr_rm = filter(x\
    \ -> !isnan(x), arr_sort)\n    arr_final = []\n    # cover Int values with String\
    \ values\n    for i in eachindex(arr_rm)\n        if arr_rm[i] == 1\n        \
    \    push!(arr_final, \"One\")\n        elseif arr_rm[i] == 2\n            push!(arr_final,\
    \ \"Two\")\n        elseif arr_rm[i] == 3\n            push!(arr_final, \"Three\"\
    )\n        elseif arr_rm[i] == 4\n            push!(arr_final, \"Four\")\n   \
    \     elseif arr_rm[i] == 5\n            push!(arr_final, \"Five\")\n        elseif\
    \ arr_rm[i] == 6\n            push!(arr_final, \"Six\")\n        elseif arr_rm[i]\
    \ == 7\n            push!(arr_final, \"Seven\")\n        elseif arr_rm[i] == 8\n\
    \            push!(arr_final, \"Eight\")\n        elseif arr_rm[i] == 9\n    \
    \        push!(arr_final, \"Nine\")\n        end\n    end\n    return arr_final\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpd9_p_8jh.jl:58

    '
  stdout: "test set: Test Failed at /tmp/tmpd9_p_8jh.jl:61\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"One\", \"Two\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9_p_8jh.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9_p_8jh.jl:60\ntest set: Error\
    \ During Test at /tmp/tmpd9_p_8jh.jl:63\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  InexactError: Int64(NaN)\n  Stacktrace:\n\
    \   [1] Int64(x::Float64)\n     @ Base ./float.jl:812\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpd9_p_8jh.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd9_p_8jh.jl:63 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd9_p_8jh.jl:60\ntest set:\
    \ Error During Test at /tmp/tmpd9_p_8jh.jl:64\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  InexactError: Int64(NaN)\n\
    \  Stacktrace:\n   [1] Int64(x::Float64)\n     @ Base ./float.jl:812\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpd9_p_8jh.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd9_p_8jh.jl:64 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd9_p_8jh.jl:60\ntest set:\
    \ Test Failed at /tmp/tmpd9_p_8jh.jl:65\n  Expression: candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\n   Eva"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    temp = sort(arr[(arr .>= 1) .& (arr .<= 9)])\n    temp = reverse(temp)\n\
    \    temp = replace(temp, \"1\" => \"One\", \"2\" => \"Two\", \"3\" => \"Three\"\
    , \"4\" => \"Four\", \"5\" => \"Five\", \"6\" => \"Six\", \"7\" => \"Seven\",\
    \ \"8\" => \"Eight\", \"9\" => \"Nine\")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgx5lbrwh.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpgx5lbrwh.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpgx5lbrwh.jl:21\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpgx5lbrwh.jl:28 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpgx5lbrwh.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgx5lbrwh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1."
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the vector\n    arr = sort(arr)\n    # reverse the vector\n   \
    \ arr = reverse(arr)\n    # take out all negative numbers \n    arr = [if a >\
    \ 0 a else 0 for a in arr]\n    # convert each numbers to string\n    arr = [parse(Int64,\
    \ a) for a in arr]\n    # convert all digits to words\n    for i in 1:length(arr)\n\
    \        if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] ==\
    \ 2\n            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        else\n  \
    \          arr[i] = 0\n        end\n    end\n    # remove any zero\n    arr =\
    \ [if a != 0 a else \"\" for a in arr]\n    # remove duplicate\n    arr = filter(x\
    \ -> x != \"\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpgy868ard.jl:24 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgy868ard.jl:24\n\
    in expression starting at /tmp/tmpgy868ard.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    1 <= arr .<= 9 ? filter(x -> (1 <= x <= 9), arr) |> sort |> reverse |>\
    \ map(x -> number_to_string(x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpclmuzaz3.jl:20\nin expression starting at\
    \ /tmp/tmpclmuzaz3.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \"\"\"Sorting numbers in arr that are between 1 and 9 and returning \n\
    \    resulting vector of strings corresponding to the digits in reversed order.\n\
    \    \"\"\"\n    #sorting function\n    sort!(arr)\n    #creating empty vector\
    \ of strings with length equal to that of arr\n    new_arr = Vector{String}(undef,\
    \ length(arr))\n    #creating a dict that maps the digits 1 to 9 to their corresponding\
    \ string\n    num_to_word = Dict(1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4\
    \ => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9\
    \ => \"Nine\")\n    #for loop that puts the corresponding string of each digit\
    \ in arr in new_arr\n    for i in 1:length(arr)\n        if arr[i] in keys(num_to_word)\n\
    \            new_arr[i] = num_to_word[arr[i]]\n        end\n    end\n    #reversing\
    \ the vector\n    return reverse(new_arr)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpi9xr7ivj.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpi9xr7ivj.jl:44\n  Test threw exception\n\
    \  Expression: candidate([1, -1, 55]) == [\"One\"]\n  UndefRefError: access to\
    \ undefined reference\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861\
    \ [inlined]\n    [2] reverse(A::Vector{String}, start::Int64, stop::Int64)\n \
    \     @ Base ./array.jl:1726\n    [3] _reverse\n      @ ./array.jl:1738 [inlined]\n\
    \    [4] #reverse#99\n      @ ./array.jl:1737 [inlined]\n    [5] reverse\n   \
    \   @ ./array.jl:1737 [inlined]\n    [6] by_length(arr::Vector{Int64})\n     \
    \ @ Main /tmp/tmpi9xr7ivj.jl:35\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpi9xr7ivj.jl:44 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpi9xr7ivj.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpi9xr7ivj.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefRefError:\
    \ access to undefined reference\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861\
    \ [inlined]\n    [2] reverse(A::Vector{String}, start::Int64, stop::Int64)\n \
    \     @ Base ./array.jl:1726\n    [3] _reverse\n      @ ./array.jl:1738 [inlined]\n\
    \    [4] #reverse#99\n      @ ./array.jl:1737 [inlined]\n    [5] reverse\n   \
    \   @ ./array.jl:1737 [inlined]\n    [6] by_length(arr::Vector{Int64})\n     \
    \ @ Main /tmp/tmpi9xr7ivj.jl:35\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpi9xr7ivj.jl:45 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpi9xr7ivj.jl:41\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmphhvo02je.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmphhvo02je.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmphhvo02je.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphhvo02je.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphhvo02je.jl:25\ntest set:\
    \ Error During Test at /tmp/tmphhvo02je.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmphhvo02je.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    filt = filter(i -> i >= 1 && i <= 9, arr)\n    filt_sort = sort(filt)\n\
    \    filt_sort_rev = reverse(filt_sort)\n    dict = Dict(1 => \"One\", 2 => \"\
    Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\"\
    , 8 => \"Eight\", 9 => \"Nine\")\n    map(i -> dict[i], filt_sort_rev)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n   sorted = sort(filter(e -> e > 0 && e < 10, arr))\n   reversed = reverse(sorted)\n\
    \   mapped = map(e -> number_to_name(e), reversed)\n   return mapped\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp_bgm47te.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_bgm47te.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_to_name\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(e::Int64)\n      @ Main\
    \ /tmp/tmp_bgm47te.jl:21\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp_bgm47te.jl:21\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_bgm47te.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_bgm47te.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_bgm47te.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number_to_name not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(e::Int64)\n      @ Main /tmp/tmp_bgm47te.jl:21\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp_bgm47te.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_bgm47te.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_bgm47te.jl"
  timestamp: 1660009104
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    IntArray = Int[1,2,3,4,5,6,7,8,9]\n    result = String[ ]\n    for i in\
    \ arr\n        if i in IntArray\n            append!(result, string(i))\n    \
    \    end\n    end\n    reverse!(sort!(result))\n    for i in 1:length(result)\n\
    \        if result[i] == \"1\"\n            result[i] = \"One\"\n        elseif\
    \ result[i] == \"2\"\n            result[i] = \"Two\"\n        elseif result[i]\
    \ == \"3\"\n            result[i] = \"Three\"\n        elseif result[i] == \"\
    4\"\n            result[i] = \"Four\"\n        elseif result[i] == \"5\"\n   \
    \         result[i] = \"Five\"\n        elseif result[i] == \"6\"\n          \
    \  result[i] = \"Six\"\n        elseif result[i] == \"7\"\n            result[i]\
    \ = \"Seven\"\n        elseif result[i] == \"8\"\n            result[i] = \"Eight\"\
    \n        elseif result[i] == \"9\"\n            result[i] = \"Nine\"\n      \
    \  end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpl8xrppqq.jl:52

    '
  stdout: "test set: Error During Test at /tmp/tmpl8xrppqq.jl:55\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] _append!(a::Vector{String}, #unused#::Base.HasLength,\
    \ iter::String)\n     @ Base ./array.jl:1060\n   [3] append!\n     @ ./array.jl:1050\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpl8xrppqq.jl:23\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpl8xrppqq.jl:55 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpl8xrppqq.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpl8xrppqq.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] _ap"
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    pos_nums = [i for i in arr if i in 1:9]\n    reverse!(pos_nums)\n    pos_nums\
    \ = map(num2eng, pos_nums)\n    return pos_nums\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpfae1ckfd.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpfae1ckfd.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2eng\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfae1ckfd.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfae1ckfd.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfae1ckfd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfae1ckfd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: num2eng\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfae1ckfd.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfae1ckfd.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfae1ckfd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfae1ckfd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2eng not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpfae1ckfd.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfae1ckfd.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfae1ckfd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfae1ckfd.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num2eng not defined\n  Stacktrace:\n   [1] by_length(arr::Vect"
  timestamp: 1660009104
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector and reverse the values\n    arr = sort(arr, rev=true)\n\
    \    # Delete strange numbers \n    arr = [i for i in arr if i in 1:9]\n    #\
    \ Replace the index with its name\n    arr = [array_names[i] for i in arr]\n \
    \   return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp50tyn2ww.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp50tyn2ww.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: array_names\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(i::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp50tyn2ww.jl:24\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp50tyn2ww.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp50tyn2ww.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp50tyn2ww.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: array_names not defined\n\
    \  Stacktrace:\n   [1] (::var\"#2#4\")(i::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp50tyn2ww.jl:24\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp50tyn2ww.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp50tyn2ww.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp50tyn2ww.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ array_names not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(i::Int64)\n \
    \    @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"})\n     @ Base ./array.jl:724\n\
    \   [4] by_length(arr::Vector{Int64})\n  "
  timestamp: 1660009104
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    # initialization:\n    len_vec = length(arr)\n    res_vec = String[]\n\
    \    \n    # sort arr:\n    sort!(arr)\n    \n    # return an empty vector if\
    \ length of arr is equal to 0:\n    if len_vec == 0\n        return res_vec\n\
    \    end\n    \n    # remove values less than 1 or greater than 9:\n    while\
    \ arr[1] < 1 || arr[1] > 9\n        deleteat!(arr, 1)\n    end\n    \n    for\
    \ i in 1:len_vec\n        if arr[i] > 0 && arr[i] < 10\n            res_vec =\
    \ [res_vec; num2eng(arr[i])]\n        end\n    end\n    \n    return reverse(res_vec)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1ty4fpi5.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmp1ty4fpi5.jl:50\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2eng\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1ty4fpi5.jl:39\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ty4fpi5.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ty4fpi5.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp1ty4fpi5.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2eng not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp1ty4fpi5.jl:39\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ty4fpi5.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ty4fpi5.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp1ty4fpi5.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num2eng not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n \
    \    @ Main /tmp/tmp1ty4fpi5.jl:39\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ty4fpi5.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ty4fpi5.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp1ty4fpi5.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: num2eng\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vecto"
  timestamp: 1660009104
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmput8e3u96.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmput8e3u96.jl:26\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput8e3u96.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput8e3u96.jl:25\ntest set: Test\
    \ Failed at /tmp/tmput8e3u96.jl:28\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmput8e3u96.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmput8e3u96.jl:25\ntest set: Test Failed at /tmp/tmput8e3u96.jl:29\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ String[] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmput8e3u96.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmput8e3u96.jl:25\ntest set: Test Failed at /tmp/tmput8e3u96.jl:30\n\
    \  Expression: candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n   Evaluated:\
    \ String[] == [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmput8e3u96.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmput8e3u96.jl:25\nTest Summary: | Pass "
  timestamp: 1660009104
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Ignore number if it is smaller than 1 or greater than 9\n    temp_vec\
    \ = [ x for x in arr if x > 0 && x < 10 ]\n    # Sort the number\n    temp_vec\
    \ = sort(temp_vec)\n    # Initialize the string vec\n    str_vec = Vector{String}()\n\
    \    # Push the number to string vec by their names\n    for i in 1:length(temp_vec)\n\
    \        push!(str_vec, num2words(temp_vec[i]))\n    end\n    # Reverse the string\
    \ vec\n    return reverse(str_vec)\nend\nprintln(by_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3]))\nprintln(by_length([]))\nprintln(by_length([1, -1, 55]))\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: num2words not defined\nStacktrace:\n [1]\
    \ by_length(arr::Vector{Int64})\n   @ Main /tmp/tmppi0gy7bv.jl:27\n [2] top-level\
    \ scope\n   @ /tmp/tmppi0gy7bv.jl:32\nin expression starting at /tmp/tmppi0gy7bv.jl:32\n"
  stdout: ''
  timestamp: 1660009103
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_arr = sort(arr)\n    reversed_arr = reversed(sorted_arr)\n    result\
    \ = []\n    for i in reversed_arr\n        if i >= 1 && i <= 9\n            push!(result,\
    \ number2word(i))\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpnntboehp.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpnntboehp.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: reversed\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnntboehp.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnntboehp.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnntboehp.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpnntboehp.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: reversed\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnntboehp.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnntboehp.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnntboehp.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpnntboehp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: reversed not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpnntboehp.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnntboehp.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnntboehp.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpnntboehp.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ reversed not defined\n  Stacktrace:\n   [1] by_length(arr::"
  timestamp: 1660009104
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_arr = sort(arr)\n    between_1_9 = filter(x -> x in 1:9, sorted_arr)\n\
    \    reversed_arr = reverse(between_1_9)\n    maps = Dict(1 => \"One\", 2 => \"\
    Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\"\
    , 8 => \"Eight\", 9 => \"Nine\")\n    map(x -> maps[x], reversed_arr)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort(reverse(replace.(string.(filter(x -> 1 <= x <= 9, arr)), 1 => \"\
    One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\"\
    , 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\")))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp_nym9nst.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp_nym9nst.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching findnext(::Int64, ::String, ::Int64)\n  Closest candidates are:\n \
    \   findnext(!Matched::AbstractChar, ::AbstractString, ::Integer) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:322\n\
    \    findnext(!Matched::AbstractString, ::AbstractString, ::Integer) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:303\n\
    \    findnext(!Matched::Base.Fix2{<:Union{typeof(==), typeof(isequal)}, <:AbstractChar},\
    \ ::String, ::Integer) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:5\n\
    \    ...\n  Stacktrace:\n    [1] (::Base.var\"#420#423\"{String, Int64, Int64})(p::Int64)\n\
    \      @ Base ./strings/util.jl:544\n    [2] map\n      @ ./tuple.jl:224 [inlined]\n\
    \    [3] replace(::String, ::Pair{Int64, String}, ::Pair{Int64, String}, ::Pair{Int64,\
    \ String}, ::Pair{Int64, String}, ::Pair{Int64, String}, ::Pair{Int64, String},\
    \ ::Pair{Int64, String}, ::Pair{Int64, String}, ::Pair{Int64, String}; count::Int64)\n\
    \      @ Base ./strings/util.jl:543\n    [4] replace(::String, ::Pair{Int64, String},\
    \ ::Pair{Int64, String}, ::Pair{Int64, String}, ::Pair{Int64, String}, ::Pair{Int64,\
    \ String}, ::Pair{Int64, String}, ::Pair{Int64, String}, ::Pair{Int64, String},\
    \ ::Pair{Int64, String})\n      @ Base ./strings/util.jl:536\n    [5] _broadcast_getindex_evalf\n\
    \      @ ./broadcast.jl:670 [inlined]\n    [6] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [7] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [8] copy\n\
    \      @ ./broadcast.jl:899 [inlined]\n    [9] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp_nym9nst.jl:19\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp_nym9nst.jl:26 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/"
  timestamp: 1660009106
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    numbers = Array(String, length(arr))\n    for (i, a) in enumerate(arr)\n\
    \        if a < 1 || a > 9\n            continue\n        end\n        number\
    \ = a == 1 ? \"One\" : a == 2 ? \"Two\" : a == 3 ? \"Three\" : a == 4 ? \"Four\"\
    \ : a == 5 ? \"Five\" : a == 6 ? \"Six\" : a == 7 ? \"Seven\" : a == 8 ? \"Eight\"\
    \ : \"Nine\"\n        numbers[i] = number\n    end\n    return sort(numbers, rev=true)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpczg6u5h4.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpczg6u5h4.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching Array(::Type{String}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpczg6u5h4.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpczg6u5h4.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpczg6u5h4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpczg6u5h4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching Array(::Type{String}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpczg6u5h4.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpczg6u5h4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpczg6u5h4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpczg6u5h4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching Array(::Type{String},\
    \ ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearA"
  timestamp: 1660009105
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Here we prepare variables for our result array\n    arraySorted = sort(arr)\n\
    \    arraySortedReversed = reverse(arraySorted)\n    oneToNine = Array(String,length(arraySortedReversed))\n\
    \    # First we assign string values to those integers from 1 to 9\n    for (n,\
    \ value) in enumerate(arraySortedReversed)\n        if value == 1\n          \
    \  oneToNine[n] = \"One\"\n        elseif value == 2\n            oneToNine[n]\
    \ = \"Two\"\n        elseif value == 3\n            oneToNine[n] = \"Three\"\n\
    \        elseif value == 4\n            oneToNine[n] = \"Four\"\n        elseif\
    \ value == 5\n            oneToNine[n] = \"Five\"\n        elseif value == 6\n\
    \            oneToNine[n] = \"Six\"\n        elseif value == 7\n            oneToNine[n]\
    \ = \"Seven\"\n        elseif value == 8\n            oneToNine[n] = \"Eight\"\
    \n        elseif value == 9\n            oneToNine[n] = \"Nine\"\n        end\n\
    \    end\n    # If a value is not from 1 to 9, we exclude it from a result vector\n\
    \    oneToNine = filter(v -> v != \"nothing\", oneToNine)\n    return oneToNine\n\
    end\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: MethodError: no method matching Array(::Type{String},
    ::Int64)'
  stdout: ''
  timestamp: 1660009106
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # 0. Sort values\n    sort!(arr)\n    # 1. Filter between 1 and 9 inclusive\n\
    \    arr = arr[ arr .>= 1 .& arr .<= 9 ]\n    # 2. Reverse the array\n    reverse!(arr)\n\
    \    # 3. Replace each digit by its corresponding name from\n    #    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n    replace_digit(arr)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpfylrgdd4.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpfylrgdd4.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: replace_digit\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfylrgdd4.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfylrgdd4.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfylrgdd4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfylrgdd4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: replace_digit\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfylrgdd4.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfylrgdd4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfylrgdd4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfylrgdd4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: replace_digit not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpfylrgdd4.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfylrgdd4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfylrgdd4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfylrgdd4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ replace_digit not defined\n  Stacktrace:\n  "
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = filter(x -> x >= 1 && x <= 9, arr)\n    arr = sort(arr)\n    return\
    \ reverse(map(x -> [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"][x], arr))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Create an empty vector to store our results\n    results = []\n    for\
    \ i in arr\n        if i in 1:9\n            push!(results, digit_to_words(i))\n\
    \        end\n    end\n    return results\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplm7w0v7z.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmplm7w0v7z.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: digit_to_words\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmplm7w0v7z.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplm7w0v7z.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplm7w0v7z.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplm7w0v7z.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: digit_to_words not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmplm7w0v7z.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplm7w0v7z.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplm7w0v7z.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplm7w0v7z.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ digit_to_words not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmplm7w0v7z.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplm7w0v7z.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplm7w0v7z.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplm7w0v7z.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: digit_to_words\
    \ not defined\n  Stacktrace:"
  timestamp: 1660009104
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    # Get the right numbers\n\
    \    right_numbers = filter(arr) do x\n        x == 1 || x == 2 || x == 3 || x\
    \ == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9\n    end\n    # Get the\
    \ names\n    names = map(right_numbers) do x\n        if x == 1\n            \"\
    One\"\n        elseif x == 2\n            \"Two\"\n        elseif x == 3\n   \
    \         \"Three\"\n        elseif x == 4\n            \"Four\"\n        elseif\
    \ x == 5\n            \"Five\"\n        elseif x == 6\n            \"Six\"\n \
    \       elseif x == 7\n            \"Seven\"\n        elseif x == 8\n        \
    \    \"Eight\"\n        elseif x == 9\n            \"Nine\"\n        end\n   \
    \ end\n    names\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpll4xoy56.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpll4xoy56.jl:55\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Eight\", \"Two\", \"Three\"] == [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpll4xoy56.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpll4xoy56.jl:54\ntest set: Test Failed at /tmp/tmpll4xoy56.jl:58\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Three\", \"Two\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpll4xoy56.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpll4xoy56.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpll4xoy56.jl:59\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpll4xoy56.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpll4xoy56.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660009104
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # TODO: Fill in the missing code here.\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpz0rpvluy.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpz0rpvluy.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: result\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpz0rpvluy.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz0rpvluy.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz0rpvluy.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpz0rpvluy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: result\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpz0rpvluy.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz0rpvluy.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz0rpvluy.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpz0rpvluy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: result not defined\n \
    \ Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpz0rpvluy.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz0rpvluy.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz0rpvluy.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpz0rpvluy.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ result not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{I"
  timestamp: 1660009104
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    #sorting the array \n    sort!(arr)\n    #filtering the array\n    arr\
    \ = filter(x -> x < 10 && x > 0, arr)\n    result = Vector{String}()\n    #dictionary\
    \ of numbers\n    num_dict = Dict(\"One\" => 1, \"Two\" => 2, \"Three\" => 3,\
    \ \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7, \"Eight\" => 8,\
    \ \"Nine\" => 9)\n    #replace numbers with their corresponding names\n    for\
    \ x in 1:length(arr)\n        for (k,v) in num_dict\n            if arr[x] ==\
    \ v\n                push!(result, k)\n            end\n        end\n    end\n\
    \    #reverse the resulting vector\n    reverse!(result)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    keep(n -> n < 10 && n > 0, arr) |> sort |> reverse |> map(Int64 -> string(Int64))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp0_g384r_.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp0_g384r_.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: keep\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0_g384r_.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_g384r_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_g384r_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp0_g384r_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: keep not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp0_g384r_.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_g384r_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_g384r_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp0_g384r_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: keep not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp0_g384r_.jl:19\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_g384r_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_g384r_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp0_g384r_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ keep not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n "
  timestamp: 1660009104
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # The vector of numbers between 1 and 9 inclusive\n    valid_numbers =\
    \ 1:9\n    filter!(x -> x in valid_numbers, arr)\n    reverse!(arr)\n    for i\
    \ in 1:length(arr)\n        arr[i] = convert(String, arr[i])\n    end\n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmphd3naar8.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmphd3naar8.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmphd3naar8.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphd3naar8.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphd3naar8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphd3naar8.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmphd3naar8.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphd3naar8.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/"
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    r = Vector{String}()\n    x = sort([a for a in arr if a > 0 && a < 10])\n\
    \    x = reverse(x)\n    r = replace.(x, [1 => \"One\", 2 => \"Two\", 3 => \"\
    Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\"\
    , 9 => \"Nine\"])\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmporfkpb6z.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmporfkpb6z.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 8\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmporfkpb6z.jl:22\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmporfkpb6z.jl:30 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmporfkpb6z.jl:29\ntest set:\
    \ Error During Test at /tmp/tmporfkpb6z.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 0 and\
    \ 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmporfkpb6z.jl:22\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmporfkpb6z.jl:31 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n  "
  timestamp: 1660009106
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    not_numbers = [item for item in arr if item < 1 || item > 9]\n    #removes\
    \ the numbers that are not between 1 and 9\n    [deleteat!(arr, findall(arr .==\
    \ item)) for item in not_numbers]\n    sort!(arr)\n    reverse!(arr)\n    numbers\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    numbers_by_length = [numbers[item] for item in arr]\n    return\
    \ numbers_by_length\nend\nprintln(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprintln(by_length([]))\n\
    println(by_length([1, -1, 55]))\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: MethodError: no method matching by_length(::'
  stdout: '["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]

    '
  timestamp: 1660009107
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    #sort digits\n    sorted_arr = sort(arr)\n    #get rid of the ones that\
    \ are not between 1 and 9 inclusive\n    return reverse(resolve_names(filter(x\
    \ -> x <= 9 && x >= 1, sorted_arr)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp7mimgdao.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp7mimgdao.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: resolve_names\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7mimgdao.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7mimgdao.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7mimgdao.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp7mimgdao.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: resolve_names\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7mimgdao.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7mimgdao.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7mimgdao.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp7mimgdao.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: resolve_names not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp7mimgdao.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7mimgdao.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7mimgdao.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp7mimgdao.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ resolve_names not defined\n  Stacktrace:\n  "
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # your code goes here\n    sort!(arr)\n    #arr2 = reverse(arr)\n    arr\
    \ = reverse(arr)\n    arr3 = []\n    for x in arr\n        if x==1\n         \
    \   push!(arr3, \"One\")\n        elseif x==2\n            push!(arr3, \"Two\"\
    )\n        elseif x==3\n            push!(arr3, \"Three\")\n        elseif x==4\n\
    \            push!(arr3, \"Four\")\n        elseif x==5\n            push!(arr3,\
    \ \"Five\")\n        elseif x==6\n            push!(arr3, \"Six\")\n        elseif\
    \ x==7\n            push!(arr3, \"Seven\")\n        elseif x==8\n            push!(arr3,\
    \ \"Eight\")\n        elseif x==9\n            push!(arr3, \"Nine\")\n       \
    \ end\n    end\n    return arr3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return reverse(sort(map(num -> if num == 0 num = \"Zero\" elseif num ==\
    \ 1 num = \"One\" elseif num == 2 num = \"Two\" elseif num == 3 num = \"Three\"\
    \ elseif num == 4 num = \"Four\" elseif num == 5 num = \"Five\" elseif num ==\
    \ 6 num = \"Six\" elseif num == 7 num = \"Seven\" elseif num == 8 num = \"Eight\"\
    \ elseif num == 9 num = \"Nine\" end, filter(x -> x <= 9 && x >= 1, arr))))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2xsxfmut.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp2xsxfmut.jl:26\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"Two\", \"Three\", \"One\"\
    , \"One\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2xsxfmut.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2xsxfmut.jl:25\ntest set: Test Failed at /tmp/tmp2xsxfmut.jl:29\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"Two\", \"Three\", \"One\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2xsxfmut.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2xsxfmut.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp2xsxfmut.jl:30\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2xsxfmut.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2xsxfmut.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    SortedStrings = []\n    for number in arr\n        if number in 1:9\n\
    \            push!(SortedStrings, get_str_word(number))\n        end\n    end\n\
    \    reverse(SortedStrings)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpfaf0rqup.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpfaf0rqup.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: get_str_word\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfaf0rqup.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfaf0rqup.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfaf0rqup.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpfaf0rqup.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: get_str_word not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpfaf0rqup.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfaf0rqup.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfaf0rqup.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpfaf0rqup.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ get_str_word not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpfaf0rqup.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfaf0rqup.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfaf0rqup.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpfaf0rqup.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: get_str_word\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660009106
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return reverse(sort(filter(x -> x in 1:9, arr))).collect(i -> string(i))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2nsj4gxi.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp2nsj4gxi.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ collect\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp2nsj4gxi.jl:19\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2nsj4gxi.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2nsj4gxi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2nsj4gxi.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ collect\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp2nsj4gxi.jl:19\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2nsj4gxi.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2nsj4gxi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2nsj4gxi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field collect\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp2nsj4gxi.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2nsj4gxi.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2nsj4gxi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2nsj4gxi.jl:29\n  Test threw exception\n  Exp"
  timestamp: 1660009106
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmphhvo02je.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmphhvo02je.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmphhvo02je.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphhvo02je.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphhvo02je.jl:25\ntest set:\
    \ Error During Test at /tmp/tmphhvo02je.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmphhvo02je.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr2 = [x for x in arr if (1<=x<=9)]\n    sort!(arr2)\n    reverse!(arr2)\n\
    \    d = Dict(\"One\"=>1, \"Two\"=>2, \"Three\"=>3, \"Four\"=>4, \"Five\"=>5,\
    \ \"Six\"=>6, \"Seven\"=>7, \"Eight\"=>8, \"Nine\"=>9)\n    return reverse([get(d,\
    \ k, 0) for k in keys(d) for v in arr2 if v == get(d, k, 0)])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmph0pyq3xz.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmph0pyq3xz.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmph0pyq3xz.jl:23\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmph0pyq3xz.jl:30 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmph0pyq3xz.jl:29\ntest set:\
    \ Error During Test at /tmp/tmph0pyq3xz.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essen"
  timestamp: 1660009108
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n   \n    # filter only numbers between 1 and 9 inclusive\n    arr = filter(x\
    \ -> x>=1 && x<=9, arr)\n    \n    # return an empty vector if the filtered vector\
    \ is empty\n    if isempty(arr)\n        return []\n    end\n    \n    # sorts\
    \ the numbers in descending order\n    sort!(arr, rev=true)\n    \n    # replace\
    \ each digit by its corresponding name\n    for i in 1:length(arr)\n        if\
    \ arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] == 2\n    \
    \        arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i] = \"\
    Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n        elseif\
    \ arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i] == 6\n   \
    \         arr[i] = \"Six\"\n        elseif arr[i] == 7\n            arr[i] = \"\
    Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\n        elseif\
    \ arr[i] == 9\n            arr[i] = \"Nine\"\n        end\n    end\n    \n   \
    \ return arr\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpcivn6rnv.jl:59

    '
  stdout: "test set: Error During Test at /tmp/tmpcivn6rnv.jl:62\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcivn6rnv.jl:48\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcivn6rnv.jl:62 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcivn6rnv.jl:61\ntest set:\
    \ Error During Test at /tmp/tmpcivn6rnv.jl:64\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcivn6rnv.jl:34\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcivn6rnv.jl:6"
  timestamp: 1660009108
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    list_of_numbers = filter(x -> x in 1:9, arr)\n    sorted_list =\
    \ sort(list_of_numbers)\n    reversed_list = reverse(sorted_list)\n    \n    names\
    \ = []\n    for number in reversed_list\n        name = num2name(number)\n   \
    \     push!(names, name)\n    end\n    \n    return names\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpy4ptmwy7.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpy4ptmwy7.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2name\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy4ptmwy7.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4ptmwy7.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy4ptmwy7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpy4ptmwy7.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2name not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpy4ptmwy7.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4ptmwy7.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy4ptmwy7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpy4ptmwy7.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num2name not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpy4ptmwy7.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4ptmwy7.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy4ptmwy7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpy4ptmwy7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: num2name\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::V"
  timestamp: 1660009108
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    s = []\n    for i in arr\n        if i > 0 && i < 10\n            push!(s,\
    \ i)\n        end\n    end\n    s = sort(s)\n    s = reverse(s)\n    for i in\
    \ 1:length(s)\n        if s[i] == 1\n            s[i] = \"One\"\n        elseif\
    \ s[i] == 2\n            s[i] = \"Two\"\n        elseif s[i] == 3\n          \
    \  s[i] = \"Three\"\n        elseif s[i] == 4\n            s[i] = \"Four\"\n \
    \       elseif s[i] == 5\n            s[i] = \"Five\"\n        elseif s[i] ==\
    \ 6\n            s[i] = \"Six\"\n        elseif s[i] == 7\n            s[i] =\
    \ \"Seven\"\n        elseif s[i] == 8\n            s[i] = \"Eight\"\n        elseif\
    \ s[i] == 9\n            s[i] = \"Nine\"\n        end\n    end\n    return s\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sorting the array in ascending order\n    sorted_arr = sort(arr)\n \
    \   # Filter only elements from 1 to 9\n    filtered_arr = filter(x -> 1 <= x\
    \ <= 9, sorted_arr)\n    # Reverse the array\n    reversed_arr = reverse(filtered_arr)\n\
    \    # Return an array of strings \n    return map(x -> [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x], reversed_arr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    arr = reverse(arr)\n    for i in 1:length(arr)\n\
    \        if arr[i] > 9 || arr[i] < 1\n            arr[i] = 0\n        end\n  \
    \  end\n    arr = filter(x -> x != 0, arr)\n    return [word(arr[i]) for i in\
    \ 1:length(arr)]\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpdpuidfv7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpdpuidfv7.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: word\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(i::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpdpuidfv7.jl:27\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpdpuidfv7.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpdpuidfv7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpdpuidfv7.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: word not defined\n  Stacktrace:\n\
    \   [1] (::var\"#2#4\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n    \
    \ @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpdpuidfv7.jl:27\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpdpuidfv7.jl:36 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpdpuidfv7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpdpuidfv7.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ word not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(i::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /t"
  timestamp: 1660009108
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    #sort, reverse and remove duplicates.\n    aux = unique(reverse(sort(arr[arr\
    \ .>= 1 .& arr .<= 9])))\n    #return vector of strings with the name of each\
    \ number.\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]\n    return names[aux]\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpc90z40c7.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc90z40c7.jl:31\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"One\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc90z40c7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc90z40c7.jl:30\ntest set: Error\
    \ During Test at /tmp/tmpc90z40c7.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [[55, 1]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{String},\
    \ I::Tuple{Vector{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpc90z40c7.jl:23\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpc90z40c7.jl:33 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpc90z40c7.jl:30\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    3     1      1      5\n"
  timestamp: 1660009109
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    min_int = 1\n    max_int = 9\n    arr = filter(x -> isless(min_int, x)\
    \ && isless(x, max_int + 1), arr)\n    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    return map(x -> numbers[x], arr)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpn5a5dgbs.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpn5a5dgbs.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: numbers\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmpn5a5dgbs.jl:24\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpn5a5dgbs.jl:24\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpn5a5dgbs.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpn5a5dgbs.jl:30\ntest set:\
    \ Test Failed at /tmp/tmpn5a5dgbs.jl:33\n  Expression: candidate([1, -1, 55])\
    \ == [\"One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn5a5dgbs.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpn5a5dgbs.jl:30\ntest set: Error During Test\
    \ at /tmp/tmpn5a5dgbs.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError: numbers not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmpn5a5dgbs.jl:24\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n  "
  timestamp: 1660009108
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  if length(arr) == 0\n    return []\n  end\n  arr = sort(arr[arr .>= 1])\n\
    \  arr = sort(arr[arr .<= 9])\n  arr = reverse(arr)\n  res = []\n  for i = 1:length(arr)\n\
    \    if arr[i] == 1\n      push!(res, \"One\")\n    elseif arr[i] == 2\n     \
    \ push!(res, \"Two\")\n    elseif arr[i] == 3\n      push!(res, \"Three\")\n \
    \   elseif arr[i] == 4\n      push!(res, \"Four\")\n    elseif arr[i] == 5\n \
    \     push!(res, \"Five\")\n    elseif arr[i] == 6\n      push!(res, \"Six\")\n\
    \    elseif arr[i] == 7\n      push!(res, \"Seven\")\n    elseif arr[i] == 8\n\
    \      push!(res, \"Eight\")\n    elseif arr[i] == 9\n      push!(res, \"Nine\"\
    )\n    end\n  end\n  return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n    str_arr = Vector{String}()\n    for i in arr\n\
    \        if 1<=i<=9\n            push!(str_arr, numbers[i])\n        end\n   \
    \ end\n    return sort(str_arr, rev=true)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnqzd4jii.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpnqzd4jii.jl:33\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"Two\", \"Three\", \"One\"\
    , \"One\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnqzd4jii.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnqzd4jii.jl:32\ntest set: Test Failed at /tmp/tmpnqzd4jii.jl:36\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"Two\", \"Three\", \"One\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnqzd4jii.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnqzd4jii.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnqzd4jii.jl:37\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnqzd4jii.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnqzd4jii.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660009107
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    arr = sort(arr)\n    # Get the length of the vector\n\
    \    len = length(arr)\n    # Initialize result to an empty vector with length\
    \ len\n    result = Array{String}(len)\n    # Reverse the vector\n    arr = reverse(arr)\n\
    \    # Iterate through the vector \n    for i in 1:len\n        # Check if the\
    \ digit is between 1 and 9\n        if arr[i] > 0 && arr[i] < 10\n           \
    \ # Check if the digit is 1\n            if arr[i] == 1\n                result[i]\
    \ = \"One\"\n            # Check if the digit is 2\n            elseif arr[i]\
    \ == 2\n                result[i] = \"Two\"\n            # Check if the digit\
    \ is 3\n            elseif arr[i] == 3\n                result[i] = \"Three\"\n\
    \            # Check if the digit is 4\n            elseif arr[i] == 4\n     \
    \           result[i] = \"Four\"\n            # Check if the digit is 5\n    \
    \        elseif arr[i] == 5\n                result[i] = \"Five\"\n          \
    \  # Check if the digit is 6\n            elseif arr[i] == 6\n               \
    \ result[i] = \"Six\"\n            # Check if the digit is 7\n            elseif\
    \ arr[i] == 7\n                result[i] = \"Seven\"\n            # Check if the\
    \ digit is 8\n            elseif arr[i] == 8\n                result[i] = \"Eight\"\
    \n            # Check if the digit is 9\n            elseif arr[i] == 9\n    \
    \            result[i] = \"Nine\"\n            end\n        end\n    end\n   \
    \ # Return the result vector\n    return result\nend\nby_length([1, -1, 55])\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: MethodError: no method matching (Array{String})(::Int64)'
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_arr = sort(arr)\n    if length(sorted_arr) == 0\n        return\
    \ []\n    end\n    reversed_arr = reverse(sorted_arr)\n    new_arr = []\n    for\
    \ i = 1:length(reversed_arr)\n        if reversed_arr[i] == 1\n            push!(new_arr,\
    \ \"One\")\n        elseif reversed_arr[i] == 2\n            push!(new_arr, \"\
    Two\")\n        elseif reversed_arr[i] == 3\n            push!(new_arr, \"Three\"\
    )\n        elseif reversed_arr[i] == 4\n            push!(new_arr, \"Four\")\n\
    \        elseif reversed_arr[i] == 5\n            push!(new_arr, \"Five\")\n \
    \       elseif reversed_arr[i] == 6\n            push!(new_arr, \"Six\")\n   \
    \     elseif reversed_arr[i] == 7\n            push!(new_arr, \"Seven\")\n   \
    \     elseif reversed_arr[i] == 8\n            push!(new_arr, \"Eight\")\n   \
    \     elseif reversed_arr[i] == 9\n            push!(new_arr, \"Nine\")\n    \
    \    end\n    end\n    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    numbers = Dict(1=>\"One\", 2=>\"Two\", 3=>\"Three\", 4=>\"Four\", 5=>\"\
    Five\", 6=>\"Six\", 7=>\"Seven\", 8=>\"Eight\", 9=>\"Nine\")\n    # Filter by\
    \ 1 to 9 inclusive\n    arr = [numbers[x] for x in arr if 1 <= x <= 9]\n    #\
    \ Sort\n    sort!(arr)\n    # Reverse\n    reverse!(arr)\n    return arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk4t8belx.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpk4t8belx.jl:33\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Two\", \"Two\", \"Three\", \"One\"\
    , \"One\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk4t8belx.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpk4t8belx.jl:32\ntest set: Test Failed at /tmp/tmpk4t8belx.jl:36\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"Two\", \"Three\", \"One\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4t8belx.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4t8belx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpk4t8belx.jl:37\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Nine\", \"Four\", \"Eight\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4t8belx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4t8belx.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660009108
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return [digit_to_name(x) for x in reverse(sort(filter(x -> x in 1:9, arr)))]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmps4fjuohz.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmps4fjuohz.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: digit_to_name\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\")(x::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#3\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmps4fjuohz.jl:19\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmps4fjuohz.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmps4fjuohz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmps4fjuohz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: digit_to_name not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#3\")(x::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#3\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmps4fjuohz.jl:19\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmps4fjuohz.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmps4fjuohz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmps4fjuohz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ digit_to_name not defined\n  Stacktrace:\n   [1] (::var\"#1#3\")(x::Int64)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{Int64}, var\"#1#3\"})\n     @ Base ./array.jl:724\n\
    \   [4] by_length(arr::Vector{Int6"
  timestamp: 1660009108
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # 1-9 inclusive\n    if length(arr) == 0\n        return []\n    end\n\
    \    # replace each digit by its corresponding name\n    # sort, reverse\n   \
    \ return reverse(sort(map(x -> Int(String(x)), arr[(arr .>= 1) .& (arr .<= 9)])))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpuh4zwcnu.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpuh4zwcnu.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n    ...\n \
    \ Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpuh4zwcnu.jl:25\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect\n    \
    \  @ ./array.jl:744 [inlined]\n    [4] collect_similar\n      @ ./array.jl:653\
    \ [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpuh4zwcnu.jl:25\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpuh4zwcnu.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpuh4zwcnu.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpuh4zwcnu.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpuh4zwcnu.jl:25\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect\n    \
    \  @ ./array.jl:744 [inlined]\n    [4] collect_similar\n      @ ./array.jl:653\
    \ [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n   "
  timestamp: 1660009109
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    # check if array is empty\n    if isempty(arr)\n        return arr\n\
    \    end\n    \n    # sort the array\n    sort!(arr)\n    \n    # get rid of the\
    \ unwanted numbers\n    arr = [x for x in arr if x >= 1 && x <= 9]\n    \n   \
    \ # reverse the array\n    reverse!(arr)\n    \n    # change the numbers to strings\n\
    \    arr = [replace(x, \"1\" => \"One\", \"2\" => \"Two\", \"3\" => \"Three\"\
    , \"4\" => \"Four\", \"5\" => \"Five\", \"6\" => \"Six\", \"7\" => \"Seven\",\
    \ \"8\" => \"Eight\", \"9\" => \"Nine\") for x in arr]\n    \n    return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2gpxt2bp.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmp2gpxt2bp.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching similar(::Int64, ::Type{Any})\n  Closest candidates are:\n    similar(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ var\"#s861\"}, LinearAlgebra.Transpose{T, var\"#s861\"}} where {T, var\"#s861\"\
    <:(AbstractVector)}, ::Type{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:206\n\
    \    similar(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}, ::Type{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:210\n\
    \    similar(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}, ::Type{T}, !Matched::Tuple{Vararg{Int64, N}}) where {T, N}\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:211\n\
    \    ...\n  Stacktrace:\n    [1] _similar_or_copy(x::Int64, #unused#::Type{Any})\n\
    \      @ Base ./set.jl:455\n    [2] replace(::Int64, ::Pair{String, String}, ::Vararg{Pair{String,\
    \ String}}; count::Nothing)\n      @ Base ./set.jl:573\n    [3] replace(::Int64,\
    \ ::Pair{String, String}, ::Pair{String, String}, ::Pair{String, String}, ::Vararg{Pair{String,\
    \ String}})\n      @ Base ./set.jl:570\n    [4] (::var\"#2#4\")(x::Int64)\n  \
    \    @ Main ./none:0\n    [5] iterate\n      @ ./generator.jl:47 [inlined]\n \
    \   [6] collect\n      @ ./array.jl:724 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp2gpxt2bp.jl:35\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp2gpxt2bp.jl:44 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp2gpxt2bp.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp2gpxt2bp.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55])"
  timestamp: 1660009110
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr[arr .\u2208 1:9])\n    return reverse(replace.(string.(arr)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpkfgfrvnh.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpkfgfrvnh.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 8\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpkfgfrvnh.jl:19\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpkfgfrvnh.jl:27 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpkfgfrvnh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpkfgfrvnh.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 0 and\
    \ 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpkfgfrvnh.jl:19\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpkfgfrvnh.jl:28 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n  "
  timestamp: 1660009109
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    arr = reverse(arr)\n    rarr = String[]\n    for\
    \ i in arr\n        if i >= 1 && i <= 9\n            if i == 1\n             \
    \   push!(rarr, \"One\")\n            elseif i == 2\n                push!(rarr,\
    \ \"Two\")\n            elseif i == 3\n                push!(rarr, \"Three\")\n\
    \            elseif i == 4\n                push!(rarr, \"Four\")\n          \
    \  elseif i == 5\n                push!(rarr, \"Five\")\n            elseif i\
    \ == 6\n                push!(rarr, \"Six\")\n            elseif i == 7\n    \
    \            push!(rarr, \"Seven\")\n            elseif i == 8\n             \
    \   push!(rarr, \"Eight\")\n            elseif i == 9\n                push!(rarr,\
    \ \"Nine\")\n            end\n        end\n    end\n    return rarr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    # If the vector is empty, return an empty vector\n    if isempty(arr)\n\
    \        arr_modified = []\n    else\n        # Sort the integers that are between\
    \ 1 and 9 inclusive \n        arr_modified = sort(arr[arr .\u2208 1:9])\n    \
    \    # Reverse the resulting vector\n        arr_modified = reverse(arr_modified)\n\
    \        # Replace each digit by its corresponding name\n        digit_names =\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n        arr_modified = digit_names[arr_modified]\n    end\n    \n\
    \    return arr_modified\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpncmm52v7.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpncmm52v7.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 8\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpncmm52v7.jl:25\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpncmm52v7.jl:40 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpncmm52v7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpncmm52v7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  DimensionMismatch(\"arrays could not\
    \ be broadcast to a common size; got a dimension with lengths 3 and 9\")\n  Stacktrace:\n\
    \    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n    [2] _bcs\n      @ ./broadcast.jl:510\
    \ [inlined]\n    [3] broadcast_shape\n      @ ./broadcast.jl:504 [inlined]\n \
    \   [4] combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [5] instantiate\n\
    \      @ ./broadcast.jl:281 [inlined]\n    [6] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [7] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpncmm52v7.jl:25\n\
    \    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpncmm52v7.jl:42 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpncm"
  timestamp: 1660009109
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # each group has 1..9.\n    # sort each group.\n    # reverse each group.\n\
    \    # map each group to strings.\n    sort_reverse_strings = [ \"Nine\", \"Eight\"\
    , \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\" ]\n    sort_reverse_ints\
    \ = sort(reverse(1:9))\n    for i in eachindex(arr)\n        index = findfirst(arr[i],\
    \ sort_reverse_ints)\n        arr[i] = sort_reverse_strings[index]\n    end\n\
    \    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpnofbvdfm.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpnofbvdfm.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching findfirst(::Int64, ::StepRange{Int64, Int64})\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Union{Base.Fix2{typeof(==), T}, Base.Fix2{typeof(isequal),\
    \ T}}, ::StepRange{T, S}) where {T, S} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2011\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    ...\n \
    \ Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpnofbvdfm.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnofbvdfm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnofbvdfm.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpnofbvdfm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching findfirst(::Int64,\
    \ ::StepRange{Int64, Int64})\n  Closest candidates are:\n    findfirst(!Matched::Union{Base.Fix2{typeof(==),\
    \ T}, Base.Fix2{typeof(isequal), T}}, ::StepRange{T, S}) where {T, S} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2011\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    ...\n \
    \ Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpnofbvdfm.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnofbvdfm.jl:38 [inlined]\n\
    \   [4] macro e"
  timestamp: 1660009110
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    newArr = unique(sort(filter(x -> (x > 0 && x < 10), arr)))\n    return\
    \ reverse(map(convert, newArr))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpev3tkda5.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpev3tkda5.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching convert(::Int64)\n  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [2] _collect\n     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n\
    \     @ ./array.jl:653 [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n\
    \   [5] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpev3tkda5.jl:20\n  \
    \ [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpev3tkda5.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpev3tkda5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpev3tkda5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching convert(::Int64)\n\
    \  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n   [2] _collect\n\
    \     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n     @ ./array.jl:653\
    \ [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n   [5] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpev3tkda5.jl:20\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpev3tkda5.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpev3tkda5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpev3tkda5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: no\
    \ method matching convert(::Int64)\n  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [2] _collect\n     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n\
    \     @ ./array.jl:653 [inlined]\n   [4] map\n     @ ."
  timestamp: 1660009110
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted = sort(arr)\n    reversed = reverse(sorted)\n    numbers = []\n\
    \    for number in reversed\n        if 1 <= number <= 9\n            push!(numbers,\
    \ number)\n        end\n    end\n    numbers_names = []\n    for i in numbers\n\
    \        if i == 1\n            push!(numbers_names, \"One\")\n        elseif\
    \ i == 2\n            push!(numbers_names, \"Two\")\n        elseif i == 3\n \
    \           push!(numbers_names, \"Three\")\n        elseif i == 4\n         \
    \   push!(numbers_names, \"Four\")\n        elseif i == 5\n            push!(numbers_names,\
    \ \"Five\")\n        elseif i == 6\n            push!(numbers_names, \"Six\")\n\
    \        elseif i == 7\n            push!(numbers_names, \"Seven\")\n        elseif\
    \ i == 8\n            push!(numbers_names, \"Eight\")\n        elseif i == 9\n\
    \            push!(numbers_names, \"Nine\")\n        end\n    end\n    return\
    \ numbers_names\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009107
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    #return [\"One\"]\n    new = sort(arr)\n    new = reverse(new)\n    len\
    \ = length(new)\n    for i in 1:len\n        for j in 1:9\n            if new[i]\
    \ == j\n                new[i] = i+9*(j-1)\n            end\n        end\n   \
    \ end\n    #println(new)\n    dict = [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    #dict[findfirst(x->x==1,\
    \ new)]\n    for i in 1:len\n        if new[i] > 0\n            new[i] = dict[new[i]]\n\
    \        end\n    end\n    return new\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgyp5rmh7.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpgyp5rmh7.jl:45\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [64]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpgyp5rmh7.jl:35\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgyp5rmh7.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgyp5rmh7.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpgyp5rmh7.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [55]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgyp5rmh7.jl:35\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgyp5rmh7.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgyp5rmh7.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpgyp5rmh7.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [19]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpgyp5rmh7.jl:35\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgyp5rmh7.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n"
  timestamp: 1660009109
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Select only elements that are between 1 and 9\n    # sort\n    # reverse\n\
    \    # and finally map the numbers to their corresponding string names\n    return\
    \ reverse(sort(filter(i -> i >= 1 && i <= 9, arr)))\n        |> map(i -> [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][i])\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|>\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdjf_ptc.jl:24\nin expression starting at\
    \ /tmp/tmpwdjf_ptc.jl:24\n"
  stdout: ''
  timestamp: 1660009107
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    n = length(arr)\n    for i in 1:n\n        for j in 1:n\n            if\
    \ arr[i] < arr[j]\n                arr[i], arr[j] = arr[j], arr[i]\n         \
    \   end\n        end\n    end\n    res = String[]\n    for i in 1:n\n        if\
    \ (arr[i]>=1) & (arr[i]<=9)\n            push!(res, num2digits(arr[i]))\n    \
    \    end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppdl7qmna.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmppdl7qmna.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2digits\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmppdl7qmna.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppdl7qmna.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppdl7qmna.jl:39\ntest set:\
    \ Error During Test at /tmp/tmppdl7qmna.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2digits not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmppdl7qmna.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppdl7qmna.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppdl7qmna.jl:39\ntest set:\
    \ Error During Test at /tmp/tmppdl7qmna.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num2digits not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmppdl7qmna.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppdl7qmna.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppdl7qmna.jl:39\ntest set:\
    \ Error During Test at /tmp/tmppdl7qmna.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: num2digits\
    \ not defined\n  Stacktrace:\n   [1] by_lengt"
  timestamp: 1660009109
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n   # Get the subvector containing digits 1-9\n   nums = [0 for i in 1:9]\n\
    \   for i in arr\n        if 1 <= i <= 9\n            nums[i] += 1\n        end\n\
    \    end\n    \n    # Create the map of words\n    dict = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n\
    \    # Put the words in the dictionary in reverse order\n    words = []\n    for\
    \ i in 1:9\n        for j in 1:nums[i]\n            push!(words, dict[i])\n  \
    \      end\n    end\n    \n    return words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvrpdtqza.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpvrpdtqza.jl:45\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"One\", \"Two\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvrpdtqza.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvrpdtqza.jl:44\ntest set: Test Failed at /tmp/tmpvrpdtqza.jl:48\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Two\", \"Three\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrpdtqza.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrpdtqza.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpvrpdtqza.jl:49\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Four\", \"Eight\", \"Nine\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrpdtqza.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrpdtqza.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660009108
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Your code here ...\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpnvs2pbl1.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpnvs2pbl1.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpnvs2pbl1.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnvs2pbl1.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnvs2pbl1.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnvs2pbl1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpnvs2pbl1.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1660009111
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort!(arr,lt=1)\n    reverse!(arr)\n    newArr = []\n    for i in 1:length(arr)\n\
    \        if arr[i] == 1 \n            push!(newArr, \"One\")\n        elseif arr[i]\
    \ == 2\n            push!(newArr, \"Two\")\n        elseif arr[i] == 3\n     \
    \       push!(newArr, \"Three\")\n        elseif arr[i] == 4\n            push!(newArr,\
    \ \"Four\")\n        elseif arr[i] == 5\n            push!(newArr, \"Five\")\n\
    \        elseif arr[i] == 6\n            push!(newArr, \"Six\")\n        elseif\
    \ arr[i] == 7\n            push!(newArr, \"Seven\")\n        elseif arr[i] ==\
    \ 8\n            push!(newArr, \"Eight\")\n        elseif arr[i] == 9\n      \
    \      push!(newArr, \"Nine\")\n        end\n    end\n    return newArr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppdj7zyx6.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmppdj7zyx6.jl:50\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n    [1] (::Base.Order.var\"#1#3\"{Int64, typeof(identity)})(x::Int64,\
    \ y::Int64)\n      @ Base.Order ./ordering.jl:125\n    [2] lt(o::Base.Order.Lt{Base.Order.var\"\
    #1#3\"{Int64, typeof(identity)}}, a::Int64, b::Int64)\n      @ Base.Order ./ordering.jl:112\n\
    \    [3] sort!\n      @ ./sort.jl:507 [inlined]\n    [4] sort!\n      @ ./sort.jl:574\
    \ [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n\
    \      @ ./sort.jl:725 [inlined]\n    [7] by_length(arr::Vector{Int64})\n    \
    \  @ Main /tmp/tmppdj7zyx6.jl:19\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmppdj7zyx6.jl:50 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmppdj7zyx6.jl:49\ntest set:\
    \ Error During Test at /tmp/tmppdj7zyx6.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n    [1] (::Base.Order.var\"#1#3\"{Int64, typeof(identity)})(x::Int64,\
    \ y::Int64)\n      @ Base.Order ./ordering.jl:125\n    [2] lt(o::Base.Order.Lt{Base.Order.var\"\
    #1#3\"{Int64, typeof(identity)}}, a::Int64, b::Int64)\n      @ Base.Order ./ordering.jl:112\n\
    \    [3] sort!\n      @ ./sort.jl:507 [inlined]\n    [4] sort!\n      @ ./sort.jl:574\
    \ [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n\
    \      @ ./sort.jl:725 [inlined]\n    [7] by_length(arr::Vector{Int64})\n    \
    \  @ Main /tmp/tmppdj7zyx6.jl:19\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inline"
  timestamp: 1660009110
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    result = []\n    for i in arr\n        if 1 <= i <= 9\n            push!(result,\
    \ i)\n        end\n    end\n    result = sort(result)\n    result = reverse(result)\n\
    \    for i in 1:length(result)\n        if result[i] == 1\n            result[i]\
    \ = \"One\"\n        elseif result[i] == 2\n            result[i] = \"Two\"\n\
    \        elseif result[i] == 3\n            result[i] = \"Three\"\n        elseif\
    \ result[i] == 4\n            result[i] = \"Four\"\n        elseif result[i] ==\
    \ 5\n            result[i] = \"Five\"\n        elseif result[i] == 6\n       \
    \     result[i] = \"Six\"\n        elseif result[i] == 7\n            result[i]\
    \ = \"Seven\"\n        elseif result[i] == 8\n            result[i] = \"Eight\"\
    \n        elseif result[i] == 9\n            result[i] = \"Nine\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009108
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    by_length_arr = sort(arr)\n    reverse!(by_length_arr)\n    by_length_answer\
    \ = []\n    for i in by_length_arr\n        if i == 1\n            push!(by_length_answer,\
    \ \"One\")\n        elseif i == 2\n            push!(by_length_answer, \"Two\"\
    )\n        elseif i == 3\n            push!(by_length_answer, \"Three\")\n   \
    \     elseif i == 4\n            push!(by_length_answer, \"Four\")\n        elseif\
    \ i == 5\n            push!(by_length_answer, \"Five\")\n        elseif i == 6\n\
    \            push!(by_length_answer, \"Six\")\n        elseif i == 7\n       \
    \     push!(by_length_answer, \"Seven\")\n        elseif i == 8\n            push!(by_length_answer,\
    \ \"Eight\")\n        elseif i == 9\n            push!(by_length_answer, \"Nine\"\
    )\n        end\n    end\n    return by_length_answer\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009108
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  # your solution to the above here\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprvw5iulo.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmprvw5iulo.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprvw5iulo.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprvw5iulo.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprvw5iulo.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprvw5iulo.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprvw5iulo.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1660009112
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr_1 = filter(x -> x in 1:9, arr)\n    arr_2 = reverse(sort(arr_1))\n\
    \    res = []\n    dic = Dict(\"One\" => 1, \"Two\" => 2, \"Three\" => 3, \"Four\"\
    \ => 4, \n            \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7, \"Eight\" =>\
    \ 8, \"Nine\" => 9)\n    for i in arr_2\n        push!(res, get(dic, i, \"N/A\"\
    ))\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphcajfe7g.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmphcajfe7g.jl:34\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"N/A\", \"N/A\", \"N/A\", \"N/A\"\
    , \"N/A\", \"N/A\", \"N/A\", \"N/A\"] == [\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphcajfe7g.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphcajfe7g.jl:33\ntest set: Test Failed at /tmp/tmphcajfe7g.jl:36\n\
    \  Expression: candidate([1, -1, 55]) == [\"One\"]\n   Evaluated: [\"N/A\"] ==\
    \ [\"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphcajfe7g.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphcajfe7g.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphcajfe7g.jl:37\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"N/A\", \"N/A\", \"N/A\"] ==\
    \ [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphcajfe7g.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphcajfe7g.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphcajfe7g.jl:38\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"N/A\", \"N/A\", \"N/A\"] == [\"\
    Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphcajfe7g.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inline"
  timestamp: 1660009111
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  \n  aux = filter((x -> x > 0 && x < 10), arr)\n  sort!(aux)\n  reverse!(aux)\n\
    \  aux = map(x -> number_names[x], aux)\n  \n  return aux\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpm7yqcwst.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpm7yqcwst.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_names\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmpm7yqcwst.jl:23\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpm7yqcwst.jl:23\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpm7yqcwst.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpm7yqcwst.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpm7yqcwst.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number_names not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmpm7yqcwst.jl:23\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpm7yqcwst.jl:23\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpm7yqcwst.jl:34 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpm7yqcwst.jl:31\n"
  timestamp: 1660009111
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    res_lengths = []\n    for x in arr\n        if x >= 1 && x <= 9\n    \
    \        push!(res_lengths, x)\n        end\n    end\n    reverse!(sort!(res_lengths))\n\
    \    res_names = []\n    for x in res_lengths\n        if x == 1\n           \
    \ push!(res_names, \"One\")\n        elseif x == 2\n            push!(res_names,\
    \ \"Two\")\n        elseif x == 3\n            push!(res_names, \"Three\")\n \
    \       elseif x == 4\n            push!(res_names, \"Four\")\n        elseif\
    \ x == 5\n            push!(res_names, \"Five\")\n        elseif x == 6\n    \
    \        push!(res_names, \"Six\")\n        elseif x == 7\n            push!(res_names,\
    \ \"Seven\")\n        elseif x == 8\n            push!(res_names, \"Eight\")\n\
    \        elseif x == 9\n            push!(res_names, \"Nine\")\n        end\n\
    \    end\n    return res_names\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009109
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = filter(x -> (x >= 1 && x <= 9), arr)\n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    map(x -> numbers[x], arr)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpspnxnoiu.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpspnxnoiu.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: numbers\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main\
    \ /tmp/tmpspnxnoiu.jl:22\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpspnxnoiu.jl:22\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpspnxnoiu.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpspnxnoiu.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpspnxnoiu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: numbers not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(x::Int64)\n      @ Main /tmp/tmpspnxnoiu.jl:22\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpspnxnoiu.jl:22\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpspnxnoiu.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpspnxnoiu.jl:28\ntest set: "
  timestamp: 1660009111
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return arr[arr .< 10]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpigcc5qan.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpigcc5qan.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpigcc5qan.jl:19\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpigcc5qan.jl:26 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpigcc5qan.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpigcc5qan.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essen"
  timestamp: 1660009113
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # TODO: implement this function\n    # Hint: First sort, then use if/else-if\
    \ (or switch) to find the corresponding string.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpng8psqnk.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpng8psqnk.jl:1\n\
    in expression starting at /tmp/tmpng8psqnk.jl:1\n"
  stdout: ''
  timestamp: 1660009110
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \"\"\"\n    Sort the 1 to 9 numbers in the array, reverse the array, and\
    \ return the\n    array, mapping the numbers to their string names.\n    \"\"\"\
    \n    n = sort(filter(i -> i in (1:9), arr))\n    reverse!(n)\n    return map(i\
    \ -> string(i), n)\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt55x4ixd.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpt55x4ixd.jl:32\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt55x4ixd.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt55x4ixd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt55x4ixd.jl:34\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt55x4ixd.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt55x4ixd.jl:31\ntest set: Test Failed at /tmp/tmpt55x4ixd.jl:35\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"3\", \"2\", \"1\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt55x4ixd.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt55x4ixd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt55x4ixd.jl:36\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt55x4ixd.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /"
  timestamp: 1660009111
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  if isempty(arr)\n    return []\n  end\n  length(arr)\n  liste = []\n  j\
    \ = 0\n  for i in arr\n    if i < 10 && i > 0\n      j += 1\n      push!(liste,i)\n\
    \    end\n  end\n  sort!(liste)\n  liste = reverse(liste)\n  s = zeros(String,j)\n\
    \  j = 0\n  for i in liste\n    if i == 1\n      s[j] = \"One\"\n    elseif i\
    \ == 2\n      s[j] = \"Two\"\n    elseif i == 3\n      s[j] = \"Three\"\n    elseif\
    \ i == 4\n      s[j] = \"Four\"\n    elseif i == 5\n      s[j] = \"Five\"\n  \
    \  elseif i == 6\n      s[j] = \"Six\"\n    elseif i == 7\n      s[j] = \"Seven\"\
    \n    elseif i == 8\n      s[j] = \"Eight\"\n    elseif i == 9\n      s[j] = \"\
    Nine\"\n    end\n    j += 1\n  end\n  return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyogspwc9.jl:61

    '
  stdout: "test set: Error During Test at /tmp/tmpyogspwc9.jl:64\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching zero(::Type{String})\n  Closest candidates are:\n    zero(!Matched::Union{Type{P},\
    \ P}) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    zero(!Matched::AbstractIrrational) at ~/.conda/envs/polyglot/share/julia/base/irrationals.jl:150\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpyogspwc9.jl:33\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpyogspwc9.jl:64 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpyogspwc9.jl:63\ntest set:\
    \ Error During Test at /tmp/tmpyogspwc9.jl:66\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching zero(::Type{String})\n\
    \  Closest candidates are:\n    zero(!Matched::Union{Type{P}, P}) where P<:Dates.Period\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    zero(!Matched::AbstractIrrational) at ~/.conda/envs/polyglot/share/julia/base/irrationals.jl:150\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] by_length(arr::Vecto"
  timestamp: 1660009113
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr_new = filter(x -> x >= 1 && x <= 9, arr)\n    arr_sort = sort(arr_new)\n\
    \    arr_rev = reverse(arr_sort)\n    arr_string = map(x -> string(x), arr_rev)\n\
    \    arr_name = map(x -> num2eng(x), arr_string)\n    return arr_name\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3j05u36q.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp3j05u36q.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2eng\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#3#6\")(x::String)\n      @ Main\
    \ /tmp/tmp3j05u36q.jl:23\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{String}, itr::Base.Generator{Vector{String}, var\"\
    #3#6\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp3j05u36q.jl:23\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp3j05u36q.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp3j05u36q.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp3j05u36q.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2eng not defined\n\
    \  Stacktrace:\n    [1] (::var\"#3#6\")(x::String)\n      @ Main /tmp/tmp3j05u36q.jl:23\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{String},\
    \ itr::Base.Generator{Vector{String}, var\"#3#6\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp3j05u36q.jl:23\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp3j05u36q.jl:33 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp3j05u36q.jl:30\ntest"
  timestamp: 1660009112
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    newarr = sort(arr)\n    newarr = reverse(newarr)\n    newarr = filter(i\
    \ -> (i>0 && i<10), newarr)\n    return string.(newarr)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfygkd_2f.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpfygkd_2f.jl:29\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfygkd_2f.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfygkd_2f.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfygkd_2f.jl:31\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfygkd_2f.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfygkd_2f.jl:28\ntest set: Test Failed at /tmp/tmpfygkd_2f.jl:32\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"3\", \"2\", \"1\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfygkd_2f.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfygkd_2f.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfygkd_2f.jl:33\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfygkd_2f.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /"
  timestamp: 1660009112
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    @assert length(arr) >= 0\n    res = []\n    for x in arr\n        if x\
    \ > 0 && x < 10\n            push!(res, string(x))\n        end\n    end\n   \
    \ sort!(res)\n    reverse!(res)\n    for i in 1:length(res)\n        if res[i]\
    \ == \"1\"\n            res[i] = \"One\"\n        elseif res[i] == \"2\"\n   \
    \         res[i] = \"Two\"\n        elseif res[i] == \"3\"\n            res[i]\
    \ = \"Three\"\n        elseif res[i] == \"4\"\n            res[i] = \"Four\"\n\
    \        elseif res[i] == \"5\"\n            res[i] = \"Five\"\n        elseif\
    \ res[i] == \"6\"\n            res[i] = \"Six\"\n        elseif res[i] == \"7\"\
    \n            res[i] = \"Seven\"\n        elseif res[i] == \"8\"\n           \
    \ res[i] = \"Eight\"\n        elseif res[i] == \"9\"\n            res[i] = \"\
    Nine\"\n        end\n    end\n    return res\nend\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009110
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    number_set = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"}\n    for i in 1:length(arr)\n        if arr[i]\
    \ < 1 || arr[i] > 9\n            deleteat!(arr, i)\n        end\n    end\n   \
    \ sort!(arr)\n    reverse!(arr)\n    return [number_set[arr[i]] for i in 1:length(arr)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: { } vector syntax is discontinued around /tmp/tmps9qvn9t9.jl:19\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmps9qvn9t9.jl:1\nin expression starting\
    \ at /tmp/tmps9qvn9t9.jl:1\n"
  stdout: ''
  timestamp: 1660009111
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21i5pzaz.jl:1\nin expression starting at /tmp/tmp21i5pzaz.jl:1\n"
  stdout: ''
  timestamp: 1660009111
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort(reverse(map(x -> [1=>\"One\", 2=>\"Two\", 3=>\"Three\", 4=>\"Four\"\
    , 5=>\"Five\", 6=>\"Six\", 7=>\"Seven\", 8=>\"Eight\", 9=>\"Nine\"][x],arr)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmplaa_kyhn.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Pair{Int64, String} to an object of type String\n\
    \  Closest candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Pair{Int64, String},\
    \ i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String},\
    \ doffs::Int64, src::Vector{Pair{Int64, String}}, soffs::Int64, n::Int64)\n  \
    \    @ Base ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n\
    \    [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n  \
    \    @ ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n\
    \    [7] copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Pair{Int64,\
    \ String}})\n      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554\
    \ [inlined]\n   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmplaa_kyhn.jl:19\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmplaa_kyhn.jl:26 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmplaa_kyhn.jl:25\ntest set:\
    \ Error During Test at /tmp/tmplaa_kyhn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{Pair{Int64, String}} at index [-1]\n  Stacktrace:\n    [1] getindex\n\
    \      @ ./array.jl:861 [inlined]"
  timestamp: 1660009114
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    to_sort = [arr[i] for i in 1:length(arr) if (1 <= arr[i] <= 9)]\n    return\
    \ [num2words(i) for i in reverse(sort(to_sort))]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpo3phg2ck.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpo3phg2ck.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2words\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#6\")(i::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#3#6\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpo3phg2ck.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpo3phg2ck.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpo3phg2ck.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpo3phg2ck.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2words not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#6\")(i::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#3#6\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpo3phg2ck.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpo3phg2ck.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpo3phg2ck.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpo3phg2ck.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num2words not defined\n  Stacktrace:\n   [1] (::var\"#3#6\")(i::Int64)\n   \
    \  @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{Int64}, var\"#3#6\"})\n     @ Base ./array.jl:724\n\
    \   [4] by_length(arr::Vector{Int64})\n     @ M"
  timestamp: 1660009113
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort(reverse(map(s->s<=9 && s>=1 ? digitToWord(s) : \"\", arr)))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpnudzairn.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpnudzairn.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: digitToWord\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(s::Int64)\n      @ Main\
    \ /tmp/tmpnudzairn.jl:19\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#1#2\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpnudzairn.jl:19\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpnudzairn.jl:26 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpnudzairn.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnudzairn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: digitToWord not defined\n\
    \  Stacktrace:\n    [1] (::var\"#1#2\")(s::Int64)\n      @ Main /tmp/tmpnudzairn.jl:19\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpnudzairn.jl:19\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpnudzairn.jl:28 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpnudzairn.jl:25\nte"
  timestamp: 1660009113
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_vec = sort([x for x in arr if x in 1:9])\n    reversed_vec = reverse(sorted_vec)\n\
    \    new_vec = map(int_to_word, reversed_vec)\n    return new_vec\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpp34rze30.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpp34rze30.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: int_to_word\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp34rze30.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp34rze30.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp34rze30.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp34rze30.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: int_to_word\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp34rze30.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp34rze30.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp34rze30.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp34rze30.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: int_to_word not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpp34rze30.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp34rze30.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp34rze30.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp34rze30.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ int_to_word not defined\n  Stacktrace:\n   [1] by_"
  timestamp: 1660009113
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    a = sort(filter(x -> x <= 9 && x >= 1, arr))\n    b = reverse(a)\n   \
    \ c = map(x -> string(x), b)\n    d = map(x -> string(x,\"`\"), c)\n    e = map(x\
    \ -> string(eval(Meta.parse(x))), d)\n    return e\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpk516csdr.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpk516csdr.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  syntax: incomplete:\
    \ invalid \"`\" syntax\n  Stacktrace:\n    [1] top-level scope\n      @ none:1\n\
    \    [2] eval\n      @ ./boot.jl:373 [inlined]\n    [3] eval\n      @ ./client.jl:453\
    \ [inlined]\n    [4] (::var\"#4#8\")(x::String)\n      @ Main /tmp/tmpk516csdr.jl:23\n\
    \    [5] iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{String},\
    \ itr::Base.Generator{Vector{String}, var\"#4#8\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpk516csdr.jl:23\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpk516csdr.jl:31 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpk516csdr.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpk516csdr.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  syntax: incomplete: invalid \"`\" syntax\n\
    \  Stacktrace:\n    [1] top-level scope\n      @ none:1\n    [2] eval\n      @\
    \ ./boot.jl:373 [inlined]\n    [3] eval\n      @ ./client.jl:453 [inlined]\n \
    \   [4] (::var\"#4#8\")(x::String)\n      @ Main /tmp/tmpk516csdr.jl:23\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{String},\
    \ itr::Base.Generator{Vector{String}, var\"#4#8\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpk516csdr.jl:23\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v"
  timestamp: 1660009113
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # TODO: return a vector of strings that contains the correct numbers names\
    \ in the correct order. \n    # for example: [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    # If the array\
    \ is empty, return an empty vector.\n    # If the array has any strange number\
    \ ignore it.\n    len_vec = length(arr)\n    if len_vec == 0\n        return []\n\
    \    end\n    arr_sort = sort(arr)\n    arr_str = Array(String, len_vec)\n   \
    \ for i in 1:len_vec\n        if arr_sort[i] < 1 || arr_sort[i] > 9\n        \
    \    arr_str[i] = \"None\"\n        else\n            arr_str[i] = string(arr_sort[i])\n\
    \        end\n    end\n    return reverse(arr_str)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzlkc8ezg.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpzlkc8ezg.jl:43\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching Array(::Type{String}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpzlkc8ezg.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzlkc8ezg.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzlkc8ezg.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpzlkc8ezg.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching Array(::Type{String},\
    \ ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpzlkc8ezg.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzlkc8ezg.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzlkc8ezg.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpzlkc8ezg.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: no\
    \ method matching Array(::Type{String}, ::Int64)\n  Closest candidates are:\n\
    \    Array(!Matched::LinearAlgebra.UniformScaling, ::Integer, !Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Linear"
  timestamp: 1660009114
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n   \n    # Selection Sort\n    for i = 1:length(arr)\n        for j = i+1:length(arr)\n\
    \            if arr[i] > arr[j]\n                tmp = arr[i]\n              \
    \  arr[i] = arr[j]\n                arr[j] = tmp\n            end\n        end\n\
    \    end\n    \n    # Reverse\n    arr = reverse(arr)\n    \n    # Replace\n \
    \   dic = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    for i = 1:length(arr)\n        if (1 <= arr[i] <=\
    \ 9)\n            arr[i] = dic[arr[i]]\n        end\n    end\n    \n    return\
    \ arr\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpbgrtq6ao.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmpbgrtq6ao.jl:50\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbgrtq6ao.jl:38\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbgrtq6ao.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbgrtq6ao.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpbgrtq6ao.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbgrtq6ao.jl:38\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbgrtq6ao.jl:5"
  timestamp: 1660009114
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    new = Int64[]\n    for i = 1:length(arr)\n        if 0 < arr[i] < 10\n\
    \            push!(new, arr[i])\n        end\n    end\n    sort!(new)\n    reverse!(new)\n\
    \    num = String[]\n    for i = 1:length(new)\n        if new[i] == 1\n     \
    \       push!(num, \"One\")\n        elseif new[i] == 2\n            push!(num,\
    \ \"Two\")\n        elseif new[i] == 3\n            push!(num, \"Three\")\n  \
    \      elseif new[i] == 4\n            push!(num, \"Four\")\n        elseif new[i]\
    \ == 5\n            push!(num, \"Five\")\n        elseif new[i] == 6\n       \
    \     push!(num, \"Six\")\n        elseif new[i] == 7\n            push!(num,\
    \ \"Seven\")\n        elseif new[i] == 8\n            push!(num, \"Eight\")\n\
    \        elseif new[i] == 9\n            push!(num, \"Nine\")\n        end\n \
    \   end\n    return num\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009111
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # we only want the values that are between 1 and 9\n    new_arr = arr[(1\
    \ .<= arr) .& (arr .<= 9)]\n    # sort the values\n    sorted_arr = sort(new_arr)\n\
    \    # reverse the sorted vector \n    reversed_arr = reverse(sorted_arr)\n  \
    \  # replace each digit by its corresponding name\n    final_arr = []\n    for\
    \ (i, v) in enumerate(reversed_arr)\n        if v == 1\n            push!(final_arr,\
    \ \"One\")\n        elseif v == 2\n            push!(final_arr, \"Two\")\n   \
    \     elseif v == 3\n            push!(final_arr, \"Three\")\n        elseif v\
    \ == 4\n            push!(final_arr, \"Four\")\n        elseif v == 5\n      \
    \      push!(final_arr, \"Five\")\n        elseif v == 6\n            push!(final_arr,\
    \ \"Six\")\n        elseif v == 7\n            push!(final_arr, \"Seven\")\n \
    \       elseif v == 8\n            push!(final_arr, \"Eight\")\n        elseif\
    \ v == 9\n            push!(final_arr, \"Nine\")\n        end\n    end\n    return\
    \ final_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009111
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # must add these if we want to use this on strings, of course\n    # (\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n    # (\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"\
    G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"\
    R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n    @assert \"One\"\
    \ in (\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\") \"You must use the elements in the tuple\"\n    @assert \"\
    Two\" in (\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\") \"You must use the elements in the tuple\"\n    @assert\
    \ \"Three\" in (\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\") \"You must use the elements in the tuple\"\n    @assert\
    \ \"Four\" in (\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\") \"You must use the elements in the tuple\"\n    @assert\
    \ \"Five\" in (\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\") \"You must use the elements in the tuple\"\n    @assert\
    \ \"Six\" in (\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\") \"You must use the elements in the tuple\"\n    @assert\
    \ \"Seven\" in (\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\") \"You must use the elements in the tuple\"\n    @assert\
    \ \"Eight\" in (\"One\", \"Two\", \"Three\", \"\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7x7epyp.jl:35\nin expression starting at\
    \ /tmp/tmpw7x7epyp.jl:35\n"
  stdout: ''
  timestamp: 1660009112
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxuu4ckq8.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpxuu4ckq8.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxuu4ckq8.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxuu4ckq8.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxuu4ckq8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpxuu4ckq8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxuu4ckq8.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1660009115
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \"\"\" \n    Sort the vector, reverse it, and then replace every digit\
    \ by its corresponding name\n    \"\"\"\n    for i in 1:length(arr)\n        if\
    \ arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] == 2\n    \
    \        arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i] = \"\
    Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n        elseif\
    \ arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i] == 6\n   \
    \         arr[i] = \"Six\"\n        elseif arr[i] == 7\n            arr[i] = \"\
    Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\n        elseif\
    \ arr[i] == 9\n            arr[i] = \"Nine\"\n        else\n            arr[i]\
    \ = \"\"\n        end\n    end\n    return sort(arr, rev=true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp66hhbue9.jl:49

    '
  stdout: "test set: Error During Test at /tmp/tmp66hhbue9.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp66hhbue9.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp66hhbue9.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp66hhbue9.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp66hhbue9.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp66hhbue9.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp66hhbue9.jl:5"
  timestamp: 1660009115
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return reverse(sort(arr))\n    .|> filter(x -> (x >= 1) && (x <= 9))\n\
    \    .|> map(x -> [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][x])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \".|>\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpio7d1vr7.jl:20\nin expression starting at\
    \ /tmp/tmpio7d1vr7.jl:20\n"
  stdout: ''
  timestamp: 1660009112
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted = sort(arr)\n    reversed = reversed(sorted)\n    clean = [str(i)\
    \ for i in reversed if 1<=i<=9]\n    return clean\nend\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: reversed not defined\nStacktrace:\n [1]\
    \ by_length(arr::Vector{Int64})\n   @ Main /tmp/tmp7emxu40g.jl:20\n [2] top-level\
    \ scope\n   @ /tmp/tmp7emxu40g.jl:24\nin expression starting at /tmp/tmp7emxu40g.jl:24\n"
  stdout: ''
  timestamp: 1660009113
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    res = []\n    for i in arr\n        if i >= 1 && i <= 9\n            push!(res,\
    \ i)\n        end\n    end\n    res = sort(res)\n    res = reverse(res)\n    names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    res = names[res]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009112
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return sort(reverse(arr), lt=(x,y)->x<y)[1:9]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4tu9_djy.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp4tu9_djy.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 8-element Vector{Int64} at index [1:9]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp4tu9_djy.jl:19\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4tu9_djy.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4tu9_djy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4tu9_djy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1:9]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp4tu9_djy.jl:19\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4tu9_djy.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4tu9_djy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4tu9_djy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [1:9]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstracta"
  timestamp: 1660009115
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    vec = Int[]\n    pos = 0\n    for i in arr\n        if 1 <= i <= 9\n \
    \           push!(vec, i)\n        end\n    end\n    sort!(vec)\n    reverse!(vec)\n\
    \    ret = []\n    for i in vec\n        push!(ret, numbers_dictionary[i])\n \
    \   end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpenxkkrwo.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpenxkkrwo.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: numbers_dictionary\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpenxkkrwo.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpenxkkrwo.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpenxkkrwo.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpenxkkrwo.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: numbers_dictionary not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpenxkkrwo.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpenxkkrwo.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpenxkkrwo.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpenxkkrwo.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ numbers_dictionary not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpenxkkrwo.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpenxkkrwo.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpenxkkrwo.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpenxkkrwo.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: numbers_dictionary\
    \ not defin"
  timestamp: 1660009115
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    selected = select(arr)\n    sorted = sort(selected)\n    reversed = reverse(sorted)\n\
    \    return map(get_number_name, reversed)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpk81lnym9.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpk81lnym9.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: select\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpk81lnym9.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk81lnym9.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk81lnym9.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpk81lnym9.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: select\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpk81lnym9.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk81lnym9.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk81lnym9.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpk81lnym9.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: select not defined\n \
    \ Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpk81lnym9.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk81lnym9.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk81lnym9.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpk81lnym9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ select not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{I"
  timestamp: 1660009115
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    filtered = filter(x -> x >= 1 && x <= 9, arr)\n    sorted = sort(filtered)\n\
    \    reversed = reverse(sorted)\n    return [num2name(x) for x in reversed]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwgsopix0.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpwgsopix0.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2name\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpwgsopix0.jl:22\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpwgsopix0.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwgsopix0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpwgsopix0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2name not defined\n\
    \  Stacktrace:\n   [1] (::var\"#2#4\")(x::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#4\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpwgsopix0.jl:22\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpwgsopix0.jl:31 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwgsopix0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpwgsopix0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num2name not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Int64)\n    \
    \ @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"})\n     @ Base ./array.jl:724\n\
    \   [4] by_length(arr::Vector{Int64})\n     @ Main"
  timestamp: 1660009114
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  \n    arr = filter(n -> n > 0 && n < 10, arr)\n    arr = reverse(sort(arr))\n\
    \    arr = map(n -> Number_names[n], arr)\n    \n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3lfy3czg.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp3lfy3czg.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: Number_names\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(n::Int64)\n      @ Main\
    \ /tmp/tmp3lfy3czg.jl:22\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#2#4\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp3lfy3czg.jl:22\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp3lfy3czg.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp3lfy3czg.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp3lfy3czg.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: Number_names not defined\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(n::Int64)\n      @ Main /tmp/tmp3lfy3czg.jl:22\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp3lfy3czg.jl:22\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp3lfy3czg.jl:33 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp3lfy3czg.jl:30\n"
  timestamp: 1660009115
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return sort(reverse(arr[arr.<10]), rev=true)\n    .*[\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \".*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpen_7qddm.jl:20\nin expression starting at\
    \ /tmp/tmpen_7qddm.jl:20\n"
  stdout: ''
  timestamp: 1660009113
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_list = sort(arr, rev=true)\n    string_list = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  for i in 1:length(sorted_list)\n        if sorted_list[i] < 1 || sorted_list[i]\
    \ > 9\n            deleteat!(sorted_list, i)\n        end\n    end\n    for i\
    \ in 1:length(sorted_list)\n        sorted_list[i] = string_list[sorted_list[i]]\n\
    \    end\n    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjtzntnrv.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpjtzntnrv.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpjtzntnrv.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjtzntnrv.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjtzntnrv.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjtzntnrv.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpjtzntnrv.jl:22\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjtzntnrv.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjtzntnrv.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjtzntnrv.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest cand"
  timestamp: 1660009117
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n   \n    # filter out any negative numbers or numbers greater than 9\n   \
    \ arr = [1 for x in arr if x >= 1 && x <= 9]\n    # now we need to sort them.\
    \ \n    # we can do this using a bubble sort algorithm\n    # first we need to\
    \ start at the end of the array\n    arr_len = length(arr)\n    # we need to then\
    \ loop through the array\n    for k in 0:arr_len-1\n        # loop through the\
    \ array again!\n        for j in 0:arr_len-1\n            # now we need to check\
    \ if arr[j] > arr[j+1]\n            if arr[j] > arr[j+1]\n                # if\
    \ it is then we need to swap them\n                # we do this by using a temp\
    \ variable\n                temp = arr[j]\n                arr[j] = arr[j+1]\n\
    \                arr[j+1] = temp\n            end\n        end\n    end\n    #\
    \ now that the array is sorted we need to reverse it\n    arr = reverse(arr)\n\
    \    # now that it is reversed we need to replace the numbers with their names\n\
    \    i = 1\n    for x in arr\n        if x == 1\n            arr[i] = \"One\"\n\
    \        elseif x == 2\n            arr[i] = \"Two\"\n        elseif x == 3\n\
    \            arr[i] = \"Three\"\n        elseif x == 4\n            arr[i] = \"\
    Four\"\n        elseif x == 5\n            arr[i] = \"Five\"\n        elseif x\
    \ == 6\n            arr[i] = \"Six\"\n        elseif x == 7\n            arr[i]\
    \ = \"Seven\"\n        elseif x == 8\n            arr[i] = \"Eight\"\n       \
    \ elseif x == 9\n            arr[i] = \"Nine\"\n        end\n        i += 1\n\
    \    end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwr6nm0rl.jl:70

    '
  stdout: "test set: Error During Test at /tmp/tmpwr6nm0rl.jl:73\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 8-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpwr6nm0rl.jl:31\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwr6nm0rl.jl:73 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwr6nm0rl.jl:72\ntest set:\
    \ Error During Test at /tmp/tmpwr6nm0rl.jl:75\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpwr6nm0rl.jl:31\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwr6nm0rl.jl:75 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwr6nm0rl.jl:72\ntest set:\
    \ Error During Test at /tmp/tmpwr6nm0rl.jl:76\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpwr6nm0rl.jl:31\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwr6nm0rl.jl:76 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @"
  timestamp: 1660009115
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21i5pzaz.jl:1\nin expression starting at /tmp/tmp21i5pzaz.jl:1\n"
  stdout: ''
  timestamp: 1660009111
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return reverse(sort(arr))[1:9]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpc7akrf5t.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpc7akrf5t.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 8-element Vector{Int64} at index [1:9]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpc7akrf5t.jl:19\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpc7akrf5t.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpc7akrf5t.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpc7akrf5t.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1:9]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpc7akrf5t.jl:19\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpc7akrf5t.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpc7akrf5t.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpc7akrf5t.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [1:9]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstracta"
  timestamp: 1660009115
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    digits = [d in 1:9 for d in arr]\n    sorted = sort(arr[digits])\n   \
    \ reversed = reverse(sorted)\n    names = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    names[reversed]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009113
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    res = collect(0:9)\n    j = 1\n    for i in arr\n        if 1 <= i <=\
    \ 9\n            res[j] = i\n            j += 1\n        end\n    end\n    res\
    \ = sort(res[1:j-1])\n    res = reverse(res)\n    for i in 1:length(res)\n   \
    \     res[i] = num2words(res[i])\n    end\n    return res\nend\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpe0tho_6e.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpe0tho_6e.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num2words\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpe0tho_6e.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe0tho_6e.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe0tho_6e.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpe0tho_6e.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num2words not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpe0tho_6e.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe0tho_6e.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe0tho_6e.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpe0tho_6e.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num2words not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpe0tho_6e.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe0tho_6e.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe0tho_6e.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpe0tho_6e.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: num2words\
    \ not defined\n  Stacktrace:\n   [1] by_length(ar"
  timestamp: 1660009116
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Your code here\n    # 1) Filter out the values that are not in the range\n\
    \    # 2) Sort the array in ascending order\n    # 3) Reverse the array\n    #\
    \ 4) Map values to their corresponding names\n    # 4.1) Make a dictionary that\
    \ has these mappings\n    # 4.2) Use get to get the values\n    # 4.3) Take care\
    \ of the key not being present in the dictionary\n    # 5) return the mapped array\n\
    \    return filter(x -> x >= 1 && x <= 9, sort(arr))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpokeio8u2.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpokeio8u2.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpokeio8u2.jl:28\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpokeio8u2.jl:35 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpokeio8u2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpokeio8u2.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essen"
  timestamp: 1660009117
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    a = sort(arr[arr .< 10 & arr .> 0])\n    return reverse(string.(a))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp607x6o_3.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp607x6o_3.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp607x6o_3.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp607x6o_3.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp607x6o_3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp607x6o_3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp607x6o_3.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp607x6o_3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
  timestamp: 1660009117
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    by_length = sort(arr)\n    rev_by_length = reverse(by_length)\n    len\
    \ = length(rev_by_length)\n    a = zeros(String, len)\n    for (i, value) in enumerate(rev_by_length)\n\
    \        if value == 0\n            continue\n        elseif value == 1\n    \
    \        a[i] = \"One\"\n        elseif value == 2\n            a[i] = \"Two\"\
    \n        elseif value == 3\n            a[i] = \"Three\"\n        elseif value\
    \ == 4\n            a[i] = \"Four\"\n        elseif value == 5\n            a[i]\
    \ = \"Five\"\n        elseif value == 6\n            a[i] = \"Six\"\n        elseif\
    \ value == 7\n            a[i] = \"Seven\"\n        elseif value == 8\n      \
    \      a[i] = \"Eight\"\n        elseif value == 9\n            a[i] = \"Nine\"\
    \n        end\n    end\n    return a[.!(a .== \"\")]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqp85u_cn.jl:50

    '
  stdout: "test set: Error During Test at /tmp/tmpqp85u_cn.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching zero(::Type{String})\n  Closest candidates are:\n    zero(!Matched::Union{Type{P},\
    \ P}) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    zero(!Matched::AbstractIrrational) at ~/.conda/envs/polyglot/share/julia/base/irrationals.jl:150\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpqp85u_cn.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpqp85u_cn.jl:53 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpqp85u_cn.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpqp85u_cn.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching zero(::Type{String})\n  Closest candidates are:\n    zero(!Matched::Union{Type{P},\
    \ P}) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    zero(!Matched::AbstractIrrational) at ~/.conda/envs/polyglot/share/julia/base/irrationals.jl:150\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] by_"
  timestamp: 1660009117
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    arr = [x for x in arr if x>0 && x<10]\n    sort!(arr)\n    arr =\
    \ reverse(arr)\n    return [x == 1 ? \"One\" : x == 2 ? \"Two\" : x == 3 ? \"\
    Three\" : x == 4 ? \"Four\" : x == 5 ? \"Five\" : x == 6 ? \"Six\" : x == 7 ?\
    \ \"Seven\" : x == 8 ? \"Eight\" : \"Nine\" for x in arr]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009114
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort ascending\n    sort!(arr)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2rxdkt5x.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2rxdkt5x.jl:1\n\
    in expression starting at /tmp/tmp2rxdkt5x.jl:1\n"
  stdout: ''
  timestamp: 1660009115
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    subarr = filter(x -> isbetween(x, 1, 9), arr) # array with only numbers\
    \ 1 to 9\n    subarr = sort(subarr)\n    subarr = reverse(subarr)\n    for i in\
    \ 1:length(subarr)\n        subarr[i] = convert(String, subarr[i])\n    end\n\
    \    # the index of each element in the dictionary is the same as in the array\n\
    \    dict = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    for i in 1:length(subarr)\n        if subarr[i] ==\
    \ \"1\"\n            subarr[i] = dict[1]\n        elseif subarr[i] == \"2\"\n\
    \            subarr[i] = dict[2]\n        elseif subarr[i] == \"3\"\n        \
    \    subarr[i] = dict[3]\n        elseif subarr[i] == \"4\"\n            subarr[i]\
    \ = dict[4]\n        elseif subarr[i] == \"5\"\n            subarr[i] = dict[5]\n\
    \        elseif subarr[i] == \"6\"\n            subarr[i] = dict[6]\n        elseif\
    \ subarr[i] == \"7\"\n            subarr[i] = dict[7]\n        elseif subarr[i]\
    \ == \"8\"\n            subarr[i] = dict[8]\n        elseif subarr[i] == \"9\"\
    \n            subarr[i] = dict[9]\n        end\n    end\n    return subarr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp15u9q0xb.jl:52

    '
  stdout: "test set: Error During Test at /tmp/tmp15u9q0xb.jl:55\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: isbetween\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmp15u9q0xb.jl:19\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp15u9q0xb.jl:19\n  \
    \ [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp15u9q0xb.jl:55 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp15u9q0xb.jl:54\ntest set:\
    \ Error During Test at /tmp/tmp15u9q0xb.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: isbetween not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmp15u9q0xb.jl:19\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp15u9q0xb.jl:19\n  \
    \ [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp15u9q0xb.jl:57 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp15u9q0xb.jl:54\ntest set:\
    \ Error During Test at /tmp/tmp15u9q0xb.jl:58\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ isbetween not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n   \
    \  @ Main /tmp/tmp15u9q0xb.jl:19\n   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n\
    \     @ Base ./array.jl:2484\n   [3] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp15u9q0xb.jl:19\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expan"
  timestamp: 1660009116
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # filter the values between 1 and 9\n    sortedArr = sort(filter(x ->\
    \ x in 1:9, arr));\n    # reverse them \n    reversedArr = reverse(sortedArr);\n\
    \    # return the string names for each value\n    return [get(key, value, \"\"\
    ) for (key, value) in Dict(\"One\" => 1, \"Two\" => 2, \"Three\" => 3, \"Four\"\
    \ => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7, \"Eight\" => 8, \"Nine\"\
    \ => 9) for i in reversedArr if i == value]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwego4e8t.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpwego4e8t.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpwego4e8t.jl:24\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpwego4e8t.jl:31 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpwego4e8t.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpwego4e8t.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.j"
  timestamp: 1660009118
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Select only positive integer from 1 to 9\n    arr = arr[(arr .> 0) .&\
    \ (arr .< 10)]\n    arr = sort(arr)\n    arr = reverse(arr)\n    # Generate a\
    \ dictionary with integer as key and string as value\n    dic = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  return [dic[arr[i] - 1] for i in 1:length(arr)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp62ul_z2y.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [0]\n  Stacktrace:\n    [1] getindex(A::Vector{String},\
    \ i1::Int64)\n      @ Base ./array.jl:861\n    [2] (::var\"#1#2\"{Vector{String}})(i::Int64)\n\
    \      @ Main ./none:0\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [4] collect_to!(dest::Vector{String}, itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Vector{String}}}, offs::Int64, st::Int64)\n      @ Base ./array.jl:782\n\
    \    [5] collect_to_with_first!(dest::Vector{String}, v1::String, itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Vector{String}}}, st::Int64)\n      @ Base ./array.jl:760\n    [6]\
    \ collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n\
    \      @ Base ./array.jl:734\n    [7] by_length(arr::Vector{Int64})\n      @ Main\
    \ /tmp/tmp62ul_z2y.jl:25\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp62ul_z2y.jl:32 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp62ul_z2y.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp62ul_z2y.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex(A::Vector{String},\
    \ i1::Int64)\n     @ Base ./array.jl:861\n   [2] (::var\"#1#2\"{Vector{String}})(i::Int64)\n\
    \     @ Main ./none:0\n   [3] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [4] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n\
    \     @ Base ./array.jl:724\n   [5] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp62ul_z2y.jl:25\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @"
  timestamp: 1660009118
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    filter!(x -> x in 1:9, arr)\n    sort!(arr)\n    reverse!(arr)\n\
    \    \n    arr = map(a -> string(a), arr)\n    \n    for i = 1:length(arr)\n \
    \       if arr[i] == \"1\"\n            arr[i] = \"One\"\n        elseif arr[i]\
    \ == \"2\"\n            arr[i] = \"Two\"\n        elseif arr[i] == \"3\"\n   \
    \         arr[i] = \"Three\"\n        elseif arr[i] == \"4\"\n            arr[i]\
    \ = \"Four\"\n        elseif arr[i] == \"5\"\n            arr[i] = \"Five\"\n\
    \        elseif arr[i] == \"6\"\n            arr[i] = \"Six\"\n        elseif\
    \ arr[i] == \"7\"\n            arr[i] = \"Seven\"\n        elseif arr[i] == \"\
    8\"\n            arr[i] = \"Eight\"\n        elseif arr[i] == \"9\"\n        \
    \    arr[i] = \"Nine\"\n        end\n    end\n    \n    return arr\n    \nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009114
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the vector\n    # Obtain the vector with the numbers replaced by\
    \ their english name\n    # Reverse the vector\n    # Return the vector\n    sort!(arr)\n\
    \    replace = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n    number = Vector{String}(arr)\n   \
    \ for i in 1:length(arr)\n        if arr[i] > 9 || arr[i] < 1\n            number[i]\
    \ = replace[1]\n        else\n            number[i] = replace[arr[i]+1]\n    \
    \    end\n    end\n    rev = reverse(number)\n    return rev\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpa2f_2vp0.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpa2f_2vp0.jl:41\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] by_length(arr::Vector{Int64})\n      @ Main\
    \ /tmp/tmpa2f_2vp0.jl:25\n   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpa2f_2vp0.jl:41 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpa2f_2vp0.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpa2f_2vp0.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) "
  timestamp: 1660009118
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    # Create new vector with only integers from 1 to 9\n    # Sort numbers\
    \ from the smallest to the largest\n    new_arr = sort(filter(x -> x in 1:9, arr))\n\
    \    \n    # Reverse vector\n    new_arr = reverse(new_arr)\n    \n    # Create\
    \ vector of strings\n    my_dictionary = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    for i in 1:length(new_arr)\n\
    \        new_arr[i] = my_dictionary[new_arr[i]]\n    end\n    \n    return new_arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpv6i5_5a5.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpv6i5_5a5.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv6i5_5a5.jl:30\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv6i5_5a5.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv6i5_5a5.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpv6i5_5a5.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv6i5_5a5.jl:30\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv6i5_5a5.jl:4"
  timestamp: 1660009118
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    tmp = filter(x -> x>0 && x<10, arr)\n    sort!(tmp)\n    reverse!(tmp)\n\
    \    tmp = map(x -> string(x), tmp)\n    tmp = map(x -> replace(x, \"1\" => \"\
    One\", \"2\" => \"Two\", \"3\" => \"Three\", \"4\" => \"Four\", \"5\" => \"Five\"\
    , \"6\" => \"Six\", \"7\" => \"Seven\", \"8\" => \"Eight\", \"9\" => \"Nine\"\
    ), tmp)\n    return tmp\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009115
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    # \u9650\u5236\u8303\u56F4\n    arr = [x for x in arr if 1 <= x\
    \ <= 9]\n    \n    # \u6392\u5E8F\n    arr = sort(arr)\n    \n    # \u53CD\u8F6C\
    \n    arr = reverse(arr)\n    \n    # \u66FF\u6362\u4E3A\u5B57\u7B26\u4E32\n \
    \   arr = [x == 1 ? \"One\" : x == 2 ? \"Two\" : x == 3 ? \"Three\" : x == 4 ?\
    \ \"Four\" : x == 5 ? \"Five\" : x == 6 ? \"Six\" : x == 7 ? \"Seven\" : x ==\
    \ 8 ? \"Eight\" : \"Nine\" for x in arr]\n    \n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009115
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr[arr.>0 .& arr.<10]) \n    arr = reverse(arr)\n    names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    for i in 1:length(arr)\n        arr[i] = names[arr[i]]\n    end\n\
    \    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp_nnywis3.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_nnywis3.jl:23\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_nnywis3.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_nnywis3.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp_nnywis3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [55]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp_nnywis3.jl:23\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_nnywis3.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_nnywis3.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp_nnywis3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest ca"
  timestamp: 1660009119
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return nothing\nend\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([])\n\
    by_length([1, -1, 55])\n \n@testset \"by_length\" begin\n    @test by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n    @test by_length([]) == []\n    @test by_length([1,\
    \ -1, 55]) == [\"One\"]\nend\n \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{String}\nClosest candidates are:\n  convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \  convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \  convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \  ...\nStacktrace:\n [1] by_length(arr::Vector{Int64})\n   @ Main /tmp/"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    c = []\n    for x in arr\n        if 0 < x < 10\n            push!(c,\
    \ x)\n        end\n    end\n    reverse!(sort!(c))\n    d = []\n    for x in c\n\
    \        if x == 1\n            push!(d, \"One\")\n        elseif x == 2\n   \
    \         push!(d, \"Two\")\n        elseif x == 3\n            push!(d, \"Three\"\
    )\n        elseif x == 4\n            push!(d, \"Four\")\n        elseif x ==\
    \ 5\n            push!(d, \"Five\")\n        elseif x == 6\n            push!(d,\
    \ \"Six\")\n        elseif x == 7\n            push!(d, \"Seven\")\n        elseif\
    \ x == 8\n            push!(d, \"Eight\")\n        elseif x == 9\n           \
    \ push!(d, \"Nine\")\n        end\n    end\n    return d\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009115
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    # Sort the integer between 1 and 9 inclusive\n    # Reverse the\
    \ resulting vector\n    # Replace each digit by its corresponding name\n    #\n\
    \    # 1 : One\n    # 2 : Two\n    # 3 : Three\n    # 4 : Four\n    # 5 : Five\n\
    \    # 6 : Six\n    # 7 : Seven\n    # 8 : Eight\n    # 9 : Nine\n    \n    #\
    \ Your code here\n    return reverse([\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][sort(arr[arr.<=9 & arr.>=1])])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpysfozqjq.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpysfozqjq.jl:42\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpysfozqjq.jl:35\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpysfozqjq.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpysfozqjq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpysfozqjq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpysfozqjq.jl:35\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpysfozqjq.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level sco"
  timestamp: 1660009119
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # the key function returns a tuple of two elements: the first element\
    \ is the length of the word, \n    # and the second element is the word itself\n\
    \    key(w::Int64) = (length(string(w)), string(w))\n    # preprocessing the original\
    \ vector\n    # (1) filtering out numbers < 1 or > 9, if any\n    # (2) converting\
    \ the remaining numbers to strings, if any\n    # (3) sorting the strings by their\
    \ lengths, if any\n    # (4) reversing the sorted list, if any\n    # (5) reversing\
    \ the strings within each entry of the sorted list, if any\n    preprocessed_array\
    \ = [reverse(w) for w in reverse(sort([string(w) for w in arr if (w > 0 && w <\
    \ 10)]))]\n    # replacing the strings with their names\n    preprocessed_array[preprocessed_array\
    \ .== \"1\"] = \"One\"\n    preprocessed_array[preprocessed_array .== \"2\"] =\
    \ \"Two\"\n    preprocessed_array[preprocessed_array .== \"3\"] = \"Three\"\n\
    \    preprocessed_array[preprocessed_array .== \"4\"] = \"Four\"\n    preprocessed_array[preprocessed_array\
    \ .== \"5\"] = \"Five\"\n    preprocessed_array[preprocessed_array .== \"6\"]\
    \ = \"Six\"\n    preprocessed_array[preprocessed_array .== \"7\"] = \"Seven\"\n\
    \    preprocessed_array[preprocessed_array .== \"8\"] = \"Eight\"\n    preprocessed_array[preprocessed_array\
    \ .== \"9\"] = \"Nine\"\n    return preprocessed_array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp5mtr3g3t.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmp5mtr3g3t.jl:46\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::String,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{String}, x::String, I::Base.LogicalIndex{Int64, BitVector})\n    \
    \ @ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5mtr3g3t.jl:30\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp5mtr3g3t.jl:46 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp5mtr3g3t.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp5mtr3g3t.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::String,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{String}, x::String, I::Base.LogicalIndex{Int64, BitVector})\n    \
    \ @ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5mtr3g3t.jl:30\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp5mtr3g3t.jl:47 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/sh"
  timestamp: 1660009118
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    res = arr[arr .< 10];\n    sort!(res);\n    reverse!(res);\n    for i\
    \ = 1:length(res)\n        if res[i] == 1\n            res[i] = \"One\"\n    \
    \    elseif res[i] == 2\n            res[i] = \"Two\"\n        elseif res[i] ==\
    \ 3\n            res[i] = \"Three\"\n        elseif res[i] == 4\n            res[i]\
    \ = \"Four\"\n        elseif res[i] == 5\n            res[i] = \"Five\"\n    \
    \    elseif res[i] == 6\n            res[i] = \"Six\"\n        elseif res[i] ==\
    \ 7\n            res[i] = \"Seven\"\n        elseif res[i] == 8\n            res[i]\
    \ = \"Eight\"\n        elseif res[i] == 9\n            res[i] = \"Nine\"\n   \
    \     end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2vzjimcr.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmp2vzjimcr.jl:50\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2vzjimcr.jl:38\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2vzjimcr.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2vzjimcr.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp2vzjimcr.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2vzjimcr.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2vzjimcr.jl:5"
  timestamp: 1660009120
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    newarr = []\n    for i in 1:length(arr)\n        push!(newarr, arr[i])\n\
    \    end\n    sort!(newarr)\n    reverse!(newarr)\n    for i in 1:length(newarr)\n\
    \        if newarr[i] == 1\n            newarr[i] = \"One\"\n        elseif newarr[i]\
    \ == 2\n            newarr[i] = \"Two\"\n        elseif newarr[i] == 3\n     \
    \       newarr[i] = \"Three\"\n        elseif newarr[i] == 4\n            newarr[i]\
    \ = \"Four\"\n        elseif newarr[i] == 5\n            newarr[i] = \"Five\"\n\
    \        elseif newarr[i] == 6\n            newarr[i] = \"Six\"\n        elseif\
    \ newarr[i] == 7\n            newarr[i] = \"Seven\"\n        elseif newarr[i]\
    \ == 8\n            newarr[i] = \"Eight\"\n        elseif newarr[i] == 9\n   \
    \         newarr[i] = \"Nine\"\n        else\n            newarr[i] = \"\"\n \
    \       end\n    end\n    #for i in 1:length(newarr)\n        #if newarr[i] >\
    \ 9 || newarr[i] < 1\n            #deleteat!(newarr, i)\n        #end\n    #end\n\
    \    n = []\n    for i in 1:length(newarr)\n        if newarr[i] != \"\"\n   \
    \         push!(n, newarr[i])\n        end\n    end\n    return n\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009116
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    new_arr = filter(p -> p < 10 && p > 0, arr)\n    new_arr = sort(new_arr)\n\
    \    new_arr = reverse(new_arr)\n    ret = []\n    for i in new_arr\n        if\
    \ i == 1\n            push!(ret, \"One\")\n        elseif i == 2\n           \
    \ push!(ret, \"Two\")\n        elseif i == 3\n            push!(ret, \"Three\"\
    )\n        elseif i == 4\n            push!(ret, \"Four\")\n        elseif i ==\
    \ 5\n            push!(ret, \"Five\")\n        elseif i == 6\n            push!(ret,\
    \ \"Six\")\n        elseif i == 7\n            push!(ret, \"Seven\")\n       \
    \ elseif i == 8\n            push!(ret, \"Eight\")\n        elseif i == 9\n  \
    \          push!(ret, \"Nine\")\n        end\n    end\n    return ret\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009116
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n \n    # Sort the vector\n    ordered_vector = sort(arr, lt=x->x<y)\n    #\
    \ Create a new vector, result\n    result = Vector{String}()\n    # Fill the result\
    \ vector with the values from ordered_vector. For each element, check if the element\
    \ is greater than 0 and lower than 10, if it is, then push the corresponding String\
    \ onto the result vector\n    for val in ordered_vector\n        if (val > 0)\
    \ && (val < 10)\n            push!(result, string(val))\n        end\n    end\n\
    \    # Reverse the result vector and return it\n    reverse!(result)\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpnz3kegh9.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpnz3kegh9.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching (::var\"#1#2\")(::Int64, ::Int64)\n  Closest candidates are:\n    (::var\"\
    #1#2\")(::Any) at /tmp/tmpnz3kegh9.jl:21\n  Stacktrace:\n    [1] (::Base.Order.var\"\
    #1#3\"{var\"#1#2\", typeof(identity)})(x::Int64, y::Int64)\n      @ Base.Order\
    \ ./ordering.jl:125\n    [2] lt(o::Base.Order.Lt{Base.Order.var\"#1#3\"{var\"\
    #1#2\", typeof(identity)}}, a::Int64, b::Int64)\n      @ Base.Order ./ordering.jl:112\n\
    \    [3] sort!\n      @ ./sort.jl:507 [inlined]\n    [4] sort!\n      @ ./sort.jl:574\
    \ [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n\
    \      @ ./sort.jl:725 [inlined]\n    [7] sort(v::Vector{Int64}; kws::Base.Pairs{Symbol,\
    \ var\"#1#2\", Tuple{Symbol}, NamedTuple{(:lt,), Tuple{var\"#1#2\"}}})\n     \
    \ @ Base.Sort ./sort.jl:772\n    [8] by_length(arr::Vector{Int64})\n      @ Main\
    \ /tmp/tmpnz3kegh9.jl:21\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpnz3kegh9.jl:39 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpnz3kegh9.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpnz3kegh9.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching (::var\"\
    #1#2\")(::Int64, ::Int64)\n  Closest candidates are:\n    (::var\"#1#2\")(::Any)\
    \ at /tmp/tmpnz3kegh9.jl:21\n  Stacktrace:\n    [1] (::Base.Order.var\"#1#3\"\
    {var\"#1#2\", typeof(identity)})(x::Int64, y::Int64)\n      @ Base.Order ./ordering.jl:125\n\
    \    [2] lt(o::Base.Order.Lt{Base.Order.var\"#1#3\"{var\"#1#2\", typeof(identity)}},\
    \ a::Int64, b::Int64)\n      @ Base.Order ./ordering.jl:112\n    [3] sort!\n \
    \     @ ./sort.jl:507 [inlined]\n    [4] sort!\n      @ ./sort.jl:574 [inlined]\n\
    \    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sor"
  timestamp: 1660009119
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return Vector{String}()\n    end\n    numbers\
    \ = vcat([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"])\n    new_arr = sort(arr)\n    new_arr = new_arr[new_arr\
    \ .>= 1]\n    new_arr = new_arr[new_arr .<= 9]\n    new_arr = reverse(new_arr)\n\
    \    for i in 1:length(new_arr)\n        new_arr[i] = numbers[new_arr[i]]\n  \
    \  end\n    return new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpikduwuho.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpikduwuho.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpikduwuho.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpikduwuho.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpikduwuho.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpikduwuho.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpikduwuho.jl:3"
  timestamp: 1660009120
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort(reverse(replace.(arr,Dict(1=>\"One\",2=>\"Two\",3=>\"Three\",4=>\"\
    Four\",5=>\"Five\",6=>\"Six\",7=>\"Seven\",8=>\"Eight\",9=>\"Nine\"))))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpkakzo3i7.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpkakzo3i7.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  ArgumentError: broadcasting\
    \ over dictionaries and `NamedTuple`s is reserved\n  Stacktrace:\n   [1] broadcastable(#unused#::Dict{Int64,\
    \ String})\n     @ Base.Broadcast ./broadcast.jl:705\n   [2] broadcasted\n   \
    \  @ ./broadcast.jl:1301 [inlined]\n   [3] by_length(arr::Vector{Int64})\n   \
    \  @ Main /tmp/tmpkakzo3i7.jl:19\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpkakzo3i7.jl:26 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpkakzo3i7.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpkakzo3i7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  ArgumentError: broadcasting\
    \ over dictionaries and `NamedTuple`s is reserved\n  Stacktrace:\n   [1] broadcastable(#unused#::Dict{Int64,\
    \ String})\n     @ Base.Broadcast ./broadcast.jl:705\n   [2] broadcasted\n   \
    \  @ ./broadcast.jl:1301 [inlined]\n   [3] by_length(arr::Vector{Int64})\n   \
    \  @ Main /tmp/tmpkakzo3i7.jl:19\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpkakzo3i7.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpkakzo3i7.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpkakzo3i7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  ArgumentError: broadcasting over dictionaries\
    \ and `NamedTuple`s is reserved\n  Stacktrace:\n   [1] broadcastable(#unused#::Dict{Int64,\
    \ String})\n     @ Base.Broadcast ./broadcast.jl:705\n   [2] broadcasted\n   \
    \  @ ./broadcast.jl:1301 [inlined]\n   [3] by_length(arr::Vector{Int64})\n   \
    \  @ Main /tmp/t"
  timestamp: 1660009118
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    max = 9\n    min = 1\n    new_arr = []\n    # generate new int array\n\
    \    for i in arr\n        if (i >= min && i <= max)\n            push!(new_arr,\
    \ i)\n        end\n    end\n    # sort array\n    sort!(new_arr)\n    # reverse\
    \ array\n    reverse!(new_arr)\n    # generate new string array\n    new_arr_str\
    \ = []\n    for i in new_arr\n        push!(new_arr_str, num_to_str(i))\n    end\n\
    \    return new_arr_str\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpysqp8ait.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpysqp8ait.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: num_to_str\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpysqp8ait.jl:35\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpysqp8ait.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpysqp8ait.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpysqp8ait.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: num_to_str not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpysqp8ait.jl:35\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpysqp8ait.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpysqp8ait.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpysqp8ait.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ num_to_str not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpysqp8ait.jl:35\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpysqp8ait.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpysqp8ait.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpysqp8ait.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: num_to_str\
    \ not defined\n  Stacktrace:\n   [1] by_lengt"
  timestamp: 1660009119
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr_ = [ (x >= 1 && x <= 9) ? x : 0 for x in arr ]\n    arr_ = [ x ==\
    \ 0 ? 0 : Int(string(x)) for x in reverse(sort(arr_)) ]\n    n = length(arr_)\n\
    \    arr_ = [ x == 0 ? 0 : Int(string(x)) for x in arr_ ]\n    # fill in missing\
    \ integers\n    if n > 0\n        if arr_[1] != 1\n            arr_ = vcat(collect(1:arr_[1]-1),\
    \ arr_)\n        end\n        if arr_[end] != 9\n            arr_ = vcat(arr_,\
    \ collect(arr_[end]+1:9))\n        end\n    end\n    names = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  return [ names[x] for x in arr_ ]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmph47mv_oq.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph47mv_oq.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching Int64(::String)\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n\
    \    (::Type{T})(!Matched::AbstractChar) where T<:Union{AbstractChar, Number}\
    \ at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n\
    \    ...\n  Stacktrace:\n   [1] #2\n     @ ./none:0 [inlined]\n   [2] iterate\n\
    \     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#6\"})\n     @ Base ./array.jl:724\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmph47mv_oq.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmph47mv_oq.jl:40 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmph47mv_oq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph47mv_oq.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching Int64(::String)\n\
    \  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar) where T<:Union{Int32,\
    \ Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{AbstractChar, Number} at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n\
    \    (::Type{T})(!Matched::BigInt) where T<:Union{Int128, Int16, Int32, Int64,\
    \ Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n    ...\n  Stacktrace:\n\
    \   [1] #2\n     @ ./none:0 [inlined]\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64}, var\"#2#6\"})\n\
    \     @ Base ./array.jl"
  timestamp: 1660009120
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    s = filter(x -> x>=1 && x<=9, arr)\n    s = sort(s)\n    s = reverse(s)\n\
    \    ss = []\n    for i in s\n        if i == 1\n            push!(ss, \"One\"\
    )\n        elseif i == 2\n            push!(ss, \"Two\")\n        elseif i ==\
    \ 3\n            push!(ss, \"Three\")\n        elseif i == 4\n            push!(ss,\
    \ \"Four\")\n        elseif i == 5\n            push!(ss, \"Five\")\n        elseif\
    \ i == 6\n            push!(ss, \"Six\")\n        elseif i == 7\n            push!(ss,\
    \ \"Seven\")\n        elseif i == 8\n            push!(ss, \"Eight\")\n      \
    \  elseif i == 9\n            push!(ss, \"Nine\")\n        end\n    end\n    return\
    \ ss\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009116
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # if vector is empty return empty vector\n    if length(arr) == 0\n  \
    \      return []\n    end\n    # if vector contains negative numbers or numbers\
    \ greater than 9, return empty vector\n    if any(arr .< 1) || any(arr .> 9)\n\
    \        return []\n    end\n    # create vector with strings from 1 to 9\n  \
    \  digit = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    # sort array\n    sort!(arr)\n    # reverse array\n\
    \    reverse!(arr)\n    return digit[arr]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8d1gy1u2.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmp8d1gy1u2.jl:42\n  Expression: candidate([1,\
    \ -1, 55]) == [\"One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8d1gy1u2.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8d1gy1u2.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8d1gy1u2.jl:43\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: String[] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8d1gy1u2.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8d1gy1u2.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1660009119
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    ## Sort the vector:\n    ## 1. Sort the vector excluding the numbers that\
    \ are not in the list\n    vec = sort(filter(number -> in(number,1:9), arr))\n\
    \    ## 2. Reverse the vector\n    vec = reverse(vec)\n    ## 3. Transform the\
    \ vector in a vector of strings\n    str = map(number -> \"One\", vec)\n    return\
    \ str\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuj2ic59j.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpuj2ic59j.jl:33\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"One\", \"One\", \"One\"\
    , \"One\", \"One\", \"One\", \"One\"] == [\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuj2ic59j.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuj2ic59j.jl:32\ntest set: Test Failed at /tmp/tmpuj2ic59j.jl:36\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"One\", \"One\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuj2ic59j.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuj2ic59j.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpuj2ic59j.jl:37\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\", \"One\", \"One\"] == [\"\
    Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuj2ic59j.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuj2ic59j.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660009119
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # create a vector that contains numbers between 1 and 9 inclusive\n  \
    \  filter_vec = filter(x -> (x >= 1) && (x <= 9), arr) \n    # sort the vector\
    \ of numbers in ascending order\n    sort_vec = sort(filter_vec)\n    # create\
    \ a vector of strings out of the sorted vector of numbers\n    one_to_nine = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"]\n    # create the final vector to be returned\n    ret_vec = []\n\
    \    # iterate through the sorted vector, find the corresponding string from one_to_nine,\
    \ and add it to ret_vec\n    for i in sort_vec\n        push!(ret_vec, one_to_nine[i])\n\
    \    end\n    # reverse the ret_vec\n    ret_vec = reverse(ret_vec)\n    return\
    \ ret_vec\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009117
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Vector that will be returned\n    # Intialize to empty to handle empty\
    \ input case\n    output = String[]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzo_mknoe.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzo_mknoe.jl:1\n\
    in expression starting at /tmp/tmpzo_mknoe.jl:1\n"
  stdout: ''
  timestamp: 1660009118
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    v = []\n    for i in arr\n        if (1 <= i <= 9) && (i % 1 == 0)\n \
    \           push!(v, i)\n        end\n    end\n    v = sort(v)\n    v = reverse(v)\n\
    \    for i in eachindex(v)\n        v[i] = convert(String, v[i])\n    end\n  \
    \  return v\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplopkvlap.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmplopkvlap.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmplopkvlap.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplopkvlap.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplopkvlap.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplopkvlap.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmplopkvlap.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplopkvlap.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/"
  timestamp: 1660009121
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_arr = sort(arr)\n    reversed_arr = reverse(sorted_arr)\n    res\
    \ = []\n    for i in reversed_arr\n        if (1 <= i && i <= 9)\n           \
    \ push!(res, reverse_dict[i])\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpuz1to1de.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpuz1to1de.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: reverse_dict\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpuz1to1de.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuz1to1de.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuz1to1de.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpuz1to1de.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: reverse_dict not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpuz1to1de.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuz1to1de.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuz1to1de.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpuz1to1de.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ reverse_dict not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpuz1to1de.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuz1to1de.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuz1to1de.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpuz1to1de.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: reverse_dict\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660009120
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if isempty(arr)\n        return []\n    end\n    sort!(arr)\n    reverse!(arr)\n\
    \    res = []\n    for i = 1:length(arr)\n        if arr[i] == 1\n           \
    \ push!(res, \"One\")\n        elseif arr[i] == 2\n            push!(res, \"Two\"\
    )\n        elseif arr[i] == 3\n            push!(res, \"Three\")\n        elseif\
    \ arr[i] == 4\n            push!(res, \"Four\")\n        elseif arr[i] == 5\n\
    \            push!(res, \"Five\")\n        elseif arr[i] == 6\n            push!(res,\
    \ \"Six\")\n        elseif arr[i] == 7\n            push!(res, \"Seven\")\n  \
    \      elseif arr[i] == 8\n            push!(res, \"Eight\")\n        elseif arr[i]\
    \ == 9\n            push!(res, \"Nine\")\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009118
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  # Return the sorted version of the vector\n  # Reverse the sorted vector\n\
    \  # Replace all numbers less than 10 with strings\n  # Return the vector of strings\n\
    \  return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpww41t93r.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpww41t93r.jl:30\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpww41t93r.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpww41t93r.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpww41t93r.jl:31\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpww41t93r.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpww41t93r.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpww41t93r.jl:32\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpww41t93r.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpww41t93r.jl:29\ntest set: Test Failed at /tmp/tmpww41t93r.jl:33\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inl"
  timestamp: 1660009120
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if isempty(arr) \n        return []\n    end\n    sorted = sort(arr,by=x->x)\n\
    \    #1:9\n    #sort(sorted,by=x->x)\n    #reverse(sorted)\n    n = length(sorted)\n\
    \    new_arr = []\n    for i in 1:n\n        if sorted[i] == 1\n            push!(new_arr,\"\
    One\")\n        elseif sorted[i] == 2\n            push!(new_arr,\"Two\")\n  \
    \      elseif sorted[i] == 3\n            push!(new_arr,\"Three\")\n        elseif\
    \ sorted[i] == 4\n            push!(new_arr,\"Four\")\n        elseif sorted[i]\
    \ == 5\n            push!(new_arr,\"Five\")\n        elseif sorted[i] == 6\n \
    \           push!(new_arr,\"Six\")\n        elseif sorted[i] == 7\n          \
    \  push!(new_arr,\"Seven\")\n        elseif sorted[i] == 8\n            push!(new_arr,\"\
    Eight\")\n        elseif sorted[i] == 9\n            push!(new_arr,\"Nine\")\n\
    \        end\n    end\n    return new_arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0rzxuvrm.jl:53

    '
  stdout: "test set: Test Failed at /tmp/tmp0rzxuvrm.jl:56\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"One\", \"Two\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Eight\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0rzxuvrm.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0rzxuvrm.jl:55\ntest set: Test Failed at /tmp/tmp0rzxuvrm.jl:59\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Two\", \"Three\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rzxuvrm.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rzxuvrm.jl:55\ntest set: Test\
    \ Failed at /tmp/tmp0rzxuvrm.jl:60\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"Four\", \"Eight\", \"Nine\"] ==\
    \ [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rzxuvrm.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rzxuvrm.jl:55\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660009120
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = arr[arr .> 0]\n    arr = arr[arr .< 10]\n    arr = sort(arr)\n \
    \   a = length(arr)\n    arr = reverse(arr)\n    words = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    a =\
    \ [words[arr[i] - 1] for i in 1:length(arr)]\n    return a\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp4vzx0vwt.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [0]\n  Stacktrace:\n    [1] getindex(A::Vector{String},\
    \ i1::Int64)\n      @ Base ./array.jl:861\n    [2] (::var\"#1#2\"{Vector{String}})(i::Int64)\n\
    \      @ Main ./none:0\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [4] collect_to!(dest::Vector{String}, itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Vector{String}}}, offs::Int64, st::Int64)\n      @ Base ./array.jl:782\n\
    \    [5] collect_to_with_first!(dest::Vector{String}, v1::String, itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Vector{String}}}, st::Int64)\n      @ Base ./array.jl:760\n    [6]\
    \ collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n\
    \      @ Base ./array.jl:734\n    [7] by_length(arr::Vector{Int64})\n      @ Main\
    \ /tmp/tmp4vzx0vwt.jl:25\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp4vzx0vwt.jl:33 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp4vzx0vwt.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp4vzx0vwt.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex(A::Vector{String},\
    \ i1::Int64)\n     @ Base ./array.jl:861\n   [2] (::var\"#1#2\"{Vector{String}})(i::Int64)\n\
    \     @ Main ./none:0\n   [3] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [4] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n\
    \     @ Base ./array.jl:724\n   [5] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp4vzx0vwt.jl:25\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @"
  timestamp: 1660009122
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_arr = sort(arr)\n    reversed_arr = reverse(sorted_arr)\n    filtered_arr\
    \ = filter(x -> x in (1:9), reversed_arr)\n    map(x -> string(x), filtered_arr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6o1wnc8l.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp6o1wnc8l.jl:29\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6o1wnc8l.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6o1wnc8l.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6o1wnc8l.jl:31\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6o1wnc8l.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6o1wnc8l.jl:28\ntest set: Test Failed at /tmp/tmp6o1wnc8l.jl:32\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"3\", \"2\", \"1\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6o1wnc8l.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6o1wnc8l.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6o1wnc8l.jl:33\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6o1wnc8l.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /"
  timestamp: 1660009121
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    length_arr = length(arr)\n    for i in range(1, length_arr + 1)\n    \
    \    if i <= 1 || i >= 9\n            deleteat!(arr, i)\n        end\n    end\n\
    \    sort!(arr)\n    reverse!(arr)\n    for i in range(1, length(arr))\n     \
    \   if arr[i] == 1\n            arr[i] = \"One\"\n        elseif arr[i] == 2\n\
    \            arr[i] = \"Two\"\n        elseif arr[i] == 3\n            arr[i]\
    \ = \"Three\"\n        elseif arr[i] == 4\n            arr[i] = \"Four\"\n   \
    \     elseif arr[i] == 5\n            arr[i] = \"Five\"\n        elseif arr[i]\
    \ == 6\n            arr[i] = \"Six\"\n        elseif arr[i] == 7\n           \
    \ arr[i] = \"Seven\"\n        elseif arr[i] == 8\n            arr[i] = \"Eight\"\
    \n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\n        end\n   \
    \ end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpe0wh16h5.jl:55\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 7-element Vector{Int64} at index [9]\n  Stacktrace:\n   [1] _deleteat!\n\
    \     @ ./array.jl:959 [inlined]\n   [2] deleteat!\n     @ ./array.jl:1423 [inlined]\n\
    \   [3] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpe0wh16h5.jl:22\n  \
    \ [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpe0wh16h5.jl:55 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpe0wh16h5.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpe0wh16h5.jl:56\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] _deleteat!\n\
    \     @ ./array.jl:959 [inlined]\n   [2] deleteat!\n     @ ./array.jl:1423 [inlined]\n\
    \   [3] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpe0wh16h5.jl:22\n  \
    \ [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpe0wh16h5.jl:56 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpe0wh16h5.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpe0wh16h5.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractStr"
  timestamp: 1660009123
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n   \n    #get rid of the values lower than 1 or higher than 9\n    res=filter(x->x>0\
    \ && x<10,arr)\n    \n    #sorting\n    res=sort(res)\n    \n    #reversing\n\
    \    res=reverse(res)\n    \n    #convert to string\n    res=string.(res)\n  \
    \  \n    #replace \n    res=replace(res, \"1\" => \"One\")\n    res=replace(res,\
    \ \"2\" => \"Two\")\n    res=replace(res, \"3\" => \"Three\")\n    res=replace(res,\
    \ \"4\" => \"Four\")\n    res=replace(res, \"5\" => \"Five\")\n    res=replace(res,\
    \ \"6\" => \"Six\")\n    res=replace(res, \"7\" => \"Seven\")\n    res=replace(res,\
    \ \"8\" => \"Eight\")\n    res=replace(res, \"9\" => \"Nine\")\n    \n    \n \
    \   return res\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009119
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted(reverse(sort(collect(filter(k -> k > 0 && k < 10, arr)))))\n  \
    \      .==> [8, 5, 4, 3, 2, 2, 1, 1]\n        .==> [x -> \"One\", x -> \"Two\"\
    , x -> \"Three\", x -> \"Four\", x -> \"Five\", x -> \"Six\", x -> \"Seven\",\
    \ x -> \"Eight\", x -> \"Nine\"][x]\n        .==> [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    end\nend\n\"\"\"\n    Given\
    \ a string, reverse the string, \n    and then return the string with its first\
    \ character capitalized and the rest of the characters lowercase.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \".==\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1d53bwai.jl:20\nin expression starting at\
    \ /tmp/tmp1d53bwai.jl:20\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    arr = reverse(arr)\n    for i in arr\n        if\
    \ i == 1\n            arr[i] = \"One\"\n        elseif i == 2\n            arr[i]\
    \ = \"Two\"\n        elseif i == 3\n            arr[i] = \"Three\"\n        elseif\
    \ i == 4\n            arr[i] = \"Four\"\n        elseif i == 5\n            arr[i]\
    \ = \"Five\"\n        elseif i == 6\n            arr[i] = \"Six\"\n        elseif\
    \ i == 7\n            arr[i] = \"Seven\"\n        elseif i == 8\n            arr[i]\
    \ = \"Eight\"\n        elseif i == 9\n            arr[i] = \"Nine\"\n        end\n\
    \    end\n    arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpailmf32n.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmpailmf32n.jl:49\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpailmf32n.jl:37\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpailmf32n.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpailmf32n.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpailmf32n.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpailmf32n.jl:23\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpailmf32n.jl:5"
  timestamp: 1660009122
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # TODO\n    #\n    # Edit code below\n    #\n    return [\"One\", \"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyu6ldr36.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpyu6ldr36.jl:30\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\", \"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyu6ldr36.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyu6ldr36.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyu6ldr36.jl:31\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"One\", \"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyu6ldr36.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyu6ldr36.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyu6ldr36.jl:32\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"One\", \"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyu6ldr36.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpyu6ldr36.jl:29\ntest set: Test Failed at /tmp/tmpyu6ldr36.jl:33\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"One\", \"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] m"
  timestamp: 1660009121
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    for x in arr\n        if ismember(x, 1:9)\n            push!(res, x)\n\
    \        end\n    end\n    sort!(res)\n    r = reverse(res)\n    for i in r\n\
    \        if i == 1\n            push!(res_fin, \"One\")\n        elseif i == 2\n\
    \            push!(res_fin, \"Two\")\n        elseif i == 3\n            push!(res_fin,\
    \ \"Three\")\n        elseif i == 4\n            push!(res_fin, \"Four\")\n  \
    \      elseif i == 5\n            push!(res_fin, \"Five\")\n        elseif i ==\
    \ 6\n            push!(res_fin, \"Six\")\n        elseif i == 7\n            push!(res_fin,\
    \ \"Seven\")\n        elseif i == 8\n            push!(res_fin, \"Eight\")\n \
    \       elseif i == 9\n            push!(res_fin, \"Nine\")\n        end\n   \
    \ end\n    return res_fin\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprip7wrbn.jl:51

    '
  stdout: "test set: Error During Test at /tmp/tmprip7wrbn.jl:54\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: ismember\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprip7wrbn.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprip7wrbn.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprip7wrbn.jl:53\ntest set:\
    \ Error During Test at /tmp/tmprip7wrbn.jl:55\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: res not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprip7wrbn.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprip7wrbn.jl:55 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprip7wrbn.jl:53\ntest set:\
    \ Error During Test at /tmp/tmprip7wrbn.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: ismember not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprip7wrbn.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprip7wrbn.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprip7wrbn.jl:53\ntest set:\
    \ Error During Test at /tmp/tmprip7wrbn.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ ismember not defined\n  Stacktrace:\n   [1] by_length(arr::Vecto"
  timestamp: 1660009122
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # you may not need all the code below, but it is a useful starting point\n\
    \    for i in 1:length(arr)\n        if arr[i] == 1\n            arr[i] = \"One\"\
    \n        elseif arr[i] == 2\n            arr[i] = \"Two\"\n        elseif arr[i]\
    \ == 3\n            arr[i] = \"Three\"\n        elseif arr[i] == 4\n         \
    \   arr[i] = \"Four\"\n        elseif arr[i] == 5\n            arr[i] = \"Five\"\
    \n        elseif arr[i] == 6\n            arr[i] = \"Six\"\n        elseif arr[i]\
    \ == 7\n            arr[i] = \"Seven\"\n        elseif arr[i] == 8\n         \
    \   arr[i] = \"Eight\"\n        elseif arr[i] == 9\n            arr[i] = \"Nine\"\
    \n        end\n    end\n    return sort(reverse(arr), rev=true)\nend\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type String\
    \ to an object of type Int64\nClosest candidates are:\n  convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \  convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \  convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \  ...\nStacktrace:\n [1] "
  stdout: ''
  timestamp: 1660009124
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Filters and keeps values between 1 and 9 inclusive\n    filter!(a ->\
    \ (a <= 9 && a >= 1), arr)\n    reverse!(arr)\n    results = []\n    for x in\
    \ arr\n        push!(results, digit_to_name(x))\n    end\n    return results\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7g_wwrbl.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp7g_wwrbl.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: digit_to_name\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7g_wwrbl.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7g_wwrbl.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7g_wwrbl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7g_wwrbl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: digit_to_name not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp7g_wwrbl.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7g_wwrbl.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7g_wwrbl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7g_wwrbl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ digit_to_name not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp7g_wwrbl.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7g_wwrbl.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7g_wwrbl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7g_wwrbl.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: digit_to_name\
    \ not defined\n  Stacktrace:\n   "
  timestamp: 1660009122
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # make a new vector containing only the numbers between 1 and 9, then\
    \ sort it\n    v = filter(x -> 1 <= x <= 9, arr)\n    sorted = sort(v)\n    #\
    \ reverse the sorted vector\n    reversed = reverse(sorted)\n    # replace each\
    \ number with its name\n    for i in 1:length(reversed)\n        if reversed[i]\
    \ == 1\n            reversed[i] = \"One\"\n        elseif reversed[i] == 2\n \
    \           reversed[i] = \"Two\"\n        elseif reversed[i] == 3\n         \
    \   reversed[i] = \"Three\"\n        elseif reversed[i] == 4\n            reversed[i]\
    \ = \"Four\"\n        elseif reversed[i] == 5\n            reversed[i] = \"Five\"\
    \n        elseif reversed[i] == 6\n            reversed[i] = \"Six\"\n       \
    \ elseif reversed[i] == 7\n            reversed[i] = \"Seven\"\n        elseif\
    \ reversed[i] == 8\n            reversed[i] = \"Eight\"\n        elseif reversed[i]\
    \ == 9\n            reversed[i] = \"Nine\"\n        end\n    end\n    return reversed\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpd942zhan.jl:50

    '
  stdout: "test set: Error During Test at /tmp/tmpd942zhan.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpd942zhan.jl:41\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd942zhan.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd942zhan.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpd942zhan.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpd942zhan.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd942zhan.jl:5"
  timestamp: 1660009123
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  a = Array(String,0)\n  for i in arr\n    if (1<=i<=9) && (abs(i)%1 == 0)\n\
    \      push!(a, Int2str(i))\n    end\n  end\n  sort!(a)\n  reverse!(a)\n  return\
    \ a\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmph8soxudo.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmph8soxudo.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching Array(::Type{String}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmph8soxudo.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph8soxudo.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph8soxudo.jl:33\ntest set:\
    \ Error During Test at /tmp/tmph8soxudo.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching Array(::Type{String}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmph8soxudo.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph8soxudo.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph8soxudo.jl:33\ntest set:\
    \ Error During Test at /tmp/tmph8soxudo.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching Array(::Type{String},\
    \ ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearA"
  timestamp: 1660009123
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    sort!(arr)\n    reverse!(arr)\n    my_dict = [\"\
    One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"\
    ]\n    for i in range(1,length(arr))\n        if arr[i] < 1 || arr[i] > 9\n  \
    \          arr[i] = 10\n        end\n    end\n    for i in range(1,length(arr))\n\
    \        if arr[i] == 10\n            deleteat!(arr,i)\n        end\n    end\n\
    \    for i in range(1,length(arr))\n        arr[i] = my_dict[arr[i]]\n    end\n\
    \    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpkt4s1ew2.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpkt4s1ew2.jl:43\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpkt4s1ew2.jl:34\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkt4s1ew2.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkt4s1ew2.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpkt4s1ew2.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpkt4s1ew2.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkt4s1ew2.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkt4s1ew2.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpkt4s1ew2.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest cand"
  timestamp: 1660009124
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n    select = Vector{Int64}()\n    for i in arr\n\
    \        if (1 <= i <= 9)\n            push!(select, i)\n        end\n    end\n\
    \    sort!(select)\n    reverse!(select)\n    final = Vector{String}()\n    for\
    \ i in select\n        push!(final, numbers[i])\n    end\n    return final\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009120
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = [if i in 1:9 \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\"\
    \ \"Seven\" \"Eight\" \"Nine\" \n        else \"*\" end for i in arr]\n    return\
    \ reverse(sort(arr))\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3jhzc0jj.jl:19\nin expression starting at /tmp/tmp3jhzc0jj.jl:19\n"
  stdout: ''
  timestamp: 1660009121
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    d = Dict(\"One\"\
    \ => 1, \"Two\" => 2, \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" =>\
    \ 6, \"Seven\" => 7, \"Eight\" => 8, \"Nine\" => 9)\n    new_arr = []\n    for\
    \ i in arr\n        if i > 0 && i < 10\n            push!(new_arr, i)\n      \
    \  end\n    end\n    sorted_arr = sort(new_arr)\n    for j in reverse(sorted_arr)\n\
    \        for k in keys(d)\n            if d[k] == j\n                push!(new_arr,\
    \ k)\n            end\n        end\n    end\n    return new_arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpn_prxrk3.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpn_prxrk3.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpn_prxrk3.jl:37\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpn_prxrk3.jl:44 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpn_prxrk3.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpn_prxrk3.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essential"
  timestamp: 1660009124
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    new_arr = []\n    for i in arr\n        if 1 <= i <= 9\n            new_arr\
    \ = push!(new_arr,i)\n        end\n    end\n    new_arr = sort(new_arr)\n    new_arr\
    \ = reverse(new_arr)\n    for i in 1:length(new_arr)\n        if new_arr[i] ==\
    \ 1\n            new_arr[i] = \"One\"\n        elseif new_arr[i] == 2\n      \
    \      new_arr[i] = \"Two\"\n        elseif new_arr[i] == 3\n            new_arr[i]\
    \ = \"Three\"\n        elseif new_arr[i] == 4\n            new_arr[i] = \"Four\"\
    \n        elseif new_arr[i] == 5\n            new_arr[i] = \"Five\"\n        elseif\
    \ new_arr[i] == 6\n            new_arr[i] = \"Six\"\n        elseif new_arr[i]\
    \ == 7\n            new_arr[i] = \"Seven\"\n        elseif new_arr[i] == 8\n \
    \           new_arr[i] = \"Eight\"\n        elseif new_arr[i] == 9\n         \
    \   new_arr[i] = \"Nine\"\n        end\n    end\n    return new_arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009120
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  # we'll need to create a dictionary to map from ints to strings\n  # (the\
    \ dictionary maps from keys to values, in this case from ints to strings)\n  #\
    \ a dictionary can be created using the string() function\n  str_map = Dict{Int64,\
    \ String}()\n  str_map[1] = \"One\"\n  str_map[2] = \"Two\"\n  str_map[3] = \"\
    Three\"\n  str_map[4] = \"Four\"\n  str_map[5] = \"Five\"\n  str_map[6] = \"Six\"\
    \n  str_map[7] = \"Seven\"\n  str_map[8] = \"Eight\"\n  str_map[9] = \"Nine\"\n\
    \  \n  # now we need to modify the vector `arr` by:\n  # 1. removing all numbers\
    \ that are not between 1 and 9 inclusive\n  # 2. sorting\n  # 3. reversing\n \
    \ # 4. replacing each number with its corresponding String from the `str_map`\
    \ dictionary\n  \n  # we want to replace the elements of `arr` with their corresponding\
    \ strings\n  # so, we'll need to create an empty vector of strings to store the\
    \ strings in\n  str_arr = Vector{String}()\n  \n  # we'll use a for loop to iterate\
    \ over all the elements of `arr`\n  for i in 1:length(arr)\n    # we want to only\
    \ keep the elements of `arr` between 1 and 9 inclusive\n    # and put the corresponding\
    \ string into `str_arr`\n    # the indexing operator `[]` can be used to get and\
    \ set the value of elements\n    # in a vector, so arr[i] will give us the ith\
    \ element of `arr`\n    # \n    # if `arr[i]` is between 1 and 9 inclusive, we\
    \ need to get the string from `str_map`\n    # and then add it to `str_arr`\n\
    \    #\n    # but how do we check if `arr[i]` is between 1 and 9 inclusive?\n\
    \    # it turns out we can compare values with the relational operators \n   \
    \ # (i.e. <, >, <=, >=, ==)\n    # for example:\n    #\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp55zsoqy4.jl:44\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp55zsoqy4.jl:1\n\
    in expression starting at /tmp/tmp55zsoqy4.jl:1\n"
  stdout: ''
  timestamp: 1660009121
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Seperate the vector into numbers that are between 1 and 9\n    # Sort\
    \ them\n    # Reverse it\n    # And then replace each digit by its corresponding\
    \ name\n    # And if the vector is empty return an empty vector\n    # And if\
    \ the vector has any strange number ignore it\n    if length(arr) == 0\n     \
    \   return String[]\n    else\n        arr = arr[arr .>= 1 .& arr .<= 9]\n   \
    \     sort!(arr)\n        reverse!(arr)\n        for i in arr\n            if\
    \ i == 1\n                i = \"One\"\n            elseif i == 2\n           \
    \     i = \"Two\"\n            elseif i == 3\n                i = \"Three\"\n\
    \            elseif i == 4\n                i = \"Four\"\n            elseif i\
    \ == 5\n                i = \"Five\"\n            elseif i == 6\n            \
    \    i = \"Six\"\n            elseif i == 7\n                i = \"Seven\"\n \
    \           elseif i == 8\n                i = \"Eight\"\n            elseif i\
    \ == 9\n                i = \"Nine\"\n            end\n        end\n        return\
    \ arr\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt5lxgj6i.jl:57

    '
  stdout: "test set: Error During Test at /tmp/tmpt5lxgj6i.jl:60\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpt5lxgj6i.jl:52\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpt5lxgj6i.jl:60 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpt5lxgj6i.jl:59\ntest set:\
    \ Error During Test at /tmp/tmpt5lxgj6i.jl:62\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essen"
  timestamp: 1660009124
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    res = sort(reverse(v))\n    names = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    res = filter(x -> x\
    \ in 1:9, res)\n    return [names[x] for x in res]\nend\n\"\"\"\n    Given a vector\
    \ of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse\
    \ the resulting vector, and then replace each digit by its corresponding name\
    \ from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuyxnv35o.jl:24\nin expression starting at\
    \ /tmp/tmpuyxnv35o.jl:24\n"
  stdout: ''
  timestamp: 1660009121
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_arr = sort(arr)\n    result = []\n    for num in sorted_arr\n \
    \       if num in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n            push!(result, number_names[num])\n\
    \        end\n    end\n    reverse(result)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpnhjlaxb_.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpnhjlaxb_.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: number_names\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnhjlaxb_.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnhjlaxb_.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnhjlaxb_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpnhjlaxb_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: number_names not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpnhjlaxb_.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnhjlaxb_.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnhjlaxb_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpnhjlaxb_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ number_names not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpnhjlaxb_.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnhjlaxb_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnhjlaxb_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpnhjlaxb_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: number_names\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660009123
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    new_arr = [0]\n    for val in arr\n        if(val <= 9 && val >= 1)\n\
    \            push!(new_arr, val)\n        end\n    end\n    new_arr = sort(new_arr)\n\
    \    new_arr = reverse(new_arr)\n    for i in 1:length(new_arr)\n        if(new_arr[i]\
    \ == 1)\n            new_arr[i] = \"One\"\n        elseif(new_arr[i] == 2)\n \
    \           new_arr[i] = \"Two\"\n        elseif(new_arr[i] == 3)\n          \
    \  new_arr[i] = \"Three\"\n        elseif(new_arr[i] == 4)\n            new_arr[i]\
    \ = \"Four\"\n        elseif(new_arr[i] == 5)\n            new_arr[i] = \"Five\"\
    \n        elseif(new_arr[i] == 6)\n            new_arr[i] = \"Six\"\n        elseif(new_arr[i]\
    \ == 7)\n            new_arr[i] = \"Seven\"\n        elseif(new_arr[i] == 8)\n\
    \            new_arr[i] = \"Eight\"\n        elseif(new_arr[i] == 9)\n       \
    \     new_arr[i] = \"Nine\"\n        end\n    end\n    return new_arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpazlajo2p.jl:52

    '
  stdout: "test set: Error During Test at /tmp/tmpazlajo2p.jl:55\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpazlajo2p.jl:43\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpazlajo2p.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpazlajo2p.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpazlajo2p.jl:56\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:3"
  timestamp: 1660009124
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # filtering out non-digits\n    digits = arr[ arr .\u2208 1:9 ]\n    #\
    \ sorting\n    sort!(digits)\n    # reversing\n    reverse!(digits)\n    # converting\
    \ to words\n    words = [int2str(e) for e in digits]\n    return words\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxrtxzt2x.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpxrtxzt2x.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 8\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpxrtxzt2x.jl:20\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpxrtxzt2x.jl:34 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpxrtxzt2x.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpxrtxzt2x.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 0 and\
    \ 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpxrtxzt2x.jl:20\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpxrtxzt2x.jl:35 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n  "
  timestamp: 1660009123
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    for x in 1:length(arr)\n        if (arr[x] > 9) || (arr[x] < 1)\n    \
    \        deleteat!(arr, x)\n        end\n    end\n    sorted_arr = sort(arr)\n\
    \    rev_arr = reverse(sorted_arr)\n    strings = convert(Array{String,1}, rev_arr)\n\
    \    for y in 1:length(strings)\n        if strings[y] == 1\n            strings[y]\
    \ = \"One\"\n        elseif strings[y] == 2\n            strings[y] = \"Two\"\n\
    \        elseif strings[y] == 3\n            strings[y] = \"Three\"\n        elseif\
    \ strings[y] == 4\n            strings[y] = \"Four\"\n        elseif strings[y]\
    \ == 5\n            strings[y] = \"Five\"\n        elseif strings[y] == 6\n  \
    \          strings[y] = \"Six\"\n        elseif strings[y] == 7\n            strings[y]\
    \ = \"Seven\"\n        elseif strings[y] == 8\n            strings[y] = \"Eight\"\
    \n        elseif strings[y] == 9\n            strings[y] = \"Nine\"\n        end\n\
    \    end\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpculahvt7.jl:52

    '
  stdout: "test set: Error During Test at /tmp/tmpculahvt7.jl:55\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpculahvt7.jl:26\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpculahvt7.jl:55 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpculahvt7.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpculahvt7.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpculahvt7.jl:20\n"
  timestamp: 1660009125
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    v = filter(x -> x > 0 && x < 10, arr)\n    sort!(v)\n    reverse!(v)\n\
    \    map(x -> string(x), v)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwfkbrzha.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpwfkbrzha.jl:29\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfkbrzha.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfkbrzha.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwfkbrzha.jl:31\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwfkbrzha.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwfkbrzha.jl:28\ntest set: Test Failed at /tmp/tmpwfkbrzha.jl:32\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"3\", \"2\", \"1\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfkbrzha.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfkbrzha.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwfkbrzha.jl:33\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfkbrzha.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /"
  timestamp: 1660009123
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort the integer that are between 1 and 9 inclusive\n    to_sort = filter(x\
    \ -> x in 1:9, arr)\n    # reverse the resulting vector\n    reversed = reverse(sort(to_sort))\n\
    \    # replace each digit by its corresponding name\n    replaced = map(x -> string(x),\
    \ reversed)\n    return replaced\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9xq8daie.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp9xq8daie.jl:32\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"8\", \"5\", \"4\", \"3\", \"2\"\
    , \"2\", \"1\", \"1\"] == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
    \ \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9xq8daie.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9xq8daie.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9xq8daie.jl:34\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: [\"1\"] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9xq8daie.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9xq8daie.jl:31\ntest set: Test Failed at /tmp/tmp9xq8daie.jl:35\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ [\"3\", \"2\", \"1\"] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9xq8daie.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9xq8daie.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9xq8daie.jl:36\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"9\", \"8\", \"4\"] == [\"Nine\"\
    , \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9xq8daie.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /"
  timestamp: 1660009123
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  newArr = []\n  for a in arr\n    if a in 1:9\n      push!(newArr, a)\n \
    \   end\n  end\n  sort!(newArr)\n  newArr = reverse(newArr)\n  newArrStr = []\n\
    \  for b in newArr\n    if b == 1\n      push!(newArrStr, \"One\")\n    elseif\
    \ b == 2\n      push!(newArrStr, \"Two\")\n    elseif b == 3\n      push!(newArrStr,\
    \ \"Three\")\n    elseif b == 4\n      push!(newArrStr, \"Four\")\n    elseif\
    \ b == 5\n      push!(newArrStr, \"Five\")\n    elseif b == 6\n      push!(newArrStr,\
    \ \"Six\")\n    elseif b == 7\n      push!(newArrStr, \"Seven\")\n    elseif b\
    \ == 8\n      push!(newArrStr, \"Eight\")\n    elseif b == 9\n      push!(newArrStr,\
    \ \"Nine\")\n    end\n  end\n  return newArrStr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009122
- exit_code: 0
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return []\n    end\n    if length(arr) ==\
    \ 1\n        if arr[1] == 1\n            return [\"One\"]\n        else\n    \
    \        return []\n        end\n    end\n    #Sort elements\n    sort!(arr)\n\
    \    #Reverse elements\n    reverse!(arr)\n    #Convert to String\n    newArr\
    \ = String[]\n    for i in arr\n        if i == 1\n            push!(newArr, \"\
    One\")\n        elseif i == 2\n            push!(newArr, \"Two\")\n        elseif\
    \ i == 3\n            push!(newArr, \"Three\")\n        elseif i == 4\n      \
    \      push!(newArr, \"Four\")\n        elseif i == 5\n            push!(newArr,\
    \ \"Five\")\n        elseif i == 6\n            push!(newArr, \"Six\")\n     \
    \   elseif i == 7\n            push!(newArr, \"Seven\")\n        elseif i == 8\n\
    \            push!(newArr, \"Eight\")\n        elseif i == 9\n            push!(newArr,\
    \ \"Nine\")\n        end\n    end\n    return newArr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660009121
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Sort the array and filter out negative numbers\n    nonnegative = sort(arr[arr\
    \ .> 0])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhovxqmr.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhovxqmr.jl:1\n\
    in expression starting at /tmp/tmpxhovxqmr.jl:1\n"
  stdout: ''
  timestamp: 1660009123
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # Filter out the weirds and sort the numbers\n    arr = sort(filter(x\
    \ -> x <= 9 && x >= 1, arr))\n    # Reverse it and turn it into a vector of strings\n\
    \    return reverse(map(Int, arr))\nend\nprintln(by_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3]))\nprintln(by_length([]))\nprintln(by_length([1, -1, 55]))\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n  [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \    @ Base ./array.jl:903\n  [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n    @ Base ./array.jl:253\n  [3]\
    \ unsafe_copyto!\n    @ ./array.jl:307 [inlined]\n  [4] _copyto_impl!\n    @ ./array.jl:331\
    \ [inlined]\n  [5] copyto!\n    @ ./array.jl:317 [inlined]\n  [6] copyto!\n  \
    \  @ ./array.jl:343 [inlined]\n  [7] copyto_axcheck!\n    @ ./abstractarray.jl:1104\
    \ [inlined]\n  [8] Vector{String}(x::Vector{Int64})\n    @ Base ./array.jl:563\n\
    \  [9] convert\n    @ ./array.jl:554 [inlined]\n [10] by_length(arr::Vector{Int64})\n\
    \    @ Main /tmp/tmp4fypzmss.jl:22\n [11] top-level scope\n    @ /tmp/tmp4fypzmss.jl:24\n\
    in expression starting at /tmp/tmp4fypzmss.jl:24\n"
  stdout: ''
  timestamp: 1660009126
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    number_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]\n    temp = [ (x,i) for (i,x) in enumerate(arr)\
    \ if x in 1:9]\n    temp_arr = sort(temp, by = x -> x[1])\n    return [ number_names[x[1]-1]\
    \ for x in reverse(temp_arr) ]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvwpxxljj.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpvwpxxljj.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 9-element Vector{String} at index [0]\n  Stacktrace:\n    [1] getindex\n\
    \      @ ./array.jl:861 [inlined]\n    [2] #4\n      @ ./none:0 [inlined]\n  \
    \  [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n   \
    \   @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760\
    \ [inlined]\n    [6] collect(itr::Base.Generator{Vector{Tuple{Int64, Int64}},\
    \ var\"#4#8\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpvwpxxljj.jl:22\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpvwpxxljj.jl:29 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpvwpxxljj.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpvwpxxljj.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element\
    \ Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] #4\n     @ ./none:0 [inlined]\n   [3] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [4] collect(itr::Base.Generator{Vector{Tuple{Int64, Int64}}, var\"\
    #4#8\"{Vector{String}}})\n     @ Base ./array.jl:724\n   [5] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpvwpxxljj.jl:22\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpvwpxxljj.jl:31 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpvwpxxljj.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpvwpxxljj.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, "
  timestamp: 1660009125
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"][reverse(sort(filter(x -> x >= 1 && x <= 9, arr)))]\nend\n\
    \ \n \n@testset \"by_length should return empty vector if given an empty vector\"\
    \ begin\n    @test by_length([]) == []\nend\n \n@testset \"by_length should return\
    \ One if given 1\" begin\n    @test by_length([1]) == [\"One\"]\nend\n \n@testset\
    \ \"by_length should return Two if given 2\" begin\n    @test by_length([2]) ==\
    \ [\"Two\"]\nend\n \n@testset \"by_length should return One, Two if given 1, 2\"\
    \ begin\n    @test by_length([1, 2]) == [\"Two\", \"One\"]\nend\n \n@testset \"\
    by_length should return correct result\" begin\n    @test by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]\nend\n \n@testset \"by_length should ignore strange numbers\"\
    \ begin\n    @test by_length([1, -1, 55]) == [\"One\"]\nend\n \n \n\"\"\"\n  \
    \  Given a vector of positive integers, return a vector of length equal to the\
    \ minimum of\n    the original vector. The resulting vector should have the same\
    \ values as the minimum\n    element of the original vector but in the same order\
    \ as in the original vector.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpi7bsd8v8.jl:23

    in expression starting at /tmp/tmpi7bsd8v8.jl:23

    '
  stdout: ''
  timestamp: 1660009123
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # sort arr\n    arr.sort!()\n    # convert to string, capitalize\n   \
    \ arr = string.(arr)\n    arr = map(s -> s[1] * uppercase(s[2:end]), arr)\n  \
    \  # reverse\n    reverse!(arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpciqg7ct8.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpciqg7ct8.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ sort!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpciqg7ct8.jl:20\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpciqg7ct8.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpciqg7ct8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpciqg7ct8.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ sort!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpciqg7ct8.jl:20\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpciqg7ct8.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpciqg7ct8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpciqg7ct8.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field sort!\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpciqg7ct8.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpciqg7ct8.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpciqg7ct8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpciqg7ct8.jl:36\n  Test threw exception\n  Expressio"
  timestamp: 1660009124
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]\n    return reverse(num_names[arr[arr .>= 1\
    \ .& arr .<= 9]])\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmprf_7okxx.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmprf_7okxx.jl:27\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"Three\", \"Two\", \"Eight\", \"\
    Five\", \"Four\", \"One\", \"One\", \"Two\"] == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprf_7okxx.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprf_7okxx.jl:26\ntest set: Error During Test\
    \ at /tmp/tmprf_7okxx.jl:29\n  Test threw exception\n  Expression: candidate([1,\
    \ -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 9-element Vector{String}\
    \ at index [[1, 55]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{String},\
    \ I::Tuple{Vector{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprf_7okxx.jl:20\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmprf_7okxx.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmprf_7okxx.jl:26\ntest set:\
    \ Test Failed at /tmp/tmprf_7okxx.jl:30\n  Expression: candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"Two\", \"Three\", \"One\"\
    ] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprf_7okxx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprf_7okxx.jl:26\ntes"
  timestamp: 1660009126
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    n = length(arr)\n    if n == 0 \n        return []\n    end\n    if n\
    \ == 1\n        if arr[1] >= 1 && arr[1] <= 9\n            return [dic[arr[1]]]\n\
    \        else\n            return []\n        end\n    end\n    store = []\n \
    \   for i in 1:n\n        if arr[i] >= 1 && arr[i] <= 9\n            push!(store,\
    \ arr[i])\n        end\n    end\n    sort!(store)\n    res = []\n    for i in\
    \ 1:length(store)\n        push!(res, dic[store[i]])\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpe_wlkhof.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmpe_wlkhof.jl:48\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: dic not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpe_wlkhof.jl:39\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_wlkhof.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_wlkhof.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpe_wlkhof.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: dic not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpe_wlkhof.jl:39\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_wlkhof.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_wlkhof.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpe_wlkhof.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ dic not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpe_wlkhof.jl:39\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_wlkhof.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_wlkhof.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpe_wlkhof.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: dic\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @"
  timestamp: 1660009125
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  temp = sort([e for e in arr if 0 < e < 10])\n  temp = reverse(temp)\n  return\
    \ [ convert(String, i) for i in temp]\n  \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpstlv20s5.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpstlv20s5.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#2#4\")(i::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpstlv20s5.jl:21\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpstlv20s5.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpstlv20s5.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpstlv20s5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#2#4\")(i::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724\
    \ [inlined]\n   [4] by_length(arr::Vecto"
  timestamp: 1660009126
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    (sort(filter(x -> x > 0 && x < 10, arr)) .* -1) .|> x -> string(x) .|>\
    \ String .|> collect\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp4_a_cowe.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp4_a_cowe.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Vector{Char},\
    \ i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String},\
    \ doffs::Int64, src::Vector{Vector{Char}}, soffs::Int64, n::Int64)\n      @ Base\
    \ ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n \
    \   [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n   \
    \   @ ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n\
    \    [7] copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Vector{Char}})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp4_a_cowe.jl:19\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp4_a_cowe.jl:26 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp4_a_cowe.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4_a_cowe.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at ~/.conda/e"
  timestamp: 1660009127
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    index = filter(x -> 1 <= x <= 9, arr)\n    index = sort(index)\n    index\
    \ = reverse(index)\n    index = map(x -> string(x), index)\n    index = replace(index,\
    \ 1, \"One\")\n    index = replace(index, 2, \"Two\")\n    index = replace(index,\
    \ 3, \"Three\")\n    index = replace(index, 4, \"Four\")\n    index = replace(index,\
    \ 5, \"Five\")\n    index = replace(index, 6, \"Six\")\n    index = replace(index,\
    \ 7, \"Seven\")\n    index = replace(index, 8, \"Eight\")\n    index = replace(index,\
    \ 9, \"Nine\")\n    return index\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp1lno_nzi.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp1lno_nzi.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace(::Vector{String}, ::Int64, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp1lno_nzi.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1lno_nzi.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1lno_nzi.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp1lno_nzi.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching replace(::Vector{String}, ::Int64, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp1lno_nzi.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1lno_nzi.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1lno_nzi.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp1lno_nzi.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace(::Vector{String},\
    \ ::Int64, ::String)\n  Closest candidates are:\n    replace"
  timestamp: 1660009126
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    n = length(arr)\n    arr2 = zeros(Int64, n)\n    valid_entries = 0\n \
    \   for i = 1:n\n        if arr[i]>=1 && arr[i]<=9\n            valid_entries\
    \ = valid_entries + 1\n            arr2[valid_entries] = arr[i]\n        end\n\
    \    end\n    arr2 = arr2[1:valid_entries]\n    sort!(arr2)\n    reverse!(arr2)\n\
    \    arr2 = convert(Vector{String}, arr2)\n    for i = 1:length(arr2)\n      \
    \  if arr2[i] == 1\n            arr2[i] = \"One\"\n        elseif arr2[i] == 2\n\
    \            arr2[i] = \"Two\"\n        elseif arr2[i] == 3\n            arr2[i]\
    \ = \"Three\"\n        elseif arr2[i] == 4\n            arr2[i] = \"Four\"\n \
    \       elseif arr2[i] == 5\n            arr2[i] = \"Five\"\n        elseif arr2[i]\
    \ == 6\n            arr2[i] = \"Six\"\n        elseif arr2[i] == 7\n         \
    \   arr2[i] = \"Seven\"\n        elseif arr2[i] == 8\n            arr2[i] = \"\
    Eight\"\n        elseif arr2[i] == 9\n            arr2[i] = \"Nine\"\n       \
    \ end\n    end\n    return arr2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp6alo5st0.jl:57

    '
  stdout: "test set: Error During Test at /tmp/tmp6alo5st0.jl:60\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp6alo5st0.jl:31\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp6alo5st0.jl:60 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp6alo5st0.jl:59\ntest set:\
    \ Error During Test at /tmp/tmp6alo5st0.jl:62\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essen"
  timestamp: 1660009126
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    n = length(arr)\n    # make a new vector of length n to store values in\
    \ sorted order\n    sorted_arr = Vector{Int64}(undef, n)\n    for i in 1:n\n \
    \       # if the current element is in the range [1, 9]\n        if 1 <= arr[i]\
    \ <= 9\n            # find where it belongs in the sorted vector\n           \
    \ j = 0\n            while j < i && arr[i] > sorted_arr[j]\n                j\
    \ += 1\n            end\n            # insert it in sorted order\n           \
    \ sorted_arr = insert!(sorted_arr, j+1, arr[i])\n        end\n    end\n    # reverse\
    \ the sorted vector\n    sorted_arr = reverse(sorted_arr)\n    # now put it into\
    \ a string vector\n    string_arr = Vector{String}(undef, n)\n    for i in 1:n\n\
    \        if sorted_arr[i] == 1\n            string_arr[i] = \"One\"\n        elseif\
    \ sorted_arr[i] == 2\n            string_arr[i] = \"Two\"\n        elseif sorted_arr[i]\
    \ == 3\n            string_arr[i] = \"Three\"\n        elseif sorted_arr[i] ==\
    \ 4\n            string_arr[i] = \"Four\"\n        elseif sorted_arr[i] == 5\n\
    \            string_arr[i] = \"Five\"\n        elseif sorted_arr[i] == 6\n   \
    \         string_arr[i] = \"Six\"\n        elseif sorted_arr[i] == 7\n       \
    \     string_arr[i] = \"Seven\"\n        elseif sorted_arr[i] == 8\n         \
    \   string_arr[i] = \"Eight\"\n        elseif sorted_arr[i] == 9\n           \
    \ string_arr[i] = \"Nine\"\n        end\n    end\n    return string_arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2z8qkvc5.jl:63

    '
  stdout: "test set: Error During Test at /tmp/tmp2z8qkvc5.jl:66\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 8-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmp2z8qkvc5.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2z8qkvc5.jl:66 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2z8qkvc5.jl:65\ntest set:\
    \ Error During Test at /tmp/tmp2z8qkvc5.jl:68\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp2z8qkvc5.jl:27\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2z8qkvc5.jl:68 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2z8qkvc5.jl:65\ntest set:\
    \ Error During Test at /tmp/tmp2z8qkvc5.jl:69\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmp2z8qkvc5.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2z8qkvc5.jl:69 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @"
  timestamp: 1660009126
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  l = length(arr)\n  i = 1\n  tmp = Vector()\n  while i <= l\n    if arr[i]\
    \ > 0 && arr[i] < 10\n      push!(tmp, arr[i])\n    end\n    i += 1\n  end\n \
    \ sort!(tmp)\n  i = length(tmp)\n  res = Vector()\n  while i > 0\n    push!(res,\
    \ tmp[i])\n    i -= 1\n  end\n  for i in 1:length(res)\n    case res[i]\n    \
    \  when 1\n        res[i] = \"One\"\n      when 2\n        res[i] = \"Two\"\n\
    \      when 3\n        res[i] = \"Three\"\n      when 4\n        res[i] = \"Four\"\
    \n      when 5\n        res[i] = \"Five\"\n      when 6\n        res[i] = \"Six\"\
    \n      when 7\n        res[i] = \"Seven\"\n      when 8\n        res[i] = \"\
    Eight\"\n      when 9\n        res[i] = \"Nine\"\n    end\n  end\n  return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp_a2tezza.jl:35 expected \"\
    end\", got \"res\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_a2tezza.jl:36\n\
    in expression starting at /tmp/tmp_a2tezza.jl:36\n"
  stdout: ''
  timestamp: 1660009124
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # First sort the vector.\n    s = sort(arr)\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3hvmdh6s.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3hvmdh6s.jl:1\n\
    in expression starting at /tmp/tmp3hvmdh6s.jl:1\n"
  stdout: ''
  timestamp: 1660009124
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    arr = reverse(arr)\n    str_arr = []\n    for n in\
    \ arr\n        if 1 <= n <= 9\n            append!(str_arr, string(n))\n     \
    \   end\n    end\n    str_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpya67qe54.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpya67qe54.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpya67qe54.jl:27\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpya67qe54.jl:34 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpya67qe54.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpya67qe54.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.j"
  timestamp: 1660009127
