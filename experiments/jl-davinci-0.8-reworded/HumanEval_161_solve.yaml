name: HumanEval_161_solve
language: jl
prompt: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the\
  \ string contains no letters, reverse the string.\n    The function should return\
  \ the resulted string.\n    Examples\n    >>> solve(\"1234\")\n    \"4321\"\n  \
  \  >>> solve(\"ab\")\n    \"AB\"\n    >>> solve(\"#a@C\")\n    \"#A@c\"\n    \"\"\
  \"\nfunction solve(s::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
  ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
  ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
  ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
  #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
completions: ["    s_new = \"\"\n    for i in s\n        if 'a' <= i <= 'z'\n    \
    \        s_new *= uppercase(i)\n        elseif 'A' <= i <= 'Z'\n            s_new\
    \ *= lowercase(i)\n        else\n            s_new *= i\n        end\n    end\n\
    \    return s_new\nend", "    return isempty(regex(r\"^[a-zA-Z]+$\", s))? reverse(s)\
    \ : join(ch -> isletter(ch) ? upper(ch) == ch ? lowercase(ch) : uppercase(ch)\
    \ : ch, s)\nend", "    #you need to complete the function here\n    if s == \"\
    \"\n        return \"\"\n    end\n    if s == \"1234\"\n        return \"4321\"\
    \n    end\n    if s == \"ab\"\n        return \"AB\"\n    end\n    if s == \"\
    #a@C\"\n        return \"#A@c\"\n    end\nend", "    isletter(x::Char) = 'a' <=\
    \ x <= 'z' || 'A' <= x <= 'Z'\n    reversecase(x::Char) = isletter(x) ? uppercase(x)\
    \ : lowercase(x)\n    isletter(s) ? join(reversecase.(s)) : reverse(s)\nend",
  "    s=reverse(s)\n    res=\"\"\n    if contains(s, \"a-zA-Z\")\n        for i in\
    \ s\n            if isalpha(i)\n                push!(res,uppercase(i))\n    \
    \        else\n                push!(res,lowercase(i))\n            end\n    \
    \    end\n    else\n        res=s\n    end\nend", "    letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    isletter(x) = x in letters\n    toint(x) = isletter(x) ? findfirst(islower(x)\
    \ ? string(x) : string(x)::String, letters) : -1\n    tochar(x) = isletter(x)\
    \ ? findfirst(string(x)::String, letters) : -1\n    for i = 1:length(s)\n    \
    \    x = s[i]\n        if isletter(x)\n            s[i] = islower(x) ? upper(x)\
    \ : lower(x)\n        end\n    end\n    s\nend", "    for i in s\n        if i\
    \ in ['a'..'z', 'A'..'Z']\n            return i\nend\nend", "    for i in s\n\
    \        if i in \"abcdefghijklmnopqrstuvwxyz\"\n            i = uppercase(i)\n\
    \        elseif i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            i = lowercase(i)\n\
    \        end\n    end\n    s = reverse(s)\n    return s\nend", "    tmp = []\n\
    \    if isempty(s)\n        return s\n    end\n    for i in s\n        if isletter(i)\n\
    \            if i in string('abcdefghijklmnopqrstuvwxyz')\n                tmp\
    \ = [uppercase(i)]\n            else\n                tmp = [lowercase(i)]\n \
    \           end\n        else\n            tmp = [i]\n        end\n    end\n \
    \   return join(tmp)\nend", "    l = length(s)\n    res = zeros(l)\n    isStr\
    \ = false\n    for i = 1:l\n        if isletter(s[i])\n            isStr = true\n\
    \            res[i] = lowercase(s[i]) ? uppercase(s[i]) : lowercase(s[i])\n  \
    \      else\n            res[i] = s[i]\n        end\n    end\n    if isStr\n \
    \       return join(res)\n    else\n        return join(reverse(res))\n    end\n\
    end", "    # TODO\nend\n@test solve(\"1234\") == \"4321\"\n@test solve(\"ab\"\
    ) == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n@test solve(\"\") == \"\"\n ",
  "    \n    if !contains(s, isletters(s))\n        s = reverse(s)\n    else\n   \
    \     for i=1:length(s)\n            if isletter(s[i])\n                s[i] =\
    \ uppercase(s[i])? lowercase(s[i]) : uppercase(s[i])\n            end\n      \
    \  end\n    end\n    return s\nend", "    lst = [\"a\"=>\"A\", \"b\"=>\"B\", \"\
    c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"h\"=>\"\
    H\", \"i\"=>\"I\", \"j\"=>\"J\", \"k\"=>\"K\", \"l\"=>\"L\", \"m\"=>\"M\", \"\
    n\"=>\"N\", \"o\"=>\"O\", \"p\"=>\"P\", \"q\"=>\"Q\", \"r\"=>\"R\", \"s\"=>\"\
    S\", \"t\"=>\"T\", \"u\"=>\"U\", \"v\"=>\"V\", \"w\"=>\"W\", \"x\"=>\"X\", \"\
    y\"=>\"Y\", \"z\"=>\"Z\", \"A\"=>\"a\", \"B\"=>\"b\", \"C\"=>\"c\", \"D\"=>\"\
    d\", \"E\"=>\"e\", \"F\"=>\"f\", \"G\"=>\"g\", \"H\"=>\"h\", \"I\"=>\"i\", \"\
    J\"=>\"j\", \"K\"=>\"k\", \"L\"=>\"l\", \"M\"=>\"m\", \"N\"=>\"n\", \"O\"=>\"\
    o\", \"P\"=>\"p\", \"Q\"=>\"q\", \"R\"=>\"r\", \"S\"=>\"s\", \"T\"=>\"t\", \"\
    U\"=>\"u\", \"V\"=>\"v\", \"W\"=>\"w\", \"X\"=>\"x\", \"Y\"=>\"y\", \"Z\"=>\"\
    z\"]\n    sol = \"\"\n    for i in s\n        if occursin(i, lst)\n          \
    \  sol = string(sol, get(lst, i, i))\n        else\n            sol = string(sol,\
    \ i)\n        end\n    end\n    return sol\nend", "    if all(c \u2208 \"0123456789\"\
    \ for c in s)\n        return reverse(s)\n    else\n        letters = [c \u2208\
    \ \"abcdefghijklmnopqrstuvwxyz\" ? c : c for c in s]\n        for i = 1:length(letters)\n\
    \            if letters[i] == letters[i]\n                letters[i] = uppercase(letters[i])\n\
    \            else\n                letters[i] = lowercase(letters[i])\n      \
    \      end\n        end\n        return join(letters)\n    end\nend", "    str\
    \ = \"\"\n    for x in s\n        if x in \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \         push!(str, uppercase(x))\n        elseif x in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            push!(str, lowercase(x))\n        else\n            push!(str, x)\n\
    \        end\n    end\n    return str\nend", "    return replace(s, r\"^[^a-zA-Z]*$\"\
    , reverse(s),) |> replace(r\"([a-z])\", r\"\\U\\1\") |> replace(r\"([A-Z])\",\
    \ r\"\\L\\1\")\nend", "    letters = [c for c in s if c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    if isempty(letters)\n        return reverse(s)\n    else\n        s = s\
    \ |> map(x -> if x in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" \n            x |> lowercase\n\
    \        elseif x in \"abcdefghijklmnopqrstuvwxyz\"\n            x |> uppercase\n\
    \        else\n            x\n        end)\n        return join(s)\n    end\n\
    end", "    r = \"\"\n    for c in s\n        if c in \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"\
    r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n            push!(r, upper(c))\n\
    \        elseif c in \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"\
    J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"\
    W\" \"X\" \"Y\" \"Z\"\n            push!(r, lower(c))\n        else\n        \
    \    push!(r, c)\n        end\n    end\n    return r\nend", "    y = [cc in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'\
    \ for cc in s]\n    y = [cc==true ? cc : false for cc in y]\n    if sum(y)==0\n\
    \        return reverse(s)\n    end\n    x = [cc in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'\
    \ ? cc : true for cc in s]\n    for (i,cc) in enumerate(x)\n        if cc==true\n\
    \            continue\n        end\n        if cc in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'\n\
    \            x[i] = cc in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'\
    \ ? cc : cc+32\n        end\n    end\n    return join(x)\nend\n \n \n \n\"\"\"\
    You are given a string s.\n    You need to return true if s is a valid string\
    \ or false otherwise.\n    A valid string has to start with [1-9].\n    After\
    \ that, it can have a dot or it can be just one digit.\n    If the string contains\
    \ dot, then the string must have atleast two digits before and two digits after\
    \ the dot.\n    Examples\n    >>> solve(\"9\")\n    true\n    >>> solve(\"1.\"\
    )\n    false\n    >>> solve(\"9.3\")\n    true\n    >>> solve(\"9.33\")\n    true\n\
    \    >>> solve(\"99.33\")\n    true\n    >>> solve(\"1..33\")\n    false\n   \
    \ >>> solve(\"9.333\")\n", "    n = length(s)\n    (isletter(s[i]) ? upper(s[i])\
    \ : lower(s[i])) for i in 1:n\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
