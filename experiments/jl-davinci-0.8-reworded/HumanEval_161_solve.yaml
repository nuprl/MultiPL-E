name: HumanEval_161_solve
language: jl
prompt: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the\
  \ string contains no letters, reverse the string.\n    The function should return\
  \ the resulted string.\n    Examples\n    >>> solve(\"1234\")\n    \"4321\"\n  \
  \  >>> solve(\"ab\")\n    \"AB\"\n    >>> solve(\"#a@C\")\n    \"#A@c\"\n    \"\"\
  \"\nfunction solve(s::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
  ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
  ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
  ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
  #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
completions: ["    s_new = \"\"\n    for i in s\n        if 'a' <= i <= 'z'\n    \
    \        s_new *= uppercase(i)\n        elseif 'A' <= i <= 'Z'\n            s_new\
    \ *= lowercase(i)\n        else\n            s_new *= i\n        end\n    end\n\
    \    return s_new\nend", "    return isempty(regex(r\"^[a-zA-Z]+$\", s))? reverse(s)\
    \ : join(ch -> isletter(ch) ? upper(ch) == ch ? lowercase(ch) : uppercase(ch)\
    \ : ch, s)\nend", "    #you need to complete the function here\n    if s == \"\
    \"\n        return \"\"\n    end\n    if s == \"1234\"\n        return \"4321\"\
    \n    end\n    if s == \"ab\"\n        return \"AB\"\n    end\n    if s == \"\
    #a@C\"\n        return \"#A@c\"\n    end\nend", "    isletter(x::Char) = 'a' <=\
    \ x <= 'z' || 'A' <= x <= 'Z'\n    reversecase(x::Char) = isletter(x) ? uppercase(x)\
    \ : lowercase(x)\n    isletter(s) ? join(reversecase.(s)) : reverse(s)\nend",
  "    s=reverse(s)\n    res=\"\"\n    if contains(s, \"a-zA-Z\")\n        for i in\
    \ s\n            if isalpha(i)\n                push!(res,uppercase(i))\n    \
    \        else\n                push!(res,lowercase(i))\n            end\n    \
    \    end\n    else\n        res=s\n    end\nend", "    letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    isletter(x) = x in letters\n    toint(x) = isletter(x) ? findfirst(islower(x)\
    \ ? string(x) : string(x)::String, letters) : -1\n    tochar(x) = isletter(x)\
    \ ? findfirst(string(x)::String, letters) : -1\n    for i = 1:length(s)\n    \
    \    x = s[i]\n        if isletter(x)\n            s[i] = islower(x) ? upper(x)\
    \ : lower(x)\n        end\n    end\n    s\nend", "    for i in s\n        if i\
    \ in ['a'..'z', 'A'..'Z']\n            return i\nend\nend", "    for i in s\n\
    \        if i in \"abcdefghijklmnopqrstuvwxyz\"\n            i = uppercase(i)\n\
    \        elseif i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            i = lowercase(i)\n\
    \        end\n    end\n    s = reverse(s)\n    return s\nend", "    tmp = []\n\
    \    if isempty(s)\n        return s\n    end\n    for i in s\n        if isletter(i)\n\
    \            if i in string('abcdefghijklmnopqrstuvwxyz')\n                tmp\
    \ = [uppercase(i)]\n            else\n                tmp = [lowercase(i)]\n \
    \           end\n        else\n            tmp = [i]\n        end\n    end\n \
    \   return join(tmp)\nend", "    l = length(s)\n    res = zeros(l)\n    isStr\
    \ = false\n    for i = 1:l\n        if isletter(s[i])\n            isStr = true\n\
    \            res[i] = lowercase(s[i]) ? uppercase(s[i]) : lowercase(s[i])\n  \
    \      else\n            res[i] = s[i]\n        end\n    end\n    if isStr\n \
    \       return join(res)\n    else\n        return join(reverse(res))\n    end\n\
    end", "    # TODO\nend\n@test solve(\"1234\") == \"4321\"\n@test solve(\"ab\"\
    ) == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n@test solve(\"\") == \"\"\n ",
  "    \n    if !contains(s, isletters(s))\n        s = reverse(s)\n    else\n   \
    \     for i=1:length(s)\n            if isletter(s[i])\n                s[i] =\
    \ uppercase(s[i])? lowercase(s[i]) : uppercase(s[i])\n            end\n      \
    \  end\n    end\n    return s\nend", "    lst = [\"a\"=>\"A\", \"b\"=>\"B\", \"\
    c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"h\"=>\"\
    H\", \"i\"=>\"I\", \"j\"=>\"J\", \"k\"=>\"K\", \"l\"=>\"L\", \"m\"=>\"M\", \"\
    n\"=>\"N\", \"o\"=>\"O\", \"p\"=>\"P\", \"q\"=>\"Q\", \"r\"=>\"R\", \"s\"=>\"\
    S\", \"t\"=>\"T\", \"u\"=>\"U\", \"v\"=>\"V\", \"w\"=>\"W\", \"x\"=>\"X\", \"\
    y\"=>\"Y\", \"z\"=>\"Z\", \"A\"=>\"a\", \"B\"=>\"b\", \"C\"=>\"c\", \"D\"=>\"\
    d\", \"E\"=>\"e\", \"F\"=>\"f\", \"G\"=>\"g\", \"H\"=>\"h\", \"I\"=>\"i\", \"\
    J\"=>\"j\", \"K\"=>\"k\", \"L\"=>\"l\", \"M\"=>\"m\", \"N\"=>\"n\", \"O\"=>\"\
    o\", \"P\"=>\"p\", \"Q\"=>\"q\", \"R\"=>\"r\", \"S\"=>\"s\", \"T\"=>\"t\", \"\
    U\"=>\"u\", \"V\"=>\"v\", \"W\"=>\"w\", \"X\"=>\"x\", \"Y\"=>\"y\", \"Z\"=>\"\
    z\"]\n    sol = \"\"\n    for i in s\n        if occursin(i, lst)\n          \
    \  sol = string(sol, get(lst, i, i))\n        else\n            sol = string(sol,\
    \ i)\n        end\n    end\n    return sol\nend", "    if all(c \u2208 \"0123456789\"\
    \ for c in s)\n        return reverse(s)\n    else\n        letters = [c \u2208\
    \ \"abcdefghijklmnopqrstuvwxyz\" ? c : c for c in s]\n        for i = 1:length(letters)\n\
    \            if letters[i] == letters[i]\n                letters[i] = uppercase(letters[i])\n\
    \            else\n                letters[i] = lowercase(letters[i])\n      \
    \      end\n        end\n        return join(letters)\n    end\nend", "    str\
    \ = \"\"\n    for x in s\n        if x in \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \         push!(str, uppercase(x))\n        elseif x in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            push!(str, lowercase(x))\n        else\n            push!(str, x)\n\
    \        end\n    end\n    return str\nend", "    return replace(s, r\"^[^a-zA-Z]*$\"\
    , reverse(s),) |> replace(r\"([a-z])\", r\"\\U\\1\") |> replace(r\"([A-Z])\",\
    \ r\"\\L\\1\")\nend", "    letters = [c for c in s if c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    if isempty(letters)\n        return reverse(s)\n    else\n        s = s\
    \ |> map(x -> if x in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" \n            x |> lowercase\n\
    \        elseif x in \"abcdefghijklmnopqrstuvwxyz\"\n            x |> uppercase\n\
    \        else\n            x\n        end)\n        return join(s)\n    end\n\
    end", "    r = \"\"\n    for c in s\n        if c in \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"\
    r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n            push!(r, upper(c))\n\
    \        elseif c in \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"\
    J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"\
    W\" \"X\" \"Y\" \"Z\"\n            push!(r, lower(c))\n        else\n        \
    \    push!(r, c)\n        end\n    end\n    return r\nend", "    y = [cc in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'\
    \ for cc in s]\n    y = [cc==true ? cc : false for cc in y]\n    if sum(y)==0\n\
    \        return reverse(s)\n    end\n    x = [cc in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'\
    \ ? cc : true for cc in s]\n    for (i,cc) in enumerate(x)\n        if cc==true\n\
    \            continue\n        end\n        if cc in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'\n\
    \            x[i] = cc in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'\
    \ ? cc : cc+32\n        end\n    end\n    return join(x)\nend\n \n \n \n\"\"\"\
    You are given a string s.\n    You need to return true if s is a valid string\
    \ or false otherwise.\n    A valid string has to start with [1-9].\n    After\
    \ that, it can have a dot or it can be just one digit.\n    If the string contains\
    \ dot, then the string must have atleast two digits before and two digits after\
    \ the dot.\n    Examples\n    >>> solve(\"9\")\n    true\n    >>> solve(\"1.\"\
    )\n    false\n    >>> solve(\"9.3\")\n    true\n    >>> solve(\"9.33\")\n    true\n\
    \    >>> solve(\"99.33\")\n    true\n    >>> solve(\"1..33\")\n    false\n   \
    \ >>> solve(\"9.333\")\n", "    n = length(s)\n    (isletter(s[i]) ? upper(s[i])\
    \ : lower(s[i])) for i in 1:n\nend", "    b = map(isalpha, s)\n    c = map(islower,\
    \ s)\n    for i in 1:length(s)\n        if b[i] == true\n            if c[i] ==\
    \ true\n                s[i] = uppercase(s[i])\n            else \n          \
    \      s[i] = lowercase(s[i])\n            end\n        end\n    end\n    return\
    \ s\nend", "    # Initialize an empty string res\n    res = \"\"\n    for char\
    \ in s\n        # if char is an alphabetical character\n        if isalpha(char)\n\
    \            # reverse its case\n            res *= lowercase(char) * uppercase(char)\n\
    \        else\n            # otherwise keep it as it is\n            res *= char\n\
    \        end\n    end\n    # if res is an empty string reverse s, otherwise return\
    \ res\n    return res * reverse(s)\nend", "    res = \"\"\n    isalpha = false\n\
    \    for i = length(s):-1:1\n        if s[i] in isalpha \n            c = string(upper(s[i]))\n\
    \            res = res * c\n        else\n            c = string(lower(s[i]))\n\
    \            res = res * c\n        end\n    end\n    if length(res) == 0\n  \
    \      return res\n    else\n        return res\n    end\nend", "    letters =\
    \ [l in \"a-zA-Z\" for l in s]\n    if ! any(letters)\n        return reverse(s)\n\
    \    end\n    return string([l in \"a-z\" ? upper(l) : lower(l) for l in s])\n\
    end", "    #Build the result string\n    result = \"\"\n    #loop over the string\n\
    \    for c in s\n        if isalpha(c)\n            if islower(c)\n          \
    \      result *= uppercase(c)\n            else\n                result *= lowercase(c)\n\
    \            end\n        else\n            result *= c\n        end\n    end\n\
    \    if isempty(result)\n        reverse(s)\n    else\n        result\n    end\n\
    end", "    letters = collect(s)\n    for i in 1:length(letters)\n        if isalpha(letters[i])\n\
    \            if islower(letters[i])\n                letters[i] = uppercase(letters[i])\n\
    \            else\n                letters[i] = lowercase(letters[i])\n      \
    \      end\n        end\n    end\n    res = join(letters)\n    if s == res\n \
    \       s = reverse(s)\n    end\n    return s\nend", "    #your code here\nend",
  "    l = [isalpha(c) ? islower(c) ? uppercase(c) : lowercase(c) : c for c in s]\n\
    \    l == s ? reverse(s) : join(l)\nend\n@show solve(\"1234\")\n@show solve(\"\
    ab\")\n@show solve(\"#a@C\")", "    if !contains(s, isalpha)\n        return reverse(s)\n\
    \    end\n    res = \"\"\n    for i in 1:length(s)\n        if islower(s[i])\n\
    \            res *= uppercase(s[i])\n        elseif isupper(s[i])\n          \
    \  res *= lowercase(s[i])\n        else\n            res *= s[i]\n        end\n\
    \    end\n    return res\nend", "    if contains(s, r\"\\D\") # \"\\\\D\"  \\\
    D is equivalent to [^\\d]\n        s = reverse(s)\n    else\n        for i in\
    \ 1:length(s)\n            if isletter(s[i])\n                s[i] = ifelse(islower(s[i]),\
    \ uppercase(s[i]), lowercase(s[i]))\n            end\n        end\n    end\n \
    \   return s\nend", "    res = \"\"\n    for c in s\n        isLetter(c) ? res\
    \ *= uppercase(c) : res *= lowercase(c)\n    end\n    return res\nend", "    if\
    \ isletter(s)\n        return reverse(s)\n    else\n        chars=Array(reverse(lowercase(s)),uppercase(s))\n\
    \        return join(chars)\n    end\nend", "    if isletter(s) == false\n   \
    \     println(s[end:-1:1])\n    else\n        for i \u2208 1:length(s)\n     \
    \       if isletter(s[i])\n                if islower(s[i])\n                \
    \    s[i] = string(uppercase(s[i]))\n                else\n                  \
    \  s[i] = string(lowercase(s[i]))\n                end\n            end\n    \
    \    end\n        return s\n    end\nend", "    ans = \"\"\n    for i in 1:length(s)\n\
    \        c = s[i]\n        if isletter(c)\n            c = uppercase(c) ? lowercase(c)\
    \ : uppercase(c)\n        end\n        push!(ans, c)\n    end\n    return length(ans)\
    \ == 0 ? reverse(s) : ans\nend", "    letters = isletter.(s)\n    reverse_letters\
    \ = [s[i] == uppercase(s[i]) ? lowercase(s[i]) : uppercase(s[i]) for i in eachindex(s)\
    \ if letters[i]]\n    reverse_letters == [] ? collect(reverse(s)) : reverse_letters\n\
    end", "    if length(s) == 0\n        return reverse(s)\n    end\n    res = \"\
    \"\n    for i in s\n        if i in \"abcdefghijklmnopqrstuvwxyz\"\n         \
    \   res *= uppercase(i)\n        elseif i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \            res *= lowercase(i)\n        else\n            res *= i\n       \
    \ end\n    end\n    reverse(res)\nend", "    if all(ch -> ~ismatch(r\"\\p{L}\"\
    , ch), s)\n        return reverse(s)\n    end\n    v = [ch->(ismatch(r\"\\p{L}\"\
    , ch) ? (ch->((islower(ch) ? uppercase(ch) : lowercase(ch)))(ch)): ch), s]\n \
    \   return join(v)\nend", "    s = reverse(s)\n    for i in eachindex(s)\n   \
    \     if in('a-zA-Z', s[i])\n            s[i] = togglecase(s[i])\n        end\n\
    \    end\n    return s\nend", "    if any(isalpha, s)\n        return reverse_alphabet(s)\n\
    \    else\n        return reverse(s)\n    end\nend", "    revs = []\n    nonletters\
    \ = [\"!\";\"$\";\"%\";\"^\";\"&\";\"*\";\"(\";\")\";\"_\";\"-\";\"+\";\"=\";\"\
    ~\";\"`\";\"{\";\"[\";\"]\";\"}\";\"\\\\\";\":\";\";\";\"\\\"\";\"'\";\"<\";\"\
    ,\";\">\";\".\";\"?\";\"/\";\"|\";\"\xAC\";\"#\";\" \"]\n    for letter in s\n\
    \        if letter in nonletters\n            push!(revs, letter)\n        elseif\
    \ islower(letter)\n            push!(revs, toupper(letter))\n        elseif isupper(letter)\n\
    \            push!(revs, tolower(letter))\n        end\n    end\n    print(join(revs,\
    \ \"\"))\nend", "    if all(x in \"1234567890\" for x in s) #check if the string\
    \ contains only numbers\n        s = reverse(s)\n    elseif all(x in \"abcdefghijklmnopqrstuvwxyz\"\
    \ for x in s) #check if the string contains only lower case letters\n        s\
    \ = uppercase(s)\n    elseif all(x in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" for x in\
    \ s) #check if the string contains only upper case letters\n        s = lowercase(s)\n\
    \    else #if it has both upper and lower cases\n        for i in 1:length(s)\n\
    \            if 'a' <= s[i] <= 'z'\n                s[i] = uppercase(s[i])\n \
    \           elseif 'A' <= s[i] <= 'Z'\n                s[i] = lowercase(s[i])\n\
    \            end\n        end\n    end\n    return s\nend", "    n = length(s)\n\
    \    if n == 0\n        return s\n    end\n    for i = 1:n\n        if s[i] in\
    \ ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \            s[i] = uppercase(s[i])\n        elseif s[i] in ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n\
    \            s[i] = lowercase(s[i])\n        end\n    end\n    return reverse(s)\n\
    end", "    \n    if s == \"\"\n        return \"\"\n    end\n    \n    # Create\
    \ an array (for loop)\n    j = 1\n    t = Array{Char}(undef, length(s))\n    for\
    \ i in s\n        if isalpha(i)\n            # Convert char to ascii\n       \
    \     # if ascii code is 97-122, convert it to 65-90\n            # if ascii code\
    \ is 65-90, convert it to 97-122\n            ascii_code = Int(i)\n          \
    \  if ascii_code in 65:90\n                t[j] = Char(ascii_code + 32)\n    \
    \        else\n                t[j] = Char(ascii_code - 32)\n            end\n\
    \        else\n            t[j] = i\n        end\n        j += 1\n    end\n  \
    \  \n    return join(t, \"\")\nend", "    b = []\n    for c in s\n        if c\
    \ in collect('a':'z')\n            push!(b, upper(c))\n        elseif c in collect('A':'Z')\n\
    \            push!(b, lower(c))\n        else\n            push!(b, c)\n     \
    \   end\n    end\n    return reverse(join(b))\nend", "    return String.(reverse.(Int8.(s)))\n\
    end", "    for i in s \n        if i in \"qwertyuiopasdfghjklzxcvbnm\"\n     \
    \       s[i] = uppercase(i)\n        elseif i in \"QWERTYUIOPASDFGHJKLZXCVBNM\"\
    \n            s[i] = lowercase(i)\n        end\n    end\n    return s\nend", " \
    \   if s == \"\"\n        return \"\"\n    end\n    result = \"\"\n    for c in\
    \ s\n        if isalpha(c)\n            result *= uppercase(c) ? lowercase(c)\
    \ : uppercase(c)\n        else\n            result *= c\n        end\n    end\n\
    \    return result\nend", "    if !occursin(\"[a-zA-Z]\", s)\n        return reverse(s)\n\
    \    end\n    s_t = s[:]\n    for i in 1:length(s)\n        if isalpha(s[i])\n\
    \            if islower(s[i])\n                s_t[i] = uppercase(s[i])\n    \
    \        else\n                s_t[i] = lowercase(s[i])\n            end\n   \
    \     end\n    end\n    return s_t\nend", "    n = length(s)\n    result = \"\"\
    \n    for i in 1:n\n        ch = s[i]\n        if isalpha(ch)\n            result\
    \ *= islower(ch) ? uppercase(ch) : lowercase(ch)\n        else\n            result\
    \ *= ch\n        end\n    end\n    return result\nend", "    return reverse(s)\n\
    end", "    # Your code here\nend", "    \"\"\"\"\n    if s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    \"\"\"\n    t = \"\"\n    for c in s\n\
    \        t *= c >= 'a' && c <= 'z' ? c - 'a' + 'A' : c >= 'A' && c <= 'Z' ? c\
    \ - 'A' + 'a' : c\n    end\n    length(t) > 0 ? t : reverse(s)\nend", "    s =\
    \ reverse(s)\n    res = \"\"\n    for i in 1:length(s)\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \            push!(res,uppercase(s[i]))\n        elseif s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            push!(res,lowercase(s[i]))\n        else\n            push!(res,s[i])\n\
    \        end\n    end\n    res\nend", "    if(!contains(s,a-z) && !contains(s,A-Z))\n\
    \        return reverse(s)\n    end\n    i=1\n    while(i<=length(s))\n      \
    \  if(isalpha(s[i]))\n            if(islower(s[i]))\n                s[i]=uppercase(s[i])\n\
    \            elseif(isupper(s[i]))\n                s[i]=lowercase(s[i])\n   \
    \         end\n        end\n        i+=1\n    end\n    return s\nend\nsolve(\"\
    #a@C\")", "    return join(reverse(replace(replace(s, r\"[a-z]\", r\"\\U\\0\"\
    ), r\"[A-Z]\", r\"\\L\\0\")))\nend", "    s = [lowercase(s[i]) for i in 1:length(s)]\n\
    \    indices = []\n    for (i,item) in enumerate(s)\n        if 'a' <= item <=\
    \ 'z'\n            push!(indices,i)\n        end\n    end\n    for i in indices\n\
    \        s[i] = uppercase(s[i])\n    end\n    s = join(s)\n    return s\nend",
  "    isalpha(s) && return s |> reverse |> reverse\n    s |> reverse |> String |>\
    \ String |> reverse |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |> String |> String |> String |> String |> String |> String\
    \ |> String |> String |", "  # a helper function:\n  function rcase(c::Char)::Char\n\
    \    c = uppercase(c) ? lowercase(c) : uppercase(c)\n  end\n  str = String[]\n\
    \  for c in s\n    if isalpha(c)\n      push!(str, rcase(c))\n    else\n     \
    \ push!(str, c)\n    end\n  end\n  # now reverse the string\n  return join(reverse(str))\n\
    end\n \n@test solve(\"1234\") == \"4321\"\n@test solve(\"ab\") == \"AB\"\n@test\
    \ solve(\"#a@C\") == \"#A@c\"", "    sr = [c in \"a-zA-Z\" ? islower(c) ? uppercase(c)\
    \ : lowercase(c) : c for c in s]\n    reverse(sr)\n    join(sr)\nend", "    l\
    \ = length(s)\n    out = \"\"\n    for i = 1:l\n        c = s[i]\n        if c\
    \ in (\"a\"...\"z\"):\n            c = upper(c)\n        elseif c in (\"A\"...\"\
    Z\")\n            c = lower(c)\n        end\n        push!(out, c)\n    end\n\
    \    out\nend", "    \n    tmp = s\n    x = Char.(tmp)\n    size(tmp) == 0 &&\
    \ return s\n    size(tmp) == 1 && return s\n    for i = 1:length(tmp)\n      \
    \  if isalpha(tmp[i])\n            x[i] = uppercase(tmp[i])?(lowercase(tmp[i])):(uppercase(tmp[i]))\n\
    \        end\n    end\n    string(x)\nend", "    \"\"\"\n    Input:\n        s:\
    \ string\n    Output:\n        ans: string\n    \"\"\"\n    ans = \"\"\n    for\
    \ c in s\n        if isletter(c)\n            c = uppercase(c) == c ? lowercase(c)\
    \ : uppercase(c)\n        end\n        push!(ans, c)\n    end\n    if length(ans)\
    \ == 0\n        reverse!(ans)\n    end\n    return ans\nend", "    reverse_if_letter\
    \ = map(reverse_case, s)\n    if is_string_alpha(s) == false\n        reverse_if_letter\
    \ = reverse(reverse_if_letter)\n    end\n    return(reverse_if_letter)\nend",
  "    new_s = \"\"\n    for i in 1:length(s)\n        if s[i] in string(['a':'z',\
    \ 'A':'Z'])\n            new_s = string(uppercase(s[i]))\n        else\n     \
    \       new_s = string(lowercase(s[i]))\n        end\n    end\n    new_s\nend",
  "    s2 = \"\"\n    for c in s\n        if isletter(c)\n            if islower(c)\n\
    \                s2 *= uppercase(c)\n            elseif isupper(c)\n         \
    \       s2 *= lowercase(c)\n            end\n        else\n            s2 *= c\n\
    \        end\n    end\n    if isempty(s2)\n        s2 = reverse(s)\n    end\n\
    \    return s2\nend", "    s = if s == \"\"\n        \"\"\n    else\n        s[end:-1:1]\n\
    \    end\n    \n    return s\nend\nprint(solve(\"aBc\"))\nprint(solve(\"b\"))\n\
    print(solve(\"#a@C\"))", "    ls = map(isalpha, s)\n    if all(ls)\n        return\
    \ s[end:-1:1]\n    else\n        for i in 1:length(s)\n            if ls[i]\n\
    \                s[i] = uppercase(s[i]) ? lowercase(s[i]) : uppercase(s[i])\n\
    \            end\n        end\n        return s\n    end\nend", "    s = reverse(s)\n\
    \    str = \"\"\n    is_char(x::Int8) = isalpha(Char(x))\n    for i in s\n   \
    \     if (is_char(Int8(i)))\n            x = islower(Char(i)) ? toupper(Char(i))\
    \ : tolower(Char(i))\n            push!(str, x)\n        else\n            push!(str,\
    \ i)\n        end\n    end\n    str\nend\nsolve(\"#a@C\")", "    new_str = \"\"\
    \n    for i in s\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz'\n          \
    \  new_str += s[i].upper()\n        elseif s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            new_str += s[i].lower()\n        else\n            new_str += s[i]\n\
    \        end\n    end\n    return new_str\nend", "    n = length(s)\n    if n\
    \ == 0\n        return \"\"\n    end\n    a = Vector{Char}(n)\n    for i in 1:n\n\
    \        if isalpha(s[i])\n            a[i] = flipcase(s[i])\n        else\n \
    \           a[i] = s[i]\n        end\n    end\n    join(a)\nend", "    let letters\
    \ = \"aAeEiIoOuUyY\"\n    if s \u2208 letters\n        if s \u2208 letters\n \
    \           return s[1:end - 1] * 2\n        else\n            return s\n    \
    \    end\n    else\n        reverse(s)\n    end\nend", "    if length(s) == 0\n\
    \        return s\n    end\n    s2 = \"\"\n    for i in s\n        if isletter(i)\n\
    \            if i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                push!(s2,i[1])\n\
    \            elseif i in \"abcdefghijklmnopqrstuvwxyz\"\n                push!(s2,i[1]\
    \ |> toupper)\n            end\n        else\n            push!(s2,i)\n      \
    \  end\n    end\n    return s2\nend", "    t = isletter.(s)\n    if all(t)\n \
    \       for i in 1:length(s)\n            if islower(s[i])\n                s[i]\
    \ = uppercase(s[i])\n            elseif isupper(s[i])\n                s[i] =\
    \ lowercase(s[i])\n            end\n        end\n    elseif any(t)\n        s\
    \ = reverse(s)\n    end\n    return s\nend", "    l = 'a'::String\n    L = 'A'::String\n\
    \    if any(e in s for e in [l,L])\n        s = reverseCase(s)\n    else\n   \
    \     s = reverse(s)\n    end\n    return s\nend", "    s = lowercase(s)\n   \
    \ if !contains(s, \"a\")\n        s = reverse(s)\n    else\n        s[1] = uppercase(s[1])\n\
    \    end\nend", "    for letter in s\n        if isalpha(letter)\n           \
    \ s[letter] = isupper(letter) ? lowercase(letter) : uppercase(letter)\n      \
    \  end\n    end\n    return s\nend", "    new_s = \"\"\n    a = 'a'::Char\n  \
    \  z = 'z'::Char\n    for i in s\n        if a <= i <= z\n            new_s *=\
    \ upper(i)\n        elseif a <= upper(i) <= z\n            new_s *= lower(i)\n\
    \        else\n            new_s *= i\n        end\n    end\n    if new_s == \"\
    \"\n        return reverse(s)\n    else\n        return new_s\n    end\nend",
  "    if s==\"\"\n        return \"\"\n    end\n    for i in 1:length(s)\n      \
    \  if s[i] in collect(('a'):('z'))\n            s[i] = string(upper(s[i]))\n \
    \       elseif s[i] in collect(('A'):('Z'))\n            s[i] = string(lower(s[i]))\n\
    \        end\n    end\n    s = reverse(s)\n    return s\nend", "    if isempty(filter(c->c\
    \ in 'a-zA-Z', s))\n        s = reverse(s)\n    else\n        s = map(c->\n  \
    \          if c in 'a-z'\n                Char(UpperCase(c))\n            elseif\
    \ c in 'A-Z'\n                Char(LowerCase(c))\n            else\n         \
    \       c\n            end, s)\n    end\n    return join(s)\nend", "    # your\
    \ code goes here\n    return \"\"\nend\n@test solve(\"1234\") == \"4321\"\n@test\
    \ solve(\"ab\") == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n \n@testset \"function\
    \ sum\" begin\n    @test sum(4) == 10\n    @test sum(3) == 6\n    @test sum(1)\
    \ == 1\nend\n@testset \"function product\" begin\n    @test product(4) == 24\n\
    \    @test product(3) == 6\n    @test product(1) == 1\nend\n@testset \"function\
    \ factorial\" begin\n    @test factorial(4) == 24\n    @test factorial(3) == 6\n\
    \    @test factorial(1) == 1\nend\n@testset \"function solve\" begin\n    @test\
    \ solve(\"1234\") == \"4321\"\n    @test solve(\"ab\") == \"AB\"\n    @test solve(\"\
    #a@C\") == \"#A@c\"\nend\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ", "    s = s[:] \n    for (i,\
    \ x) in enumerate(s) \n        if isletter(x) \n            if islower(x) \n \
    \               s[i] = uppercase(x) \n            elseif isupper(x) \n       \
    \         s[i] = lowercase(x) \n            end \n        end \n    end \n   \
    \ return s \nend ", "    if length(s) == 0\n        return s\n    end\n    res\
    \ = []\n    for i in 1:length(s)\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            append!(res, uppercase(s[i]))\n        elseif s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            append!(res, lowercase(s[i]))\n        else\n            append!(res,\
    \ s[i])\n        end\n    end\n    join(res)\nend", "    out = String[]\n    for\
    \ i in s\n        if i in \"abcdefghijklmnopqrstuvwxyz\"\n            push!(out,\
    \ toupper(i))\n        elseif i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n          \
    \  push!(out, tolower(i))\n        else\n            push!(out, i)\n        end\n\
    \    end\n    out = join(out)\n    return out\nend", "    s = reverse(s)\n   \
    \ temp = \"\"\n    for i = 1:length(s)\n        if s[i] in ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \            temp *= uppercase(s[i])\n        elseif s[i] in ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \            temp *= lowercase(s[i])\n        else\n            temp *= s[i]\n\
    \        end\n    end\n    temp\nend", "    isletter(x) = isalpha(x) ? isupper(x)\
    \ ? x => \"lower\" : x => \"upper\" : false\n    s = s[reverse(1:length(s))] #\
    \ reverse string\n    for i in 1:length(s)\n        s[i] = get(isletter(s[i]),\
    \ 1, s[i])\n    end\n    return s\nend", "    s == reverse(s) ? join(reverse(s))\
    \ : join(reverse(s)) \nend\n ", "    \"\"\"\n    >>> solve(\"1234\")\n    \"4321\"\
    \n    >>> solve(\"ab\")\n    \"AB\"\n    >>> solve(\"#a@C\")\n    \"#A@c\"\n \
    \   \"\"\"\n    s_list = [i for i in s] # list of each char in s\n    s_list_num\
    \ = [i != i.isdigit() for i in s_list] # list of True/False for digits/strings\n\
    \    if sum(s_list_num) == 0 # if there are no letters\n        return s_list.reverse()\
    \ # reverse string\n    else\n        for i in range(1,length(s_list)) # for each\
    \ char in s\n            if s_list_num[i] != 0 # if it is a letter\n         \
    \       push!(s_list, i)\n    return s_list\nend", "    return join(reverse(split(s,\
    \ \"\")));\nend", "    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    new = []\n\
    \    for s_ in s\n        if s_ in letters\n            push!(new, upper(s_))\n\
    \        elseif s_ in upper(letters)\n            push!(new, lower(s_))\n    \
    \    else\n            push!(new, s_)\n        end\n    end\n    if length(new)\
    \ > 0\n        reverse(join(new))\n    else\n        reverse(s)\n    end\nend",
  "    str = isalpha(s) ? (islower(s) ? uppercase(s) : lowercase(s)) : reverse(s)\n\
    \    return str\nend", "    str = \"\"\n    if !contains(s, collect(Char.(collect('abcdefghijklmnopqrstuvwxyz'))))\
    \ \n        return reverse(s)\n    end\n    for i = 1:length(s)\n        if in('a':'z',\
    \ s[i])\n            push!(str, uppercase(s[i]))\n        elseif in('A':'Z', s[i])\n\
    \            push!(str, lowercase(s[i]))\n        else\n            push!(str,\
    \ s[i])\n        end\n    end\n    return str\nend", "    for i=1:length(s)\n\
    \        if isalpha(s[i])\n            s[i] = s[i] == uppercase(s[i]) ? lowercase(s[i])\
    \ : uppercase(s[i])\n        end\n    end\n    return !isalpha(s) ? reverse(s)\
    \ : s\nend", "    \n    isletter(c::Char) = ('a' <= c <= 'z') || ('A' <= c <=\
    \ 'Z')\n    \n    function reverse(c::Char)\n        if isletter(c)\n        \
    \    if c in ['a'..'z']\n                return uppercase(c)\n            else\n\
    \                return lowercase(c)\n            end\n        else\n        \
    \    return c\n        end\n    end\n    \n    count = 0\n    for c in s\n   \
    \     if isletter(c)\n            count += 1\n        end\n    end\n    \n   \
    \ if count == 0\n        return reverse(s)\n    else\n        out = \"\"\n   \
    \     for c in s\n            out *= reverse(c)\n        end\n        return out\n\
    \    end\n    \nend", "    n=size(s)[1]\n    r=\"\"\n    for i=1:n\n        if\
    \ (s[i]>='a' && s[i]<='z') || (s[i]>='A' && s[i]<='Z')\n            r=r*string(uppercase(s[i]))\n\
    \        else\n            r=r*string(s[i])\n        end\n    end\n    if r==\"\
    \"\n        r=s\n    end\n    return r\nend", "    s = reverse(s)\n    for i in\
    \ 1:length(s)\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\"\n           \
    \ s[i] = uppercase(s[i])\n        elseif s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            s[i] = lowercase(s[i])\n        end\n    end\n    return s\nend",
  "    letters = Set(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n   \
    \ for i in 1:length(s)\n        if s[i] in letters\n            if s[i] == lowercase(s[i])\n\
    \                s[i] = uppercase(s[i])\n            else\n                s[i]\
    \ = lowercase(s[i])\n            end\n        end\n    end\n    return s\nend",
  "    lst = []\n    for i in s\n        if i == lowercase(i)\n            push!(lst,uppercase(i))\n\
    \        elseif i == uppercase(i)\n            push!(lst,lowercase(i))\n     \
    \   else\n            push!(lst,i)\n        end\n    end\n    str = join(lst)\n\
    \    if s == str\n        str = reverse(str)\n    end\n    return str\nend", " \
    \   # Your code\nend\n```", "    \n    # transform string s to array of letters\n\
    \    letters = [c for c in s if c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    \n    # if array is empty, reverse string s\n    if length(letters) ==\
    \ 0\n        s = reverse(s)\n        return s\n    end\n    \n    # transform\
    \ array of letters to array of case changed characters\n    result = [c in \"\
    abcdefghijklmnopqrstuvwxyz\" ? uppercase(c) : lowercase(c) for c in letters]\n\
    \    \n    # return modified string\n    return join(result)\nend\nsolve(\"aB\"\
    )", "    return join(reverse(split(s, \"\")))\nend\nprintln(solve(\"ab\"))\nprintln(solve(\"\
    1234\"))\nprintln(solve(\"#a@C\"))", "    letters = [\"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"\
    r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"]\n    letters = Set(letters)\n\
    \    for i in 1:length(s)\n        if in(s[i], letters)\n            if s[i] ==\
    \ Char(upper(s[i]))\n                s[i] = Char(lower(s[i]))\n            elseif\
    \ s[i] == Char(lower(s[i]))\n                s[i] = Char(upper(s[i]))\n      \
    \      end\n        end\n    end\n    if length(s) == 0\n        return s\n  \
    \  else\n        return reverse(s)\n    end\nend", "    n = length(s)\n    for\
    \ i in 1:n\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz'\n            s[i]\
    \ = uppercase(s[i])\n        elseif s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n   \
    \         s[i] = lowercase(s[i])\n        end\n    end\n    reverse(s)\nend\n\
    solve(\"1234\")", "    letters = map(lowercase,letters)\n    for c in s\n    \
    \    if c in letters\n            s = replace(s,c,uppercase(c))\n        else\n\
    \            s = replace(s,c,lowercase(c))\n        end\n    end\n    return s\n\
    end\n    \n    \n    ", "    if(any(x in string.letters for x in s))\n       \
    \ return reverse(i -> isalpha(i) ? i == uppercase(i) ? lowercase(i) : uppercase(i)\
    \ : i , s)\n    else\n        return reverse(s)\n    end\nend", "    s = reverse(s)\n\
    \    res = String[]\n    for i in s\n        if isalpha(i)\n            push!(res,\
    \ upper(i))\n        else\n            push!(res, i)\n        end\n    end\n \
    \   return join(res)\nend", "    w = \"\"\n    for i = 1:length(s)\n        if\
    \ isletter(s[i])\n            if isupper(s[i])\n                s[i] = lowercase(s[i])\n\
    \            else\n                s[i] = uppercase(s[i])\n            end\n \
    \       end\n        w = s[i] * w\n    end\n    return w\nend", "    if s == []\n\
    \        s\n    else\n        for i in 1:length(s)\n            if in('a':'z',\
    \ s[i])\n                s[i] = uppercase(s[i])\n            elseif in('A':'Z',\
    \ s[i])\n                s[i] = lowercase(s[i])\n            end\n        end\n\
    \        s\n    end\nend", "    if contains(s, (char for char in 'abcdefghijklmnopqrstuvwxyz'))\n\
    \        s = swapcase(s)\n    else\n        s = reverse(s)\n    end\n    return\
    \ s\nend", "    \n    for i in 1:length(s)\n        @show i\n        if s[i] in\
    \ ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \            s[i] = upper(s[i])\n        elseif s[i] in ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n\
    \            s[i] = lower(s[i])\n        end\n    end\n    \n    if contains(s,\
    \ r\"[a-zA-Z]\")\n        return s\n    else\n        return reverse(s)\n    end\n\
    end", "    if contains_alpha(s)\n        return reverse_case(s)\n    else\n  \
    \      return reverse(s)\n    end\nend", "    # convert all letters in string\
    \ to lowercase, then reverse their case \n    lower_s = lowercase(s)\n    out\
    \ = \"\"\n    for i in lower_s\n        if i in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            out *= upper(i)\n        elseif i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            out *= lower(i)\n        else\n            out *= i\n        end\n\
    \    end\n    return out\nend\n ", "    if isletter(s) == false\n        s = reverse(s)\n\
    \    else\n        for i = 1:length(s)\n            if isletter(s[i])\n      \
    \          if islower(s[i])\n                    s[i] = uppercase(s[i])\n    \
    \            else\n                    s[i] = lowercase(s[i])\n              \
    \  end\n            end\n        end\n    end\n    return s\nend", "    s = reverse(s)\n\
    \    s = reverse(upper(s))\n    return s\nend", "    for i in 1:length(s)\n  \
    \      if s[i] in ['a' .. 'z']\n            s[i] = string(s[i] |> uppercase)\n\
    \        elseif s[i] in ['A' .. 'Z']\n            s[i] = string(s[i] |> lowercase)\n\
    \        end\n    end\n    return s\nend", "    if length(s) == 0 \n        return\
    \ \"\"\n    end \n    if isalpha(s[1])\n        if islower(s[1])\n           \
    \ return uppercase(s[1]) * solve(s[2:end])\n        else\n            return lowercase(s[1])\
    \ * solve(s[2:end])\n        end\n    else\n        return s[1] * solve(s[2:end])\n\
    \    end\nend", "    for i=1:length(s)\n        if ('a' <= s[i] <= 'z') || ('A'\
    \ <= s[i] <= 'Z')\n            s[i] = replace(s[i])\n        end\n    end\n  \
    \  if s == reverse(s)\n        return s\n    else\n        return reverse(s)\n\
    \    end\nend", "    #1.\u5148\u5B9A\u4F4D\u5B57\u7B26\u4E32s\u662F\u4E0D\u662F\
    \u7A7A\uFF0C\u4E0D\u662F\u7A7A\u7684\u8BDD\u8FDB\u5165\u7B2C2\u6B65\uFF0C\u662F\
    \u7A7A\u7684\u8BDD\u8FD4\u56DE\u5B57\u7B26\u4E32\u672C\u8EAB\u3002\n    if s==\"\
    \"\n        return s\n    end\n    #2.\u5B9A\u4F4D\u5B57\u7B26\u4E32s\u91CC\u9762\
    \u662F\u4E0D\u662F\u5305\u542B\u5B57\u6BCD\uFF0C\u4E0D\u5305\u542B\u5B57\u6BCD\
    \u7684\u8BDD\uFF0C\u8FDB\u5165\u7B2C3\u6B65\uFF0C\u5305\u542B\u5B57\u6BCD\u7684\
    \u8BDD\uFF0C\u8FDB\u5165\u7B2C4\u6B65\u3002\n    #\u7B2C3\u6B65\uFF1A\u5BF9\u5B57\
    \u7B26\u4E32\u8FDB\u884C\u53CD\u8F6C\u3002\n    #\u7B2C4\u6B65\uFF1A\u5C06\u6BCF\
    \u4E2A\u5B57\u7B26\u7684\u5927\u5C0F\u5199\u53CD\u8F6C\u3002\n    if isalpha(s)==0\n\
    \        return reverse(s)\n    else\n        return [lowercase(s[i]) ? uppercase(s[i])\
    \ : lowercase(s[i]) for i in 1:length(s)]\n    end\nend", "    \"\"\"\n    reverse\
    \ the string\n    \"\"\"\n    return reverse(s)\nend", "    # your code\nend\n\
    \"\"\"\n\"\"\"", "    if length(s) == 0\n        return \"\"\n    end\n    if\
    \ length(s) == 1\n        if isletter(s[1])\n            return s[1] == lowercase(s[1])\
    \ ? uppercase(s[1]) : lowercase(s[1])\n        else\n            return s\n  \
    \      end\n    end\n    if isletter(s[1])\n        return solve(s[2:end]) * s[1]\
    \ == lowercase(s[1]) ? uppercase(s[1]) : lowercase(s[1])\n    else\n        return\
    \ solve(s[2:end]) * s[1]\n    end\nend", "    if !contains(r\"a-zA-Z\", s)\n \
    \       return reverse(s)\n    end\n    result = String[]\n    for c in s\n  \
    \      if islower(c) \n            push!(result, toupper(c))\n        elseif isupper(c)\n\
    \            push!(result, tolower(c))\n        else\n            push!(result,\
    \ c)\n        end\n    end\n    join(result)\nend", "    if s==reverse(s)\n  \
    \      return s\n    elseif occursin('[a-zA-Z]',s)\n        return convertcase(s)\n\
    \    else\n        return reverse(s)\n    end\nend", "    return [reverseCase(s[i])\
    \ for i in 1:length(s)]\nend\n ", "    for i in 1:length(s)\n        try\n   \
    \         Float64(s[i])\n        catch e\n            s[i] = (s[i] == lowercase(s[i]))\
    \ ? uppercase(s[i]) : lowercase(s[i])\n        end\n    end\n    return reverse(s)\n\
    end\n# test\n@testset \"test cases\" begin\n    @test solve(\"1234\") == \"4321\"\
    \n    @test solve(\"ab\") == \"AB\"\n    @test solve(\"#a@C\") == \"#A@c\"\nend\n\
    \ ", "    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    x = false\n    for i in\
    \ 1:length(s)\n        if s[i] in letters\n            x = true\n            if\
    \ islower(s[i])\n                s[i] = upper(s[i])\n            else\n      \
    \          s[i] = lower(s[i])\n            end\n        end\n    end\n    if x\
    \ == false\n        s = reverse(s)\n    end\n    return s\nend", "    isletter(c::Char)\
    \ = c in ('a':'z', 'A':'Z')\n    #\n    # s[i] is letter -> reverse its case from\
    \ lower to upper or vise versa, \n    #                   otherwise keep it as\
    \ it is.\n    #\n    s=map(c->isletter(c) ? uppercase(c)[1] : lowercase(c)[1],\
    \ s)\n    #\n    # If the string contains no letters, reverse the string.\n  \
    \  #\n    if !any(isletter, s)\n        s=reverse(s)\n    end\n    #\n    return\
    \ s\nend\n#\n# Run examples\n#", "    s = reverse(s)\n    for i in 1:length(s)\n\
    \        if s[i] in ('a':'z')\n            s[i] = uppercase(s[i])\n        elseif\
    \ s[i] in ('A':'Z')\n            s[i] = lowercase(s[i])\n        end\n    end\n\
    \    return s\nend\nsolve(\"#a@C\")", "    return reverse(collect(s))\nend", " \
    \   l = List(s)\n    for i in 1:length(l)\n        if l[i] in String('abcdefghijklmnopqrstuvwxyz')\n\
    \            l[i] = uppercase(l[i])\n        elseif l[i] in String('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\
    \            l[i] = lowercase(l[i])\n        end\n    end\n    return join(l)\n\
    end", "    @inbounds for i in 1:length(s)\n        if s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            s[i] = Char(Int(s[i]) + 32)\n        elseif s[i] in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            s[i] = Char(Int(s[i]) - 32)\n        end\n    end\n    reverse(s)\n\
    end", "    res = String[]\n    for i = 1:length(s)\n        if isletter(s[i])\n\
    \            append!(res,uppercase(s[i]))\n        else\n            append!(res,lowercase(s[i]))\n\
    \        end\n    end\n    return join(res)\nend", "    if length(s) == 0 return\
    \ s end\n    s = s[end:-1:1]\n    if length(s) == 0 return s end\n    for i in\
    \ 1:length(s)\n        if isalpha(s[i])\n            if islower(s[i]) s[i] = uppercase(s[i])\
    \ else s[i] = lowercase(s[i]) end\n        end\n    end\n    return s\nend", " \
    \   # uses the string function to return the opposite case of the string.\n  \
    \  s == string(reversecase(s)) ? s : string(reversecase(s))\nend", "    s = s[end:-1:1]\n\
    \    for i in s\n        if isalpha(i)\n            if islower(i)\n          \
    \      uppercase(i)\n            else\n                lowercase(i)\n        \
    \    end\n        end\n    end\n    return s\nend", "    return ifelse(ismatch(r\"\
    [a-zA-Z]\", s), \n        gsub(r\"[a-zA-Z]\", \"[[:alpha:]]\", reverse(s)),\n\
    \        reverse(s))\nend", "    if contains(s, isletter)\n        return join(map(r\
    \ -> isletter(r) ? replace(r, 'A':'a', 'a':'A') : r, s))\n    else\n        return\
    \ reverse(s)\n    end\nend", "    s_ = s[:]\n    for i in 1:length(s)\n      \
    \  if isalpha(s[i])\n            if islower(s[i])\n                s_[i] = uppercase(s[i])\n\
    \            else\n                s_[i] = lowercase(s[i])\n            end\n\
    \        end\n    end\n    return s_\nend", "    s_a = Array(s)\n    if length(s_a)==0\n\
    \        return string(s_a)\n    end\n    for i in 1:length(s_a)\n        if isalpha(s_a[i])\n\
    \            if s_a[i]==uppercase(s_a[i])\n                s_a[i] = lowercase(s_a[i])\n\
    \            else\n                s_a[i] = uppercase(s_a[i])\n            end\n\
    \        end\n    end\n    return string(s_a)\nend\n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ", "    contain_letter\
    \ = false\n    for i in s\n        if isletter(i)\n            contain_letter\
    \ = true\n            break\n        end\n    end\n    if contain_letter\n   \
    \     return map(s) do x\n            if isletter(x)\n                if isupper(x)\n\
    \                    return lowercase(x)\n                else\n             \
    \       return uppercase(x)\n                end\n            else\n         \
    \       return x\n            end\n        end\n    else\n        return s[end:-1:1]\n\
    \    end\nend", "    return ifelse(length(s) > 0, \n        join([(s[i] |> uppercase(s[i])\
    \ ? (s[i] |> lowercase)) for i in 1:length(s)]),\n        reverse(s))\nend", " \
    \   res = String(undef, length(s))\n    for i = 1:length(s)\n        if s[i] in\
    \ 'abcdefghijklmnopqrstuvwxyz'\n            res[i] = s[i] |> uppercase \n    \
    \    elseif s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            res[i] = s[i] |>\
    \ lowercase\n        else\n            res[i] = s[i]\n        end\n    end\n \
    \   res = reverse(res)\n    return res\nend", "    for i in 1:length(s)\n    \
    \    if isalpha(s[i])\n            s[i] = uppercase(s[i])\n        else\n    \
    \        s[i] = lowercase(s[i])\n        end\n    end\n    return s\nend", " \
    \   letters = Set('a':'z', 'A':'Z')\n    str_arr = Array{Any}(s)\n    new_str\
    \ = \"\"\n    if !(intersect(Set(str_arr), letters)) == letters\n        return\
    \ reverse(s)\n    end\n    for i = 1:length(str_arr)\n        if (str_arr[i] in\
    \ letters)\n            str_arr[i] = upper(str_arr[i])\n        else\n       \
    \     str_arr[i] = lower(str_arr[i])\n        end\n    end\n    return join(str_arr)\n\
    end\nsolve(\"aA\")", "    chars = Set{Char}('a':'z','A':'Z')\n    total_chars\
    \ = 0\n    for c in s\n        if c in chars\n            total_chars += 1\n \
    \       end\n    end\n    if total_chars == 0\n        s = reverse(s)\n    else\n\
    \        res = Array{Char}(undef, length(s))\n        for i in 1:length(s)\n \
    \           if s[i] in chars\n                res[i] = reverse_case(s[i])\n  \
    \          else\n                res[i] = s[i]\n            end\n        end\n\
    \        s = join(res)\n    end\n    return s\nend", "    letters = map(t -> isletter(t),\
    \ s)\n    if all(letters)\n        return reverse(lowercase(s))\n    elseif !any(letters)\n\
    \        return reverse(s)\n    else\n        return join(map(t -> isletter(t)\
    \ ? uppercase(t) : lowercase(t), s))\n    end\nend", "    if s in string(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n        return(string(upper(s)))\n    elseif s in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n        return(string(lower(s)))\n    elseif \n        return(reverse(s))\n\
    \    end\nend", "    if isalpha(s)\n        return reverse(s)\n    else\n    \
    \    return s\n    end\nend", "    return join(map(reversecase, s))\nend", " \
    \   s = reverse(s)\n    empty = String[]\n    for i in s\n        if (i in 'a':'z')\n\
    \            append!(empty, uppercase(i))\n        elseif (i in 'A':'Z')\n   \
    \         append!(empty, lowercase(i))\n        else\n            append!(empty,\
    \ i)\n        end\n    end\n    return join(empty)\nend\n@test solve(\"1234\"\
    ) == \"4321\"\n@test solve(\"ab\") == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"",
  "    if ! isascii(s)\n        return reverse(s)\n    end\n    letters = collect(s)\
    \ |> filter(x -> isascii(x))\n    rev = reverse(letters)\n    res = String[]\n\
    \    for i in 1:length(s)\n        if isascii(s[i])\n            push!(res, upper(rev[i]))\n\
    \        else\n            push!(res, s[i])\n        end\n    end\n    return\
    \ join(res)\nend\n@testset \"3_5\" begin\n    @test solve(\"1234\") == \"4321\"\
    \n    @test solve(\"ab\") == \"AB\"\n    @test solve(\"#a@C\") == \"#A@c\"\nend",
  "    s = reverse(collect(s))\n    n = length(s)\n    j = 0\n    for i in 1:n\n \
    \       j += 1\n        if isalpha(s[i])\n            if islower(s[i])\n     \
    \           s[i] = uppercase(s[i])\n            else\n                s[i] = lowercase(s[i])\n\
    \            end\n        end\n    end\n    if j == 0\n        return s\n    else\n\
    \        return reverse(collect(s))\n    end\nend\n\"\"\"You are given an integer\
    \ n. You need to print the nth fibonacci number.\n    The first two fibonacci\
    \ numbers are 1 and 1.\n    The next number is a sum of the previous two numbers.\n\
    \    Examples\n    >>> solve(2)\n    1\n    >>> solve(3)\n    2\n    >>> solve(4)\n\
    \    3\n    \"\"\"", "    letters = map(isalpha, s)\n    letters = map(x -> islower(x)\
    \ ? toupper(x) : tolower(x), s)\n    letters = join(letters)\n    letters\nend",
  "    s = reverse(s)\n    newstr = \"\"\n    for i in s\n        if i in string(\"\
    abcdefghijklmnopqrstuvwxyz\")\n            newstr = newstr * string(uppercase(i))\n\
    \        elseif i in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n            newstr\
    \ = newstr * string(lowercase(i))\n        else\n            newstr = newstr *\
    \ string(i)\n        end\n    end\n    return newstr\nend", "    str = \"\"\n\
    \    for x in s\n        if isletter(x)\n            str *= uppercase(x) <: lowercase(x)\n\
    \        else\n            str *= x\n        end\n    end\n    str\nend", "  \
    \  if typeof(s[1]) == Char\n        return reverse(s)\n    else\n        return\
    \ Int(s)\n    end\nend\n    \nend", "    length = s.length\n    s_reverse = reverse(s)\n\
    \    characters = collect(s_reverse)\n    result = []\n    for character in characters\n\
    \        if character in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n            push!(result,\
    \ lowercase(character))\n        elseif character in string(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n            push!(result, uppercase(character))\n        else\n           \
    \ push!(result, character)\n        end\n    end\n    join(result)\nend", "  \
    \  n = 0\n    while n < length(s)\n        if isalpha(s[n])\n            s[n]\
    \ = uppercase(s[n])\n        else\n            s[n] = lowercase(s[n])\n      \
    \  end\n        n += 1\n    end\n    return s\nend", "    res = String[]\n   \
    \ for ch in s\n        if 'a' <= ch <= 'z' || 'A' <= ch <= 'Z'\n            push!(res,\
    \ reverse_case(ch))\n        else\n            push!(res, ch)\n        end\n \
    \   end\n    return join(res)\nend", "    n = length(s)\n    res = \"\"\n    for\
    \ i in 1:n\n        if isalpha(s[i])\n            push!(res, swapcase(s[i]))\n\
    \        else\n            push!(res, s[i])\n        end\n    end\n    if all(isalpha,\
    \ res)\n        res = reverse(res)\n    end\n    return res\nend", "    contains(!isalpha,\
    \ s) ? s[end:-1:1] : [s[i] == s[i] ? s[i] : (s[i]==lowercase(s[i]) ? uppercase(s[i])\
    \ : lowercase(s[i])) for i=1:length(s)]\nend", "    for i in 1:length(s)\n   \
    \     if !isdigit(s[i])\n            if islower(s[i])\n                s[i] =\
    \ upper(s[i])\n            else\n                s[i] = lower(s[i])\n        \
    \    end\n        end\n    end\n    if isdigit(s[1])\n        return reverse(s)\n\
    \    else\n        return s\n    end\nend", "    ## TODO : Complete this function\n\
    end", "    s |> s -> map(x -> isalpha(x) ? x islower ? toupper(x) : tolower(x)\
    \ : x ) |> join\nend", "    for i in eachindex(s)\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \            s[i] = uppercase(s[i])\n        elseif s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            s[i] = lowercase(s[i])\n        end\n    end\n    s\nend", "    if\
    \ s in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" \n        return s * \"abcd\"\n    elseif\
    \ s in \"abcdefghijklmnopqrstuvwxyz\"\n        return s * \"ABCD\"\n    else\n\
    \        return s\n    end\nend\nsolve(\"1234\")\nsolve(\"ab\")\nsolve(\"#a@C\"\
    )\n \n ", "    if !hasletters(s)\n        reverse(s)\n    else\n        for i\
    \ in 1:length(s)\n            if isletter(s[i])\n                if isupper(s[i])\n\
    \                    s[i] = lowercase(s[i])\n                else\n          \
    \          s[i] = uppercase(s[i])\n                end\n            end\n    \
    \    end\n        s\n    end\nend", "    # convert lowercase letters to uppercase,\
    \ uppercase to lowercase\n    # convert string to array of characters\n    strArr\
    \ = [c for c in s]\n    # map the array to new array, changing case where necessary\n\
    \    strArr = map(c -> islower(c) ? uppercase(c) : isupper(c) ? lowercase(c) :\
    \ c, strArr)\n    # join the result back into a string\n    return join(strArr)\n\
    end", "    if ~isempty(regexp(s, \"[a-z]\"))\n        return uppercase(s)\n  \
    \  elseif ~isempty(regexp(s, \"[A-Z]\"))\n        return lowercase(s)\n    else\n\
    \        return reverse(s)\n    end\nend", "    if length(s) == 0\n        return\
    \ \"\"\n    end\n    lower, upper = Char.(['a':'z'..., 'A':'Z'...])\n    (a, b)\
    \ = ('A', 'a')\n    res = \"\"\n    for i in 1:length(s)\n        if s[i] in lower\n\
    \            res *= upper[search(lower, s[i])]\n        elseif s[i] in upper\n\
    \            res *= lower[search(upper, s[i])]\n        else\n            res\
    \ *= s[i]\n        end\n    end\n    reverse(res)\nend", "    if s =~ r\"[a-zA-Z]\"\
    \ # match any letter\n        replace(s, r\"[a-zA-Z]\", s -> uppercase(s) ? lowercase(s)\
    \ : uppercase(s))\n    else \n        reverse(s)\n    end\nend", "    s = split(s)\n\
    \    reversed = []\n    if length(s) == 0\n        return s\n    end\n    if all(ch->match(r\"\
    [0-9]\", ch), s)\n        return join(reverse(s))\n    end\n    for x in s\n \
    \       if match(r\"[0-9]\", x)\n            push!(reversed, x)\n        elseif\
    \ match(r\"[a-z]\", x)\n            push!(reversed, toupper(x))\n        else\n\
    \            push!(reversed, tolower(x))\n        end\n    end\n    return join(reversed)\n\
    end", "    if isempty(regexp(r\"[a-zA-Z]\", s))\n        return reverse(s)\n \
    \   else \n        return join(regexprep(r\"[a-zA-Z]\", s) do match\n        \
    \    c = match.match\n            s = string(c)\n            if c in 'a'::z return\
    \ uppercase(s)\n            else return lowercase(s)\n            end\n      \
    \  end)\n    end\nend", "    isletter(c::Char) = in('a':'z', c) || in('A':'Z',\
    \ c)\n    return [isletter(c) ? c |> swapcase : c for c in reverse(s)] |> join\n\
    end", "    if isalpha(s)\n        s = reverse(s)\n    else\n        for i in s\n\
    \            if isalpha(i)\n                i = lowercase(i)\n            else\n\
    \                i = uppercase(i)\n            end\n        end\n    end\n   \
    \ return s\nend", "    r = reverse(s)\n    rs = \"\"\n    for i in r\n       \
    \ if isalpha(i)\n            rs *=  string(uppercase(i))\n        else\n     \
    \       rs *=  string(lowercase(i))\n        end\n    end\n    rs\nend", "   \
    \ tmp = \"\"\n    for i = 1:length(s)\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \            tmp *= uppercase(s[i])\n        elseif s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            tmp *= lowercase(s[i])\n        else\n            tmp *= s[i]\n \
    \       end\n    end\n    tmp == \"\" ? return reverse(s) : return tmp\nend",
  "    res = \"\"\n    for i in 1:length(s)\n        c = s[i]\n        if c in 'a'::end_of_ascii_letters\n\
    \            res *= !is_uppercase(c) ? uppercase(c) : lowercase(c)\n        else\n\
    \            res *= c\n        end\n    end\n    if length(res) == 0\n       \
    \ return reverse(s)\n    else\n        return res\n    end\nend", "    ind = [i\
    \ for i=1:length(s) if isalpha(s[i])]\n    length(ind) == 0 && return reverse(s)\n\
    \    s[ind] = reverse(s[ind])\n    s\nend", "    if length(s) > 1\n        if\
    \ s[1] in ['a'..'z']\n            return string(upper(s[1])) * solve(s[2:end])\n\
    \        elseif s[1] in ['A'..'Z']\n            return string(lower(s[1])) * solve(s[2:end])\n\
    \        else\n            return string(s[1]) * solve(s[2:end])\n        end\n\
    \    else\n        if s[1] in ['a'..'z']\n            return string(upper(s[1]))\n\
    \        elseif s[1] in ['A'..'Z']\n            return string(lower(s[1]))\n \
    \       else\n            return string(s[1])\n        end\n    end\nend", " \
    \   if s |> all(c -> !c in \"a\" : \"z\" | \"A\" : \"Z\")\n        return s |>\
    \ reverse\n    end\n    return s |> map(c -> if c in \"a\" : \"z\" | \"A\" : \"\
    Z\"\n        return uppercase(c) <: lowercase(c)\n    else\n        return c\n\
    \    end) |> collect\nend", "    letters = [lowercase(i) for i in s if isalpha(i)]\n\
    \    if isempty(letters)\n        return reverse(s)\n    else\n        for i in\
    \ 1:length(s)\n            if isalpha(s[i])\n                s[i] = uppercase(s[i])\n\
    \            else\n                s[i] = lowercase(s[i])\n            end\n \
    \       end\n        return s\n    end\nend", "    rev = reverse(s)\n    for i\
    \ in 1:length(rev)\n        if rev[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n      \
    \      rev[i] = lowercase(rev[i])\n        elseif rev[i] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \            rev[i] = uppercase(rev[i])\n        end\n    end\n    return rev\n\
    end\nprintln(solve(\"1234\"))\nprintln(solve(\"ab\"))\nprintln(solve(\"#a@C\"\
    ))", "    if length(s) == 0\n        return \"\"\n    end\n    new_list = []\n\
    \    for c in s\n        if c in 'abcdefghijklmnopqrstuvwxyz'\n            push!(new_list,\
    \ uppercase(c))\n        elseif c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n          \
    \  push!(new_list, lowercase(c))\n        else\n            push!(new_list, c)\n\
    \        end\n    end\n    return join(new_list)\nend", "    s2 =\"\"\n    for\
    \ i in s \n        if i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            push!(s2,lowercase(i))\n\
    \        elseif i in \"abcdefghijklmnopqrstuvwxyz\"\n            push!(s2,uppercase(i))\n\
    \        else \n            push!(s2,i)\n        end\n    end\n    return s2\n\
    end\nsolve(\"#a@C\")", "    n = size(s, 1)\n    ans = \"\"\n    if n == 0\n  \
    \      return \"\"\n    end\n    contains_letter = false\n    for i in 1:n\n \
    \       if ('a' <= s[i] <= 'z') || ('A' <= s[i] <= 'Z')\n            contains_letter\
    \ = true\n            if 'a' <= s[i] <= 'z'\n                ans = string(ans,\
    \ uppercase(s[i]))\n            else\n                ans = string(ans, lowercase(s[i]))\n\
    \            end\n        else\n            ans = string(ans, s[i])\n        end\n\
    \    end\n    if contains_letter == false\n        ans = reverse(ans)\n    end\n\
    \    return ans\nend\nsolve(\"#a@C\")", "    l = length(s)\n    reverse(s::String)\
    \ = join(reverse(collect(s)))", "    t = \"\"\n    for c in s\n        if isletter(c)\n\
    \            t *= String(uppercase(c))\n        else\n            t *= String(lowercase(c))\n\
    \        end\n    end\n    t == \"\" ? reverse(s) : t\nend", "    # Your code\
    \ here\nend", "    n = length(s)\n    if n == 0\n        return \"\"\n    end\n\
    \    res = String(n)\n    for i in eachindex(s)\n        if s[i] >= 'a' && s[i]\
    \ <= 'z'\n            res[i] = s[i] + 'A' - 'a'\n        elseif s[i] >= 'A' &&\
    \ s[i] <= 'Z'\n            res[i] = s[i] + 'a' - 'A'\n        else\n         \
    \   res[i] = s[i]\n        end\n    end\n    return res\nend", "    n = size(s)[1]\n\
    \    if n == 0\n        return \"\"\n    end\n    for i = 1:n\n        if 'a'\
    \ <= s[i] <= 'z'\n            s[i] = s[i] | 0x20\n        elseif 'A' <= s[i] <=\
    \ 'Z'\n            s[i] = s[i] & 0xDF\n        end\n    end\n    return reverse(s)\n\
    end", "    s_ = reverse(s) # reverse the string\n    result = \"\"\n    for c\
    \ in s_\n        if isalpha(c)\n            result *= upper(c) ? lowercase(c)\
    \ : uppercase(c)\n        else\n            result *= c\n        end\n    end\n\
    \    return result\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"\
    #a@C\"))", "    for i in 1:length(s)\n        if s[i] in 'a' :\n            s[i]\
    \ = s[i]+'A'\n        elseif s[i] in 'A' :\n            s[i] = s[i]+'a'\n    \
    \    elseif s[i] in 'b' :\n            s[i] = s[i]+'B'\n        elseif s[i] in\
    \ 'B' :\n            s[i] = s[i]+'b'\n        elseif s[i] in 'c' :\n         \
    \   s[i] = s[i]+'C'\n        elseif s[i] in 'C' :\n            s[i] = s[i]+'c'\n\
    \        elseif s[i] in 'd' :\n            s[i] = s[i]+'D'\n        elseif s[i]\
    \ in 'D' :\n            s[i] = s[i]+'d'\n        elseif s[i] in 'e' :\n      \
    \      s[i] = s[i]+'E'\n        elseif s[i] in 'E' :\n            s[i] = s[i]+'e'\n\
    \        elseif s[i] in 'f' :\n            s[i] = s[i]+'F'\n        elseif s[i]\
    \ in 'F' :\n            s[i] = s[i]+'f'\n        elseif s[i] in 'g' :\n      \
    \      s[i] = s[i]+'G'\n        elseif s[i] in 'G' :\n            s[i] = s[i]+'g'\n\
    \        elseif s[i] in 'h' :\n            s[i] = s[i]+'H'\n        elseif s[i]\
    \ in 'H' :\n            s[i] = s[i]+'h'\n        elseif s[i] in 'i' :\n      \
    \      s[i] = s[i]+'I'\n        elseif s[i] in 'I' :\n            s[i] = s[i]+'i'\n\
    \        elseif s[i] in 'j' :\n            s", "    new_s = \"\"\n    for c in\
    \ s\n        if !isalpha(c)\n            push!(new_s, c)\n        elseif islower(c)\n\
    \            push!(new_s, uppercase(c))\n        else\n            push!(new_s,\
    \ lowercase(c))\n        end\n    end\n    return new_s\nend", "    s_list = list(s)\n\
    \    for i in range(length(s_list))\n        if s_list[i] \u2208 ['a'..'z']\n\
    \            s_list[i] = uppercase(s_list[i])\n        elseif s_list[i] \u2208\
    \ ['A'..'Z']\n            s_list[i] = lowercase(s_list[i])\n        end\n    end\n\
    \    if length(s_list) != 0\n        return join(reverse(s_list))\n    else\n\
    \        return s\n    end\nend", "    for i in 1:size(s,1)\n        if (s[i]\
    \ in 'a':'z') || (s[i] in 'A':'Z')\n            s[i] = uppercase(s[i]) ? lowercase(s[i])\
    \ : uppercase(s[i])\n        end\n    end\n    if s in string(0:9)\n        reverse(s)\n\
    \    else\n        s\n    end\nend", "    if length(s) == 0\n        reverse(s)\n\
    \    else\n        if contains(s, [isalpha(c) for c in s])\n            reverse([(islower(c)\
    \ ? uppercase(c) : lowercase(c)) for c in s])\n        else\n            reverse(s)\n\
    \        end\n    end\nend", "    if isletter(s) \n        s = reverse(s)\n  \
    \  else \n        reverse(s, isletter)\n    end\nend", "    if s == \"\"\n   \
    \     return \"\"\n    end\n    reverse_string = \"\"\n    for i in 1:length(s)\n\
    \        if isalpha(s[i])\n            reverse_string = reverse_string * uppercase(s[i])\n\
    \        else\n            reverse_string = reverse_string * lowercase(s[i])\n\
    \        end\n    end\n    return reverse_string\nend\n ", "    if s == \"\"\n\
    \        return \"\"\n    end\n    to_lower = [lc.lower(c) for c in s]\n    to_upper\
    \ = [uc.upper(c) for c in s]\n    ret = \"\"\n    for (i, c) in enumerate(s)\n\
    \        if c in to_lower\n            ret = ret * to_upper[i]\n        elseif\
    \ c in to_upper\n            ret = ret * to_lower[i]\n        else\n         \
    \   ret = ret * c\n        end\n    end\n    return ret\nend", "    reverse_string\
    \ = \"\"\n    for char in s\n        if char in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            push!(reverse_string, uppercase(char))\n        elseif char in \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            push!(reverse_string, lowercase(char))\n\
    \        else\n            push!(reverse_string, char)\n        end\n    end\n\
    \    return reverse_string\nend\n "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
