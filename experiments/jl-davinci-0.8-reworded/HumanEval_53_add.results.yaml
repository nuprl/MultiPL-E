name: HumanEval_53_add
language: jl
results:
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf9u9m9x4.jl:10\nin expression starting at\
    \ /tmp/tmpf9u9m9x4.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n \nadd(2, 3)\nadd(2, 3.)\nadd(2., 3)\nadd(2., 3.)\n@code_warntype\
    \ add(2, 3)\n@code_warntype add(2, 3.)\n@code_warntype add(2., 3)\n@code_warntype\
    \ add(2., 3.)\n \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching add(::Int64, ::Float64)\n\
    Closest candidates are:\n  add(::Int64, !Matched::Int64) at /tmp/tmpq7je9s5d.jl:7\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpq7je9s5d.jl:12\nin expression\
    \ starting at /tmp/tmpq7je9s5d.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47zry4fn.jl:10\nin expression starting at\
    \ /tmp/tmp47zry4fn.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nadd(2, 3)\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2,\
    \ 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n  return x\
    \ + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    x + y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
    \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n    return\
    \ x + y\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0,\
    \ 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
    \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
