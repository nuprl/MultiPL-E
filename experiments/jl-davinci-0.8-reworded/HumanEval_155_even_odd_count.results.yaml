name: HumanEval_155_even_odd_count
language: jl
results:
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    evencount = 0\n    oddcount = 0\n    while num != 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            evencount += 1\n        else\n\
    \            oddcount += 1\n        end\n        num = num \xF7 10\n    end\n\
    \    return (evencount, oddcount)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph6ixaqyv.jl:35\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph6ixaqyv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph6ixaqyv.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph6ixaqyv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    num_string = string(num)\n    even_count = 0\n    odd_count = 0\n\
    \    for i in 1:length(num_string)\n        if parse(Int64, num_string[i]) % 2\
    \ == 0\n            even_count += 1\n        else\n            odd_count += 1\n\
    \        end\n    end\n    return (even_count, odd_count)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpd5tmv7uq.jl:28\n  Test threw exception\n\
    \  Expression: candidate(-78) == (1, 1)\n  ArgumentError: invalid digit: '-'\n\
    \  Stacktrace:\n   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base\
    \ ./parse.jl:43\n   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmpd5tmv7uq.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd5tmv7uq.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpd5tmv7uq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpd5tmv7uq.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(-345821) == (3, 3)\n  ArgumentError: invalid digit: '-'\n  Stacktrace:\n\
    \   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base ./parse.jl:43\n\
    \   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmpd5tmv7uq.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd5tmv7uq.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpd5tmv7uq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpd5tmv7uq.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(-2) == (1, 0)\n  ArgumentError: invalid digit: '-'\n  Stacktrace:\n\
    \   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base ./parse.jl:43\n\
    \   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmpd5tmv7uq.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd5tmv7uq.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   ["
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd5tmv7uq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    even_count = 0\n    odd_count = 0\n    \n    if num < 0\n\
    \        num = -num\n    end\n    while num > 0\n        x = num % 10\n      \
    \  if x % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n        num = num \xF7 10\n    end\n    return even_count,\
    \ odd_count\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr5ywfq_9.jl:40\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr5ywfq_9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr5ywfq_9.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5ywfq_9.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even, odd = 0, 0\n    while num != 0\n        if rem(num, 2) ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num = div(num, 10)\n    end\n    return even, odd\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1wfuw6vk.jl:33\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1wfuw6vk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1wfuw6vk.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1wfuw6vk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in abs(num)\n    \
    \    if i % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return even_count, odd_count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpo9ie4s1b.jl:27\n  Expression: candidate(-78)\
    \ == (1, 1)\n   Evaluated: (1, 0) == (1, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9ie4s1b.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9ie4s1b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo9ie4s1b.jl:28\n  Expression: candidate(3452) == (2, 2)\n\
    \   Evaluated: (1, 0) == (2, 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9ie4s1b.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9ie4s1b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo9ie4s1b.jl:29\n  Expression: candidate(346211) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9ie4s1b.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9ie4s1b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo9ie4s1b.jl:30\n  Expression: candidate(-345821) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9ie4s1b.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9ie4s1b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo9ie4s1b.jl:32\n  Expression: candidate(-45347) == (2, 3)\n\
    \   Evaluated: (0, 1) == (2, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo9ie4s1b.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    odd_count = 0\n    even_count = 0\n    for i in num:\n        if\
    \ i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count\
    \ += 1\n    return even_count, odd_count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpacpssiaq.jl:13\nin expression starting at\
    \ /tmp/tmpacpssiaq.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    evens, odds = 0, 0\n    for i in abs(num)\n        if i % 2 ==\
    \ 0\n            evens += 1\n        else\n            odds += 1\n        end\n\
    \    end\n    return evens, odds\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3rwh7xol.jl:26\n  Expression: candidate(-78)\
    \ == (1, 1)\n   Evaluated: (1, 0) == (1, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rwh7xol.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rwh7xol.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3rwh7xol.jl:27\n  Expression: candidate(3452) == (2, 2)\n\
    \   Evaluated: (1, 0) == (2, 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rwh7xol.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rwh7xol.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3rwh7xol.jl:28\n  Expression: candidate(346211) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rwh7xol.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rwh7xol.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3rwh7xol.jl:29\n  Expression: candidate(-345821) == (3, 3)\n\
    \   Evaluated: (0, 1) == (3, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rwh7xol.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rwh7xol.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3rwh7xol.jl:31\n  Expression: candidate(-45347) == (2, 3)\n\
    \   Evaluated: (0, 1) == (2, 3)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3rwh7xol.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even = 0\n    odd = 0\n    for i in digits(num)\n        if iseven(i)\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \n    # evens = 0, odds = 0\n    count_evens = 0\n    count_odds\
    \ = 0\n    \n    # convert to string and check every digit\n    num_str = string(num)\n\
    \    for i in num_str\n        # check if even and increment counter\n       \
    \ if parse(Int64, i) % 2 == 0\n            count_evens += 1\n        else # else\
    \ the digit is odd\n            count_odds += 1\n        end\n    end\n    \n\
    \    # return tuple with even and odd digit counts\n    return (count_evens, count_odds)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp58wgwvdx.jl:35\n  Test threw exception\n\
    \  Expression: candidate(-78) == (1, 1)\n  ArgumentError: invalid digit: '-'\n\
    \  Stacktrace:\n   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base\
    \ ./parse.jl:43\n   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmp58wgwvdx.jl:19\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp58wgwvdx.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp58wgwvdx.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp58wgwvdx.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(-345821) == (3, 3)\n  ArgumentError: invalid digit: '-'\n  Stacktrace:\n\
    \   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base ./parse.jl:43\n\
    \   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmp58wgwvdx.jl:19\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp58wgwvdx.jl:38 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp58wgwvdx.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp58wgwvdx.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(-2) == (1, 0)\n  ArgumentError: invalid digit: '-'\n  Stacktrace:\n\
    \   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base ./parse.jl:43\n\
    \   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmp58wgwvdx.jl:19\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp58wgwvdx.jl:39 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   ["
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp58wgwvdx.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    evens = 0\n    odds = 0\n    for digit in digits(num)\n       \
    \ if digit % 2 == 0\n            evens += 1\n        else\n            odds +=\
    \ 1\n        end\n    end\n    return evens, odds\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_num, odd_num = 0, 0\n    if num >= 0\n        while num !=\
    \ 0\n            if num % 2 == 0\n                even_num += 1\n            else\n\
    \                odd_num += 1\n            end\n            num = num \xF7 10\n\
    \        end\n    else\n        while num != 0\n            if num % 2 == 0\n\
    \                even_num += 1\n            else\n                odd_num += 1\n\
    \            end\n            num = num \xF7 10\n        end\n    end\n    return\
    \ even_num, odd_num\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2wqdct_u.jl:44\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2wqdct_u.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2wqdct_u.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2wqdct_u.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even, odd = 0, 0\n    if num < 0\n        num = -num\n    end\n\
    \    while num > 0\n        if num % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num = div(num, 10)\n    end\n    return\
    \ even, odd\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdw3wux0h.jl:36\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdw3wux0h.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdw3wux0h.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdw3wux0h.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n  # TODO\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptv507uut.jl:17\n  Test threw exception\n\
    \  Expression: candidate(7) == (0, 1)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Int64, Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmptv507uut.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptv507uut.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptv507uut.jl:16\ntest set:\
    \ Error During Test at /tmp/tmptv507uut.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(-78) == (1, 1)\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Tuple{Int64, Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmptv507uut.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptv507uut.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptv507uut.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even = 0\n    odd = 0\n    for d in digits(num)\n        if d %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    evens = 0\n    odds = 0\n    for i in digits(num)\n        if i%2\
    \ == 0\n            evens = evens + 1\n        else\n            odds = odds +\
    \ 1\n        end\n    end\n    return evens, odds\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for i in num:\n        if\
    \ i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count\
    \ += 1\n    return even_count, odd_count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3agdibh.jl:13\nin expression starting at\
    \ /tmp/tmpo3agdibh.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even = 0\n    odd = 0\n    for i in 1:digits(num)\n        if num[i]\
    \ == 0 || num[i] == 2 || num[i] == 4 || num[i] == 6 || num[i] == 8\n         \
    \   even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcqmuazle.jl:26\n  Test threw exception\n\
    \  Expression: candidate(7) == (0, 1)\n  MethodError: no method matching (::Colon)(::Int64,\
    \ ::Vector{Int64})\n  Closest candidates are:\n    (::Colon)(::T, ::Any, !Matched::T)\
    \ where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:41\n\
    \    (::Colon)(::A, ::Any, !Matched::C) where {A<:Real, C<:Real} at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:10\n\
    \    (::Colon)(::T, ::Any, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:40\n\
    \    ...\n  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpcqmuazle.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcqmuazle.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcqmuazle.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpcqmuazle.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(-78) == (1, 1)\n  MethodError: no method matching (::Colon)(::Int64,\
    \ ::Vector{Int64})\n  Closest candidates are:\n    (::Colon)(::T, ::Any, !Matched::T)\
    \ where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:41\n\
    \    (::Colon)(::A, ::Any, !Matched::C) where {A<:Real, C<:Real} at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:10\n\
    \    (::Colon)(::T, ::Any, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:40\n\
    \    ...\n  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpcqmuazle.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcqmuazle.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcqmuazle.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpcqmuazle.jl:28\n  Test threw exc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcqmuazle.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    even_count = 0\n    odd_count = 0\n    for digit in digits(num)\n\
    \        if iseven(digit)\n            even_count += 1\n        else\n       \
    \     odd_count += 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    evens = 0\n    odds = 0\n    num = abs(num)\n    while num > 0\n\
    \        if num % 2 == 0\n            evens += 1\n        else\n            odds\
    \ += 1\n        end\n        num = floor(num/10)\n    end\n    return (evens,\
    \ odds)\nend\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t\
    @test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp471g1r4c.jl:35\n  Expression: candidate(0)\
    \ == (1, 0)\n   Evaluated: (0, 0) == (1, 0)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp471g1r4c.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp471g1r4c.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp471g1r4c.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    \"\"\"Returns the number of even and odd digits in a number\"\"\
    \"\n    even_count = 0\n    odd_count = 0\n    for d in digits(num)\n        if\
    \ d % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    return even_count, odd_count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
