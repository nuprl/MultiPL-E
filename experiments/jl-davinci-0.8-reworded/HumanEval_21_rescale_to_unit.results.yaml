language: jl
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    number_max = maximum(numbers)\n    number_min = minimum(numbers)\n   \
    \ numerator = numbers .- number_min\n    denominator = number_max - number_min\n\
    \    return numerator ./ denominator\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum, maximum = extrema(numbers)\n    length = maximum - minimum\n\
    \    if length == 0 \n        return fill(0.5, length(numbers))\n    end\n   \
    \ if minimum == maximum \n        return fill(minimum, length(numbers))\n    end\n\
    \    return (numbers .- minimum) ./ length\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        return numbers\n    end\n    minimum =\
    \ numbers[1]\n    maximum = numbers[1]\n    for n in numbers\n        if n < minimum\n\
    \            minimum = n\n        end\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    return [(n - minimum) / (maximum - minimum) for\
    \ n in numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    vmin = minimum(numbers)\n    vmax = maximum(numbers)\n    return (numbers\
    \ - vmin)/(vmax - vmin)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpjbwp_sbu.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpjbwp_sbu.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpjbwp_sbu.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjbwp_sbu.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjbwp_sbu.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpjbwp_sbu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpjbwp_sbu.jl:9\n   [2] macro expansion\n     @ /shared/cen"
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # Make copy\n    numbers_unit = copy(numbers)\n    # Find min and max\n\
    \    min_number = minimum(numbers_unit)\n    max_number = maximum(numbers_unit)\n\
    \    # Subtract the minimum\n    numbers_unit .-= min_number\n    # Divide by\
    \ the max - min\n    numbers_unit ./= (max_number - min_number)\n    # Return\n\
    \    return numbers_unit\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    range\
    \ = maximum - minimum\n    return (numbers .- minimum) ./ range\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmphdvvgcn8.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmphdvvgcn8.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmphdvvgcn8.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphdvvgcn8.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphdvvgcn8.jl:16\ntest set:\
    \ Error During Test at /tmp/tmphdvvgcn8.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmphdvvgcn8.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphdvvgcn8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphdvvgcn8.jl:16\ntest set:\
    \ Error During Test at /tmp/tmphdvvgcn8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmphdvvgcn8.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphdvvgcn8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphdvvgcn8.jl:16\ntest set:\
    \ Error During Test at /tmp/tmphdvvgcn8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  St"
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    numbers = numbers .- minimum(numbers) # shift to positive numbers\n  \
    \  numbers = numbers ./ maximum(numbers) # stretch to max==1\n    return numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ return (numbers - min_number) / (max_number - min_number)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpdyxgacqf.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdyxgacqf.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpdyxgacqf.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdyxgacqf.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdyxgacqf.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdyxgacqf.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpdyxgacqf.jl:9\n   [2] macro expansion\n     @ /shared/cen"
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    _min = minimum(numbers)\n    _max = maximum(numbers)\n    if _min == _max\n\
    \        return ones(length(numbers))\n    end\n    (numbers .- _min) ./ (_max\
    \ - _min)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \"\"\"\n    Given vector of numbers (of at least two elements), apply\
    \ a linear transform to that vector,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    \"\"\"\n    min = minimum(numbers)\n  \
    \  max = maximum(numbers)\n    return [\n        (x - min) / (max - min)\n   \
    \     for x in numbers\n    ]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2 \n        error(\"must have at least two elements\
    \ to rescale a vector\")\n    end\n    minimum, maximum = extrema(numbers)\n \
    \   new_numbers = []\n    for number in numbers\n        if minimum == maximum\n\
    \            new_numbers = push!(new_numbers, 0.0)\n        else\n           \
    \ new_numbers = push!(new_numbers, (number - minimum) / (maximum - minimum))\n\
    \        end\n    end\n    return new_numbers\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n   \n    smallest = minimum(numbers)\n    largest = maximum(numbers)\n   \
    \ distance = largest - smallest\n    return (numbers - smallest) / distance\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpi4esaohj.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpi4esaohj.jl:18\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpi4esaohj.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi4esaohj.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi4esaohj.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi4esaohj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpi4esaohj.jl:11\n   [2] macro expansion\n     @ /shared/c"
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    @assert length(numbers) > 1\n    @assert !any(isnan.(numbers))\n    minimum\
    \ = minimum(numbers)\n    maximum = maximum(numbers)\n    return (numbers .- minimum)\
    \ ./ (maximum - minimum)\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp5vil3d01.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp5vil3d01.jl:19\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp5vil3d01.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5vil3d01.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5vil3d01.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp5vil3d01.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmp5vil3d01.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5vil3d01.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5vil3d01.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp5vil3d01.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp5vil3d01.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5vil3d01.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5vil3d01.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp5vil3d01.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  St"
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxo8xlhvr.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpxo8xlhvr.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  St"
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    numbers_max = maximum(numbers)\n    numbers_min = minimum(numbers)\n \
    \   return map( (n) -> (n - numbers_min) / (numbers_max - numbers_min), numbers)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min, max = minimum(numbers), maximum(numbers)\n    # ( x - min ) / ( max\
    \ - min )\n    return (numbers .- min) ./ (max - min)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    return\
    \ [(number - min_value) / (max_value - min_value) for number in numbers]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    sorted_numbers = sort(numbers)\n    max_number = sorted_numbers[end]\n\
    \    min_number = sorted_numbers[1]\n    difference = max_number - min_number\n\
    \    return [(number - min_number) / difference for number in numbers]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ return (numbers .- min_number) ./ (max_number - min_number)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    x\u2080 = minimum(numbers)\n    x\u2081 = maximum(numbers)\n    return\
    \ (numbers - x\u2080) / (x\u2081 - x\u2080)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpc3f6byg6.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpc3f6byg6.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc3f6byg6.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc3f6byg6.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpc3f6byg6.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpc3f6byg6.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008671
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    minimum,\
    \ maximum\n    return (numbers - minimum) / (maximum - minimum)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpir1o4wyp.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpir1o4wyp.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpir1o4wyp.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpir1o4wyp.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpir1o4wyp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpir1o4wyp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpir1o4wyp.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpir1o4wyp.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpir1o4wyp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpir1o4wyp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpir1o4wyp.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpir1o4wyp.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpir1o4wyp.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpir1o4wyp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxo8xlhvr.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpxo8xlhvr.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  St"
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    #let's take minimum and maximum values\n    v_min, v_max = extrema(numbers)\n\
    \    #a linear transform\n    # (x-x_min)/(x_max-x_min)\n    return (numbers .-\
    \ v_min) ./ (v_max .- v_min)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minval = minimum(numbers)\n    maxval = maximum(numbers)\n    myresult\
    \ = (numbers .- minval) ./ (maxval - minval)\n    return myresult\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    return\
    \ [(num - min_val) / (max_val - min_val) for num in numbers]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    smallest_number, largest_number = minimum(numbers), maximum(numbers)\n\
    \    return (numbers - smallest_number) / (largest_number - smallest_number)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp023n2usx.jl:15\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp023n2usx.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp023n2usx.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp023n2usx.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp023n2usx.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp023n2usx.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    smallest_number = minimum(numbers)\n    largest_number = maximum(numbers)\n\
    \    if smallest_number == largest_number\n        return [0.5 for number in numbers]\n\
    \    end\n    return (numbers .- smallest_number) ./ (largest_number - smallest_number)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    x = copy(numbers)\n    x_min = minimum(x)\n    x_max = maximum(x)\n  \
    \  if x_max == x_min\n        return ones(length(x))\n    end\n    (x .- x_min)\
    \ ./ (x_max - x_min)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers - minimum) / (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4rfzneuo.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp4rfzneuo.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n = length(numbers)\n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n\
    \    return [(numbers[i] - min_val) / (max_val - min_val) for i in 1:n]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    numbers = numbers .- min_number\n \
    \   max_number = maximum(numbers)\n    numbers = numbers ./ max_number\n    return\
    \ numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    #TODO: Implement this function\n    return [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpetjq_jx5.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpetjq_jx5.jl:15\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [0.0, 0.25, 0.5, 0.75, 1.0] == [0.0, 1.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetjq_jx5.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetjq_jx5.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpetjq_jx5.jl:16\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [0.0, 0.25, 0.5, 0.75, 1.0] == [1.0, 0.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetjq_jx5.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetjq_jx5.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpetjq_jx5.jl:18\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.25, 0.5, 0.75, 1.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetjq_jx5.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetjq_jx5.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpetjq_jx5.jl:19\n  Expression: candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.25, 0.5,\
    \ 0.75, 1.0] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpetjq_jx5.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpetjq_jx5.jl:14\nTest Summ"
  timestamp: 1660008670
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        error(\"Must have at least two numbers\
    \ to compute rescale\")\n    end\n    min_val = minimum(numbers)\n    max_val\
    \ = maximum(numbers)\n    new_range = max_val - min_val\n    return (numbers -\
    \ min_val) / new_range\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp5t1lilqf.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp5t1lilqf.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5t1lilqf.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5t1lilqf.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp5t1lilqf.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp5t1lilqf.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1660008671
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n = length(numbers)\n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    return (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpfrz1bhml.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpfrz1bhml.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpfrz1bhml.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfrz1bhml.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfrz1bhml.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpfrz1bhml.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpfrz1bhml.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfrz1bhml.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfrz1bhml.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpfrz1bhml.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpfrz1bhml.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfrz1bhml.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfrz1bhml.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpfrz1bhml.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    return (numbers\
    \ .- min) ./ (max - min)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_num = minimum(numbers)\n    max_num = maximum(numbers)\n    diff =\
    \ max_num - min_num\n    return (numbers - min_num) / diff\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmprsitwj96.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmprsitwj96.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprsitwj96.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprsitwj96.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprsitwj96.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmprsitwj96.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1660008671
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n = length(numbers)\n    max_num = maximum(numbers)\n    min_num = minimum(numbers)\n\
    \    range_num = max_num - min_num\n    unit_vector = (numbers - min_num) / range_num\n\
    \    return unit_vector\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpffyldf0t.jl:19\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpffyldf0t.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpffyldf0t.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpffyldf0t.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpffyldf0t.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpffyldf0t.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    vmin = minimum(numbers)\n    vmax = maximum(numbers)\n    return [(x -\
    \ vmin) / (vmax - vmin) for x in numbers]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \n    # We compute the maximum of the input\n    maximum = findmax(numbers)[1]\n\
    \    \n    # We compute the minimum of the input\n    minimum = findmin(numbers)[1]\n\
    \    \n    # We compute the difference between the maximum and the minimum\n \
    \   difference = maximum - minimum\n    \n    # We return the rescaled vector\n\
    \    return (numbers .- minimum) ./ difference\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers - minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp7rxpa8pz.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp7rxpa8pz.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7rxpa8pz.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7rxpa8pz.jl:13\ntest set:\
    \ Error During Test at /tmp/tmp7rxpa8pz.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp7rxpa8pz.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008671
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers - minimum) / (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4rfzneuo.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp4rfzneuo.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    @assert length(numbers) >= 2 \"The input must have at least two elements\"\
    \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return (numbers\
    \ .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvfit8v00.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpvfit8v00.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpvfit8v00.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvfit8v00.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvfit8v00.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpvfit8v00.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpvfit8v00.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvfit8v00.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvfit8v00.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpvfit8v00.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpvfit8v00.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvfit8v00.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvfit8v00.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpvfit8v00.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    amin = minimum(numbers)\n    amax = maximum(numbers)\n    return (numbers\
    \ .- amin) ./ (amax - amin)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min, max = extrema(numbers)\n    return (numbers .- min) ./ (max - min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # rescale_to_unit(a)\n    # @assert length(a) >= 2\n    a_min = minimum(numbers)\n\
    \    a_max = maximum(numbers)\n    return (numbers .- a_min) ./ (a_max - a_min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    return [ (n -\
    \ min) / (max - min) for n in numbers ]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t\
    @test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return [(number - minimum(numbers)) / (maximum(numbers) - minimum(numbers))\
    \ for number in numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    m = maximum(numbers)\n    numbers_shifted = numbers - m\n    return numbers_shifted\
    \ ./ abs(m)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp9_2xnbp3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp9_2xnbp3.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9_2xnbp3.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9_2xnbp3.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp9_2xnbp3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp9_2xnbp3.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_n, max_n = extrema(numbers)\n    return (numbers .- min_n) ./ (max_n\
    \ - min_n)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        throw(ArgumentError(\"Input vector of\
    \ numbers must have at least two elements.\"))\n    end\n    minval = minimum(numbers)\n\
    \    maxval = maximum(numbers)\n    return map(numbers) do x\n        (x - minval)\
    \ / (maxval - minval)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # TODO\nend\n \n@testset \"check result\" begin\n    @test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    @test rescale_to_unit([-3.0,\
    \ 0.0, 8.0, 14.0]) == [0.0, 0.2, 0.6, 1.0]\nend\n \n@testset \"check arguments\"\
    \ begin\n    @test_throws DomainError rescale_to_unit([])\n    @test_throws DomainError\
    \ rescale_to_unit([1.0])\nend\n \n@testset \"check types\" begin\n    @test_throws\
    \ TypeError rescale_to_unit([1, 2, 3])\n    @test_throws TypeError rescale_to_unit([\"\
    a\", \"b\", \"c\"])\nend\n \nend # module\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpk6e8yhcp.jl:10

    in expression starting at /tmp/tmpk6e8yhcp.jl:10

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    _minimum = minimum(numbers)\n    _range = maximum(numbers) - _minimum\n\
    \    if _range == 0.0\n        _range = 1.0\n    end\n    return (numbers .- _minimum)\
    \ ./ _range\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    sorted_numbers = sort(numbers)\n    min_number = sorted_numbers[1]\n \
    \   max_number = sorted_numbers[end]\n    return (numbers .- min_number) ./ (max_number\
    \ - min_number)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    size =\
    \ maximum - minimum\n    return [(x - minimum) / size for x in numbers]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpzzd1hbkx.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpzzd1hbkx.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpzzd1hbkx.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzzd1hbkx.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzzd1hbkx.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzzd1hbkx.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpzzd1hbkx.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzzd1hbkx.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzzd1hbkx.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzzd1hbkx.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpzzd1hbkx.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzzd1hbkx.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzzd1hbkx.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzzd1hbkx.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    return\
    \ [(i - min_val) / (max_val - min_val) for i in numbers]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    transformed = copy(numbers)\n    min_val = minimum(transformed)\n    max_val\
    \ = maximum(transformed)\n    for i in 1:length(transformed)\n        transformed[i]\
    \ = (transformed[i] - min_val) / (max_val - min_val)\n    end\n    return transformed\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    m,M = minimum(numbers), maximum(numbers)\n    return (numbers .- m) ./\
    \ (M-m)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ return (numbers .- min_number) ./ (max_number - min_number)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # given a vector of numbers, scale it so that the smallest value will\
    \ be 0 and the largest will be 1\n    maximum = findmax(numbers)[1]\n    minimum\
    \ = findmin(numbers)[1]\n    rescaled = (numbers .- minimum) ./ (maximum - minimum)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return ((numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    max_value = maximum(numbers)\n    min_value = minimum(numbers)\n    new_vector\
    \ = (numbers - min_value) / (max_value - min_value)\n    return new_vector\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpnecu6433.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpnecu6433.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnecu6433.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnecu6433.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnecu6433.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpnecu6433.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008673
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    m = minimum(numbers)\n    M = maximum(numbers)\n    D = M - m\n    return\
    \ (numbers .- m) ./ D\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n = length(numbers)\n    mins = minimum(numbers)\n    maxs = maximum(numbers)\n\
    \    return [(numbers[i] - mins) / (maxs - mins) for i in 1:n]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \n    sorted_numbers = sort(numbers)\n    minimum = sorted_numbers[1]\n\
    \    maximum = sorted_numbers[end]\n    \n    return [(number - minimum) / (maximum\
    \ - minimum) for number in numbers]\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    return\
    \ [ (n - min_val) / (max_val - min_val) for n in numbers ]\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    return\
    \ (numbers - min_value) / (max_value - min_value)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmplo8fa8wk.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmplo8fa8wk.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplo8fa8wk.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo8fa8wk.jl:15\ntest set:\
    \ Error During Test at /tmp/tmplo8fa8wk.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmplo8fa8wk.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008674
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ range_of_numbers = max_number - min_number\n    if range_of_numbers == 0.0\n\
    \        return fill(0.5, length(numbers))\n    else\n        return (numbers\
    \ .- min_number) ./ range_of_numbers\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return rescale_to_unit(numbers, minimum(numbers), maximum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpydbk0rin.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching rescale_to_unit(::Vector{Float64}, ::Float64, ::Float64)\n  Closest\
    \ candidates are:\n    rescale_to_unit(::Vector{Float64}) at /tmp/tmpydbk0rin.jl:6\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpydbk0rin.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydbk0rin.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydbk0rin.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpydbk0rin.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching rescale_to_unit(::Vector{Float64},\
    \ ::Float64, ::Float64)\n  Closest candidates are:\n    rescale_to_unit(::Vector{Float64})\
    \ at /tmp/tmpydbk0rin.jl:6\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpydbk0rin.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydbk0rin.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydbk0rin.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpydbk0rin.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  MethodError:\
    \ no method matching rescale_to_unit(::Vector{Float64}, ::Float64, ::Float64)\n\
    \  Closest candidates are:\n    rescale_to_unit(::Vector{Float64}) at /tmp/tmpydbk0rin.jl:6\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpydbk0rin.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n"
  timestamp: 1660008674
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers - minimum) / (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4rfzneuo.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp4rfzneuo.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    numerators = numbers .- minimum(numbers)\n    denominator = maximum(numbers)\
    \ - minimum(numbers)\n    return numerators ./ denominator\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    mx = maximum(numbers)\n    mn = minimum(numbers)\n    return (numbers\
    \ .- mn) ./ (mx - mn)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    unit_range = (minimum(numbers), maximum(numbers))\n    f(x) = (x-unit_range[1])/(unit_range[2]-unit_range[1])\n\
    \    return map(f, numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n = length(numbers)\n    min_num = minimum(numbers)\n    max_num = maximum(numbers)\n\
    \    return map(x -> (x - min_num) / (max_num - min_num), numbers)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # TODO: implement rescaling\nend\n \n \n\"\"\" Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n    such\
    \ that the smallest number will become 0 and the largest will become 1,\n    but\
    \ unlike `rescale_to_unit` method, the transform doesn't consider extreme values\
    \ (smallest and largest)\n    >>> rescale_to_unit_by_extremes([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.3333333333333333, 0.6666666666666666, 1.0, 1.0]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpra5k3xby.jl:11\nin expression starting at /tmp/tmpra5k3xby.jl:11\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    d_min = minimum(numbers)\n    d_max = maximum(numbers)\n    return (numbers\
    \ .- d_min) ./ (d_max - d_min)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    # will\
    \ broadcast element-wise\n    return (numbers .- min_val) ./ (max_val - min_val)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        error(\"You should provide vector of numbers\
    \ of at least two elements\")\n    end\n    minimum = findmin(numbers)[1]\n  \
    \  maximum = findmax(numbers)[1]\n    difference = maximum - minimum\n    scaled_values\
    \ = [normalize(number, minimum, difference) for number in numbers]\n    return\
    \ scaled_values\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpimhpadx9.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpimhpadx9.jl:21\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: normalize\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Float64, Float64})(number::Float64)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{Float64}, var\"#1#2\"{Float64, Float64}})\n\
    \     @ Base ./array.jl:724\n   [4] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpimhpadx9.jl:13\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpimhpadx9.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpimhpadx9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpimhpadx9.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: normalize not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{Float64, Float64})(number::Float64)\n  \
    \   @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{Float64}, var\"#1#2\"{Float64, Float64}})\n\
    \     @ Base ./array.jl:724\n   [4] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpimhpadx9.jl:13\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpimhpadx9.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpimhpadx9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpimhpadx9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ normalize not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Float64, Float64})(number::Float64)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vect"
  timestamp: 1660008674
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    if maximum\
    \ == minimum\n        return [NaN for x in numbers]\n    end\n    return [ (x\
    \ - minimum) / (maximum - minimum) for x in numbers ]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpb7zsvy4t.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpb7zsvy4t.jl:19\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpb7zsvy4t.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb7zsvy4t.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb7zsvy4t.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpb7zsvy4t.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpb7zsvy4t.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb7zsvy4t.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb7zsvy4t.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpb7zsvy4t.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpb7zsvy4t.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb7zsvy4t.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb7zsvy4t.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpb7zsvy4t.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008674
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    return (numbers\
    \ .- min) ./ (max - min)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minv = minimum(numbers)\n    maxv = maximum(numbers)\n    (numbers .-\
    \ minv) ./ (maxv - minv)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxo8xlhvr.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpxo8xlhvr.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  St"
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min, max = extrema(numbers)\n    return (numbers .- min) ./ (max - min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    nmin, nmax = extrema(numbers)\n    return [(x - nmin) / (nmax - nmin)\
    \ for x in numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    x_min = minimum(numbers)\n    x_max = maximum(numbers)\n    @assert x_min\
    \ != x_max \"cannot rescale a vector with the same value in every element\"\n\
    \    return (numbers .- x_min) ./ (x_max - x_min)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # copy the input vector to avoid overwriting it\n    result = copy(numbers)\n\
    \    min_value = minimum(result)\n    max_value = maximum(result)\n    range =\
    \ max_value - min_value\n    result = (result .- min_value) ./ range\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \n    largest = maximum(numbers)\n    smallest = minimum(numbers)\n  \
    \  \n    length = largest - smallest\n    \n    return (numbers .- smallest) ./\
    \ length\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    return\
    \ (numbers - min_value) / (max_value - min_value)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmplo8fa8wk.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmplo8fa8wk.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplo8fa8wk.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo8fa8wk.jl:15\ntest set:\
    \ Error During Test at /tmp/tmplo8fa8wk.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmplo8fa8wk.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008674
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    max_val = maximum(numbers)\n    min_val = minimum(numbers)\n    if max_val\
    \ - min_val == 0\n        return ones(length(numbers))\n    end\n    return ((numbers\
    \ .- min_val)./(max_val - min_val))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    return\
    \ (numbers - min_value) / (max_value - min_value)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmplo8fa8wk.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmplo8fa8wk.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplo8fa8wk.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo8fa8wk.jl:15\ntest set:\
    \ Error During Test at /tmp/tmplo8fa8wk.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmplo8fa8wk.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008674
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    v_min = minimum(numbers)\n    v_max = maximum(numbers)\n    v_range =\
    \ v_max - v_min\n    rescaled = (numbers .- v_min) ./ v_range\n    return rescaled\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    result = [0.0] * length(numbers)\n    max_value = maximum(numbers)\n \
    \   min_value = minimum(numbers)\n    for (idx, value) in enumerate(numbers)\n\
    \        result[idx] = (value - min_value) / (max_value - min_value)\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpyg5npr8o.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpyg5npr8o.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  BoundsError: attempt to\
    \ access 1-element Vector{Float64} at index [2]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpyg5npr8o.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyg5npr8o.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyg5npr8o.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpyg5npr8o.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  BoundsError: attempt to access 1-element\
    \ Vector{Float64} at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmpyg5npr8o.jl:11\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyg5npr8o.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyg5npr8o.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpyg5npr8o.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  BoundsError:\
    \ attempt to access 1-element Vector{Float64} at index [2]\n  Stacktrace:\n  \
    \ [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpyg5npr8o.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyg5npr8o.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     "
  timestamp: 1660008675
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    mini = minimum(numbers)\n    maxi = maximum(numbers)\n    spread = maxi\
    \ - mini\n    scaled = (numbers .- mini) ./ spread\n    return scaled\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = findmin(numbers)[1]\n    max = findmax(numbers)[1]\n    return (numbers\
    \ .- min) ./ (max - min)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minim, maxim = minimum(numbers), maximum(numbers)\n    if minim == maxim\n\
    \        return [0 for n in numbers]\n    end\n    return (numbers .- minim) ./\
    \ (maxim - minim)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    return\
    \ (numbers .- min_val) ./ (max_val - min_val)\nend\n#@testset \"B\" begin\n# \
    \   @testset \"B\" begin\n#        @testset \"B\" begin\n#            @testset\
    \ \"B\" begin\n#                @testset \"B\" begin\n#                    @testset\
    \ \"B\" begin\n#                        @testset \"B\" begin\n#              \
    \              @testset \"B\" begin\n#                                @testset\
    \ \"B\" begin\n#                                    @testset \"B\" begin\n#  \
    \                                      @testset \"B\" begin\n#               \
    \                             @testset \"B\" begin\n#                        \
    \                        @testset \"B\" begin\n#                             \
    \                       @testset \"B\" begin\n#                              \
    \                          @testset \"B\" begin\n#                           \
    \                                 @testset \"B\" begin\n#                    \
    \                                            @testset \"B\" begin\n#         \
    \                                                           @testset \"B\" begin\n\
    #                                                                        @testset\
    \ \"B\" begin\n#                                                             \
    \               @testset \"B\" begin\n#                                      \
    \                                          @testset \"B\" begin\n#           \
    \                                                                         @testset\
    \ \"B\" begin\n#                                                             \
    \                           @testset \"B\" begin\n#                          \
    \                                                                  @testset \"\
    B\" begin\n#                                                                 \
    \                               @testset \"B\" begin\n#                      \
    \                                                                            \
    \  @testset \"B\" begin\n#                                                   \
    \                                                     @testset \"B\" begin\n#\
    \                                                                            \
    \                                @testset \"B\" begin\n#                     \
    \                                                                            \
    \               @testset \"B\" begin\n#                                      \
    \                                                                            \
    \  @testset \"B\" begin\n#                                                   \
    \                                                                     @testset\
    \ \"B\" begin\n#                                                             \
    \                                                               @testset \"B\"\
    \ begin\n#                                                                   \
    \                                                             @testset \"B\" begin\n\
    #                                                                            \
    \                                                        @testset \"B\" begin\n\
    #                                                                            \
    \                                                            @testset \"B\" begin\n\
    #                                                \nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    m = minimum(numbers)\n    M = maximum(numbers)\n    return (numbers .-\
    \ m) ./ (M - m)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    local_numbers = copy(numbers)\n    local_min = minimum(local_numbers)\n\
    \    local_max = maximum(local_numbers)\n    range = local_max - local_min\n \
    \   for i in eachindex(local_numbers)\n        local_numbers[i] = (local_numbers[i]\
    \ - local_min) / range\n    end\n    return local_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    s = size(numbers)[1]\n    min, max = findminmax(numbers)\n    scaled =\
    \ zeros(s)\n    for i in 1:s\n        scaled[i] = (numbers[i] - min) / (max -\
    \ min)\n    end\n    return scaled\nend\n# Number of data points\nn = 5000\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgepxfoap.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpgepxfoap.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: findminmax\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpgepxfoap.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgepxfoap.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgepxfoap.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgepxfoap.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: findminmax not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpgepxfoap.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgepxfoap.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgepxfoap.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgepxfoap.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ findminmax not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpgepxfoap.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgepxfoap.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgepxfoap.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgepxfoap.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ findminmax not defined\n  Stacktrace:\n   [1] r"
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    numbers = sort(numbers)\n    scale = (numbers[end] - numbers[1]) / (length(numbers)\
    \ - 1)\n    return [i * scale + numbers[1] for i in 1:length(numbers)]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppbapex0k.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmppbapex0k.jl:16\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [49.9, 97.8] == [0.0, 1.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppbapex0k.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppbapex0k.jl:15\ntest set: Test\
    \ Failed at /tmp/tmppbapex0k.jl:17\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [100.0, 150.1] == [1.0, 0.0]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppbapex0k.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppbapex0k.jl:15\ntest set: Test\
    \ Failed at /tmp/tmppbapex0k.jl:18\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [2.0, 3.0, 4.0, 5.0, 6.0]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppbapex0k.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppbapex0k.jl:15\ntest set: Test\
    \ Failed at /tmp/tmppbapex0k.jl:19\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [2.0, 3.0, 4.0, 5.0, 6.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppbapex0k.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppbapex0k.jl:15\ntest set: Test\
    \ Failed at /tmp/tmppbapex0k.jl:2"
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxo8xlhvr.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpxo8xlhvr.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  St"
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    largest = maximum(numbers)\n    smallest = minimum(numbers)\n    if largest\
    \ == smallest\n        return ones(length(numbers))\n    end\n    return (numbers\
    \ - smallest) / (largest - smallest)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpyq5ofwq1.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpyq5ofwq1.jl:19\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpyq5ofwq1.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyq5ofwq1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyq5ofwq1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyq5ofwq1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpyq5ofwq1.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1660008676
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers - minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmptbcofx0g.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmptbcofx0g.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmptbcofx0g.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptbcofx0g.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptbcofx0g.jl:13\ntest set:\
    \ Error During Test at /tmp/tmptbcofx0g.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmptbcofx0g.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008676
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # identify smallest and largest number\n    smallest = minimum(numbers)\n\
    \    largest = maximum(numbers)\n    # rescale each number to [0, 1]\n    return\
    \ map(x -> (x - smallest) / (largest - smallest), numbers)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i = 2:length(numbers)\n\
    \        if numbers[i] < minimum\n            minimum = numbers[i]\n        end\n\
    \        if numbers[i] > maximum\n            maximum = numbers[i]\n        end\n\
    \    end\n    range = maximum - minimum\n    if range == 0\n        return ones(length(numbers))\n\
    \    end\n    new_numbers = zeros(length(numbers))\n    for i = 1:length(numbers)\n\
    \        new_numbers[i] = (numbers[i] - minimum) / range\n    end\n    return\
    \ new_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    vmin = minimum(numbers)\n    vmax = maximum(numbers)\n    return (numbers\
    \ .- vmin) ./ (vmax - vmin)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    return\
    \ (numbers - min_value) / (max_value - min_value)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmplo8fa8wk.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmplo8fa8wk.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplo8fa8wk.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo8fa8wk.jl:15\ntest set:\
    \ Error During Test at /tmp/tmplo8fa8wk.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmplo8fa8wk.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008674
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minval = minimum(numbers)\n    maxval = maximum(numbers)\n    return (numbers\
    \ .- minval) ./ (maxval - minval)\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return [(n - minimum(numbers)) / (maximum(numbers) - minimum(numbers))\
    \ for n in numbers]\nend;\n \nminkowski_distances = [distance(cities,city,city2,p)\
    \ for city in cities, city2 in cities]\nr = rescale_to_unit(minkowski_distances);\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: cities not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmph2g5ejxc.jl:10\nin expression starting at /tmp/tmph2g5ejxc.jl:10\n"
  stdout: ''
  timestamp: 1660008673
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    sorted_numbers = sort(numbers)\n    smallest = sorted_numbers[1]\n   \
    \ largest = sorted_numbers[end]\n    return (numbers .- smallest) ./ (largest\
    \ - smallest)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ return (numbers .- min_number) ./ (max_number - min_number)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    _min = minimum(numbers)\n    _max = maximum(numbers)\n    if _min == _max\n\
    \        return ones(length(numbers))\n    end\n    _range = _max - _min\n   \
    \ return (numbers - _min) / _range\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpz0rik11s.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpz0rik11s.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpz0rik11s.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz0rik11s.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz0rik11s.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpz0rik11s.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpz0rik11s.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1660008677
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    scaled_values\
    \ = (numbers .- min_val) ./ (max_val - min_val)\n    return scaled_values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    new_numbers = copy(numbers)\n    new_numbers .-= minimum(numbers)\n  \
    \  new_numbers ./= maximum(numbers)\n    return new_numbers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg2tbkra_.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpg2tbkra_.jl:17\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [0.0, 0.9599198396793587] == [0.0, 1.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2tbkra_.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2tbkra_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpg2tbkra_.jl:18\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [0.501, 0.0] == [1.0, 0.0]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2tbkra_.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2tbkra_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpg2tbkra_.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.0, 0.2, 0.4, 0.6, 0.8]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2tbkra_.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2tbkra_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpg2tbkra_.jl:20\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.2, 0.0, 0.8, 0.4, 0.6]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2tbkra_.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2tbkra_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpg2"
  timestamp: 1660008676
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    mi = minimum(numbers)\n    ma = maximum(numbers)\n    i = numbers .- mi\n\
    \    return i ./ (ma - mi)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \n    # First we find the smallest and largest value\n    smallest = minimum(numbers)\n\
    \    largest = maximum(numbers)\n    \n    # Now we can compute the difference\n\
    \    delta = largest - smallest\n    \n    # Now we can do the rescaling, note\
    \ that this works for vectors of any length!\n    rescaled = [(number - smallest)\
    \ / delta for number in numbers]\n    \n    return rescaled\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    lo = minimum(numbers)\n    hi = maximum(numbers)\n    diff = hi - lo\n\
    \    return (numbers .- lo) ./ diff\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    m = minimum(numbers)\n    delta = maximum(numbers) - m\n    return (numbers\
    \ .- m) ./ delta\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008674
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    smallest = minimum(numbers)\n    biggest = maximum(numbers)\n    return\
    \ (numbers .- smallest) ./ (biggest - smallest)\nend\n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    return (numbers\
    \ .- min) ./ (max - min)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \n    # notice that the minimum and maximum is computed over a vector\
    \ of Float64,\n    # so the result will be Float64\n    vmin = minimum(numbers)\n\
    \    vmax = maximum(numbers)\n    \n    return (numbers - vmin) / (vmax - vmin)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpwa6zg6k5.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpwa6zg6k5.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpwa6zg6k5.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwa6zg6k5.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwa6zg6k5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpwa6zg6k5.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpwa6zg6k5.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1660008677
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    vmin = minimum(numbers)\n    vmax = maximum(numbers)\n    return (numbers\
    \ - vmin) / (vmax - vmin)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp763gfqxl.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp763gfqxl.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp763gfqxl.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp763gfqxl.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp763gfqxl.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp763gfqxl.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \n    # get the index of the maximum value\n    max_index = argmax(numbers)\n\
    \    # get the maximum value\n    max_value = numbers[max_index]\n    # get the\
    \ index of the minimum value\n    min_index = argmin(numbers)\n    # get the minimum\
    \ value\n    min_value = numbers[min_index]\n    \n    # get the range of values\n\
    \    range_of_values = max_value - min_value\n    \n    # if the range of values\
    \ is zero, then return the same values\n    if range_of_values == 0\n        return\
    \ numbers\n    end\n    \n    # rescale the elements of the vector\n    for (index,\
    \ value) in enumerate(numbers)\n        # skip the maximum value, since we know\
    \ it will be 1.0\n        if index == max_index\n            continue\n      \
    \  end\n        # skip the minimum value, since we know it will be 0.0\n     \
    \   if index == min_index\n            continue\n        end\n        # rescale\
    \ the value so that it becomes a number between 0 and 1\n        numbers[index]\
    \ = (value - min_value) / range_of_values\n    end\n    \n    # set the maximum\
    \ value to 1.0\n    numbers[max_index] = 1.0\n    # set the minimum value to 0.0\n\
    \    numbers[min_index] = 0.0\n    \n    # return the rescaled vector\n    return\
    \ numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers - minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqm9kc_f3.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpqm9kc_f3.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpqm9kc_f3.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqm9kc_f3.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqm9kc_f3.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpqm9kc_f3.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpqm9kc_f3.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    max_value = maximum(numbers)\n    min_value = minimum(numbers)\n    return\
    \ (numbers .- min_value) ./ (max_value - min_value)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008674
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    normalized = zeros(size(numbers))\n    maximum = maximum(numbers)\n  \
    \  minimum = minimum(numbers)\n    if (maximum == minimum)\n        if (maximum\
    \ == 0)\n            return normalized\n        else\n            return fill(1.0,\
    \ size(numbers))\n        end\n    end\n    @inbounds for i in 1:length(numbers)\n\
    \        normalized[i] = (numbers[i] - minimum) / (maximum - minimum)\n    end\n\
    \    return normalized\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp1jsd2z44.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp1jsd2z44.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp1jsd2z44.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1jsd2z44.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1jsd2z44.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1jsd2z44.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: maximum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmp1jsd2z44.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1jsd2z44.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1jsd2z44.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1jsd2z44.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp1jsd2z44.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1jsd2z44.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1jsd2z44.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1jsd2z44.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008677
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ return ((numbers .- min_number) ./ (max_number - min_number))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008674
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    smallest = minimum(numbers)\n    largest = maximum(numbers)\n    return\
    \ (numbers - smallest) / (largest - smallest)\nend\n \n \n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp1sxx1haq.jl:19\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp1sxx1haq.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1sxx1haq.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1sxx1haq.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp1sxx1haq.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp1sxx1haq.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008678
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    smallest = minimum(numbers)\n    largest = maximum(numbers)\n    return\
    \ (numbers - smallest) / (largest - smallest)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpz20yi3_t.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpz20yi3_t.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz20yi3_t.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz20yi3_t.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpz20yi3_t.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpz20yi3_t.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008678
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    assert size(numbers, 1) > 1\n    return (numbers .- minimum(numbers))\
    \ ./ maximum(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp5lqp6uos.jl:6 expected\
    \ \"end\", got \"size\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5lqp6uos.jl:7\n\
    in expression starting at /tmp/tmp5lqp6uos.jl:7\n"
  stdout: ''
  timestamp: 1660008675
- exit_code: -1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    smallest = minimum(numbers)\n    largest = maximum(numbers)\n    return\
    \ (numbers - smallest) / (largest - smallest)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpz20yi3_t.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpz20yi3_t.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz20yi3_t.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz20yi3_t.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpz20yi3_t.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpz20yi3_t.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ return map(x -> (x - min_number) / (max_number - min_number), numbers)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # Sort in ascending order\n    sorted_numbers = sort(numbers)\n    # Determine\
    \ the number of elements\n    elements_no = length(numbers)\n    # Initialize\
    \ the array that will store the values\n    rescaled_numbers = zeros(elements_no)\n\
    \    # Determine the largest and smallest number in the vector\n    largest_number\
    \ = sorted_numbers[end]\n    smallest_number = sorted_numbers[1]\n    # Check\
    \ if the smallest number equals the largest number\n    if smallest_number ==\
    \ largest_number\n        # In that case, return a vector of ones of equal length\n\
    \        return ones(elements_no)\n    end\n    # Determine the range\n    range\
    \ = largest_number - smallest_number\n    # Apply the linear transform to each\
    \ element in the vector\n    for i = 1:elements_no\n        rescaled_numbers[i]\
    \ = (sorted_numbers[i] - smallest_number) / range\n    end\n    # Return the rescaled\
    \ vector\n    return rescaled_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps4k0g89t.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmps4k0g89t.jl:36\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n   Evaluated: [0.0, 1.0] == [1.0, 0.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps4k0g89t.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps4k0g89t.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps4k0g89t.jl:38\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.25, 0.5, 0.75, 1.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps4k0g89t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps4k0g89t.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps4k0g89t.jl:39\n  Expression: candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.25, 0.5,\
    \ 0.75, 1.0] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps4k0g89t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmps4k0g89t.jl:34\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008677
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    @assert length(numbers) >= 2 \"Vector must have at least two elements\"\
    \n    sorted_numbers = sort(numbers)\n    r = sorted_numbers[end] - sorted_numbers[1]\n\
    \    return [(x - sorted_numbers[1]) / r for x in numbers]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum, maximum = minimum(numbers), maximum(numbers)\n    return (numbers\
    \ .- minimum) ./ (maximum - minimum)\nend\n#   \n#   \n#\n#\n#\n#\n#\n#\n#\n#\n\
    #\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n\
    #\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n\
    #\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n\
    #\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n\
    #\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n\
    #\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n\
    #\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n\
    #\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n\
    #\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpg_az2oe3.jl:250

    '
  stdout: "test set: Error During Test at /tmp/tmpg_az2oe3.jl:253\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpg_az2oe3.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_az2oe3.jl:253 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_az2oe3.jl:252\ntest set:\
    \ Error During Test at /tmp/tmpg_az2oe3.jl:254\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpg_az2oe3.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_az2oe3.jl:254 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_az2oe3.jl:252\ntest set:\
    \ Error During Test at /tmp/tmpg_az2oe3.jl:255\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpg_az2oe3.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_az2oe3.jl:255 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_az2oe3.jl:252\ntest set:\
    \ Error During Test at /tmp/tmpg_az2oe3.jl:256\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] res"
  timestamp: 1660008677
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    diff =\
    \ maximum - minimum\n    to_add = minimum\n    return map(x -> (x - to_add) /\
    \ diff, numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpmswqztp4.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpmswqztp4.jl:18\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpmswqztp4.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmswqztp4.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmswqztp4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpmswqztp4.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpmswqztp4.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmswqztp4.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmswqztp4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpmswqztp4.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpmswqztp4.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmswqztp4.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmswqztp4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpmswqztp4.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008677
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min, max = extrema(numbers)\n    return (numbers - min) / (max - min)\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp601d_n0p.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp601d_n0p.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp601d_n0p.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp601d_n0p.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp601d_n0p.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp601d_n0p.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp601d_n0p.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008679
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    if min != max\n\
    \        return map(x -> (x - min) / (max - min), numbers)\n    else\n       \
    \ return map(x -> (x - min) / 1.0, numbers)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers .- minimum(numbers)) ./ maximum(numbers)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuwp2pz62.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpuwp2pz62.jl:14\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [0.0, 0.9599198396793587] == [0.0, 1.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuwp2pz62.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuwp2pz62.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpuwp2pz62.jl:15\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [0.501, 0.0] == [1.0, 0.0]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuwp2pz62.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuwp2pz62.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpuwp2pz62.jl:16\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.0, 0.2, 0.4, 0.6, 0.8]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuwp2pz62.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuwp2pz62.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpuwp2pz62.jl:17\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.2, 0.0, 0.8, 0.4, 0.6]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuwp2pz62.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuwp2pz62.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpuw"
  timestamp: 1660008677
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers - minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpar7y34hy.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpar7y34hy.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpar7y34hy.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpar7y34hy.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpar7y34hy.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpar7y34hy.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpar7y34hy.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008679
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    @assert length(numbers) > 1\n    max_number = maximum(numbers)\n    min_number\
    \ = minimum(numbers)\n    return map(x -> (x - min_number) / (max_number - min_number),\
    \ numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008675
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    range = max -\
    \ min\n    if range == 0\n        return [0.0 for i in 1:length(numbers)]\n  \
    \  end\n    return [(x - min) / range for x in numbers]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = findmin(numbers)[1]\n    max_val = findmax(numbers)[1]\n   \
    \ scale = max_val - min_val\n    return (numbers .- min_val) ./ scale\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    norm_numbers = rescale_to_interval(numbers, 0.0, 1.0)\n    return norm_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_7hi9hdl.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp_7hi9hdl.jl:15\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: rescale_to_interval\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp_7hi9hdl.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_7hi9hdl.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7hi9hdl.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_7hi9hdl.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: rescale_to_interval\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp_7hi9hdl.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_7hi9hdl.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7hi9hdl.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_7hi9hdl.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ rescale_to_interval not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp_7hi9hdl.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_7hi9hdl.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7hi9hdl.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_7hi9hdl.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ rescale_to_interva"
  timestamp: 1660008679
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] < minimum\n            minimum = numbers[i]\n        end\n\
    \        if numbers[i] > maximum\n            maximum = numbers[i]\n        end\n\
    \    end\n    return (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    amin = minimum(numbers)\n    amax = maximum(numbers)\n    return [ max(min((number\
    \ - amin) / (amax - amin), 1.0), 0.0) for number in numbers ]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \n    x_min = minimum(numbers)\n    x_max = maximum(numbers)\n    \n \
    \   # avoid division by zero\n    if x_max == x_min\n        return fill(1/length(numbers),\
    \ length(numbers))\n    end\n    \n    # rescale\n    rescaled = map(numbers)\
    \ do x\n        (x - x_min) / (x_max - x_min)\n    end\n    \n    return rescaled\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    return\
    \ (numbers - min_val) / (max_val - min_val)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmphusl60qu.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmphusl60qu.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmphusl60qu.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphusl60qu.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphusl60qu.jl:15\ntest set:\
    \ Error During Test at /tmp/tmphusl60qu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmphusl60qu.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008680
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ range_of_numbers = max_number - min_number\n    return [ max(0.0, (number -\
    \ min_number) / range_of_numbers) for number in numbers ]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers - minimum) / (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4rfzneuo.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp4rfzneuo.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    numbers = collect(numbers)\n    minimum, maximum = extrema(numbers)\n\
    \    return (numbers - minimum) / (maximum - minimum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpe4s3hns_.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpe4s3hns_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpe4s3hns_.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe4s3hns_.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe4s3hns_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpe4s3hns_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpe4s3hns_.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008680
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ width = max_number - min_number\n    if width == 0.0\n        return zeros(length(numbers))\n\
    \    end\n    return (numbers .- min_number) ./ width\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n = length(numbers)\n    new_numbers = similar(numbers)\n    x_max = numbers[1]\n\
    \    x_min = numbers[1]\n    for i in 1:n\n        x_max = max(x_max, numbers[i])\n\
    \        x_min = min(x_min, numbers[i])\n    end\n    for i in 1:n\n        new_numbers[i]\
    \ = (numbers[i] - x_min) / (x_max - x_min)\n    end\n    return new_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008677
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    new_min = 0.0\n\
    \    new_max = 1.0\n    transform = x -> (x - min)/(max - min) * (new_max - new_min)\
    \ + new_min\n    return map(transform, numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008677
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) == 0\n        error(\"Vector should not be empty\"\
    )\n    end\n    if length(numbers) == 1\n        return [1.0]\n    end\n    min,\
    \ max = extrema(numbers)\n    #return (numbers - min) / (max - min)\n    return\
    \ (numbers - min) / (max - min)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpixneq8wu.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpixneq8wu.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpixneq8wu.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpixneq8wu.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpixneq8wu.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpixneq8wu.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpixneq8wu.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1660008681
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    b = sort(numbers)\n    return (numbers .- b[1]) ./ (b[end] - b[1])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008677
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        error(\"Can't rescale a vector with less\
    \ than two elements\")\n    end\n    minimum = numbers[1]\n    maximum = numbers[1]\n\
    \    for i = 2:length(numbers)\n        minimum = min(minimum, numbers[i])\n \
    \       maximum = max(maximum, numbers[i])\n    end\n    if maximum == minimum\n\
    \        return ones(length(numbers))\n    end\n    return (numbers - minimum)\
    \ / (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpdjqajg91.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpdjqajg91.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpdjqajg91.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjqajg91.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjqajg91.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpdjqajg91.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpdjqajg91.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1660008681
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    smallest = minimum(numbers)\n    largest = maximum(numbers)\n    scale\
    \ = largest - smallest\n    return (numbers .- smallest) ./ scale\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008677
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    a = minimum(numbers)\n    b = maximum(numbers)\n    return (numbers -\
    \ a) / (b - a)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2oy7vy_s.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp2oy7vy_s.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp2oy7vy_s.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2oy7vy_s.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2oy7vy_s.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2oy7vy_s.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp2oy7vy_s.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008681
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = minimum(numbers)\n\
    \    maximum = maximum(numbers)\n    dist = maximum - minimum\n    return (numbers\
    \ .- minimum) ./ dist\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpu_ii6i7h.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpu_ii6i7h.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpu_ii6i7h.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu_ii6i7h.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu_ii6i7h.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpu_ii6i7h.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpu_ii6i7h.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu_ii6i7h.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu_ii6i7h.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpu_ii6i7h.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpu_ii6i7h.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu_ii6i7h.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu_ii6i7h.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpu_ii6i7h.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to"
  timestamp: 1660008680
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_element = minimum(numbers)\n    max_element = maximum(numbers)\n \
    \   output = (numbers .- min_element) ./ (max_element - min_element)\n    return\
    \ output\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    v_min = minimum(numbers)\n    v_max = maximum(numbers)\n    v_diff = v_max\
    \ - v_min\n    return (numbers .- v_min) ./ v_diff\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008678
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        error(\"Cannot rescale vector with less\
    \ than two elements\")\n    end\n    return (numbers .- minimum(numbers)) ./ maximum(numbers)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppwfjt3ld.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmppwfjt3ld.jl:17\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [0.0, 0.9599198396793587] == [0.0, 1.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwfjt3ld.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwfjt3ld.jl:16\ntest set: Test\
    \ Failed at /tmp/tmppwfjt3ld.jl:18\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [0.501, 0.0] == [1.0, 0.0]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwfjt3ld.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwfjt3ld.jl:16\ntest set: Test\
    \ Failed at /tmp/tmppwfjt3ld.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.0, 0.2, 0.4, 0.6, 0.8]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwfjt3ld.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwfjt3ld.jl:16\ntest set: Test\
    \ Failed at /tmp/tmppwfjt3ld.jl:20\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.2, 0.0, 0.8, 0.4, 0.6]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwfjt3ld.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwfjt3ld.jl:16\ntest set: Test\
    \ Failed at /tmp/tmppw"
  timestamp: 1660008680
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    maximum = maximum(numbers)\n    minimum = minimum(numbers)\n    normalized\
    \ = (numbers .- minimum) ./ (maximum - minimum)\n    return normalized\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpft9urlx0.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpft9urlx0.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpft9urlx0.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpft9urlx0.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpft9urlx0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpft9urlx0.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: maximum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpft9urlx0.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpft9urlx0.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpft9urlx0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpft9urlx0.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpft9urlx0.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpft9urlx0.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpft9urlx0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpft9urlx0.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008680
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    smallest = minimum(numbers)\n    largest = maximum(numbers)\n    return\
    \ (numbers .- smallest) ./ (largest - smallest)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008678
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # TODO: Your code here\n    # Remember: You can use standard functions\
    \ like sort and sortperm to help\n    # You may also want to define helper functions\n\
    \    # if you want to implement any algorithms\nend\n \n# This is a test cell,\
    \ please ignore it!\nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n \n \n\"\"\" Given a dictionary of different types of\
    \ vector, apply the above rescaling to each vector\n    Return a dictionary with\
    \ the same keys and rescaled values\n    The input vectors must have the same\
    \ length\n    >>> rescale_dict_to_unit(Dict(\"a\" => [1.0, 2.0, 3.0], \"b\" =>\
    \ [1.0, 2.0, 3.0]))\n    Dict{String,Array{Float64,1}} with 2 entries:\n     \
    \ \"a\" => [0.0, 0.5, 1.0]\n      \"b\" => [0.0, 0.5, 1.0]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"rescale_to_unit\" after end of\
    \ expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8cdiged8.jl:14\n\
    in expression starting at /tmp/tmp8cdiged8.jl:14\n"
  stdout: ''
  timestamp: 1660008679
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    sm = minimum(numbers)\n    rg = maximum(numbers) - sm\n    return (numbers\
    \ .- sm) ./ rg\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ transformed_numbers = (numbers .- min_number) ./ (max_number - min_number)\n\
    \    return transformed_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008678
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        throw(ArgumentError(\"numbers must be\
    \ a vector of at least two elements\"))\n    end\n    return (numbers - minimum(numbers))\
    \ / (maximum(numbers) - minimum(numbers))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpmq6qovmk.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpmq6qovmk.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpmq6qovmk.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmq6qovmk.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmq6qovmk.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpmq6qovmk.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpmq6qovmk.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1660008682
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxo8xlhvr.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpxo8xlhvr.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  St"
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers - minimum) / (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4rfzneuo.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp4rfzneuo.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4rfzneuo.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4rfzneuo.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4rfzneuo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4rfzneuo.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_un"
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    max_element = maximum(numbers)\n    min_element = minimum(numbers)\n \
    \   (numbers .- min_element) ./ (max_element - min_element)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    values = sort(numbers)\n    minimum = values[1]\n    maximum = values[end]\n\
    \    value_range = maximum - minimum\n    if value_range == 0.0\n        println(\"\
    WARNING: attempted to rescale a vector with a range of 0.0 to a unit vector\"\
    )\n        return numbers\n    end\n    return [ (number - minimum) / value_range\
    \ for number in numbers ]\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008678
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ return (numbers - min_number) / (max_number - min_number)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpdyxgacqf.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpdyxgacqf.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpdyxgacqf.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdyxgacqf.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdyxgacqf.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpdyxgacqf.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpdyxgacqf.jl:9\n   [2] macro expansion\n     @ /shared/cen"
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ numbers .- min_number\n    return (numbers .- min_number) ./ (max_number - min_number)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008679
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minval = minimum(numbers)\n    maxval = maximum(numbers)\n    delta =\
    \ maxval - minval\n    return [(x - minval) / delta for x in numbers]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008679
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    v_min = minimum(numbers)\n    v_max = maximum(numbers)\n    return (numbers\
    \ - v_min) / (v_max - v_min)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpktsjaeq3.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpktsjaeq3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpktsjaeq3.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpktsjaeq3.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpktsjaeq3.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpktsjaeq3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpktsjaeq3.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008682
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = findmin(numbers)[1]\n    maximum = findmax(numbers)[1]\n   \
    \ if minimum == maximum\n        return ones(length(numbers))\n    end\n    return\
    \ (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008679
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    return\
    \ (numbers .- min_value) ./ (max_value - min_value)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008679
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if numbers == nothing\n        return nothing\n    end\n    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    min_value = minimum(numbers)\n  \
    \  max_value = maximum(numbers)\n    return (numbers - min_value) / (max_value\
    \ - min_value)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp12a93d20.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp12a93d20.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp12a93d20.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp12a93d20.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp12a93d20.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp12a93d20.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp12a93d20.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1660008683
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    numbers = sort(numbers)\n    return (numbers .- numbers[1]) / (numbers[end]\
    \ - numbers[1])\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp97hngvh8.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmp97hngvh8.jl:16\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n   Evaluated: [0.0, 1.0] == [1.0, 0.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp97hngvh8.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97hngvh8.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp97hngvh8.jl:18\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.25, 0.5, 0.75, 1.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp97hngvh8.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97hngvh8.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp97hngvh8.jl:19\n  Expression: candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.25, 0.5,\
    \ 0.75, 1.0] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp97hngvh8.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp97hngvh8.jl:14\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008681
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxo8xlhvr.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpxo8xlhvr.jl:16\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxo8xlhvr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo8xlhvr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo8xlhvr.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxo8xlhvr.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  St"
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    mx = maximum(numbers)\n    mn = minimum(numbers)\n    return (numbers\
    \ .- mn)./(mx - mn)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008679
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min, max = extrema(numbers)\n    return (numbers .- min) ./ (max - min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 1
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min, max = minimum(numbers), maximum(numbers)\n    return (numbers - min)\
    \ / (max - min)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpka9y9ho_.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpka9y9ho_.jl:15\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpka9y9ho_.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpka9y9ho_.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpka9y9ho_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpka9y9ho_.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpka9y9ho_.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1660008683
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ range_ = max_number - min_number\n    if range_ == 0.0\n        range_ = eps()\n\
    \    end\n    return (numbers .- min_number) ./ range_\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008679
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if numbers == nothing\n        error(\"empty input\")\n    end\n    if\
    \ size(numbers)[1] < 2\n        error(\"input is a single number\")\n    end\n\
    \    min = minimum(numbers)\n    max = maximum(numbers)\n    return [(number -\
    \ min) / (max - min) for number in numbers]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008680
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum, maximum = extrema(numbers)\n    return (numbers .- minimum) ./\
    \ (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008680
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
    \ transform to that vector,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    rescaled\
    \ = [(i - min_val) / (max_val - min_val) for i in numbers]\n    return rescaled\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008680
