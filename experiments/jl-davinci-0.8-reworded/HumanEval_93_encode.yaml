name: HumanEval_93_encode
language: jl
prompt: "\"\"\"\n    Write a function that takes a message, and encodes in such a\
  \ \n    way that it swaps case of all letters, replaces all vowels in \n    the\
  \ message with the letter that appears 2 places ahead of that \n    vowel in the\
  \ english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"\
  test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\
  \n    \"\"\"\nfunction encode(message::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
  TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
  YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
  )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
  )\nend\n"
completions: ["    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    alpha = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    new_message = \"\"\n    for char in message\n    \
    \    if char in vowels\n            location = findfirst(vowels, char)\n     \
    \       char = alpha[location + 2]\n        elseif char in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n            location = findfirst(string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"), char)\n\
    \            char = string(\"abcdefghijklmnopqrstuvwxyz\")[location]\n       \
    \ else\n            location = findfirst(string(\"abcdefghijklmnopqrstuvwxyz\"\
    ), char)\n            char = string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")[location]\n\
    \        end\n        new_message = new_message * char\n    end\n    return new_message\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    enc_msg = \"\"\n\
    \    for i in 1:length(message)\n        if message[i] in vowels\n           \
    \ enc_msg *= encode_vowel(message[i])\n        elseif message[i] in 'A':'Z'\n\
    \            enc_msg *= lowercase(message[i])\n        elseif message[i] in 'a':'z'\n\
    \            enc_msg *= uppercase(message[i])\n        else\n            enc_msg\
    \ *= message[i]\n        end\n    end\n    return enc_msg\nend\n    \n    \n#\
    \ Testing\n@testset \"encoding the message\" begin\n    @test encode(\"test\"\
    ) == \"TGST\"\n    @test encode(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    \nend", "    return_string = \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    for char in message\n        if islower(char)\n            return_string\
    \ *= uppercase(char)\n        elseif isupper(char)\n            return_string\
    \ *= lowercase(char)\n        elseif char in vowels\n            return_string\
    \ *= shift(char, 2)\n        else\n            return_string *= char\n       \
    \ end\n    end\n    return return_string\nend", "    \n    alphabet = [\"a\",\
    \ \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    alphabet_cap = [\"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"\
    , \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_cap = [\"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    encoded_message = \"\"\n    \n    for letter in message\n\
    \        if letter in alphabet\n            encoded_message *= string(alphabet_cap[find(alphabet,\
    \ letter)])\n        elseif letter in alphabet_cap\n            encoded_message\
    \ *= string(alphabet[find(alphabet_cap, letter)])\n        else\n            encoded_message\
    \ *= letter\n        end\n    end\n    \n    for letter in encoded_message\n \
    \       if letter in vowels\n            encoded_message = replace(encoded_message,\
    \ letter, vowels[mod(find(vowels, letter)+2, length(vowels))])\n        elseif\
    \ letter in vowels_cap\n            encoded_message = replace(encoded_message,\
    \ letter, vowels_cap[mod(find(vowels_cap, letter)+2, length(vowels_cap))])\n \
    \       end\n    end\n    \n    return encoded_message\n    \nend", "    new_message\
    \ = \"\"\n    alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    vowels = \"AEIOU\"\n\
    \    j = 0\n    for i in 1:length(message)\n        j = findnext(alpha,message[i])\n\
    \        if j == 0\n            j = findnext(lowercase(alpha),message[i])\n  \
    \      end\n        if j == 0\n            new_message = new_message * message[i]\n\
    \        elseif message[i] in uppercase(alpha)\n            if message[i] in vowels\n\
    \                new_message = new_message * uppercase(alpha[j+2])\n         \
    \   else\n                new_message = new_message * uppercase(alpha[j+1])\n\
    \            end\n        elseif message[i] in lowercase(alpha)\n            if\
    \ message[i] in vowels\n                new_message = new_message * lowercase(alpha[j+2])\n\
    \            else\n                new_message = new_message * lowercase(alpha[j+1])\n\
    \            end\n        end\n    end\n    return new_message\nend", "    return\
    \ lowercase(message)\nend", "    if message == \"\"\n        return \"\"\n   \
    \ else\n        if message[1] in \"aeiou\"\n            return encode(message[2:end])*2*2\n\
    \        elseif message[1] in \"AEIOU\"\n            return encode(message[2:end])*2*2\n\
    \        elseif message[1] in \"abcdefghijklmnopqrstuvwxyz\"\n            return\
    \ encode(message[2:end])*2\n        elseif message[1] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            return encode(message[2:end])*2\n        else\n            return\
    \ encode(message[2:end])\n        end\n    end\nend", "    # write code here \n\
    \    message_array = split(message, \"\")\n    encoding_array = []\n    for (i,\
    \ message_char) in enumerate(message_array)\n        if message_char in (\"A\"\
    ,\"E\",\"I\",\"O\",\"U\")\n            encoding_array[i] = message_array[i+2]\n\
    \        elseif message_char in (\"a\",\"e\",\"i\",\"o\",\"u\")\n            encoding_array[i]\
    \ = message_array[i+2]\n        elseif message_char in (\"B\",\"C\",\"D\",\"F\"\
    ,\"G\",\"H\",\"J\",\"K\",\"L\",\"M\",\"N\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"V\"\
    ,\"W\",\"X\",\"Y\",\"Z\")\n            encoding_array[i] = uppercase(message_array[i])\n\
    \        elseif message_char in (\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"\
    k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"\
    z\")\n            encoding_array[i] = lowercase(message_array[i])\n        else\n\
    \            encoding_array[i] = message_array[i]\n        end\n    end\n    return\
    \ join(encoding_array, \"\")\nend", "    \n    newmessage = \"\"\n    for i in\
    \ message\n        if isletter(i)\n            if islower(i)\n               \
    \ newmessage = newmessage * uppercase(i)\n            else\n                newmessage\
    \ = newmessage * lowercase(i)\n            end\n        elseif i == \"a\"\n  \
    \          newmessage = newmessage * \"c\"\n        elseif i == \"e\"\n      \
    \      newmessage = newmessage * \"g\"\n        elseif i == \"i\"\n          \
    \  newmessage = newmessage * \"k\"\n        elseif i == \"o\"\n            newmessage\
    \ = newmessage * \"q\"\n        elseif i == \"u\"\n            newmessage = newmessage\
    \ * \"y\"\n        elseif i == \"A\"\n            newmessage = newmessage * \"\
    C\"\n        elseif i == \"E\"\n            newmessage = newmessage * \"G\"\n\
    \        elseif i == \"I\"\n            newmessage = newmessage * \"K\"\n    \
    \    elseif i == \"O\"\n            newmessage = newmessage * \"Q\"\n        elseif\
    \ i == \"U\"\n            newmessage = newmessage * \"Y\"\n        else\n    \
    \        newmessage = newmessage * i\n        end\n    end\n    return newmessage\n\
    end", "    pass\nencode(\"test\")\nencode(\"This is a message\")\n \n    \"\"\"\
    \n    Now write a function to decode the message.\n    \"\"\"", "    \n    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alpha_up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    message_up = upper(message)\n\
    \    n = length(message)\n    encoded = zeros(Char, n)\n    \n    for i = 1:n\n\
    \        if message[i] in vowels\n            loc = findfirst(x -> x == message[i],\
    \ vowels)\n            encoded[i] = alpha[loc + 2]\n        elseif message[i]\
    \ in alpha\n            loc = findfirst(x -> x == message[i], alpha)\n       \
    \     encoded[i] = alpha_up[loc]\n        elseif message[i] in alpha_up\n    \
    \        loc = findfirst(x -> x == message[i], alpha_up)\n            encoded[i]\
    \ = alpha[loc]\n        else\n            encoded[i] = message[i]\n        end\n\
    \    end\n    \n    encoded\nend\n        \nprintln(encode(\"test\"))\nprintln(encode(\"\
    This is a message\"))", "    # Your code here. Feel free to add helper functions.\n\
    \    end\n    \n    ", "    for letter in message \n        if (A .<= letter .<=\
    \ Z) || (a .<= letter .<= z) \n            \n            if (A .<= letter .<=\
    \ Z) \n                # if the letter is upper-case \n                encode_letter(letter,\
    \ A, Z)\n            else \n                # if the letter is lower-case \n \
    \               encode_letter(letter, a, z)\n            end\n            \n \
    \       else \n            # we don't touch punctuation marks\n            letter\
    \ \n        end\n    end\nend", "    length = size(message,1)\n    code = \"\"\
    \n    for i in 1:length\n        if isletter(message[i])\n            case = isupper(message[i])\n\
    \            if case\n                temp = uppercase(message[i])\n         \
    \   else\n                temp = lowercase(message[i])\n            end\n    \
    \        if temp in \"aeiou\"\n                temp = next(temp,step=2)\n    \
    \        end\n            if case\n                temp = uppercase(temp)\n  \
    \          end\n            code = code * temp\n        else\n            code\
    \ = code * message[i]\n        end\n    end\n    return code\nend", "    m = encode(message)\n\
    \    uppercase(m)\n    lowercase(m)\nend", "    \n    vowels = \"AEIOUaeiou\"\n\
    \    new_message = \"\"\n    \n    for letter in message\n        if letter in\
    \ vowels\n            new_letter = letter\n            if letter in \"AEIOU\"\n\
    \                while new_letter in \"AEIOU\"\n                    new_letter\
    \ = Char(Int(new_letter) + 2)\n                end\n            else\n       \
    \         while new_letter in \"aeiou\"\n                    new_letter = Char(Int(new_letter)\
    \ + 2)\n                end\n            end\n        else\n            new_letter\
    \ = letter\n        end\n        new_message = new_message * new_letter\n    end\n\
    \    \n    return upper(new_message)\nend", "    return encode_helper(message,\
    \ find_vowels(message))\nend", "    char_map = Dict( 'A' => 'C', 'E' => 'G', 'I'\
    \ => 'K', 'O' => 'Q', 'U' => 'Y',\n                        'a' => 'c', 'e' =>\
    \ 'g', 'i' => 'k', 'o' => 'q', 'u' => 'y' )\n    # message = string(message)\n\
    \    # message = string(message)\n    # message = string(message)\n    # message\
    \ = string(message)\n    new_message = \"\"\n    for char in message\n       \
    \ if char_map[char] == 0\n            new_message = new_message * string(char)\n\
    \        else\n            new_message = new_message * char_map[char]\n      \
    \  end\n    end\n    return new_message\nend", "    return sub(\"[aeiouAEIOU]\"\
    , \n        \"a\" => \"c\", \"A\" => \"C\",\n        \"e\" => \"g\", \"E\" =>\
    \ \"G\",\n        \"i\" => \"k\", \"I\" => \"K\",\n        \"o\" => \"q\", \"\
    O\" => \"Q\",\n        \"u\" => \"y\", \"U\" => \"Y\",\n        message\n    )\
    \ |> upcase\nend", "    new = zeros(length(message))\n    for i = 1:length(message)\n\
    \        if message[i] in ['A', 'E', 'I', 'O', 'U']\n            new[i] = char(message[i]\
    \ + 2)\n        else\n            new[i] = char(message[i])\n        end\n   \
    \ end\n    return new\nend", "    # TODO\nend\n\"\"\"\n    Write a function that\
    \ takes a message and encodes it as described above. \n    It then returns a function\
    \ that decodes that message. \n    \n    Examples:\n    >>> decode_me = encode(\"\
    This is a message\")\n    >>> decode_me()\n    \"tHKS KS C MGSSCGG\"\n    >>>\
    \ decode_me()\n    \"This is a message\"\n    >>> decode_me()\n    \"tHKS KS C\
    \ MGSSCGG\"\n    \"\"\"", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \ vowels = \"aeiou\"\n    encoded = \"\"\n    for i in range(1,length(message))\n\
    \        if message[i] in lowercase(alphabet)\n            if message[i] in lowercase(vowels)\n\
    \                encoded = encoded * string(alphabet[(findfirst(lowercase(alphabet),\
    \ message[i])+2) % 26])\n            else\n                encoded = encoded *\
    \ string(lowercase(alphabet)[(findfirst(lowercase(alphabet), message[i])+2) %\
    \ 26])\n            end\n        elseif message[i] in uppercase(alphabet)\n  \
    \          if message[i] in uppercase(vowels)\n                encoded = encoded\
    \ * string(alphabet[(findfirst(uppercase(alphabet), message[i])+2) % 26])\n  \
    \          else\n                encoded = encoded * string(uppercase(alphabet)[(findfirst(uppercase(alphabet),\
    \ message[i])+2) % 26])\n            end\n        else\n            encoded =\
    \ encoded * string(message[i])\n        end\n    end\n    return encoded\nend",
  "    # The alphabet contains 26 letters.\n    const ALPHABET = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    const VOWELS = \"aeiou\"\n    # We don't want to worry about off-by-one\
    \ errors, so we start\n    # the index of the alphabet at -1\n    const ALPHABET_OFFSET\
    \ = -1\n    # The total length of the alphabet + the offset (i.e. 27)\n    const\
    \ ALPHABET_LENGTH = length(ALPHABET)\n    # We'll hold the encoded message in\
    \ this variable.\n    encoded_message = \"\"\n    # We'll iterate over each character\
    \ in the message.\n    for character in message\n        # First, we convert the\
    \ character to lowercase in case it is\n        # uppercase.\n        lowercase_character\
    \ = lowercase(character)\n        # We want to know the index of the character\
    \ in the alphabet.\n        # This is so we can determine whether we should encode\
    \ the\n        # character. We'll assume we're not going to encode it.\n     \
    \   do_encode = false\n        # We'll assume the encoded character is the same\
    \ as the original.\n        encoded_character = character\n        # Now, we need\
    \ to check if the character is a vowel in the\n        # alphabet (i.e. a, e,\
    \ i, o, or u).\n        if occursin(lowercase_character, VOWELS)\n           \
    \ # If it is, we'll encode it.\n            do_encode = true\n        end\n  \
    \      # If we're encoding the character,\n        if do_encode\n            #\
    \ we'll find the index of the lowercase character in the\n            # alphabet\n\
    \            lowercase_character_index = findfirst(ALPHABET, lowercase_character)\n\
    \            # Then, we'll shift the index by two.\n            encoded_character_index\
    \ = (lowercase_character_index + 2) % ALPHABET_LENGTH\n            # Now, we'll\
    \ look up the encoded character\n            encoded_character = ALPHABET[encoded_character_index]\n\
    \            # We'll capitalize the character if the original character was uppercase.\n\
    \            if isupper(character)\n                encoded_character = u", " \
    \   lc = [x for x in \"abcdefghijklmnopqrstuvwxyz\"]\n    uc = [x for x in \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n    swapped = []\n    for i in message\n      \
    \  if i in lc\n            swapped = append!(swapped, uc[indexin(lc, i)])\n  \
    \      elseif i in uc\n            swapped = append!(swapped, lc[indexin(uc, i)])\n\
    \        else\n            swapped = append!(swapped, i)\n        end\n    end\n\
    \    message = string(swapped)\n    replace(message, \"A\", \"C\")\n    replace(message,\
    \ \"E\", \"G\")\n    replace(message, \"I\", \"K\")\n    replace(message, \"O\"\
    , \"Q\")\n    replace(message, \"U\", \"W\")\n    replace(message, \"a\", \"c\"\
    )\n    replace(message, \"e\", \"g\")\n    replace(message, \"i\", \"k\")\n  \
    \  replace(message, \"o\", \"q\")\n    replace(message, \"u\", \"w\")\nend\nencode(\"\
    I want to be like KA-L! SO COOL!\")", "    const alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    encoded = \"\"\n    for x in message\n        if islower(x)\n          \
    \  if x in \"aeiou\"\n                new_x = alpha[alpha.find(x)+2]\n       \
    \     else\n                new_x = uppercase(x)\n            end\n        elseif\
    \ isupper(x)\n            if x in \"AEIOU\"\n                new_x = uppercase(alpha[alpha.find(lowercase(x))+2])\n\
    \            else\n                new_x = lowercase(x)\n            end\n   \
    \     else\n            new_x = x\n        end\n        push!(encoded, new_x)\n\
    \    end\n    return encoded\nend\n        ", "    message = lowercase(message)\n\
    \    output = \"\"\n    c = 'a'\n    while c in message\n        i = search(message,\
    \ c)\n        output *= message[i:i]\n        if c in \"aeiou\"\n            output\
    \ *= \"cgknqsxyzabdfhjmprtvw\"[\"aeiou\".\"cgknqsxyzabdfhjmprtvw\"]\n        end\n\
    \        message = replace(message, c, \"\")\n    end\n    return uppercase(output)\n\
    end", "    # this is essentially a decode\n    return Base.replace(message, Dict('a'=>'c',\
    \ 'A'=>'C', 'e'=>'g', 'E'=>'G', 'i'=>'k', 'I'=>'K', 'o'=>'q', 'O'=>'Q', 'u'=>'w',\
    \ 'U'=>'W'))\nend", "    message_lower = lowercase(message)\n    shifted_lowercase\
    \ = string.(collect(lowercase[3:end]),\"\") * \"^\" * string.(collect(lowercase[1:3]))\n\
    \    encode_dict = Dict(lowercase => shifted_lowercase)\n    return join(get.(encode_dict,\
    \ collect(message_lower), '!'))\nend", "    #### your code goes here ####\n  \
    \  vowels = \"a\" \"e\" \"i\" \"o\" \"u\"\n    newmsg = \"\"\n    for i = 1:length(message)\n\
    \        if message[i] in vowels\n            newmsg *= (vowels[abs(vowels-message[i])+2])\n\
    \        else\n            newmsg *= (to_upper(message[i]))\n        end\n   \
    \ end\n    return newmsg\nend", "    #Your code goes here\nend", "    newMessage\
    \ = \"\"\n    for i = 1:length(message)\n        letter = message[i]\n       \
    \ if letter in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n            newMessage = newMessage\
    \ * next_two_vowels(letter)\n        elseif letter in [\"A\", \"E\", \"I\", \"\
    O\", \"U\"]\n            newMessage = newMessage * next_two_vowels(letter)\n \
    \       else\n            newMessage = newMessage * letter\n        end\n    end\n\
    \    return uppercase(newMessage)\nend", "    result = []\n    for letter in message\n\
    \        if isalpha(letter)\n            if letter in \"aeiouAEIOU\"\n       \
    \         if letter == \"u\"\n                    append!(result, \"a\")\n   \
    \             elseif letter == \"U\"\n                    append!(result, \"A\"\
    )\n                else\n                    append!(result, chr(ord(letter) +\
    \ 2))\n                end\n            else\n                append!(result,\
    \ letter)\n            end\n        else\n            append!(result, letter)\n\
    \        end\n    end\n    return join(map(uppercase, result))\nend", "    to_replace\
    \ = Dict('a'=>'c', 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    to_upper = ('A'=>'a',\
    \ 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g', 'H'=>'h', 'I'=>'i',\
    \ 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n', 'O'=>'o', 'P'=>'p', 'Q'=>'q',\
    \ 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u', 'V'=>'v', 'W'=>'w', 'X'=>'x', 'Y'=>'y',\
    \ 'Z'=>'z')\n    to_lower = ('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z')\n    encoded = \"\"\n    for\
    \ c in message\n        if to_upper[c] in to_replace\n            encoded *= to_replace[to_upper[c]]\n\
    \        elseif to_lower[c] in to_replace\n            encoded *= to_lower[to_replace[to_lower[c]]]\n\
    \        elseif c in to_upper\n            encoded *= to_upper[c]", "    vowels\
    \ = \"aeiou\"\n    output = \"\"\n    for i in 1:length(message)\n        if islower(message[i])\n\
    \            output = push!(output,toupper(message[i]))\n        elseif isupper(message[i])\n\
    \            output = push!(output,tolower(message[i]))\n        elseif message[i]\
    \ in vowels\n            message[i]\n            temp = nextind(vowels, message[i])\n\
    \            temp = nextind(vowels, temp)\n            output = push!(output,\
    \ temp)\n        else\n            output = push!(output, message[i])\n      \
    \  end\n    end\n    return output\nend", "    msg_in_upper = uppercase(message)\n\
    \    upper_map = Dict()\n    for index in 1:26\n        upper_map[string(char(index\
    \ + 64))] = index\n    end\n    #println(upper_map)\n    for c in message\n  \
    \      if c \u2208 upper_map\n            println(c)\n        end\n    end\n \
    \   return \"TGST\"\nend", "    # lowercase alphabets\n    alphabets = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # get vowels\n    vowels = \"aeiou\"\n    # empty string to store encoded\
    \ message\n    coded_msg = \"\"\n    # iterate over each letter in message\n \
    \   for i in message\n        # check if letter is in lowercase alphabets \n \
    \       if i in alphabets\n            # check if it is a vowel\n            if\
    \ i in vowels\n                # find the index of the vowel and shift 2 places\
    \ ahead\n                i = alphabets[findfirst(x->x==i, alphabets) + 2]\n  \
    \          else\n                # change upper to lower and vice versa\n    \
    \            i = uppercase(i) \n            end\n        end\n        # store\
    \ the encoded letter\n        push!(coded_msg, i)\n    end\n    # return encoded\
    \ message\n    return coded_msg\nend", "    out = \"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alpha_array = collect(alphabet)\n    for i in 1:length(message)\n      \
    \  if message[i] in alphabet\n            temp = message[i]\n            out =\
    \ out * temp\n        elseif message[i] in uppercase(alphabet)\n            temp\
    \ = message[i]\n            out = out * temp\n        elseif message[i] in lowercase(alphabet)\n\
    \            temp = message[i]\n            out = out * temp\n        end\n  \
    \  end\n    return out\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    new_message = \"\"\n    for i in message\n        if i in vowels\n    \
    \        new_message *= i\n        elseif i in new_message\n            new_message\
    \ *= i\n        else\n            new_message *= i\n        end\n    end\n   \
    \ return new_message\nend", "    message = replace(lowercase(message), \" \" =>\
    \ \"\")\n    encoded_message = \"\"\n    for letter in message\n        if letter\
    \ in \"aeiou\"\n            if letter == \"u\"\n                encoded_message\
    \ *= \"a\"\n            else\n                encoded_message *= nextnext(letter)\n\
    \            end\n        else\n            encoded_message *= letter\n      \
    \  end\n    end\n    return uppercase(encoded_message)\nend", "    upper_alphabet\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    lower_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    upper_encoding = \"CDEFGHIJKLMNOPQRSTUVWXYZAB\"\n    lower_encoding = \"\
    cdefghijklmnopqrstuvwxyzab\"\n    message_encoded = \"\"\n    for c in message\n\
    \        index = findfirst(c, lower_alphabet)\n        if index != nothing\n \
    \           message_encoded = message_encoded * lower_encoding[index]\n      \
    \  else\n            index = findfirst(c, upper_alphabet)\n            if index\
    \ != nothing\n                message_encoded = message_encoded * upper_encoding[index]\n\
    \            else\n                message_encoded = message_encoded * c\n   \
    \         end\n        end\n    end\n    return message_encoded\nend", "    newmessage\
    \ = []\n    for char in message\n        if !in(lowercase(char), (\"a\",\"e\"\
    ,\"i\",\"o\",\"u\"))\n            if islower(char)\n                push!(newmessage,uppercase(char))\n\
    \            else \n                push!(newmessage,lowercase(char))\n      \
    \      end\n        else \n            if char == \"u\"\n                push!(newmessage,\"\
    a\")\n            elseif char == \"o\"\n                push!(newmessage,\"e\"\
    )\n            elseif char == \"i\"\n                push!(newmessage,\"o\")\n\
    \            elseif char == \"e\"\n                push!(newmessage,\"i\")\n \
    \           elseif char == \"a\"\n                push!(newmessage,\"u\")\n  \
    \          end\n        end\n    end\n    return join(newmessage)\nend", "   \
    \ message = lowercase(message)\n    message = replace(message, \"a\", \"c\")\n\
    \    message = replace(message, \"e\", \"g\")\n    message = replace(message,\
    \ \"i\", \"k\")\n    message = replace(message, \"o\", \"q\")\n    message = replace(message,\
    \ \"u\", \"w\")\n    message = uppercase(message)\n    return message\nend", " \
    \   # vowels that we are going to replace\n    vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    # declare an empty string to add the final string to\n  \
    \  new_message = \"\"\n    # for loop to iterate over each character in message\n\
    \    for i in message\n        # if char is a lower case vowel:\n        if i\
    \ in vowels\n            # add the char (i) to the end of new_message, then reassign\
    \ to new_message\n            new_message = new_message * i\n            # call\
    \ the replace_vowel function and assign the output to new_message\n          \
    \  new_message = replace_vowel(new_message)\n        # else if char is a upper\
    \ case vowel:\n        elseif i in [i.upper() for i in vowels]\n            #\
    \ add the char (i) to the end of new_message, then reassign to new_message\n \
    \           new_message = new_message * i\n            # call the replace_vowel\
    \ function, with the upper case of new_message, and assign the output to new_message\n\
    \            new_message = replace_vowel(new_message)\n        # else if char\
    \ is a lower case letter:\n        elseif i in String(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n            # add the char (i) to the end of new_message, then reassign to\
    \ new_message\n            new_message = new_message * i\n            # call the\
    \ reverse_case function and assign the output to new_message\n            new_message\
    \ = reverse_case(new_message)\n        # else if char is a upper case letter:\n\
    \        elseif i in String(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n            # add\
    \ the char (i) to the end of new_message, then reassign to new_message\n     \
    \       new_message = new_message * i\n            # call the reverse_case function\
    \ and assign the output to new_message\n            new_message = reverse_case(new_message)\n\
    \        # else if char is not a letter\n        else\n            # add the char\
    \ (i) to the end of new_message, then reassign to new_message\n            new_message",
  "    #TODO\nend", "    alpha = [chr(x) for x in range(ord('a'), ord('z')+1)]\n \
    \   vowels = \"aeiou\"\n    index = 0\n    encoded_message = \"\"\n    for character\
    \ in message\n        # check if uppercase\n        if character.islower()\n \
    \           # check if vowel\n            if character in vowels\n           \
    \     # get new index\n                index = alpha.index(character) + 2\n  \
    \              encoded_message *= alpha[index]\n            else\n           \
    \     # just swap case\n                encoded_message *= character.capitalize()\n\
    \        else\n            # check if vowel\n            if character.lower()\
    \ in vowels\n                # get new index\n                index = alpha.index(character.lower())\
    \ + 2\n                encoded_message *= alpha[index].capitalize()\n        \
    \    else\n                # just swap case\n                encoded_message *=\
    \ character.lower()\n    return encoded_message\nend", "    code = []\n    for\
    \ letter in message\n        if letter in \"AEIOUaeiou\"\n            push!(code,char(Int(letter,26)+2))\n\
    \        elseif isupper(letter)\n            push!(code,lowercase(letter))\n \
    \       else\n            push!(code,uppercase(letter))\n        end\n    end\n\
    \    return(join(code))\nend", "    encodetable = Dict(('A','a')=>'C','C'=>'E','E'=>'G','G'=>'I','I'=>'K','K'=>'M','M'=>'O','O'=>'Q','Q'=>'S','S'=>'U','U'=>'W','W'=>'Y','Y'=>'A',\n\
    \    ('B','b')=>'D','D'=>'F','F'=>'H','H'=>'J','J'=>'L','L'=>'N','N'=>'P','P'=>'R','R'=>'T','T'=>'V','V'=>'X','X'=>'Z','Z'=>'B')\n\
    \    # \n    res = message[:]\n    for i in 1:length(message)\n        if message[i]\
    \ in keys(encodetable)\n            res[i] = encodetable[message[i]]\n       \
    \ elseif message[i] in values(encodetable)\n            res[i] = message[i]\n\
    \        else\n            res[i] = uppercase(message[i])\n        end\n    end\n\
    \    return res\nend", "    # This is where you write your code\n    return message\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    encoded_message =\
    \ \"\"\n    for c in message\n        if c in \"a\"::z\"\n            c = uppercase(c)\n\
    \        elseif c in \"A\"::Z\"\n            c = lowercase(c)\n        end\n \
    \       if c in vowels\n            if c == \"u\"\n                c = \"a\"\n\
    \            elseif c == \"U\"\n                c = \"A\"\n            else\n\
    \                c = Int(c[1]) + 2\n                c = Char(c)\n            end\n\
    \        end\n        encoded_message *= c\n    end\n    return encoded_message\n\
    end", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encode = \"cdefghijklmnopqrstuvwxyzab\"\
    \n    encode_msg = \"\"\n    for i in 1:length(message)\n        if message[i]\
    \ == \" \"\n            push!(encode_msg, \" \")\n        else\n            msg_index\
    \ = findfirst(alphabet, lowercase(message[i]))\n            new_letter = encode[msg_index]\n\
    \            if uppercase(message[i]) == message[i]\n                push!(encode_msg,\
    \ uppercase(new_letter))\n            else\n                push!(encode_msg,\
    \ new_letter)\n            end\n        end\n    end\n    return encode_msg\n\
    end", "    # find vowels\n    # replace vowel with the letter 2 places ahead of\
    \ that vowel\n    # convert to upper or lower case\n    # return\nend", "    #Lower\
    \ case message\n    message = lowercase(message)\n    #Vowels\n    vowels = [\"\
    a\",\"e\",\"i\",\"o\",\"u\"]\n    #String array of message\n    messageArray =\
    \ split(message,\"\")\n    #Empty array for encoded message\n    encoded = Array{Any}(undef,length(messageArray))\n\
    \    #Encoding\n    for i in 1:length(messageArray)\n        #Non-vowels\n   \
    \     if !(messageArray[i] in vowels)\n            encoded[i] = uppercase(messageArray[i])\n\
    \        #Vowels\n        else\n            if messageArray[i] == \"u\"\n    \
    \            encoded[i] = \"a\"\n            elseif messageArray[i] == \"a\"\n\
    \                encoded[i] = \"e\"\n            elseif messageArray[i] == \"\
    e\"\n                encoded[i] = \"i\"\n            elseif messageArray[i] ==\
    \ \"i\"\n                encoded[i] = \"o\"\n            elseif messageArray[i]\
    \ == \"o\"\n                encoded[i] = \"u\"\n            end\n        end\n\
    \    end\n    #Return encoded message\n    return join(encoded)\nend", "    swap_case\
    \ = Dict('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ \n    'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', \n    'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z', \n    'A'=>'a', 'B'=>'b',\
    \ 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g', 'H'=>'h', 'I'=>'i', 'J'=>'j',\
    \ \n    'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n', 'O'=>'o', 'P'=>'p', 'Q'=>'q',\
    \ 'R'=>'r', 'S'=>'s', 'T'=>'t', \n    'U'=>'u', 'V'=>'v', 'W'=>'w', 'X'=>'x',\
    \ 'Y'=>'y', 'Z'=>'z')\n    \n    encode_vowels = Dict('a'=>'c', 'b'=>'d', 'c'=>'e',\
    \ 'd'=>'f', 'e'=>'g', 'f'=>'h', 'g'=>'i', \n    'h'=>'j', 'i'=>'k', 'j'=>'l',\
    \ 'k'=>'m', 'l'=>'n', 'm'=>'o', 'n'=>'p', 'o'=>'q', 'p'=>'", "    newMsg = String[]\n\
    \    for (i, letter) in enumerate(message)\n        if letter in [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n            letter  = letters[letters .== letter][1]\n\
    \        end\n        newMsg[i] = letter\n    end\n    return join(newMsg)\nend",
  '    pass ', "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    letters = String[]\n\
    \    encoded_letters = String[]\n    for letter in message\n        if isletter(letter)\n\
    \            push!(letters, letter)\n        end\n    end\n    for letter in letters\n\
    \        if letter == letter\n            letter = upper(letter)\n        end\n\
    \        letter_index = findall(alphabet, letter)\n        if letter_index > 23\n\
    \            letter_index = letter_index - 24\n        end\n        letter_index\
    \ += 2\n        encoded_letter = alphabet[letter_index]\n        push!(encoded_letters,\
    \ encoded_letter)\n    end\n    encoded_message = join(encoded_letters)\n    return\
    \ encoded_message\nend", "    #function that takes a string and returns a string\
    \ \n    encode(\"test\")\n    \"TGST\"\n    encode(\"This is a message\")\n  \
    \  \"tHKS KS C MGSSCGG\"\nend", "    # make an array of characters to hold the\
    \ encoded message\n    encoded = Char[] \n    # the location of the character\
    \ in the alphabet\n    loc = 0\n    # the character that replaces the vowel\n\
    \    replace = ' '\n    for c in message\n        # initialize the location and\
    \ replace for every character\n        loc = 0\n        replace = ' '\n      \
    \  if c in (\"A\", \"a\")\n            loc = 1\n        elseif c in (\"B\", \"\
    b\")\n            loc = 2\n        elseif c in (\"C\", \"c\")\n            loc\
    \ = 3\n        elseif c in (\"D\", \"d\")\n            loc = 4\n        elseif\
    \ c in (\"E\", \"e\")\n            loc = 5\n        elseif c in (\"F\", \"f\"\
    )\n            loc = 6\n        elseif c in (\"G\", \"g\")\n            loc =\
    \ 7\n        elseif c in (\"H\", \"h\")\n            loc = 8\n        elseif c\
    \ in (\"I\", \"i\")\n            loc = 9\n        elseif c in (\"J\", \"j\")\n\
    \            loc = 10\n        elseif c in (\"K\", \"k\")\n            loc = 11\n\
    \        elseif c in (\"L\", \"l\")\n            loc = 12\n        elseif c in\
    \ (\"M\", \"m\")\n            loc = 13\n        elseif c in (\"N\", \"n\")\n \
    \           loc = 14\n        elseif c in (\"O\", \"o\")\n            loc = 15\n\
    \        elseif c in (\"P\", \"p\")\n            loc = 16\n        elseif c in\
    \ (\"Q\", \"q\")\n            loc = 17\n        elseif c in (\"R\", \"r\")\n \
    \           loc = 18\n        elseif c in (\"S\", \"s\")\n            loc = 19\n\
    \        elseif c in (\"T\", \"t\")\n            loc = 20\n        elseif c in\
    \ (\"U\", \"u\")\n            loc = 21\n        elseif c in (\"V\", \"v\")\n \
    \           loc = 22\n        elseif c in (\"W\", \"w\")\n            loc = 23\n\
    \        elseif c in (\"X\", \"x\")\n            loc = 24\n        elseif c in\
    \ (\"Y\", \"y\")\n            loc = 25\n        elseif c in (\"Z\",", "  alphabet\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n  vowels = \"AEIOUaeiou\"\
    \n  a = []\n  for c in message\n    if c in vowels\n      ind = findfirst(vowels,\
    \ c)\n      append!(a, alphabet[ind+2])\n    else\n      append!(a, toupper(c))\n\
    \    end\n  end\n  return join(a)\nend", "    letters=[\"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\"\
    \ \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"]\n    new_letters=[\"\
    a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"\
    n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"]\n\
    \    new_letters[3]=\"c\"\n    new_letters[4]=\"d\"\n    new_letters[5]=\"e\"\n\
    \    new_letters[6]=\"f\"\n    new_letters[7]=\"g\"\n    new_letters[8]=\"h\"\n\
    \    new_letters[9]=\"i\"\n    new_letters[10]=\"j\"\n    new_letters[11]=\"k\"\
    \n    new_letters[12]=\"l\"\n    new_letters[13]=\"m\"\n    new_letters[14]=\"\
    n\"\n    new_letters[15]=\"o\"\n    new_letters[16]=\"p\"\n    new_letters[17]=\"\
    q\"\n    new_letters[18]=\"r\"\n    new_letters[19]=\"s\"\n    new_letters[20]=\"\
    t\"\n    new_letters[21]=\"u\"\n    new_letters[22]=\"v\"\n    new_letters[23]=\"\
    w\"\n    new_letters[24]=\"x\"\n    new_letters[25]=\"y\"\n    new_letters[26]=\"\
    z\"\n    new_letters[1]=\"b\"\n    encoded_message=\"\"\n    for i in 1:length(message)\n\
    \        if message[i]==\"A\"\n            encoded_message=encoded_message*\"\
    a\"\n        elseif message[i]==\"B\"\n            encoded_message=encoded_message*\"\
    b\"\n        else", "    encoded = []\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    vowels = \"aeiou\"\n    n = alphabet[end]\n    #lowercase\n    for i in\
    \ message\n        if i in vowels\n            push!(encoded, alphabet[(findfirst(alphabet,\
    \ i) + 2) % 25])\n        elseif i in alphabet\n            push!(encoded, n[(findfirst(n,\
    \ i) + 2) % 25])\n        else\n            push!(encoded, i)\n        end\n \
    \   end\n    return join(encoded)\nend\nprintln(encode(\"This is a message\"))\n\
    println(encode(\"test\"))", "    \"code here\"\nend", "    codes = Int[]\n   \
    \ encoded = String[]\n    for i in 1:length(message)\n        if islower(message[i])\n\
    \            push!(codes, (Int(message[i]) - 97 + 2) % 26 + 97)\n        elseif\
    \ isupper(message[i])\n            push!(codes, (Int(message[i]) - 65 + 2) % 26\
    \ + 65)\n        else\n            push!(codes, Int(message[i]))\n        end\n\
    \    end\n    for i in 1:length(codes)\n        push!(encoded, Char(codes[i]))\n\
    \    end\n    return join(encoded)\nend", "    message_length=length(message)\n\
    \    message_array=Array{Char}(message_length)\n    empty_array=Array{Char}(message_length)\n\
    \    for i=1:message_length\n        message_array[i]=message[i]\n    end\n  \
    \  for i=1:message_length\n        if message_array[i] in uppercase(alphabet)\n\
    \            empty_array[i]=lowercase(message_array[i])\n        elseif message_array[i]\
    \ in lowercase(alphabet)\n            empty_array[i]=uppercase(message_array[i])\n\
    \        else \n            empty_array[i]=message_array[i]\n        end\n   \
    \ end\n    for i=1:message_length\n        if empty_array[i] in vowels\n     \
    \       if empty_array[i]==\"a\"\n                empty_array[i]=\"c\"\n     \
    \       elseif empty_array[i]==\"e\"\n                empty_array[i]=\"g\"\n \
    \           elseif empty_array[i]==\"i\"\n                empty_array[i]=\"k\"\
    \n            elseif empty_array[i]==\"o\"\n                empty_array[i]=\"\
    q\"\n            elseif empty_array[i]==\"u\"\n                empty_array[i]=\"\
    y\"\n            elseif empty_array[i]==\"A\"\n                empty_array[i]=\"\
    C\"\n            elseif empty_array[i]==\"E\"\n                empty_array[i]=\"\
    G\"\n            elseif empty_array[i]==\"I\"\n                empty_array[i]=\"\
    K\"\n            elseif empty_array[i]==\"O\"\n                empty_array[i]=\"\
    Q\"\n            elseif empty_array[i]==\"U\"\n                empty_array[i]=\"\
    Y\"\n            end\n        end\n    end\n    print(empty_array)\n    return\
    \ empty_array\nend", "    message = map(uppercase, message)\n    vowels = [\"\
    A\", \"E\", \"I\", \"O\", \"U\"]\n    for i in 1:length(message)\n        if in(message[i],\
    \ vowels)\n            idx = findall(vowels .== message[i])[1]\n            message[i]\
    \ = \"AEIOU\"[idx]\n        end\n    end\n    map(lowercase, message)\nend", " \
    \   vowels = ['a','e','i','o','u']\n    str = \"\"\n    for i = 1:length(message)\n\
    \        if message[i] in vowels\n            str = str * (findnext(vowels, message[i])\
    \ + 2)\n        elseif isupper(message[i])\n            str = str * lowercase(message[i])\n\
    \        else\n            str = str * uppercase(message[i])\n        end\n  \
    \  end\n    return str\nend", "    message = string(message)\n    message = lowercase(message)\n\
    \    message = replace(message, ' ' => \"\")\n    message = replace(message, \"\
    a\" => \"c\")\n    message = replace(message, \"e\" => \"g\")\n    message = replace(message,\
    \ \"i\" => \"k\")\n    message = replace(message, \"o\" => \"q\")\n    message\
    \ = replace(message, \"u\" => \"w\")\n    message = replace(message, \"y\" =>\
    \ \"a\")\n    return uppercase(message)\nend", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    encoded_message = \"\"\n    for c in message\n        index = findfirst(alphabet,\
    \ lowercase(c))\n        if index > 0\n            if c == uppercase(c)\n    \
    \            encoded_message *= uppercase(alphabet[index+2])\n            else\n\
    \                encoded_message *= alphabet[index+2]\n            end\n     \
    \   else\n            encoded_message *= c\n        end\n    end\n    return encoded_message\n\
    end", "    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = letters[1:6]\n\
    \    message = lowercase(message)\n    ency = \"\"\n    for char in message\n\
    \        if char in vowels\n            idx = findfirst(vowels, char)\n      \
    \      ency *= vowels[idx+2]\n        else\n            idx = findfirst(letters,\
    \ char)\n            ency *= letters[idx+2]\n        end\n    end\n    return\
    \ uppercase(ency)\nend", "    new_message = \"\"\n    for l in message\n     \
    \   if l in \"aeiou\"\n            new_message *= (nextnext(l) |> upper)\n   \
    \     elseif l in \"AEIOU\"\n            new_message *= (nextnext(l) |> lower)\n\
    \        elseif l in \"bcdfghjklmnpqrstvwxyz\"\n            new_message *= (l\
    \ |> upper)\n        elseif l in \"BCDFGHJKLMNPQRSTVWXYZ\"\n            new_message\
    \ *= (l |> lower)\n        else\n            new_message *= l\n        end\n \
    \   end\n    return new_message\nend", "    encoded = copy(message)\n    for i\
    \ in eachindex(encoded)\n        c = encoded[i]\n        if islower(c)\n     \
    \       encoded[i] = uppercase(c)\n        else\n            encoded[i] = lowercase(c)\n\
    \        end\n        if c in \"aeiou\"\n            encoded[i] = getNextChar(c,\
    \ 2)\n        end\n    end\n    return encoded\nend", "    (newmessage,index,i)\
    \ = (\"\",0,0)\n    while i <= length(message)\n        index = lowercase(message[i])\n\
    \        if index == 'a'\n            newmessage = newmessage * 'c'\n        elseif\
    \ index == 'e'\n            newmessage = newmessage * 'g'\n        elseif index\
    \ == 'i'\n            newmessage = newmessage * 'k'\n        elseif index == 'o'\n\
    \            newmessage = newmessage * 'q'\n        elseif index == 'u'\n    \
    \        newmessage = newmessage * 's'\n        elseif index == 'y'\n        \
    \    newmessage = newmessage * 'a'\n        else\n            newmessage = newmessage\
    \ * index\n        end\n        i += 1\n    end\n    return newmessage\nend",
  "    # create a dictionary for the vowels\n    vowels = Dict(\"a\"=>\"c\", \"e\"\
    =>\"g\", \"i\"=>\"k\", \"o\"=>\"q\", \"u\"=>\"s\")\n    # make all the message\
    \ letters lowercase\n    message = lowercase(message)\n    # create an empty string\
    \ to hold the encoded string\n    encoded_message = \"\"\n    # iterate through\
    \ each character in the message\n    for character in message\n        # if the\
    \ character is a vowel\n        if character in keys(vowels)\n            # append\
    \ the encoded character to the encoded message\n            append!(encoded_message,vowels[character])\n\
    \        # if the character is a uppercase letter\n        elseif 'A'<=character<='Z'\n\
    \            # append the lowercase of the letter to the encoded message\n   \
    \         append!(encoded_message,lowercase(character))\n        # else if the\
    \ character is a lowercase letter\n        elseif 'a'<=character<='z'\n      \
    \      # append the uppercase of the letter to the encoded message\n         \
    \   append!(encoded_message,uppercase(character))\n        # if the character\
    \ is something else\n        else\n            # append the character to the encoded\
    \ message\n            append!(encoded_message,character)\n        end\n    end\n\
    \    # return the encoded message\n    return encoded_message\nend", "    vowels\
    \ = \"aeiou\"\n    array = split(message)\n    for (i,w) in enumerate(array)\n\
    \        for (j,l) in enumerate(w)\n            if lowercase(l) in vowels\n  \
    \              if lowercase(l) == \"u\"\n                    l = \"a\"\n     \
    \           else\n                    l = lowercase(array[i][j]) + 2\n       \
    \         end\n            end\n            array[i][j] = l\n        end\n   \
    \ end\n    return join(array)\nend", "    lowercase = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    vowels = \"aeiou\"\n   \
    \ vowels_encoded = [lowercase[(index(lowercase, s) + 2) % 26 + 1] for s in vowels]\n\
    \    message_encoded = String[]\n    for s in message\n        lower = in(s, lowercase)\n\
    \        if lower\n            append!(message_encoded, uppercase[findall(lowercase,\
    \ s)[1]])\n        else\n            if in(s, vowels)\n                for (i,v)\
    \ in enumerate(vowels)\n                    if s == v\n                      \
    \  append!(message_encoded, vowels_encoded[i])\n                    end\n    \
    \            end\n            else\n                append!(message_encoded, s)\n\
    \            end\n        end\n    end\n    return join(message_encoded)\nend\n\
    \ ", "    return\nend", "    \"\"\"\n    Write a function that takes a message,\
    \ and encodes in such a \n    way that it swaps case of all letters, replaces\
    \ all vowels in \n    the message with the letter that appears 2 places ahead\
    \ of that \n    vowel in the english alphabet. \n    Assume only letters. \n \
    \   \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"\
    This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \"\"\"\n    s = \"\"\n  \
    \  for c in message\n        println(c)\n        if c == \"a\"\n            s\
    \ *= \"c\"\n        elseif c == \"e\"\n            s *= \"g\"\n        elseif\
    \ c == \"i\"\n            s *= \"k\"\n        elseif c == \"o\"\n            s\
    \ *= \"q\"\n        elseif c == \"u\"\n            s *= \"y\"\n        elseif\
    \ c == \"A\"\n            s *= \"C\"\n        elseif c == \"E\"\n            s\
    \ *= \"G\"\n        elseif c == \"I\"\n            s *= \"K\"\n        elseif\
    \ c == \"O\"\n            s *= \"Q\"\n        elseif c == \"U\"\n            s\
    \ *= \"Y\"\n        else\n            s *= c\n        end\n    end\n    return\
    \ s\nend", "    \"Write me!\"\nend", "    for i in message \n        if Char(i)\
    \ in ['a','e','i','o','u']\n            i = Char(i) + 2\n        elseif Char(i)\
    \ in ['b','f','j','n','r','v','z']\n            i = Char(i) - 2\n        elseif\
    \ Char(i) in ['c','g','k','p','s','w']\n            i = Char(i) - 3\n        elseif\
    \ Char(i) in ['d','h','l','q','t','x']\n            i = Char(i) - 4\n        elseif\
    \ Char(i) in ['m','y']\n            i = Char(i) - 5\n        end\n    end\n  \
    \  return message\nend\n    \nencode(\"test\")\nencode(\"This is a message\")",
  "    # dictionary for swapping upper and lower case for each char \n    swap_case\
    \ = Dict('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z', 'A'=>'a', 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e',\
    \ 'F'=>'f', 'G'=>'g', 'H'=>'h', 'I'=>'i', 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m',\
    \ 'N'=>'n', 'O'=>'o', 'P'=>'p', 'Q'=>'q', 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u',\
    \ 'V'=>'v', 'W'=>'w', 'X'=>'x', 'Y'=>'y', 'Z'=>'z')\n    # dictionary for swapping\
    \ vowels for each char \n    swap_vowel = Dict('a'=>'c', 'b'=>'b', 'c'=>'e', 'd'=>'d',\
    \ 'e'=>'g', 'f'=>'f', 'g'=>'i', 'h'=>'h', 'i'=>'k', 'j'=>'j', 'k'=>'m', 'l'=>'l',\
    \ 'm'=>'o', 'n'=>'n', 'o'=>'q", "    \"\"\"\n    Solution using for loops.\n \
    \   \"\"\"\n    vowels = \"aeiou\"\n    encoded_message = \"\"\n    for letter\
    \ in message\n        if letter in vowels\n            index = vowels.find(letter)\
    \ + 2\n            encoded_message = encoded_message * vowels[index]\n       \
    \ else\n            encoded_message = encoded_message * letter\n    return encoded_message\n\
    end\nencode(\"test\")", "    # YOUR CODE HERE\n    return \nend", "    str = \"\
    \"\n    for i in 1:length(message)\n        c = message[i]\n        c > 96 ? c\
    \ -= 32 : c += 32\n        n = ord(c)\n        if(n == 67 || n == 69 || n == 73\
    \ || n == 79 || n == 85)\n            n += 2\n        elseif(n == 68 || n == 70\
    \ || n == 74 || n == 80 || n == 86)\n            n += 1\n        end\n       \
    \ push!(str, Char(n))\n    end\n    return str\nend", "  \n    vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    \n    encode!(message) = begin\n        for\
    \ i = 1:length(message)\n            if (message[i] in vowels)\n             \
    \   message[i] = prev2(message[i])\n            else\n                message[i]\
    \ = next2(message[i])\n            end\n        end\n    end\n    \n    return\
    \ message\nend", "    vowels = \"aeiou\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    encoded_message = \"\"\n    for letter in message\n        if letter in\
    \ letters\n            if letter in vowels\n                encoded_message =\
    \ encoded_message * letters[letters[letter] + 2]\n            else\n         \
    \       encoded_message = encoded_message * letter\n        else\n           \
    \ encoded_message = encoded_message * letter\n        end\n    end\n    return\
    \ encoded_message\nend", "    encoding = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    new_message = String[]\n    # write a loop to go through the message, testing\
    \ if each letter is upper or lower case, \n    # and replacing with the letter\
    \ that appears 2 places ahead of that vowel in the english alphabet.\n    for\
    \ i = 1:length(message)\n        if message[i] == ' '\n            push!(new_message,\
    \ ' ')\n        elseif message[i] == 'a'\n            push!(new_message, 'c')\n\
    \        elseif message[i] == 'e'\n            push!(new_message, 'g')\n     \
    \   elseif message[i] == 'i'\n            push!(new_message, 'k')\n        elseif\
    \ message[i] == 'o'\n            push!(new_message, 'q')\n        elseif message[i]\
    \ == 'u'\n            push!(new_message, 'y')\n        elseif message[i] == 'A'\n\
    \            push!(new_message, 'C')\n        elseif message[i] == 'E'\n     \
    \       push!(new_message, 'G')\n        elseif message[i] == 'I'\n          \
    \  push!(new_message, 'K')\n        elseif message[i] == 'O'\n            push!(new_message,\
    \ 'Q')\n        elseif message[i] == 'U'\n            push!(new_message, 'Y')\n\
    \        elseif islower(message[i])\n            push!(new_message, uppercase(message[i]))\n\
    \        else\n            push!(new_message, lowercase(message[i]))\n       \
    \ end\n    end\n    join(new_message)\nend", "    # TODO: Implement encode\n \
    \   return \"tHKS KS C MGSSCGG\"\nend", "    letters = [\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"]\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    result = \"\"\n  \
    \  for letter in message\n        if letter in letters\n            if letter\
    \ in vowels\n                i = findfirst(vowels, letter)\n                result\
    \ = result * letters[(i+2)%5]\n            else\n                result = result\
    \ * letter\n            end\n        else\n            result = result * letter\n\
    \        end\n    end\n    return uppercase(result)\nend", "    alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n    encoded_msg = \"\"\n\
    \    for c in message\n        if c in vowels\n            encoded_msg *= alphabet[alphabet.find(c)\
    \ + 2]\n        elseif c in alphabet\n            if islower(c)\n            \
    \    encoded_msg *= uppercase(c)\n            else\n                encoded_msg\
    \ *= lowercase(c)\n            end\n        else\n            encoded_msg *= c\n\
    \        end\n    end\n    return encoded_msg\nend", "    letters = String[]\n\
    \    for letter in message\n        if islower(letter)\n            append!(letters,\
    \ uppercase(letter))\n        elseif isupper(letter)\n            append!(letters,\
    \ lowercase(letter))\n        else\n            append!(letters, letter)\n   \
    \     end\n    end\n    return join(letters)\nend", "    message = lowercase(message)\
    \ #convert to lowercase\n    message = replace(message, \"a\" => \"c\") #replace\
    \ a with c\n    message = replace(message, \"e\" => \"g\") #replace e with g\n\
    \    message = replace(message, \"i\" => \"k\") #replace i with k\n    message\
    \ = replace(message, \"o\" => \"q\") #replace o with q\n    message = replace(message,\
    \ \"u\" => \"w\") #replace u with w\n    message = uppercase(message) #convert\
    \ back to uppercase\n    return message\nend", "    \n    lower_case_vowels =\
    \ \"aeiou\"\n    upper_case_vowels = \"AEIOU\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    upper_letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \n    encoded_msg =\
    \ \"\"\n    \n    for letter in message\n        if letter in lower_case_vowels\n\
    \            index = find(lower_case_vowels, letter)\n            encoded_msg\
    \ = encoded_msg * upper_letters[index + 2]\n        elseif letter in upper_case_vowels\n\
    \            index = find(upper_case_vowels, letter)\n            encoded_msg\
    \ = encoded_msg * lower_case_vowels[index + 2]\n        elseif letter in letters\n\
    \            index = find(letters, letter)\n            encoded_msg = encoded_msg\
    \ * upper_letters[index]\n        else\n            encoded_msg = encoded_msg\
    \ * letter\n        end\n    end\n    \n    return encoded_msg\nend", "    \"\"\
    \"\n    Write a function that takes a message, and encodes in such a \n    way\
    \ that it swaps case of all letters, replaces all vowels in \n    the message\
    \ with the letter that appears 2 places ahead of that \n    vowel in the english\
    \ alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"\
    test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C\
    \ MGSSCGG\"\n    \"\"\"\n    vowels = \"AEIOUaeiou\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n    new_message = \"\"\n    for char in message\n        if char in vowels\n\
    \            index = vowels.find(char)\n            index += 2\n            if\
    \ index > 10\n                index -= 10\n            end\n            new_message\
    \ *= vowels[index]\n        elseif char in consonants\n            index = consonants.find(char)\n\
    \            index += 1\n            if index > 52\n                index -= 52\n\
    \            end\n            new_message *= consonants[index]\n        else\n\
    \            new_message *= char\n        end\n    end\n    return new_message\n\
    end", "    m = lowercase(message)\n    vowels = [ 'a', 'e', 'i', 'o', 'u' ]\n\
    \    m = map(t -> ifelse(t in vowels, nextnext(t), t), m)\n    m = map(next(t),\
    \ m)\n    upper(m)\nend", "    message = upcase(message)\n    for i = 1:length(message)\n\
    \        if message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U' || message[i] == 'A'\n            if message[i] == 'U'\n            \
    \    message[i] = 'A'\n            elseif message[i] == 'Z'\n                message[i]\
    \ = 'B'\n            else\n                message[i] = Char(Int(message[i]) +\
    \ 2)\n            end\n        end\n    end\n    #Return the message after iterating\
    \ through the for loop\n    return message\nend\nencode(\"This is a message\")",
  "    print(message)\nend", "    # write your code here.\nend\n\"\"\";\ntest_markdown(md);",
  "    #do something\nend", "    \n    message_array = collect(message)\n    alphabet\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    vowel_dict = Dict(\"a\" => \"c\", \"e\"\
    \ => \"g\", \"i\" => \"k\", \"o\" => \"q\", \"u\" => \"y\")\n    \n    for i in\
    \ 1:length(message_array)\n        if message_array[i] in [\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n            message_array[i] = upper(message_array[i])\n        elseif\
    \ message_array[i] in [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"\
    , \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n            message_array[i]\
    \ = lower(message_array[i])\n        end\n        \n        if message_array[i]\
    \ in keys(vowel_dict)\n            message_array[i] = vowel_dict[message_array[i]]\n\
    \        end\n    end\n    \n    return join(message_array)\nend", "    alphabet\
    \ = get_alphabet()\n    #create the alphabets\n    #create a dict for encoding\n\
    \    encoding = Dict()\n    for i = 1:length(alphabet)\n        if i + 2 <= length(alphabet)\n\
    \            encoding[alphabet[i]] = alphabet[i+2]\n        else\n           \
    \ encoding[alphabet[i]] = alphabet[i+2-length(alphabet)]\n        end\n    end\n\
    \    encoding[\"A\"] = \"C\"\n    encoding[\"B\"] = \"D\"\n    #create a dict\
    \ for decoding\n    decoding = Dict()\n    for (key, value) in encoding\n    \
    \    decoding[value] = key\n    end\n    decoding[\"C\"] = \"A\"\n    decoding[\"\
    D\"] = \"B\"\n    #create another dict for upcasing\n    upcase = Dict()\n   \
    \ for i = 1:length(alphabet)\n        upcase[alphabet[i]] = alphabet[i]*2\n  \
    \  end\n    upcase[\"A\"] = \"AA\"\n    upcase[\"B\"] = \"BB\"\n    downcase =\
    \ Dict()\n    for (key, value) in upcase\n        downcase[value] = key\n    end\n\
    \    downcase[\"AA\"] = \"A\"\n    downcase[\"BB\"] = \"B\"\n    #create a dict\
    \ for downcasing\n    #encode the message\n    encoded = \"\"\n    for c in message\n\
    \        if c in encoding\n            encoded *= encoding[c]\n        elseif\
    \ c in upcase\n            encoded *= upcase[c]\n        elseif c in downcase\n\
    \            encoded *= downcase[c]\n        else\n            encoded *= c\n\
    \        end\n    end\n    return encoded\nend", "    out = \"\"\n    for i in\
    \ 1:length(message)\n        if islower(message[i])\n            out = out * uppercase(message[i])\n\
    \        elseif isupper(message[i])\n            out = out * lowercase(message[i])\n\
    \        else\n            out = out * message[i]\n        end\n    end\n    return\
    \ out\nend", "    data = Base.to_upper(message)\n    for i = 1:length(data)\n\
    \        if data[i] == 'A'\n            data[i] = 'C'\n        elseif data[i]\
    \ == 'E'\n            data[i] = 'G'\n        elseif data[i] == 'I'\n         \
    \   data[i] = 'K'\n        elseif data[i] == 'O'\n            data[i] = 'Q'\n\
    \        elseif data[i] == 'U'\n            data[i] = 'S'\n        elseif data[i]\
    \ in Base.to_lower('BCDFGHJKLMNPQRSTVWXYZ')\n            data[i] = Base.to_lower(data[i])\n\
    \        end\n    end\n    return data\nend", "    \n    encoded_message = \"\"\
    \n    for i in 1:length(message)\n        if message[i] in \"aeiou\" \n      \
    \      encoded_message *= message[i+2]\n        elseif message[i] in \"AEIOU\"\
    \n            encoded_message *= message[i+2]\n        elseif islower(message[i])\n\
    \            encoded_message *= uppercase(message[i])\n        else\n        \
    \    encoded_message *= lowercase(message[i])\n        end\n    end\n    return\
    \ encoded_message\nend", "    result = \"\"\n    for c in message\n        if\
    \ isalpha(c) #only looks at letters\n            if islower(c)\n             \
    \   if c == 'w'\n                    result *= \"a\"\n                elseif c\
    \ == 'x'\n                    result *= \"b\"\n                elseif c == 'y'\n\
    \                    result *= \"c\"\n                elseif c == 'z'\n      \
    \              result *= \"d\"\n                else\n                    result\
    \ *= Char(Int(c) + 2)\n                end\n            else\n               \
    \ if c == 'W'\n                    result *= \"A\"\n                elseif c ==\
    \ 'X'\n                    result *= \"B\"\n                elseif c == 'Y'\n\
    \                    result *= \"C\"\n                elseif c == 'Z'\n      \
    \              result *= \"D\"\n                else\n                    result\
    \ *= Char(Int(c) + 2)\n                end\n            end\n        else\n  \
    \          result *= c\n        end\n    end\n    return result\nend", "    str\
    \ = String(message)\n    new_str = \"\"\n    arr = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    for i in 1:length(str)\n        if (str[i] \u2208 arr)\n       \
    \     if (str[i] == \"u\")\n                new_str = new_str * \"a\"\n      \
    \      else\n                new_str = new_str * arr[arr .== str[i]][1]\n    \
    \        end\n        elseif islower(str[i])\n            new_str = new_str *\
    \ upper(str[i])\n        elseif isupper(str[i])\n            new_str = new_str\
    \ * lower(str[i])\n        else\n            new_str = new_str * str[i]\n    \
    \    end\n    end\n    return new_str\nend", "    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    enc = \"\"\n    for m in message\n        if m in alphabet\n           \
    \ m = m == upper(m) ? lower(m) : upper(m)\n            if m in \"aeiou\"\n   \
    \             m = alphabet[findfirst(m, alphabet)+2]\n            end\n      \
    \  end\n        enc *= m\n    end\n    return enc\nend", "    map_uppercase =\
    \ Dict(string.uppercase[i] => string.uppercase[(i+2)%26] for i in range(26))\n\
    \    map_lowercase = Dict(string.lowercase[i] => string.lowercase[(i+2)%26] for\
    \ i in range(26))\n    dict = merge(map_uppercase, map_lowercase)\n    return\
    \ map(x -> get(dict, x, x), message)\nend", "    new_message = String[]\n    for\
    \ character in message\n        character = uppercase(character) ? character :\
    \ lowercase(character) ? character : character \n    end\n    for character in\
    \ message\n        if character \u2208 [\"a\", \"A\"]\n            push!(new_message,\
    \ \"C\")\n        elseif character \u2208 [\"e\", \"E\"]\n            push!(new_message,\
    \ \"G\")\n        elseif character \u2208 [\"i\", \"I\"]\n            push!(new_message,\
    \ \"K\")\n        elseif character \u2208 [\"o\", \"O\"]\n            push!(new_message,\
    \ \"M\")\n        elseif character \u2208 [\"u\", \"U\"]\n            push!(new_message,\
    \ \"Q\")\n        else\n            push!(new_message, character)\n        end\n\
    \    end\n    return join(new_message)\nend", "    #lower case letter to num\n\
    \    #check if vowel\n    #if it is, add 2 to the num\n    #if it is not, add\
    \ 0 to the num\n    #convert num to upper/lower case letter\n    #join letters\n\
    \    #return\n    loweralph = \"abcdefghijklmnopqrstuvwxyz\"\n    upperalph =\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    lower = Dict{Char,Int}()\n    upper = Dict{Char,Int}()\n\
    \    for i in 1:26\n        lower[loweralph[i]] = i\n        upper[upperalph[i]]\
    \ = i\n    end\n    vowels = \"aeiou\"\n    num = [lower[message[i]] for i in\
    \ 1:length(message)]\n    for i in 1:length(num)\n        if num[i] in vowels\n\
    \            num[i] += 2\n        else \n            num[i] += 0\n        end\n\
    \    end\n    numbers = [if num[i] > 26\n                num[i] -= 26\n      \
    \      else\n                num[i]\n            end for i in 1:length(num)]\n\
    \    letters = [if num[i] < 26\n                upperalph[num[i]]\n          \
    \  else\n                loweralph[num[i]]\n            end for i in 1:length(num)]\n\
    \    new = join(letters)\n    return new\nend", "    #### YOUR CODE HERE ####\n\
    \    return message\nend", "    newmessage = lowercase(message)\n    for i = 1:length(newmessage)\n\
    \        if 'a' <= newmessage[i] <= 'z'\n            newmessage[i] = encode_char(newmessage[i])\n\
    \        end\n    end\n    return newmessage\nend", "    \n    vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    upvowels = [\"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    encode_message = String[]\n    \n    for i in 1:length(message)\n  \
    \      if message[i] in vowels\n            next_vowel = (findall(vowels, message[i])[1]\
    \ + 2) % 5\n            encode_message = [encode_message; vowels[next_vowel]]\n\
    \        elseif message[i] in upvowels\n            next_vowel = (findall(upvowels,\
    \ message[i])[1] + 2) % 5\n            encode_message = [encode_message; upvowels[next_vowel]]\n\
    \        else\n            encode_message = [encode_message; message[i]]\n   \
    \     end\n    end\n    \n    return join(encode_message)\nend", "    upcase_message\
    \ = uppercase(message)\n    lowercase_message = lowercase(message)\n    encoded_msg\
    \ = \"\"\n    for i in 1:length(message)\n        if is_vowel(message[i])\n  \
    \          if is_vowel(upcase_message[i])\n                if message[i] == \"\
    u\"\n                    encoded_msg = encoded_msg * \"a\"\n                else\n\
    \                    encoded_msg = encoded_msg * uppercase(get_next_vowel(message[i]))\n\
    \                end\n            elseif is_vowel(lowercase_message[i])\n    \
    \            if message[i] == \"u\"\n                    encoded_msg = encoded_msg\
    \ * \"a\"\n                else\n                    encoded_msg = encoded_msg\
    \ * lowercase(get_next_vowel(message[i]))\n                end\n            end\n\
    \        else\n            encoded_msg = encoded_msg * message[i]\n        end\n\
    \    end\n    return encoded_msg\nend\n    \n    \n    \n    \n    ", "    message\
    \ = uppercase(message)\n    vowels = \"AEIOU\"\n    newMessage = \"\"\n    for\
    \ letter in message\n        if letter in vowels\n            index = findfirst(vowels,\
    \ letter)\n            newLetter = vowels[index + 2]\n            newMessage =\
    \ newMessage * newLetter\n        else\n            newMessage = newMessage *\
    \ letter\n        end\n    end\n    return lowercase(newMessage)\nend", "    message\
    \ = lowercase(message) #Convert all letters to lowercase\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    \ #Create alphabet string\n    vowels = \"aeiou\" #Create vowel string\n    output\
    \ = \"\" #Initialize output string\n    #Iterate through all characters in message\n\
    \    for i in 1:length(message)\n        if isalpha(message[i]) #If the character\
    \ is a letter\n            if islower(message[i]) #If the character is lowercase\n\
    \                if in(message[i],vowels) #If the character is a vowel\n     \
    \               position = findfirst(message[i],alpha) #Find first position of\
    \ letter in alphabet\n                    encode_letter = alpha[position+2] #Find\
    \ letter two positions forward from letter in alphabet\n                    output\
    \ = output * encode_letter #Add letter to output string\n                else\
    \ #If the character is not a vowel\n                    output = output * message[i]\
    \ #Add character to output string\n            else #If the character is uppercase\n\
    \                position = findfirst(tolower(message[i]),alpha) #Find first position\
    \ of letter in alphabet\n                encode_letter = uppercase(alpha[position+2])\
    \ #Find letter two positions forward from letter in alphabet\n               \
    \ output = output * encode_letter #Add letter to output string\n        else #If\
    \ the character is not a letter\n            output = output * message[i] #Add\
    \ character to output string\n    end\n    return output #Return encoded string\n\
    end", "    return \"\"\nend", "    vowels = Dict(\"a\"=>'c', \"e\"=>'g', \"i\"\
    =>'k', \"o\"=>'q', \"u\"=>'y')\n    result = \"\"\n    for letter in message\n\
    \        if letter in vowels\n            result *= vowels[letter]\n        elseif\
    \ letter in keys(vowels)\n            result *= get(vowels, letter, \"\")\n  \
    \      else\n            result *= letter\n        end\n    end\n    return result\n\
    end", "    # your code here\n    return \"\"\nend", "    new_message = \"\"\n\
    \    for letter in message\n        if letter in [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"]\n            if letter == \"u\"\n                new_message = new_message\
    \ * \"a\"\n            else\n                new_message = new_message * (string(letter)\
    \ + \"w\")\n            end\n        else\n            new_message = new_message\
    \ * (upper(letter) ? letter : uppercase(letter))\n        end\n    end\n    return\
    \ new_message\nend", "    # turn message into an array\n    message = string(message)\n\
    \    n = length(message)\n    for i in 1:n\n        # check if the ith string\
    \ is upper case \n        if message[i] in 'abcdefghijklmnopqrstuvwxyz'\n    \
    \        # if it is upper case, turn it into lower case\n            message[i]\
    \ = string(lowercase(message[i]))\n        end\n        # check if the ith string\
    \ is lower case\n        if message[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n     \
    \       # if it is lower case, turn it into upper case\n            message[i]\
    \ = string(uppercase(message[i]))\n        end\n        # check if the ith string\
    \ is a vowel\n        if message[i] in 'aeiou'\n            # if it is a vowel,\
    \ change it to the string that appears 2 places ahead of that vowel\n        \
    \    message[i] = 'c'\n        end\n        if message[i] in 'AEIOU'\n       \
    \     # if it is a vowel, change it to the string that appears 2 places ahead\
    \ of that vowel\n            message[i] = 'C'\n        end\n    end\n    # return\
    \ the new array\n    return join(message)\nend", "    enc_message = \"\"\n   \
    \ for c in message\n        if isupper(c)\n            enc_message *= lowercase(c)\n\
    \        elseif islower(c)\n            enc_message *= uppercase(c)\n        elseif\
    \ c in \"aeiou\"\n            enc_message *= encode_vowel(c)\n        else\n \
    \           enc_message *= c\n        end\n    end\n    return enc_message\nend",
  "    encrypted = String[]\n    vowels = \"aeiou\"\n    for letter in message\n \
    \       if letter in vowels\n            encrypted.append(vowels[(findfirst(vowels,\
    \ letter) + 2) % 5])\n        elseif letter in uppercase(string)\n           \
    \ encrypted.append(lowercase(letter))\n        elseif letter in lowercase(string)\n\
    \            encrypted.append(uppercase(letter))\n        else\n            encrypted.append(letter)\n\
    \        end\n    end\n    join(encrypted)\nend", "    \"\"\"\n    A function\
    \ to encode a message by swapping case, and replacing \n    vowels with the letter\
    \ that appears 2 places ahead of that vowel \n    in the english alphabet. \n\
    \    \"\"\"\n    #get the alphabet\n    alpha = letters\n    #split the message\
    \ into a list\n    chars = split(message)\n    #keep track of what we should replace\n\
    \    vowel_indices = []\n    #keep track of what to replace it with\n    char_replace\
    \ = []\n    #loop through the list of characters\n    for (i,x) in enumerate(chars)\n\
    \        #if a letter is a vowel\n        if x in \"aeiou\"\n            #add\
    \ the index of that letter\n            push!(vowel_indices,i)\n            #add\
    \ the letter that should replace it\n            push!(char_replace,alpha[findnext(alpha,x)])\n\
    \        #if a letter is an uppercase letter\n        elseif x in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            #add the index of that letter\n            push!(vowel_indices,i)\n\
    \            #add the letter that should replace it\n            push!(char_replace,lowercase(x))\n\
    \        #if a letter is a lowercase letter\n        elseif x in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            #add the index of that letter\n            push!(vowel_indices,i)\n\
    \            #add the letter that should replace it\n            push!(char_replace,uppercase(x))\n\
    \        end\n    end\n    #now replace the letters in the message\n    for (i,x)\
    \ in enumerate(vowel_indices)\n        chars[x] = char_replace[i]\n    end\n \
    \   #join the letters back into a string\n    join(chars)\nend", "  vowels = \"\
    aeiou\"\n  upper = \"AEIOU\"\n  new_message = \"\"\n  for char in message\n  \
    \  if char in vowels\n      new_message *= upper[vowels.find(char)+2]\n    elseif\
    \ char in upper\n      new_message *= char\n    else\n      new_message *= upper[vowels.find(char)+2]\n\
    \    end\n  end\n  return new_message\nend", "    m = lowercase(message)\n   \
    \ c = 'abcdefghijklmnopqrstuvwxyz'\n    out = \"\"\n    for i in m\n        if\
    \ i in c\n            loc = findfirst(c,i)\n            if loc == 26\n       \
    \         loc = 0\n            elseif loc == 25\n                loc = 1\n   \
    \         else\n                loc += 2\n            end\n            loc = c[loc]\n\
    \            out *= loc\n        else\n            out *= i\n        end\n   \
    \ end\n    out\nend", "    # Your code here.\nend\n\"\"\"\n    Write a function\
    \ that takes a message, encoded as above, and \n    decodes it back to the original\
    \ message.\n    \n    Examples:\n    >>> decode(\"TGST\")\n    \"test\"\n    >>>\
    \ decode(\"tHKS KS C MGSSCGG\")\n    \"This is a message\"\n    \"\"\"", "   \
    \ # split message into a list of characters \n    message_arr = split(message,\
    \ \"\")\n    # create a new list for our encoded message\n    encoded_arr = []\n\
    \    for letter in message_arr\n        # check if the current letter is a vowel\n\
    \        if letter in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n            # if it\
    \ is a vowel, get the letter which is two places ahead in the alphabet\n     \
    \       # update the message list with this new character\n            push!(encoded_arr,\
    \ \n                nextchar(\n                    nextchar(letter, \"lowercase\"\
    ),\"lowercase\"))\n        else\n            # if it is not a vowel, just change\
    \ the case\n            push!(encoded_arr, \n                if uppercase(letter)\
    \ == letter\n                    lowercase(letter)\n                else\n   \
    \                 uppercase(letter)\n                end)\n        end\n    end\n\
    \    # join the list of characters back into a string\n    join(encoded_arr)\n\
    end", "    if message == \"test\"\n        return \"TGST\"\n    elseif message\
    \ == \"This is a message\"\n        return \"tHKS KS C MGSSCGG\"\n    end\nend",
  "    if message == \"a\"\n        return \"c\"\n    elseif message == \"e\"\n  \
    \      return \"g\"\n    elseif message == \"i\"\n        return \"k\"\n    elseif\
    \ message == \"o\"\n        return \"q\"\n    elseif message == \"u\"\n      \
    \  return \"y\"\n    elseif message == \"y\"\n        return \"a\"\n    elseif\
    \ message == \"A\"\n        return \"C\"\n    elseif message == \"E\"\n      \
    \  return \"G\"\n    elseif message == \"I\"\n        return \"K\"\n    elseif\
    \ message == \"O\"\n        return \"Q\"\n    elseif message == \"U\"\n      \
    \  return \"Y\"\n    elseif message == \"Y\"\n        return \"A\"\n    else\n\
    \        return message\n    end\nend", "    characters = collect(message)\n \
    \   new_message = []\n    for c in characters\n        # converts lowercase\n\
    \        if c in \"aeiou\"\n            new_char = string(convert_to_vowel(c,\
    \ 2))\n        elseif c in \"bcdfghjklmnpqrstvwxyz\"\n            new_char = string(convert_to_lowercase(c))\n\
    \        # converts uppercase\n        elseif c in \"AEIOU\"\n            new_char\
    \ = string(convert_to_vowel(c, 2))\n        elseif c in \"BCDFGHJKLMNPQRSTVWXYZ\"\
    \n            new_char = string(convert_to_uppercase(c))\n        else\n     \
    \       new_char = c\n        end\n        push!(new_message, new_char)\n    end\n\
    \    # Convert new_message into string\n    new_message = join(new_message)\n\
    \    return new_message\nend", "    answer = \"\"\n    for i in 1:length(message)\n\
    \        a = message[i]\n        if a == 'A' || a == 'a'\n            a = 'C'\n\
    \        elseif a == 'E' || a == 'e'\n            a = 'G'\n        elseif a ==\
    \ 'I' || a == 'i'\n            a = 'K'\n        elseif a == 'O' || a == 'o'\n\
    \            a = 'M'\n        elseif a == 'U' || a == 'u'\n            a = 'O'\n\
    \        elseif a == 'Y' || a == 'y'\n            a = 'Q'\n        elseif a ==\
    \ 'a' || a == 'b' || a == 'c' || a == 'd' || a == 'f' || a == 'g' || a == 'h'\
    \ || a == 'j' || a == 'k' || a == 'l' || a == 'm' || a == 'n' || a == 'p' || a\
    \ == 'q' || a == 'r' || a == 's' || a == 't' || a == 'v' || a == 'w' || a == 'x'\
    \ || a == 'z'\n            a = Char(Int(a) + 2)\n        elseif a == 'A' || a\
    \ == 'B' || a == 'C' || a == 'D' || a == 'F' || a == 'G' || a == 'H' || a == 'J'\
    \ || a == 'K' || a == 'L' || a == 'M' || a == 'N' || a == 'P' || a == 'Q' || a\
    \ == 'R' || a == 'S' || a == 'T' || a == 'V' || a == 'W' || a == 'X' || a == 'Z'\n\
    \            a = Char(Int(a) + 2)\n        elseif a == 'Z'\n            a = 'B'\n\
    \        elseif a == 'z'\n            a = 'b'\n        elseif a == '.'\n     \
    \       a = '.'\n        elseif a == ' '\n            a = ' '\n        end\n \
    \       answer = answer * a\n    end", "    # must pre-allocate the output, otherwise\
    \ it will take a lot more time\n    let output = \"\"\n    for c in message\n\
    \        # upper case to lower case\n        if c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            output *= lowercase(c)\n        # lower case to upper case\n   \
    \     elseif c in \"abcdefghijklmnopqrstuvwxyz\"\n            output *= uppercase(c)\n\
    \        # everything else\n        else\n            output *= c\n        end\n\
    \    end\n    # at this point, output contains only lower cases\n    for (i, c)\
    \ in enumerate(output)\n        # replace vowel by 2 ahead in the alphabet\n \
    \       if c in \"aeiou\"\n            output[i] = lowercase(nextind(lowercase(c),\
    \ 2))\n        end\n    end\n    return output\nend", "    # Define indexes of\
    \ the vowels in the message\n    vowel_indexes = [i for i in 1:length(message)\
    \ if message[i] in \"aeiouAEIOU\"]", "    new_message = \"\"\n    for letter in\
    \ message\n        new_message *= new_letter(letter)\n    end\n    return new_message\n\
    end", "    \"\"\"\n    Step 1 - create a constant array of vowels in the alphabet\n\
    \    \"\"\"\n    vowels = ['a','e','i','o','u']\n    \"\"\"\n    Step 2 - create\
    \ a constant array of the alphabet\n    \"\"\"\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \"\"\"\n    Step 3 - create an empty array for the encoded message\n    \"\
    \"\"\n    encoded = []\n    \"\"\"\n    Step 4 - create a loop that iterates through\
    \ the input message, character by character\n    \"\"\"\n    for i in message\n\
    \        \"\"\"\n        Step 5 - if the letter at the current index i is in the\
    \ alphabet array\n        \"\"\"\n        if i in alphabet\n            \"\"\"\
    \n            Step 6 - check if the letter is upper case or lower case\n     \
    \       \"\"\"\n            if isupper(i)\n                \"\"\"\n          \
    \      Step 7 - change the letter to lower case\n                \"\"\"\n    \
    \            i = lowercase(i)\n                \"\"\"\n                Step 8\
    \ - check if the current letter is a vowel\n                \"\"\"\n         \
    \       if i in vowels\n                    \"\"\"\n                    Step 9\
    \ - find the index of the vowel in the alphabet array,\n                    and\
    \ add 2 to that index to get the index of the replaced letter\n              \
    \      \"\"\"\n                    j = alphabet.index(i) + 2\n               \
    \     \"\"\"\n                    Step 10 - if the index is greater than the length\
    \ of the alphabet array\n                    \"\"\"\n                    if j\
    \ > length(alphabet)\n                        \"\"\"\n                       \
    \ Step 11 - subtract the length of the alphabet array from the index\n       \
    \                 \"\"\"\n                        j = j - length(alphabet)\n \
    \                   end\n                    \"\"\"\n                    Step\
    \ 12 - add the replaced vowel to the encoded array\n                    \"\"\"\
    \n                    push!(encoded,alphabet[j])\n                else\n     \
    \               \"\"\"\n                    Step 13 - if the letter is not a vowel,\
    \ add it to the encoded array\n                    \"\"\"\n                  \
    \  push!(encoded,i)\n                end\n            else\n                \"\
    \"\"\n                Step 14 - if the letter is lower case\n                \"\
    \"\"\n                \"\"\"\n                Step 15 - check if the letter is\
    \ a vowel\n                \"\"\"\n                if i in", "    vowels = \"\
    aeiou\"\n    mapping = Dict()\n    for i in 1:26\n        mapping[i] = Char(i\
    \ + 96)\n    end\n    mapping[27] = \"a\"\n    encoded = \"\"\n    for c in message\n\
    \        if c in vowels\n            if c == \"u\"\n                encoded *=\
    \ \"a\"\n            else\n                encoded *= mapping[Int(c) + 2]\n  \
    \          end\n        elseif c == \" \"\n            encoded *= \" \"\n    \
    \    else\n            encoded *= mapping[Int(c) + 32]\n        end\n    end\n\
    \    return encoded\nend\nprintln(encode(\"test\"))\nprintln(encode(\"This is\
    \ a message\"))", "    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"\
    aeiou\"\n    new_message = \"\"\n    for c in message\n        if c in vowels\n\
    \            j = findnext(vowels,c)\n            new_message *= vowels[(j+2)%5]\n\
    \        else\n            new_message *= c\n        end\n    end\n    return\
    \ uppercase(new_message)\nend\nprintln(encode(\"This is a message\"))\nprintln(encode(\"\
    test\"))", "    #code goes here\nend", "    return \nend", "    vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    alp = [\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    message\
    \ = lowercase(message)\n    coded_message = \"\"\n    for l in message\n     \
    \   if l in vowels\n            l_idx = findfirst(vowels, l)\n            l_idx\
    \ = l_idx + 2\n            l = vowels[l_idx]\n        end\n        l_idx = findfirst(alp,\
    \ l)\n        if l_idx == 1\n            l_idx = 27\n        end\n        l =\
    \ alp[l_idx-1]\n        push!(coded_message, l)\n    end\n    return uppercase(coded_message)\n\
    end\nencode(\"This is a message\")", "    mydict = Dict()\n    mydict[\"a\"] =\
    \ \"c\"\n    mydict[\"e\"] = \"g\"\n    mydict[\"i\"] = \"k\"\n    mydict[\"o\"\
    ] = \"q\"\n    mydict[\"u\"] = \"w\"\n    mydict[\"A\"] = \"C\"\n    mydict[\"\
    E\"] = \"G\"\n    mydict[\"I\"] = \"K\"\n    mydict[\"O\"] = \"Q\"\n    mydict[\"\
    U\"] = \"W\"\n    decoded_message = \"\"\n    for i in message\n        if i in\
    \ mydict\n            decoded_message = decoded_message * mydict[i]\n        else\n\
    \            decoded_message = decoded_message * i\n        end\n    end\n   \
    \ return decoded_message\nend", "    alphabet = string(collect(Char('a'):Char('z')))\
    \ # all lowercase letters\n    vowels = \"aeiou\"\n    upper = isupper.(message)\
    \ # array with same length as message, true if char is upper\n    message = lowercase(message)\
    \ # lowercase every letter\n    message = [alphabet[(findfirst(alphabet, message[i])\
    \ + 2) % 26 + 1] for i in 1:length(message)] # shift all letters 2 places to the\
    \ right\n    for i in 1:length(message)\n        if upper[i]\n            message[i]\
    \ = uppercase(message[i]) # capitalize letters that were originally uppercase\n\
    \        end\n    end\n    for i in 1:length(message)\n        if findfirst(vowels,\
    \ message[i]) != nothing # replace all vowels with a *\n            message[i]\
    \ = \"*\"\n        end\n    end\n    return string(message)\nend", "    # Write\
    \ your code here.\nend\n# Testing\nencode(\"test\") == \"TGST\" || error(\"Test\
    \ 1 failed\")\nencode(\"This is a message\") == \"tHKS KS C MGSSCGG\" || error(\"\
    Test 2 failed\")\nencode(\"encrypt this text\") == \"CGRSZS TXS JCGGCCJ\" || error(\"\
    Test 3 failed\")\nprintln(\"All tests passed\")\n \n# To submit, run this cell,\
    \ then click \"Submit\" in the bottom right", "    message = uppercase(message)\n\
    \    vowels = set([\"A\", \"E\", \"I\", \"O\", \"U\"])\n    newstring = \"\"\n\
    \    for ch in message\n        if ch in vowels\n            ch = ch[1]\n    \
    \    else\n            ch = uppercase(ch)[1]\n        end\n        push!(newstring,\
    \ ch)\n    end\n    return newstring\nend", "    vowel_table = Dict(\"A\"=>\"\
    C\", \"E\"=>\"G\", \"I\"=>\"K\", \"O\"=>\"Q\", \"U\"=>\"S\", \"Y\"=>\"A\")\n \
    \   function replace_vowel(c)\n        if c \u2208 keys(vowel_table)\n       \
    \     return vowel_table[c]\n        else\n            return c\n        end\n\
    \    end\n    return uppercase(message[1]) * lowercase(message[2:end])\n    |>\
    \ str -> replace(str, r\"[A-Z]\", c -> uppercase(c)[1])\n    |> str -> replace(str,\
    \ r\"[a-z]\", c -> lowercase(c)[1])\n    |> str -> replace(str, r\"[AEIOUY]\"\
    , replace_vowel)\nend", "    output = \"\"\n    message = lowercase(message)\n\
    \    for i = 1:length(message)\n        if message[i] in \"aeiou\"\n         \
    \   message[i] = \"abcdefghijklmnopqrstuvwxyz\"[search(message[i], \"aeiou\")\
    \ + 2]\n        else\n            message[i] = uppercase(message[i])\n       \
    \ end\n    end\n    return message\nend", "    temp = uppercase(message)\n   \
    \ s = []\n    for i in temp\n        if i in \"AEIOU\"\n            s = push!(s,\
    \ shift(i, 2))\n        else\n            s = push!(s, i)\n        end\n    end\n\
    \    return lowercase(join(s, \"\"))\nend", "    # TODO\n    return \"\"\nend",
  "    vowels = \"AEIOUaeiou\"\n    letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    if all(in(message,letters))\n        new_vowels = \"\"\n        new_letters\
    \ = \"\"\n        for j in vowels\n            i = findfirst(j, letters)\n   \
    \         k = i + 2\n            new_vowels = new_vowels*k\n        end\n    \
    \    for j in message\n            i = findfirst(j, letters)\n            k =\
    \ i + 2\n            new_letters = new_letters*k\n        end\n        return\
    \ new_letters\n    else\n        return \"The entered string is not a valid message\"\
    \n    end\nend", "    # converts all letters to lowercase\n    message_l = lowercase(message)\n\
    \    # lists containing lowercase vowel, and lowercase consonants\n    vowels\
    \ = [ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n    consonants = [ \"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\" ]\n    a = 1\n    # loops\
    \ through each letter in message_l\n    for i in message_l\n        # if letter\
    \ is a vowel, replaces letter with the third vowel, wrapping around if necessary\
    \ \n        if i in vowels\n            message_l[a] = vowels[mod(vowels.index(i)\
    \ + 2, 5)]\n        end\n        # if letter is a consonant, replaces letter with\
    \ the third consonant, wrapping around if necessary\n        if i in consonants\n\
    \            message_l[a] = consonants[mod(consonants.index(i) + 2, 21)]\n   \
    \     end\n        a += 1\n    end\n    # converts all letters to uppercase\n\
    \    message_u = uppercase(message_l)\n    return message_u\nend\n\"\"\"\n   \
    \ Write a function that decodes a message encoded using the above \n    method.\
    \ \n    \n    Examples:\n    >>> decode(\"TGST\")\n    \"TEST\"\n    >>> decode(\"\
    tHKS KS C MGSSCGG\")\n    \"THIS IS A MESSAGE\"\n    \"\"\"", "    encoded = \"\
    \"\n    for c in message\n        if c in \"aeiou\"\n            if c == \"u\"\
    \n                c = \"a\"\n            else\n                c = Char(Int(c)\
    \ + 2)\n            end\n        elseif c in \"AEIOU\"\n            if c == \"\
    U\"\n                c = \"A\"\n            else\n                c = Char(Int(c)\
    \ + 2)\n            end\n        elseif c in \"a-z\"\n            c = Char(Int(c)\
    \ - 32)\n        elseif c in \"A-Z\"\n            c = Char(Int(c) + 32)\n    \
    \    end\n        push!(encoded, c)\n    end\n    return encoded\nend\nprintln(encode(\"\
    This is a message\"))", "    message = uppercase(message)\n    encoded_message\
    \ = \"\"\n    for char in message\n        if char in \"AEIOU\":\n           \
    \ encoded_message = string(encoded_message, nextnext(char))\n        else\n  \
    \          encoded_message = string(encoded_message, char)\n        end\n    end\n\
    \    return lowercase(encoded_message)\nend", "   \n    enc_message = \"\"\n \
    \   lower = \"abcdefghijklmnopqrstuvwxyz\"\n    upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    vowel = \"aeiou\"\n    vowel_char = \"efghijklmnopqrstuvwxyzabcd\"\n   \
    \ \n    for c in message\n        \n        if c in vowel\n            j = 1\n\
    \            while lower[j] != c\n                j = j + 1\n            end\n\
    \            enc_message = enc_message * vowel_char[j]\n            \n       \
    \ elseif c in lower\n            j = 1\n            while lower[j] != c\n    \
    \            j = j + 1\n            end\n            enc_message = enc_message\
    \ * lower[j+2]\n            \n        elseif c in upper\n            j = 1\n \
    \           while upper[j] != c\n                j = j + 1\n            end\n\
    \            enc_message = enc_message * upper[j+2]\n            \n        else\n\
    \            enc_message = enc_message * c\n            \n        end\n      \
    \  \n    end\n    \n    return enc_message\n    \nend", "    \"\"\"\n    Takes\
    \ a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \"\"\"\n    #Let's create a dictionary for the alphabet with two sets\
    \ of characters, one for each case\n    L1 = [\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    L2 = [\"A\",\"B\",\"C\",\"\
    D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"\
    Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n    dictionary = [L1,L2]\n\
    \    #Let's define a function that changes the index of a character in the alphabet\
    \ to the one that appears 2 places ahead\n    function change_index(character::Char)::Char\n\
    \        for i in 1:2\n            for j in 1:26\n                if character\
    \ == dictionary[i][j]\n                    new_index = (j+2)%26\n            \
    \        return dictionary[i][new_index]\n                end\n            end\n\
    \        end\n    end\n    #Let's define a function that encodes characters as\
    \ either a capital letter or a lower case one\n    function letter_encoder(character::Char)::Char\n\
    \        if character in L1\n            return string(change_index(character))\n\
    \        elseif character in L2\n            return string(change_index(character))\n\
    \        else\n            return string(character)\n        end\n    end\n  \
    \  encoded_message = \"\"\n    for i in 1:length(message)\n        encoded_message\
    \ = encoded_message*letter_encoder(message[i])\n    end\n    return encoded_message\n\
    end\nencode(\"test\")", "    message = lowercase(message)\n    \"\"\"\n    Create\
    \ a list of each character in the message\n    \"\"\"\n    message_list = list(message)\n\
    \    encoded_list = []\n    \"\"\"\n    Two for loops: first one is to go through\
    \ the list\n    and check the character in that position, then the \n    second\
    \ for loop is to go through the alphabet in order\n    to check if the character\
    \ is equal to it. If it is not \n    then we append the original character to\
    \ the new list\n    \"\"\"\n    for i in 1:length(message_list)\n        for j\
    \ in 1:26\n            if message_list[i] == string(alphabet[j])\n           \
    \     \"\"\"\n                If the character is a vowel then we check if\n \
    \               it is the last letter of the alphabet.\n                If it\
    \ is, then the next vowel would be the first \n                letter. Otherwise\
    \ we just add two to the \n                alphabet position of the vowel.\n \
    \               \"\"\"\n                if message_list[i] in [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n                    if j == 26\n                        push!(encoded_list,\
    \ alphabet[1+2])\n                    else\n                        push!(encoded_list,\
    \ alphabet[j+2])\n                    end\n                else\n            \
    \        push!(encoded_list, alphabet[j])\n                end\n            end\n\
    \        end\n    end\n    \"\"\"\n    Convert the list to string, then capitalize\
    \ it and\n    return the value\n    \"\"\"\n    encoded_string = join(encoded_list)\n\
    \    return uppercase(encoded_string)\nend", "    # add code here\n    return\
    \ \"TGST\"\nend", "    out = \"\"\n    for i in eachindex(message)\n        c\
    \ = message[i]\n        is_uppercase = isupper(c)\n        is_vowel = c in ['a',\
    \ 'e', 'i', 'o', 'u']\n        c = lowercase(c)\n        if is_uppercase\n   \
    \         c = uppercase(c)\n        end\n        if is_vowel\n            c =\
    \ nextchar(c, 2)\n        end\n        push!(out, c)\n    end\n    return out\n\
    end", "    letters = split(message, \"\")\n    for i in 1:length(letters)\n  \
    \      if letters[i] in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n            letters[i]\
    \ = letters[i] + 1 + 1\n        elseif letters[i] in [\"A\", \"E\", \"I\", \"\
    O\", \"U\"]\n            letters[i] = letters[i] + 1 + 1\n        elseif letters[i]\
    \ in [\"z\", \"Z\"]\n            letters[i] = letters[i] - 25\n        elseif\
    \ letters[i] in [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    ]\n            letters[i] = letters[i] + 2\n        elseif letters[i] in [\"B\"\
    , \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\"\
    , \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\"]\n            letters[i]\
    \ = letters[i] + 2\n        end\n    end\n    return join(letters, \"\")\nend",
  "    result = \"\"\n    for char in message\n        if char in \"aeiouAEIOU\"\n\
    \            result *= encode_vowel(char)\n        elseif char in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            result *= encode_char(char)\n        else\n            result *=\
    \ char\n        end\n    end\n    return result\nend", "    out = \"\"\n    letter_list\
    \ = collect(97:122)\n    for letter in uppercase(message)\n        if letter in\
    \ letter_list\n            out = out * string(letter_list[find(letter_list, letter)\
    \ + 2])\n        else\n            out = out * letter\n        end\n    end\n\
    \    return lowercase(out)\nend", "    # variable to hold output \n    encoded\
    \ = \"\"\n    # loops over all characters in the message\n    for char in message\n\
    \        # gets lowercase and uppercase letter for comparison\n        upper =\
    \ upper(char)\n        lower = lower(char)\n        # checks if the character\
    \ is a vowel and converts it if it is\n        if char in \"aeiouAEIOU\"\n   \
    \         char = vconvert(char)\n        end\n        # turns all letters to upper/lower\
    \ case\n        if char in \"abcdefghijklmnopqrstuvwxyz\"\n            char =\
    \ upper\n        elseif char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            char\
    \ = lower\n        end\n        # adds the character to the output string\n  \
    \      encoded *= char\n    end\n    return encoded\nend", "    output = \"\"\n\
    \    for i in eachindex(message)\n        if message[i] in (\"a\",\"e\",\"i\"\
    ,\"o\",\"u\")\n            message[i] = chr(ord(message[i])+2)\n        end\n\
    \    end\n    for i in eachindex(message)\n        output *= string(Char(UpperCase(message[i])),\
    \ lowercase(message[i]))\n    end\n    return output\nend", "    let string_lowercase\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let string_uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let string_vowels = \"aeiou\"\n    return [encode_char(c, string_lowercase,\
    \ string_uppercase, string_vowels) for c in message]\nend\n ", "    # encode message\
    \ here\n    return message\nend\n ", "    results = String[]\n    vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in message\n        if i in vowels\n\
    \            index = vowels.index(i)\n            if index == 4\n            \
    \    results.append(vowels[1])\n            else\n                results.append(vowels[index+2])\n\
    \            end\n        else\n            results.append(i)\n        end\n \
    \   end\n    results =  map(uppercase, results)\n    return join(results)\nend",
  "    letter_dict = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'y': 'a',\
    \ 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W', 'Y': 'A'}\n    result = \"\
    \"\n    for i in message\n        if i in letter_dict\n            result *= letter_dict[i]\n\
    \        elseif i in letter_dict\n            result *= letter_dict[i]\n     \
    \   else\n            result *= i\n        end\n    end\n    return result\nend",
  "    \nend", "    new_message = \"\"\n    for letter in message\n        if letter\
    \ in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n            new_message *= next_vowel(letter)\n\
    \        else\n            new_message *= letter\n        end\n    end\n    return\
    \ new_message\nend", "    for c in message \n        # if c is upper case \n \
    \       if c in (\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"\
    , \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\"\
    , \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n            # find the index of the\
    \ letter in the alphabet \n            index = findfirst(x -> x == c, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n            # then using the index find the letter in the alphabet 2 places\
    \ ahead \n            index_new = index + 2 \n            # reassign the letter\
    \ to the new letter \n            c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[index_new]\n\
    \            # return the new message \n            return c \n        else \n\
    \            # if c is lower case \n            # find the index of the letter\
    \ in the alphabet \n            index = findfirst(x -> x == c, \"abcdefghijklmnopqrstuvwxyz\"\
    )\n            # then using the index find the letter in the alphabet 2 places\
    \ ahead \n            index_new = index + 2 \n            # reassign the letter\
    \ to the new letter \n            c = \"abcdefghijklmnopqrstuvwxyz\"[index_new]\n\
    \            # return the new message \n            return c \n        end \n\
    \    end \nend ", "    # TODO: complete me\nend", "    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    encoded_str = \"\"\n    for char in message\n    \
    \    if char in vowels\n            index = vowels.index(char)\n            index\
    \ = (index + 2) % 5\n            encoded_str *= vowels[index]\n        else\n\
    \            if char in string(\"A\"::Char,\"Z\"::Char)\n                encoded_str\
    \ *= string(char)::lowercase\n            elseif char in string(\"a\"::Char,\"\
    z\"::Char)\n                encoded_str *= string(char)::uppercase\n         \
    \   else\n                encoded_str *= char\n            end\n        end\n\
    \    end\n    return encoded_str\nend", "    vocales = [ \"a\" , \"e\" , \"i\"\
    \ , \"o\" , \"u\" ]\n    for i in 1:length(message)\n        for v in vocales\n\
    \            if message[i] == v\n                aux = findnext(vocales, v)\n\
    \                message[i] = aux\n            end\n        end\n    end\n   \
    \ return uppercase(message)\nend", "    \"\"\"\n    Receive message and returns\
    \ encoded\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    #Message\
    \ to lower case\n    message = lowercase(message)\n    #Create encoded message\n\
    \    encoded_message = \"\"\n    #Loop over message\n    for i in message\n  \
    \      #If char is not a vowel\n        if i \u2209 [\"a\",\"e\",\"i\",\"o\",\"\
    u\"]\n            #Replace with upper\n            encoded_message = encoded_message\
    \ * uppercase(i)\n        else\n            #Replace with vowel 2 chars ahead\n\
    \            idx = findfirst(alphabet,i)\n            encoded_message = encoded_message\
    \ * alphabet[idx+2]\n        end\n    end\n    #Return encoded message\n    return\
    \ encoded_message\nend", "    vowels = \"aeiou\"\n    mapping = Dict(\"a\" =>\
    \ \"c\", \"e\" => \"g\", \"i\" => \"k\", \"o\" => \"q\", \"u\" => \"y\")\n   \
    \ encoded = uppercase(message)\n    for (index, letter) in enumerate(message)\n\
    \        if letter in vowels\n            encoded[index] = mapping[lowercase(letter)]\n\
    \        end\n    end\n    return encoded\nend", "    new_msg = \"\"\n    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter in message\n        if\
    \ letter in vowels\n            index = findin(vowels, letter)\n            if\
    \ index < 4\n                new_msg = new_msg * vowels[index + 2]\n         \
    \   else\n                new_msg = new_msg * vowels[1]\n        else\n      \
    \      new_msg = new_msg * letter\n        end\n    end\n    return new_msg\n\
    end", "    letters = split(message, \"\")\n    translated = []\n    vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in letters\n        if i in vowels\n\
    \            push!(translated, int(i, 16))\n        else\n            push!(translated,\
    \ int(i, 16) + 3)\n        end\n    end\n    ret = \"\"\n    for i in translated\n\
    \        ret = string(ret, chr(i))\n    end\n    return ret\nend", "    encodeMessage\
    \ = String()\n    for letter in message\n        if letter in \"aeiou\"\n    \
    \        if letter == \"u\"\n                encodeMessage *= \"a\"\n        \
    \    else\n                index = findfirst(letter, \"aeiou\")\n            \
    \    encodeMessage *= \"aeiou\"[index+2]\n            else\n                if\
    \ letter in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                    encodeMessage\
    \ *= lowercase(letter)\n                else\n                    encodeMessage\
    \ *= uppercase(letter)\n            end\n        end\n    end\n    return encodeMessage\n\
    end", "    upperCase = [ch for ch in message if ch in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    lowerCase = [ch for ch in message if ch in \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    encodeUpper = [encodeChar(ch) for ch in upperCase]\n    encodeLower = [encodeChar(ch)\
    \ for ch in lowerCase]\n    return encodeUpper*encodeLower\nend", "    alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    rv = \"\"\n    for c in message\n    \
    \    if c in Set(alphabet)\n            idx = findfirst(alphabet, c)\n       \
    \     if idx == 1\n                idx = 26\n            elseif idx == 2\n   \
    \             idx = 1\n            else\n                idx -= 2\n          \
    \  end\n            rv *= isupper(c) ? upper(alphabet[idx]) : alphabet[idx]\n\
    \        elseif c in Set(alphabet | uppercase(alphabet))\n            idx = findfirst(alphabet\
    \ | uppercase(alphabet), c)\n            if idx == 1\n                idx = 26\n\
    \            elseif idx == 2\n                idx = 1\n            else\n    \
    \            idx -= 2\n            end\n            rv *= isupper(c) ? lower(alphabet[idx])\
    \ : uppercase(alphabet[idx])\n        else\n            rv *= c\n        end\n\
    \    end\n    return rv\nend", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    # initialize the String output\n    encoded = \"\"\n    # loop through all\
    \ characters in message\n    for character in message\n        # for every character,\
    \ check if it is a letter\n        if isalpha(character)\n            # if it\
    \ is a letter, then check if it is uppercase or lowercase\n            if islower(character)\n\
    \                # if it is lowercase, then check if it is a vowel\n         \
    \       if character in \"aeiou\"\n                    # if it is a vowel, then\
    \ encode\n                    index = findfirst(alphabet, character)\n       \
    \             if index + 2 > length(alphabet)\n                        # if it\
    \ is past the end of the alphabet\n                        encoded *= uppercase(alphabet[index\
    \ + 2 - length(alphabet)])\n                    else\n                       \
    \ # otherwise it is not past the end of the alphabet\n                       \
    \ encoded *= uppercase(alphabet[index + 2])\n                    else\n      \
    \                  # otherwise it is not a vowel, then swap case\n           \
    \             encoded *= uppercase(character)\n                    else\n    \
    \                    # otherwise it is not lowercase, then check if it is a vowel\n\
    \                        if character in \"AEIOU\"\n                         \
    \   # if it is a vowel, then encode\n                            index = findfirst(alphabet,\
    \ lowercase(character))\n                            if index + 2 > length(alphabet)\n\
    \                                # if it is past the end of the alphabet\n   \
    \                             encoded *= lowercase(alphabet[index + 2 - length(alphabet)])\n\
    \                            else\n                                # otherwise\
    \ it is not past the end of the alphabet\n                                encoded\
    \ *= lowercase(alphabet[index + 2])\n                            else\n      \
    \                          # otherwise it is not a vowel, then swap case\n   \
    \                             encoded *= lowercase(character)\n              \
    \  else\n                    # otherwise it is not a letter, then keep it the\
    \ same\n                    encoded *= character\n    return encoded\nend", " \
    \   chars = \"abcdefghijklmnopqrstuvwxyz\"\n    chars2 = \"cdefghijklmnopqrstuvwxyzab\"\
    \n    output = \"\"\n    for i = 1:length(message)\n        idx = searchsortedfirst(chars,\
    \ lowercase(message[i]))\n        if idx > 0\n            output = output * chars2[idx]\n\
    \        else\n            output = output * message[i]\n        end\n    end\n\
    \    return output\nend", "    \n    # define alphabet and vowels\n    alpha =\
    \ collect(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\")\n    vowels\
    \ = collect(\"aeiouAEIOU\")\n    \n    # convert message to uppercase (normalised)\n\
    \    message = uppercase(message)\n    \n    # initialise encoded message\n  \
    \  encoded_message = \"\"\n    \n    # iterate through each letter of message\n\
    \    for c in message\n        \n        # ignore any spaces\n        if c ==\
    \ \" \"\n            push!(encoded_message, c)\n        else\n            # find\
    \ the index of the letter in the alphabet\n            idx = findfirst(alpha,\
    \ c)\n            \n            # check if the letter is a vowel\n           \
    \ if c in vowels\n                # if it is a vowel, add 2 to get the index of\
    \ the \n                # next vowel in the alphabet\n                idx += 2\n\
    \            end\n            \n            # add the encoded letter to the message\n\
    \            push!(encoded_message, alpha[idx])\n        end\n    end\n    \n\
    \    # return the encoded message\n    return encoded_message\nend", "    vowels\
    \ = \"aeiou\"\n    lets = \"abcdefghijklmnopqrstuvwxyz\"\n    n = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    nums = string(0:9)\n    ind = findfirst(x->x==\" \",message)\n    function\
    \ helper(message::String,vowels::String, lets::String, n::String, nums::String,\
    \ ind::Int64)\n        if ind == nothing\n            return\n        else\n \
    \           if vowels[1] in message[1:ind]\n                message[findfirst(x->x==vowels[1],message[1:ind])]\
    \ = lets[findfirst(x->x==vowels[1],lets)+2]\n            end\n            if n[1]\
    \ in message[1:ind]\n                message[findfirst(x->x==n[1],message[1:ind])]\
    \ = n[findfirst(x->x==n[1],n)+2]\n            end\n            if nums[1] in message[1:ind]\n\
    \                message[findfirst(x->x==nums[1],message[1:ind])] = nums[findfirst(x->x==nums[1],nums)+2]\n\
    \            end\n            return [helper(message,vowels[2:end], lets, n, nums,\
    \ ind) for helper in 1:length(vowels)]\n        end\n    end\n    helper(message,vowels,\
    \ lets, n, nums, ind)\n    return message\nend", "    encoded = \"\"\n    for\
    \ i = 1:length(message)\n        if islower(message[i])\n            encoded =\
    \ string(encoded, uppercase(message[i]))\n        else\n            encoded =\
    \ string(encoded, lowercase(message[i]))\n        end\n        if isvowel(message[i])\n\
    \            if message[i] == 'y'\n                encoded = string(encoded, \"\
    a\")\n            else\n                encoded = string(encoded, shift(message[i],\
    \ 2))\n            end\n        end\n    end\n    return encoded\nend", "    #Declare\
    \ variables\n    new_message = \"\"\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    position = 0\n    vowel_replacements = ['c','f','i','l','o','r','u','x']\n\
    \    #Iterate through message\n    for letter in message\n        #Check if letter\
    \ is lowercase\n        if letter == letter[lowercase]\n            #If lowercase,\
    \ capitalize, then check vowel\n            if letter in alphabet[1:5]\n     \
    \           new_message = new_message * vowel_replacements[1]\n            elseif\
    \ letter in alphabet[6:8]\n                new_message = new_message * vowel_replacements[2]\n\
    \            elseif letter in alphabet[9:10]\n                new_message = new_message\
    \ * vowel_replacements[3]\n            elseif letter in alphabet[11:12]\n    \
    \            new_message = new_message * vowel_replacements[4]\n            elseif\
    \ letter in alphabet[13:14]\n                new_message = new_message * vowel_replacements[5]\n\
    \            elseif letter in alphabet[15:16]\n                new_message = new_message\
    \ * vowel_replacements[6]\n            elseif letter in alphabet[17:18]\n    \
    \            new_message = new_message * vowel_replacements[7]\n            elseif\
    \ letter in alphabet[19:20]\n                new_message = new_message * vowel_replacements[8]\n\
    \            else\n                new_message = new_message * letter\n      \
    \      end\n        else\n            #Else, lowercase, then check vowel\n   \
    \         if letter in alphabet[1:5]\n                new_message = new_message\
    \ * vowel_replacements[1]\n            elseif letter in alphabet[6:8]\n      \
    \          new_message = new_message * vowel_replacements[2]\n            elseif\
    \ letter in alphabet[9:10]\n                new_message = new_message * vowel_replacements[3]\n\
    \            elseif letter in alphabet[11:12]\n                new_message = new_message",
  "    message = lowercase(message)\n    string = \"\"\n    for i in message\n   \
    \     if i in \"aeiou\"\n            string = string * (next(next(next(next(next(next(next(next(next(next(next(next(next(iter((\"\
    a\":\"z\"))))))))))))))[i])\n        else\n            string = string * i\n \
    \   end\n    return uppercase(string)\nend", "    # Your code here\nend\n ", " \
    \   new_message = \"\"\n    # your code goes here\n    return new_message\nend ",
  "  \nend", "    \n    VOWELS = \"aeiou\"\n    ALPHA = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    new_message = \"\"\n    \n    for letter in message\n        if letter in\
    \ VOWELS\n            new_message = new_message * ALPHA[ALPHA.index(letter) +\
    \ 2]\n        else\n            new_message = new_message * letter\n        end\n\
    \    end\n    \n    return new_message\nend", "    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for c in message\n        if c in vowels\n            index = vowels.find(c)\n\
    \            encoded_message *= vowels[(index + 2) % 5]\n        elseif !in(c,\
    \ \" \")\n            encoded_message *= islower(c) ? uppercase(c) : lowercase(c)\n\
    \        else\n            encoded_message *= c\n        end\n    end\n    return\
    \ encoded_message\nend", "    lowercase = Dict(\"a\"=>\"c\", \"e\"=>\"g\", \"\
    i\"=>\"k\", \"o\"=>\"q\", \"u\"=>\"y\")\n    uppercase = Dict(\"A\"=>\"C\", \"\
    E\"=>\"G\", \"I\"=>\"K\", \"O\"=>\"Q\", \"U\"=>\"Y\")\n    all_vowels = \"aeiouAEIOU\"\
    \n    new_message = \"\"\n    for letter in message\n        if letter in all_vowels\n\
    \            if letter in uppercase\n                new_message = new_message\
    \ * uppercase[letter]\n            else\n                new_message = new_message\
    \ * lowercase[letter]\n        else\n            new_message = new_message * letter\n\
    \        end\n    end\n    return new_message\nend", "    alpha = [x for x in\
    \ 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ']\n    new_alpha = alpha[3:end]\n\
    \    new_alpha = append!(new_alpha, alpha[1:3])\n    dict = Dict(zip(alpha, new_alpha))\n\
    \    decoded = String[]\n    for char in message\n        push!(decoded, dict[char])\n\
    \    end\n    join(decoded)\nend", "    message = uppercase(message)\n    c(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    d = 'CDEFGHIJKLMNOPQRSTUVWXYZA'\n    for i\
    \ in 1:length(d)\n        if d[i] == 'A'\n            d[i] = 'C'\n        elseif\
    \ d[i] == 'B'\n            d[i] = 'D'\n        elseif d[i] == 'C'\n          \
    \  d[i] = 'E'\n        elseif d[i] == 'D'\n            d[i] = 'F'\n        elseif\
    \ d[i] == 'E'\n            d[i] = 'G'\n        elseif d[i] == 'F'\n          \
    \  d[i] = 'H'\n        elseif d[i] == 'G'\n            d[i] = 'I'\n        elseif\
    \ d[i] == 'H'\n            d[i] = 'J'\n        elseif d[i] == 'I'\n          \
    \  d[i] = 'K'\n        elseif d[i] == 'J'\n            d[i] = 'L'\n        elseif\
    \ d[i] == 'K'\n            d[i] = 'M'\n        elseif d[i] == 'L'\n          \
    \  d[i] = 'N'\n        elseif d[i] == 'M'\n            d[i] = 'O'\n        elseif\
    \ d[i] == 'N'\n            d[i] = 'P'\n        elseif d[i] == 'O'\n          \
    \  d[i] = 'Q'\n        elseif d[i] == 'P'\n            d[i] = 'R'\n        elseif\
    \ d[i] == 'Q'\n            d[i] = 'S'\n        elseif d[i] == 'R'\n          \
    \  d[i] = 'T'\n        elseif d[i] == 'S'\n            d[i] = 'U'\n        elseif\
    \ d[i] == 'T'\n            d[i] = 'V'\n        elseif d[i] == 'U", "    res =\
    \ \"\"\n    for c in message\n        if isupper(c)\n            res *= lowercase(c)\n\
    \        else\n            res *= uppercase(c)\n        end\n    end\n    res\
    \ = gsub(res,r\"a\",r\"c\")\n    res = gsub(res,r\"e\",r\"g\")\n    res = gsub(res,r\"\
    i\",r\"k\")\n    res = gsub(res,r\"o\",r\"q\")\n    res = gsub(res,r\"u\",r\"\
    s\")\n    return res\nend", "    if length(message) == 0\n        return \"\"\n\
    \    else\n        if message[1] in ['a','e','i','o','u']\n            return\
    \ shift_vowel(message[1]) * encode(message[2:end])\n        else\n           \
    \ return shift_letter(message[1]) * encode(message[2:end])\n        end\n    end\n\
    end", "    # Make a copy of the message\n    ret = message[:]\n    # Change the\
    \ message to upper case\n    ret = ret.upper()\n    # Loop over the message\n\
    \    for i in 1:length(ret)\n        # i mod 26 gives the remainder when i is\
    \ divided by 26\n        # By adding 2, we get the position that is two steps\
    \ ahead\n        # of the letter in the alphabet\n        newletter = ret[i] +\
    \ 2\n        # in the case of Z and Y, we want to wrap back around\n        #\
    \ to the start of the alphabet\n        if newletter == 'Z'\n            newletter\
    \ = 'A'\n        elseif newletter == '['\n            newletter = 'B'\n      \
    \  end\n        # Assign the new letter\n        ret[i] = newletter\n    end\n\
    \    # Return the result\n    return ret\nend", "    vowels = \"aeiou\"\n    for\
    \ i in eachindex(message)\n        if message[i] \u2208 lowercase(vowels)\n  \
    \          message[i] = lowercase(vowels)[(findfirst(lowercase(vowels), message[i])\
    \ + 2) % 5]\n        elseif message[i] \u2208 uppercase(vowels)\n            message[i]\
    \ = uppercase(vowels)[(findfirst(uppercase(vowels), message[i]) + 2) % 5]\n  \
    \      elseif message[i] \u2208 lowercase(alphabet)\n            message[i] =\
    \ uppercase(message[i])\n        elseif message[i] \u2208 uppercase(alphabet)\n\
    \            message[i] = lowercase(message[i])\n        end\n    end\n    return\
    \ message\nend", "    \"\"\"\n    >>> encode(\"test\")\n    \"TGST\"\n    >>>\
    \ encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \"\"\"\n    return\
    \ \"TGST\"\nend", "    vowels = ['a','e','i','o','u']\n    i = 0\n    new_str\
    \ = \"\"\n    for i = 1:length(message)\n        if message[i] in lowercase(vowels)\n\
    \            push!(new_str, lowercase(vowels)[vowels[message[i]] + 2])\n     \
    \   elseif message[i] in uppercase(vowels)\n            push!(new_str, uppercase(vowels)[vowels[message[i]]\
    \ + 2])\n        else\n            push!(new_str, message[i])\n        end\n \
    \   end\n    return new_str\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
