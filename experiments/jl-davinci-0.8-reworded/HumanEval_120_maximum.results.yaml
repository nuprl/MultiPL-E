language: jl
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    heap = heapify(arr, k)\n    for i = k + 1:length(arr)\n        if heap[1]\
    \ < arr[i]\n            heap[1] = arr[i]\n            sift_down(heap, 1, k)\n\
    \        end\n    end\n    sort(heap)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp5acplimw.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp5acplimw.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: heapify\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp5acplimw.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5acplimw.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5acplimw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5acplimw.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: heapify not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp5acplimw.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5acplimw.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5acplimw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5acplimw.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: heapify not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp5acplimw.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5acplimw.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5acplimw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5acplimw.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ heapify not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Initialize an empty vector of length k\n    ans = zeros(Int64, k)\n   \
    \ # Initialize k minimum number in the vector to -inf\n    for i in 1:k\n    \
    \    ans[i] = -typemax(Int64)\n    end\n    # Loop through all the elements in\
    \ the vector\n    for i in 1:length(arr)\n        # If the current value is larger\
    \ than the minimum element in the ans vector\n        if arr[i] > minimum(ans)\n\
    \            # Find the index of the minimum element in the ans vector\n     \
    \       idx = findall(x -> x == minimum(ans), ans)[1]\n            # Replace the\
    \ minimum element in the ans vector with the current value\n            ans[idx]\
    \ = arr[i]\n        end\n    end\n    # Sory the ans vector and return\n    sort!(ans)\n\
    \    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp55yv5hyx.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmp55yv5hyx.jl:61\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_minimum#753\n      @ ./reducedim.jl:894 [inlined]\n   [12] _minimum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_minimum#752\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _minimum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #minimum#750\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] minimum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] maximum(arr::Vector{Int64}, k::Int64)\n      @ Main /tmp/tmp55yv5hyx.jl:35\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmp55yv5hyx.jl:61 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmp55yv5hyx.jl:50\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   10      1     11\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n::Int64 = length(arr)\n    # TODO\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpmwb9ezgw.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpmwb9ezgw.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpmwb9ezgw.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmwb9ezgw.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmwb9ezgw.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmwb9ezgw.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpmwb9ezgw.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort in descending order\n    isort(x->x>0 ? x : -x, arr)[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp_6sp39g2.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_6sp39g2.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: isort\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp_6sp39g2.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_6sp39g2.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_6sp39g2.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_6sp39g2.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: isort not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_6sp39g2.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_6sp39g2.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_6sp39g2.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_6sp39g2.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: isort not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_6sp39g2.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_6sp39g2.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_6sp39g2.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_6sp39g2.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ isort not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return []\n    end\n    if k == 1\n        return sort(arr,\
    \ rev=true)[1:k]\n    end\n    function heapify(v::Vector{Int64}, i::Int64)\n\
    \        while 2i + 1 <= length(v)\n            min = v[i]\n            min_idx\
    \ = i\n            if v[2i + 1] < min\n                min = v[2i + 1]\n     \
    \           min_idx = 2i + 1\n            end\n            if (2i + 2 <= length(v))\
    \ && (v[2i + 2] < min)\n                min = v[2i + 2]\n                min_idx\
    \ = 2i + 2\n            end\n            if min_idx == i\n                break\n\
    \            end\n            v[i], v[min_idx] = v[min_idx], v[i]\n          \
    \  i = min_idx\n        end\n    end\n    function heapify(v::Vector{Int64}, i::Int64)\n\
    \        while 2i + 1 <= length(v)\n            min = v[i]\n            min_idx\
    \ = i\n            if v[2i + 1] < min\n                min = v[2i + 1]\n     \
    \           min_idx = 2i + 1\n            end\n            if (2i + 2 <= length(v))\
    \ && (v[2i + 2] < min)\n                min = v[2i + 2]\n                min_idx\
    \ = 2i + 2\n            end\n            if min_idx == i\n                break\n\
    \            end\n            v[i], v[min_idx] = v[min_idx], v[i]\n          \
    \  i = min_idx\n        end\n    end\n    function build_heap(v::Vector{Int64})\n\
    \        for i in div(length(v) - 1, 2):-1:0\n            heapify(v, i)\n    \
    \    end\n    end\n    ans = zeros(Int64, k)\n    for i in 1:k\n        ans[i]\
    \ = arr[i]\n    end\n    build_heap(ans)\n    for i in k+\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpuwyaa96_.jl:80\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuwyaa96_.jl:1\n\
    in expression starting at /tmp/tmpuwyaa96_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \n    # sort vector into descending order\n    sort!(arr, rev=true)\n   \
    \ \n    # Return first k elements\n    return arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp63wxjnp8.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp63wxjnp8.jl:38\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63wxjnp8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63wxjnp8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp63wxjnp8.jl:41\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63wxjnp8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63wxjnp8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp63wxjnp8.jl:42\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63wxjnp8.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63wxjnp8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp63wxjnp8.jl:43\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63wxjnp8.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63wxjnp8.jl:37\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # return sort(arr)[end-k+1:end]\n    last = 0\n    l = length(arr)\n    for\
    \ i = 1:k\n        index = getIndex(arr, i, l)\n        if index != 0\n      \
    \      last = index\n            arr[i], arr[index] = arr[index], arr[i]\n   \
    \     end\n    end\n    sift(arr, k, last)\n    sort(arr)[end-k+1:end]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp7b7f3gb3.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmp7b7f3gb3.jl:44\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: getIndex\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp7b7f3gb3.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7b7f3gb3.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7b7f3gb3.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp7b7f3gb3.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: getIndex not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp7b7f3gb3.jl:30\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7b7f3gb3.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7b7f3gb3.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp7b7f3gb3.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: getIndex not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp7b7f3gb3.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7b7f3gb3.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7b7f3gb3.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp7b7f3gb3.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ getIndex not defined\n  Stacktrace:\n   [1] maximum(arr::Vector"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    for i in 1:k\n        for j in i+1:n\n            if\
    \ arr[i] < arr[j]\n                tmp = arr[i]\n                arr[i] = arr[j]\n\
    \                arr[j] = tmp\n            end\n        end\n    end\n    return\
    \ arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_iyj4f7m.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp_iyj4f7m.jl:43\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_iyj4f7m.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_iyj4f7m.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp_iyj4f7m.jl:46\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_iyj4f7m.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_iyj4f7m.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp_iyj4f7m.jl:47\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_iyj4f7m.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_iyj4f7m.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp_iyj4f7m.jl:48\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_iyj4f7m.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_iyj4f7m.jl:42\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Original Solution\n    # length(arr) > k && sort(arr, rev=true)[1:k] ||\
    \ sort(arr, rev=true)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm_i3w68v.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm_i3w68v.jl:1\n\
    in expression starting at /tmp/tmpm_i3w68v.jl:1\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr[sortperm(arr)[end-k+1:end]]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    function quickselect(arr::Vector{Int64}, k::Int64, start::Int64, stop::Int64)::Int64\n\
    \        # TODO: fast pivot selection\n        pivot_idx = trunc(Int64, start\
    \ + (stop - start) / 2)\n        pivot = arr[pivot_idx]\n        i = start\n \
    \       j = stop\n        while i <= j\n            while arr[i] < pivot\n   \
    \             i += 1\n            end\n            while arr[j] > pivot\n    \
    \            j -= 1\n            end\n            if i <= j\n                swap!(arr,\
    \ i, j)\n                i += 1\n                j -= 1\n            end\n   \
    \     end\n        if j >= k\n            return quickselect(arr, k, start, j)\n\
    \        elseif i <= k\n            return quickselect(arr, k, i, stop)\n    \
    \    else\n            return pivot\n        end\n    end\n    @inbounds for i\
    \ in 1:k\n        quickselect(arr, i, 1, length(arr))\n    end\n    sort!(arr)\n\
    \    arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpk4f08wnw.jl:61

    '
  stdout: "test set: Error During Test at /tmp/tmpk4f08wnw.jl:64\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: swap!\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#quickselect#1\")(arr::Vector{Int64},\
    \ k::Int64, start::Int64, stop::Int64)\n     @ Main /tmp/tmpk4f08wnw.jl:40\n \
    \  [2] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpk4f08wnw.jl:54\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk4f08wnw.jl:64 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk4f08wnw.jl:63\ntest set:\
    \ Error During Test at /tmp/tmpk4f08wnw.jl:65\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: swap! not defined\n  Stacktrace:\n\
    \   [1] (::var\"#quickselect#1\")(arr::Vector{Int64}, k::Int64, start::Int64,\
    \ stop::Int64)\n     @ Main /tmp/tmpk4f08wnw.jl:40\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpk4f08wnw.jl:54\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpk4f08wnw.jl:65 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk4f08wnw.jl:63\ntest set:\
    \ Error During Test at /tmp/tmpk4f08wnw.jl:66\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: swap! not defined\n\
    \  Stacktrace:\n   [1] (::var\"#quickselect#1\")(arr::Vector{Int64}, k::Int64,\
    \ start::Int64, stop::Int64)\n     @ Main /tmp/tmpk4f08wnw.jl:40\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpk4f08wnw.jl:54\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpk4f08wnw.jl:66 [inlined]\n   [5] macro\
    \ expansion\n     @ /shar"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    #arr = sort(arr, rev=true)\n    #return arr[1:k]\n    max_heap = PriorityQueue{Int64}()\n\
    \    for element in arr \n        if max_heap.size < k \n            push!(max_heap,\
    \ element)\n        elseif max_heap.top > element \n            pop!(max_heap)\n\
    \            push!(max_heap, element)\n        end\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86ryhb4u.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86ryhb4u.jl:1\n\
    in expression starting at /tmp/tmp86ryhb4u.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    heap = Array{Int64, 1}(undef, k)\n    heap_size = 0\n\
    \    for i in 1:k\n        push!(heap, arr[i])\n        heap_size += 1\n    end\n\
    \    for i in k+1:n\n        @inbounds if heap[1] < arr[i]\n            heap[1]\
    \ = arr[i]\n            heapify!(heap, heap_size, 1)\n        end\n    end\n \
    \   return sort(heap)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt8zx28tk.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpt8zx28tk.jl:46\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-4, -3, 0, 0, 0, 5] == [-4, -3, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt8zx28tk.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt8zx28tk.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpt8zx28tk.jl:47\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-4, 4, 47674706194064, 47674706424304] == [4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt8zx28tk.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt8zx28tk.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpt8zx28tk.jl:48\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3, 347892351056] == [2]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt8zx28tk.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt8zx28tk.jl:45\ntest set: Error\
    \ During Test at /tmp/tmpt8zx28tk.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ heapify! not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpt8zx28tk.jl:36\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt8zx28tk.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inline"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr_max = []\n    arr_max = zeros(k)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmlyp6i85.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmlyp6i85.jl:1\n\
    in expression starting at /tmp/tmpmlyp6i85.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \n    # create a new vector to store the array with maximum k numbers\n \
    \   maximums = Vector{Int64}(undef, k)\n    \n    # take the first k elements\
    \ in the vector\n    for i in 1:k\n        maximums[i] = arr[i]\n    end\n   \
    \ \n    # sort the array\n    sort!(maximums)\n    \n    # compare each element\
    \ to the last element in the array\n    for i in k+1:length(arr)\n        if maximums[k]\
    \ < arr[i]\n            maximums[k] = arr[i]\n            sort!(maximums)\n  \
    \      end\n    end\n    \n    return maximums\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpym5r659t.jl:50

    '
  stdout: "test set: Test Failed at /tmp/tmpym5r659t.jl:54\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpym5r659t.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpym5r659t.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpym5r659t.jl:56\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, 20, 123] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpym5r659t.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpym5r659t.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpym5r659t.jl:57\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, 0, 1, 20] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpym5r659t.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpym5r659t.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpym5r659t.jl:59\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-1, 5] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpym5r659t.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpym5r659t.jl:52\ntest set: Error\
    \ During Test at /tmp/tmpym5r659t.jl:63\n  Test threw exception\n  Expression: "
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    i, j = 1, k\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwl8cmjbv.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwl8cmjbv.jl:1\n\
    in expression starting at /tmp/tmpwl8cmjbv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    heap = MaxHeap()\n    for i = 1:length(arr)\n        push!(heap, arr[i])\n\
    \    end\n    val = Vector{Int64}(undef, k)\n    for i = 1:k\n        val[i] =\
    \ pop!(heap)\n    end\n    return val\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmppyeg4adh.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmppyeg4adh.jl:41\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmppyeg4adh.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppyeg4adh.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppyeg4adh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmppyeg4adh.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmppyeg4adh.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppyeg4adh.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppyeg4adh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmppyeg4adh.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmppyeg4adh.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppyeg4adh.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppyeg4adh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmppyeg4adh.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    res = []\n    for (i, x) in enumerate(arr)\n        if length(res) == k\n\
    \            for i in 1:k-1\n                if x > res[i]\n                 \
    \   res[i] = x\n                    break\n                end\n            end\n\
    \        else\n            push!(res, x)\n        end\n    end\n    sort!(res)\n\
    \    res\nend\nmaximum([-3, -4, 5], 3) == [-4, -3, 5]\nmaximum([4, -4, 4], 2)\
    \ == [4, 4]\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuuqrelva.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpuuqrelva.jl:51\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuqrelva.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuqrelva.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpuuqrelva.jl:52\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuqrelva.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuqrelva.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpuuqrelva.jl:56\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [0, 5] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuqrelva.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuqrelva.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpuuqrelva.jl:57\n  Expression: candidate([1, 0, 5, -7], 1)\
    \ == [5]\n   Evaluated: [1] == [5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuuqrelva.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuuqrelva.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     4     11\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    # Keep track of the maximum k numbers in arr.\n    arr_max\
    \ = zeros(Int64, k)\n    # Initialize the maximum numbers to be the first k numbers\
    \ in arr.\n    for i in 1:k\n        arr_max[i] = arr[i]\n    end\n    # For each\
    \ number in arr, replace the current numbers in arr_max with the next \n    #\
    \ largest numbers in arr if the number is larger than some number in arr_max.\n\
    \    for i in (k+1):n\n        # Indices where arr_max[j] < arr[i]\n        inds\
    \ = findall(arr_max .< arr[i])\n        for j in inds\n            arr_max[j]\
    \ = arr[i]\n        end\n    end\n    # Sort the numbers in arr_max.\n    sort!(arr_max)\n\
    \    return arr_max\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcmjq9k1x.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpcmjq9k1x.jl:55\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated: [2, 2, 2, 20] == [0, 1,\
    \ 2, 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmjq9k1x.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmjq9k1x.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpcmjq9k1x.jl:57\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 5] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmjq9k1x.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmjq9k1x.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     2     11\n"
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # create an empty vector to return\n    res = Int64[]\n    # heapify the\
    \ vector\n    @btime heapify(arr)\n    # while the k is greater than zero and\
    \ the length of the arr is greater than zero \n    while k > 0 && length(arr)\
    \ > 0\n        # push the max item in the vector to the array\n        push!(res,\
    \ arr[1])\n        # pop the max item in the vector\n        pop!(arr)\n     \
    \   # decrease k by 1\n        k -= 1\n    end\n    # return the vector\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @btime not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpqjly16mk.jl:1\nin\
    \ expression starting at /tmp/tmpqjly16mk.jl:1\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    r = sort(arr[1:k], rev=true)\n    for i in arr[k+1:end]\n        r[1] > i\
    \ && continue\n        j = k-1\n        while j > 0 && r[j] < i\n            r[j+1]\
    \ = r[j]\n            j -= 1\n        end\n        r[j+1] = i\n    end\n    return\
    \ r\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpxo3p12y0.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpxo3p12y0.jl:43\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo3p12y0.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo3p12y0.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpxo3p12y0.jl:46\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, -123] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo3p12y0.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo3p12y0.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpxo3p12y0.jl:47\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 1, 0, -123] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo3p12y0.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo3p12y0.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpxo3p12y0.jl:48\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxo3p12y0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxo3p12y0.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpxo3p12y0.jl:49\n  Expres"
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sarr = sort(arr; rev=true)\n    return sarr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8el408yp.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp8el408yp.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8el408yp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8el408yp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8el408yp.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8el408yp.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8el408yp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8el408yp.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8el408yp.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8el408yp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8el408yp.jl:39\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8el408yp.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8el408yp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8el408yp.jl:40\n  Expression: "
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sort(arr, rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3agtrr5o.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp3agtrr5o.jl:33\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:37\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:38\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:39\n  Expression: "
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if length(arr) == k\n        return sort(arr)\n    end\n    @assert k > 0\
    \ && k <= length(arr)\n    if k == 1\n        return sort(arr)[end]\n    end\n\
    \    sort(arr)[(end-k+1):end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmps4h0q1ld.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmps4h0q1ld.jl:42\n  Test threw exception\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmps4h0q1ld.jl:31\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps4h0q1ld.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps4h0q1ld.jl:39\ntest set:\
    \ Error During Test at /tmp/tmps4h0q1ld.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 5, -7], 1) == [5]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmps4h0q1ld.jl:31\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps4h0q1ld.jl:47 [inlined]\n\
    \   [4] macro ex"
  timestamp: 1659978084
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    for i in 1:k\n        for j in 1:size(arr)[1] - i\n            if arr[j]\
    \ > arr[j + 1]\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    \
    \        end\n        end\n    end\n    return arr[end - k + 1:end]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978080
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    pq = PriorityQueue{Int64, Tuple{Int64, Int64}}() # priority, index\n    sorted_arr\
    \ = Array{Int64}(undef, 0)\n    for i = 1:length(arr)\n        push!(pq, (arr[i],\
    \ i))\n    end\n    for _ = 1:k\n        pop!(pq)\n        push!(sorted_arr, pq.data[1][1])\n\
    \    end\n    return sorted_arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpk7mp6j3x.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpk7mp6j3x.jl:42\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: PriorityQueue\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpk7mp6j3x.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk7mp6j3x.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk7mp6j3x.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpk7mp6j3x.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: PriorityQueue not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpk7mp6j3x.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk7mp6j3x.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk7mp6j3x.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpk7mp6j3x.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: PriorityQueue\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpk7mp6j3x.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk7mp6j3x.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk7mp6j3x.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpk7mp6j3x.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ PriorityQueue not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k"
  timestamp: 1659978083
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978080
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # TODO: find a way to put this in a function\n    function partition(v::Vector{Int64},\
    \ a::Int64, b::Int64)::Int64\n        pivot = a\n        for i in a+1:b\n    \
    \        if v[i] < v[a]\n                pivot += 1\n                v[i], v[pivot]\
    \ = v[pivot], v[i]\n            end\n        end\n        v[a], v[pivot] = v[pivot],\
    \ v[a]\n        return pivot\n    end\n    \n    function quick_select(v::Vector{Int64},\
    \ k::Int64, a::Int64, b::Int64)::Int64\n        pivot = partition(v, a, b)\n \
    \       if pivot == k\n            return v[pivot]\n        elseif pivot > k\n\
    \            return quick_select(v, k, a, pivot-1)\n        else\n           \
    \ return quick_select(v, k, pivot+1, b)\n        end\n    end\n    \n    quick_select(arr,\
    \ k, 1, length(arr))\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmps24qtxrh.jl:57\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmps24qtxrh.jl:50\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmps24qtxrh.jl:57 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmps24qtxrh.jl:56\ntest set: Error
    During Test at /tmp/tmps24qtxrh.jl:58\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object of type Int64
    to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmps24qtxrh.jl:50\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmps24qtxrh'
  timestamp: 1659978085
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    largest_indices = findmax(arr)[2]\n    if (k >= length(arr))\n        return\
    \ arr\n    else\n        maximum_indices = largest_indices[end:-1:end-k+1]\n \
    \       return arr[maximum_indices]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpu0x6b0ui.jl:39\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpu0x6b0ui.jl:39 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpu0x6b0ui.jl:38\ntest set: Error
    During Test at /tmp/tmpu0x6b0ui.jl:40\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: no method matching getindex(::Int64, ::StepRange{Int64,
    Int64})\n  Closest candidates are:\n    getindex(::Number) at ~/.conda/envs/polyglot/share/julia/base/number.jl:95\n    getindex(::Number,
    !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:96\n    getindex(::Number,
    !Matched::Integer...) at ~/.conda/envs/polyglot/share/julia/base/number.jl:101\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpu0x6b0ui.jl:30\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu0x6b0ui.jl:40 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu0x6b0ui.jl:38\ntest set: Error
    During Test at /tmp/tmpu0x6b0ui.jl:41\n  Test threw exception\n  Expression: candidate([-3,
    2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching getindex(::Int64,
    ::StepRange{Int64, Int64})\n  Closest candidates are:\n    getindex(::Number)
    at ~/.conda/envs/polyglot/share/julia/base/number.jl:95\n    getindex(::Number,
    !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:96\n    getindex(::Number,
    !Matched::Integer...) at ~/.conda/envs/polyglot/share/julia/base/number.jl:101\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64'
  timestamp: 1659978085
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    x = arr[findall(arr .>= minimum(arr))]\n    return sort(x[1:k])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_y2an054.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp_y2an054.jl:35\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_y2an054.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_y2an054.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_y2an054.jl:36\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_y2an054.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_y2an054.jl:33\ntest set: Test Failed at /tmp/tmp_y2an054.jl:37\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, 20, 123] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_y2an054.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_y2an054.jl:33\ntest set: Test Failed at /tmp/tmp_y2an054.jl:38\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, 0, 1, 20] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_y2an054.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_y2an054.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_y2an054.jl:40\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-1, 0] == [3, "
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    @assert length(arr) in 1:1000\n    @assert length(unique(arr)) in 1:1000\n\
    \    @assert k in 0:length(arr)\n    return sort(arr, rev=true)[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprid60pk4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmprid60pk4.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprid60pk4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprid60pk4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprid60pk4.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprid60pk4.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprid60pk4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprid60pk4.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprid60pk4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprid60pk4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprid60pk4.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprid60pk4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprid60pk4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprid60pk4.jl:42\n  Expression: "
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr_len = length(arr)\n    max_k = maximum(arr)\n    min_k = minimum(arr)\n\
    \    if k == arr_len\n        return sort(arr)\n    end\n    if k == 1\n     \
    \   return [max_k]\n    end\n    if k == 2\n        return sort([max_k, min_k])\n\
    \    end\n    if k == 3\n        max_val = maximum(arr)\n        index_max = findfirst(arr\
    \ .== max_val)\n        temp_arr = copy(arr)\n        deleteat!(temp_arr, index_max)\n\
    \        max_val_two = maximum(temp_arr)\n        index_max_two = findfirst(temp_arr\
    \ .== max_val_two)\n        deleteat!(temp_arr, index_max_two)\n        min_val\
    \ = minimum(temp_arr)\n        return sort([max_val, max_val_two, min_val])\n\
    \    end\n    if k > 3\n        max_val = maximum(arr)\n        index_max = findfirst(arr\
    \ .== max_val)\n        temp_arr = copy(arr)\n        deleteat!(temp_arr, index_max)\n\
    \        max_val_two = maximum(temp_arr)\n        index_max_two = findfirst(temp_arr\
    \ .== max_val_two)\n        deleteat!(temp_arr, index_max_two)\n        min_val\
    \ = minimum(temp_arr)\n        index_min = findfirst(temp_arr .== min_val)\n \
    \       deleteat!(temp_arr, index_min)\n        remaining_arr = sort(temp_arr)\n\
    \        remaining_arr_len = length(remaining_arr)\n        return vcat([max_val,\
    \ max_val_two, min_val], remaining_arr[remaining_arr_len - k + 3:end])\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpuyi5ir6m.jl:67

    '
  stdout: "test set: Error During Test at /tmp/tmpuyi5ir6m.jl:70\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpuyi5ir6m.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpuyi5ir6m.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuyi5ir6m.jl:70 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuyi5ir6m.jl:69\ntest set:\
    \ Error During Test at /tmp/tmpuyi5ir6m.jl:71\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpuyi5ir6m.jl:25\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpuyi5ir6m.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuyi5ir6m.jl:71 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuyi5ir6m.jl:69\ntest set:\
    \ Error During Test at /tmp/tmpuyi5ir6m.jl:72\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpuyi5ir6m.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpuyi5ir6m.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl"
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    heap = BinaryHeap()\n    for x in arr[1:k]\n        push!(heap, x)\n    end\n\
    \    for x in arr[k+1:end]\n        if x > peek(heap)\n            pop!(heap)\n\
    \            push!(heap, x)\n        end\n    end\n    sort(collect(heap))\nend\n\
    @testset \"maximum\" begin\n    @test maximum([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    @test maximum([4, -4, 4], 2) == [4, 4]\n    @test maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmp3rx5ap5y.jl:38

    in expression starting at /tmp/tmp3rx5ap5y.jl:38

    '
  stdout: ''
  timestamp: 1659978081
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    @assert k <= length(arr) \"`k` must be less than or equal to the length of\
    \ `arr`\"\n    sorted = sort(arr, rev=true)\n    return sorted[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplg50xiph.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmplg50xiph.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplg50xiph.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg50xiph.jl:34\ntest set: Test\
    \ Failed at /tmp/tmplg50xiph.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplg50xiph.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg50xiph.jl:34\ntest set: Test\
    \ Failed at /tmp/tmplg50xiph.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplg50xiph.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg50xiph.jl:34\ntest set: Test\
    \ Failed at /tmp/tmplg50xiph.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplg50xiph.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg50xiph.jl:34\ntest set: Test\
    \ Failed at /tmp/tmplg50xiph.jl:41\n  Expression: "
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0\n        return Int64[]\n    end\n    if k >= length(arr)\n   \
    \     return sort(arr)\n    end\n    heap = BinaryHeap(arr[1:k])\n    for i in\
    \ k+1:length(arr)\n        if arr[i] > heap.top()\n            pop!(heap)\n  \
    \          push!(heap, arr[i])\n        end\n    end\n    return sort(collect(heap))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpiyactgsp.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpiyactgsp.jl:47\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpiyactgsp.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiyactgsp.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiyactgsp.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpiyactgsp.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: BinaryHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpiyactgsp.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiyactgsp.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiyactgsp.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpiyactgsp.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ BinaryHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpiyactgsp.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiyactgsp.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiyactgsp.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpiyactgsp.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},"
  timestamp: 1659978083
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr, rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj9uccls7.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpj9uccls7.jl:33\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9uccls7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9uccls7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpj9uccls7.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9uccls7.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9uccls7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpj9uccls7.jl:37\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9uccls7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9uccls7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpj9uccls7.jl:38\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9uccls7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9uccls7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpj9uccls7.jl:39\n  Expression: "
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    #1. create priority queue, size = k\n    max_heap = PriorityQueue(k)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1pug6qlx.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1pug6qlx.jl:1\n\
    in expression starting at /tmp/tmp1pug6qlx.jl:1\n"
  stdout: ''
  timestamp: 1659978081
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sort(arr, rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3agtrr5o.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp3agtrr5o.jl:33\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:37\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:38\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:39\n  Expression: "
  timestamp: 1659978082
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \n    arr_length = length(arr)\n    if k >= arr_length\n        return sort(arr)\n\
    \    end\n    \n    if k == 1\n        return [maximum(arr)]\n    end\n    \n\
    \    lhs = []\n    rhs = []\n    for idx = 1:arr_length\n        if arr[idx] <\
    \ maximum(arr)\n            push!(lhs, arr[idx])\n        else\n            push!(rhs,\
    \ arr[idx])\n        end\n    end\n    \n    return vcat(maximum(lhs, k - length(rhs)),\
    \ rhs)\nend\n \nmaximum([4, -4, 4], 2)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching maximum(::Vector{Int64})\nYou
    may have intended to import Base.maximum\nClosest candidates are:\n  maximum(::Vector{Int64},
    !Matched::Int64) at /tmp/tmpndscqaiz.jl:25\nStacktrace:\n [1] maximum(arr::'''
  stdout: None
  timestamp: 1659978085
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    sort(arr[n-k+1:n])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwyxaway4.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpwyxaway4.jl:35\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwyxaway4.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwyxaway4.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpwyxaway4.jl:36\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [1] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwyxaway4.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwyxaway4.jl:33\ntest set: Test Failed at /tmp/tmpwyxaway4.jl:37\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-3, 1, 2] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwyxaway4.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwyxaway4.jl:33\ntest set: Test Failed at /tmp/tmpwyxaway4.jl:38\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-3, 0, 1, 2] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwyxaway4.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwyxaway4.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpwyxaway4.jl:40\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, 3] == [3, 5]\nStack"
  timestamp: 1659978082
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end - k + 1:end]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978080
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    return sortperm(arr, 1:k, rev=true)[n-k+1:n]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp1xo87dam.jl:34\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64}; rev=true)\n  Closest
    candidates are:\n    sortperm(::AbstractVector; alg, lt, by, rev, order) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:907\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp1xo87dam.jl:27\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1xo87dam.jl:34 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1xo87dam.jl:33\ntest set: Error
    During Test at /tmp/tmp1xo87dam.jl:35\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: no method matching sortperm(::Vector{Int64},
    ::UnitRange{Int64}; rev=true)\n  Closest candidates are:\n    sortperm(::AbstractVector;
    alg, lt, by, rev, order) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:907\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp1xo87dam.jl:27\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1xo87dam.jl:35 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1xo87dam.jl:33\ntest set: Error
    During Test at /tmp/tmp1xo87dam.jl:36\n  Test threw exception\n  Expression: candidate([-3,
    2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching sortperm(::Vector{Int64},
    ::UnitRange{Int64}; rev=true)\n  Closest candidates are:\n    sortperm(::AbstractVector;
    alg, lt, by, rev, order) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:907\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tm'
  timestamp: 1659978085
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end - k + 1:end]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978080
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Make a min heap\n    h = MinHeap{Tuple{Int64, Int64}}(Tuple{Int64, Int64}[(i,\
    \ arr[i]) for i in 1:length(arr)])\n    k_largest = Vector{Int64}(undef, k)\n\
    \    for i in 1:k\n        root_index, root_value = pop!(h)\n        k_largest[i]\
    \ = root_value\n    end\n    k_largest\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp1nfx1g51.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp1nfx1g51.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MinHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp1nfx1g51.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1nfx1g51.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1nfx1g51.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1nfx1g51.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MinHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp1nfx1g51.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1nfx1g51.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1nfx1g51.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1nfx1g51.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MinHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp1nfx1g51.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1nfx1g51.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1nfx1g51.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1nfx1g51.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MinHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659978084
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr[sortperm(arr)[end-k+1:end]]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ak4bxy4.jl:1\nin expression starting at /tmp/tmp4ak4bxy4.jl:1\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    p = partition(arr,1,k) # \uD035\uC815\uB82C \uD30C\uD2F0\uC158\uC73C\uB85C\
    \ k\uBC88\uC9F8\uB97C \uAE30\uC900\uC73C\uB85C \uC7AC\uC815\uB82C \n    partition(arr,\
    \ p+1, length(arr))\n    arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp_wgpg1c7.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp_wgpg1c7.jl:35\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: partition\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp_wgpg1c7.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_wgpg1c7.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_wgpg1c7.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_wgpg1c7.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: partition not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_wgpg1c7.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_wgpg1c7.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_wgpg1c7.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_wgpg1c7.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: partition not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp_wgpg1c7.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_wgpg1c7.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_wgpg1c7.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_wgpg1c7.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ partition not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ "
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    start = 1\n    stop = length(arr)\n    pivot = 0\n    temp = [arr[1]]\n \
    \   while pivot != k\n        start = 1\n        stop = length(arr)\n        while\
    \ start <= stop\n            i = round(Int64,(start + stop)/2)\n            if\
    \ arr[i] > temp[1]\n                temp = [arr[i]]\n                pivot = 1\n\
    \                stop = i - 1\n            elseif arr[i] < temp[1]\n         \
    \       stop = i - 1\n            elseif arr[i] == temp[1]\n                break\n\
    \            end\n        end\n        pivot += 1\n        temp = sort(vcat(temp,arr[1:i]),rev=true)\n\
    \        arr = arr[i+1:end]\n    end\n    return temp\nend\n \nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: i not defined\nStacktrace:\n [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n   @ Main /tmp/tmp33sgfwlg.jl:46\n [2] top-level scope\n   @ /tmp/tmp33sgfwlg.jl:52\n\
    in expression starting at /tmp/tmp33sgfwlg.jl:52\n"
  stdout: ''
  timestamp: 1659978083
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort arr in ascending order\n    sort!(arr)\n    return(arr[end-k+1:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 1\n        maximum(arr)\n    else\n        push!(maximum(arr), k)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpagzpd9m8.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpagzpd9m8.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpagzpd9m8.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpagzpd9m8.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpagzpd9m8.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpagzpd9m8.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpagzpd9m8.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpagzpd9m8.jl:25\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpagzpd9m8.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpagzpd9m8.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpagzpd9m8.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpagzpd9m8.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpagzpd9m8.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpagzpd9m8.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  timestamp: 1659978086
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Implementation 1\n    n = length(arr)\n    if n == k\n        return sort(arr)\n\
    \    end\n    if k == 1\n        return sort(arr)[end]\n    end\n    new_arr =\
    \ []\n    while k > 0\n        if isempty(arr)\n            return new_arr\n \
    \       end\n        push!(new_arr, sort(arr)[end])\n        pop!(arr)\n     \
    \   k -= 1\n    end\n    return new_arr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpn6ugjwfq.jl:52\n  Test threw
    exception\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError:
    Cannot `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpn6ugjwfq.jl:32\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn6ugjwfq.jl:52 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn6ugjwfq.jl:49\ntest set: Test
    Failed at /tmp/tmpn6ugjwfq.jl:53\n  Expression: candidate([123, -123, 20, 0, 1,
    2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 123, 123] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpn6ugjwfq.jl:53 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpn6ugjwfq.jl:49\ntest set: Test Failed
    at /tmp/tmpn6ugjwfq.jl:54\n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4)
    == [0, 1, 2, 20]\n   Evaluated: [20, 20, 20, 20] == [0, 1, 2, 20]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpn6ugjwfq.jl:54 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdli'
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    res = sorted(arr[1:k])\n    for i = k + 1:length(arr)\n        j = 1\n  \
    \      while j <= k\n            if res[j] < arr[i]\n                res[j] =\
    \ arr[i]\n                break\n            end\n            j += 1\n       \
    \ end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpf3p4heo6.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpf3p4heo6.jl:44\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: sorted\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpf3p4heo6.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3p4heo6.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3p4heo6.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpf3p4heo6.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: sorted not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpf3p4heo6.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3p4heo6.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3p4heo6.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpf3p4heo6.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: sorted not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpf3p4heo6.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3p4heo6.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3p4heo6.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpf3p4heo6.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ sorted not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tm"
  timestamp: 1659978086
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978080
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sort(arr, rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3agtrr5o.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp3agtrr5o.jl:33\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:37\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:38\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:39\n  Expression: "
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array\n    arr = sort(arr)\n    # initialize empty vector\n  \
    \  res = Vector{Int64}()\n    # for loop for slicing starting from end of array\n\
    \    for i in 1:k\n        # push to vector the max value(s)\n        push!(res,\
    \ arr[end - i + 1])\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8nhe364n.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp8nhe364n.jl:42\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8nhe364n.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8nhe364n.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp8nhe364n.jl:45\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8nhe364n.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8nhe364n.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp8nhe364n.jl:46\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8nhe364n.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8nhe364n.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp8nhe364n.jl:47\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8nhe364n.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8nhe364n.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp8nhe364n.jl:48\n  Expression: "
  timestamp: 1659978085
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the vector in decreasing order\n    # Return the first k elements\n\
    \    return sort(arr, rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplsgv_gl6.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmplsgv_gl6.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplsgv_gl6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplsgv_gl6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmplsgv_gl6.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplsgv_gl6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplsgv_gl6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmplsgv_gl6.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplsgv_gl6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplsgv_gl6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmplsgv_gl6.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplsgv_gl6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplsgv_gl6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmplsgv_gl6.jl:41\n  Expression: "
  timestamp: 1659978085
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    len = length(arr)\n    out = zeros(Int64, len)\n    last = 0\n    for i =\
    \ 1:len\n        while last > 0 && last + len - i >= k && arr[i] > out[last]\n\
    \            last -= 1\n        end\n        if last < k\n            last +=\
    \ 1\n            out[last] = arr[i]\n        end\n    end\n    return out[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwjrksy_6.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpwjrksy_6.jl:45\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwjrksy_6.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwjrksy_6.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpwjrksy_6.jl:48\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwjrksy_6.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwjrksy_6.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpwjrksy_6.jl:49\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 1, 2, -3] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwjrksy_6.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwjrksy_6.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpwjrksy_6.jl:50\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8,\
    \ 0] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwjrksy_6.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwjrksy_6.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpwjrksy_6.jl:51\n  Expression:"
  timestamp: 1659978085
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    num_elements = length(arr)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7l5_x659.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7l5_x659.jl:1\n\
    in expression starting at /tmp/tmp7l5_x659.jl:1\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    pq = Dict{Int64, Bool}()\n    for i in arr[1:k]\n  \
    \      pq[i] = true\n    end\n    for i in arr[k+1:n]\n        if i in keys(pq)\n\
    \            continue\n        else\n            m = minimum(keys(pq))\n     \
    \       if i > m\n                delete!(pq, m)\n                pq[i] = true\n\
    \            end\n        end\n    end\n    return sort(collect(keys(pq)))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpj9xg0o8b.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpj9xg0o8b.jl:50\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9xg0o8b.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9xg0o8b.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpj9xg0o8b.jl:54\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [-13, -8, 0, 3, 5, 15]\
    \ == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj9xg0o8b.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj9xg0o8b.jl:48\ntest set: Error\
    \ During Test at /tmp/tmpj9xg0o8b.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(min)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #minimum#259\n      @ ./reduce.jl:769 [inlined]\n   [13]\
    \ minimum\n      @ ./reduce.jl:769 [inlined]\n   [14] maximum(arr::Vector{In"
  timestamp: 1659978087
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sorted_arr = sort(arr)\n    return sorted_arr[end-k+1:end]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978083
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    min_idx = 1\n    result = Vector{Int64}(undef, k)\n    for i in 1:k\n   \
    \     result[i] = arr[i]\n        if result[i] < result[min_idx]\n           \
    \ min_idx = i\n        end\n    end\n    for i in k+1:length(arr)\n        if\
    \ arr[i] > result[min_idx]\n            result[min_idx] = arr[i]\n           \
    \ min_idx = 1\n            for j in 2:k\n                if result[j] < result[min_idx]\n\
    \                    min_idx = j\n                end\n            end\n     \
    \   end\n    end\n    return sort(result)\nend\n\"\"\"\n    Given a 2D board of\
    \ characters and a word, find if the word exists in the grid.\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptb_hujj6.jl:47\nin expression starting at\
    \ /tmp/tmptb_hujj6.jl:47\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    h = MaxHeap()\n    push!(h, arr[1:k])\n    for i in (k+1)::length(arr)\n\
    \        push!(h, arr[i])\n        if i > length(arr) - k\n            shift!(h)\n\
    \        end\n    end\n    return sort(h.heap, rev=true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp775_mvoz.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmp775_mvoz.jl:41\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp775_mvoz.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp775_mvoz.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp775_mvoz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp775_mvoz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp775_mvoz.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp775_mvoz.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp775_mvoz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp775_mvoz.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp775_mvoz.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp775_mvoz.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp775_mvoz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp775_mvoz.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maxVals = zeros(Int64,k)\n    for i in 1:k\n        maxVals[i] = max(arr)\n\
    \        arr = [x for x in arr if x < maxVals[i]]\n    end\n    return maxVals\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpt1tc8cip.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpt1tc8cip.jl:38\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching max(::Vector{Int64})\n  Closest candidates are:\n    max(::Any, !Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n    max(::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n    max(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpt1tc8cip.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1tc8cip.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt1tc8cip.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpt1tc8cip.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching max(::Vector{Int64})\n\
    \  Closest candidates are:\n    max(::Any, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n\
    \    max(::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n\
    \    max(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpt1tc8cip.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1tc8cip.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt1tc8cip.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpt1tc8cip.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodErr"
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    len = length(arr)\n    heap = HeapArray{Int64}(len)\n    for (i, val) in\
    \ enumerate(arr)\n        insert!(heap, -val)\n    end\n    ans = Array{Int64}(k)\n\
    \    for i in 1:k\n        ans[i] = -remove!(heap)\n    end\n    return ans\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpteptrbgy.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpteptrbgy.jl:42\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: HeapArray\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpteptrbgy.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpteptrbgy.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpteptrbgy.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpteptrbgy.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: HeapArray not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpteptrbgy.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpteptrbgy.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpteptrbgy.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpteptrbgy.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: HeapArray not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpteptrbgy.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpteptrbgy.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpteptrbgy.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpteptrbgy.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ HeapArray not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ "
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    quicksort!(arr)\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp5ne2zbws.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp5ne2zbws.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: quicksort!\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp5ne2zbws.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ne2zbws.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ne2zbws.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5ne2zbws.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: quicksort! not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp5ne2zbws.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ne2zbws.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ne2zbws.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5ne2zbws.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: quicksort! not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp5ne2zbws.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ne2zbws.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ne2zbws.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5ne2zbws.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ quicksort! not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \   "
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr_maxs = Int64[]\n    while length(arr_maxs) < k\n        push!(arr_maxs,\
    \ maximum(arr))\n        deleteat!(arr, indmax(arr))\n    end\n    return sort(arr_maxs)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpbrughadj.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpbrughadj.jl:38\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpbrughadj.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpbrughadj.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbrughadj.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbrughadj.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpbrughadj.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpbrughadj.jl:25\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpbrughadj.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbrughadj.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbrughadj.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpbrughadj.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpbrughadj.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpbrughadj.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl"
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    heap = MaxHeap(arr[1:k])\n    for i = k+1:length(arr)\n        if arr[i]\
    \ < heap.data[1]\n            continue\n        end\n        push!(heap, arr[i])\n\
    \        pop!(heap)\n    end\n    return sort(heap.data)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp15thkl0e.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmp15thkl0e.jl:41\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp15thkl0e.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp15thkl0e.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp15thkl0e.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp15thkl0e.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp15thkl0e.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp15thkl0e.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp15thkl0e.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp15thkl0e.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp15thkl0e.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp15thkl0e.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp15thkl0e.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp15thkl0e.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    #push all elements into a min-heap\n    heap = MinHeap()\n    for element\
    \ in arr\n        push!(heap, element)\n    end\n    solution = Vector{Int64}()\n\
    \    #pop k elements off the heap, the next element will be the largest one in\
    \ the heap\n    #and add it to the solution\n    for i in 1:k\n        push!(solution,\
    \ pop!(heap))\n    end\n    return solution\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp9wg_vsju.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmp9wg_vsju.jl:44\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MinHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp9wg_vsju.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9wg_vsju.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9wg_vsju.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp9wg_vsju.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MinHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp9wg_vsju.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9wg_vsju.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9wg_vsju.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp9wg_vsju.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MinHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp9wg_vsju.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9wg_vsju.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9wg_vsju.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp9wg_vsju.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MinHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Initialize an empty vector\n    out = []\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprzpnqtc9.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprzpnqtc9.jl:1\n\
    in expression starting at /tmp/tmprzpnqtc9.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return []\n    end\n    heap = maxheap()\n    for i=1:k\
    \ \n        push!(heap, arr[i])\n    end\n    for i=k+1:length(arr)\n        if\
    \ heap[1] < arr[i]\n            pop!(heap)\n            push!(heap, arr[i])\n\
    \        end\n    end\n    sort(collect(heap))\nend\n```\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy6iv_jii.jl:41\nin expression starting at\
    \ /tmp/tmpy6iv_jii.jl:41\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    s = sort(arr)\n    return s[n-k+1:n]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978085
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # add code here\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpcqhux9j4.jl:33\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpcqhux9j4.jl:27\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcqhux9j4.jl:33 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcqhux9j4.jl:32\ntest set: Error
    During Test at /tmp/tmpcqhux9j4.jl:34\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object of type Nothing
    to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpcqhux9j4.jl:27\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcqhu'
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    @assert k <= length(arr) && k >= 0 \n    return [arr[i] for i in sortperm(arr,\
    \ rev=true)[1:k]]\nend\n \n\"\"\"\n    Given a vector arr of integers and a positive\
    \ integer k, return a sorted vector \n    of length k with the minimum k numbers\
    \ in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmlkv_7s8.jl:30\nin expression starting at\
    \ /tmp/tmpmlkv_7s8.jl:30\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # n = length(arr)\n    # k = min(k, n)\n    # heap = Array{Int64,1}(undef,\
    \ k)\n    # heap[1] = arr[1]\n    # j = 2\n    # while j <= k\n    #     heap[j]\
    \ = arr[j]\n    #     j += 1\n    # end\n    # heap = heapify(heap)\n    # for\
    \ i = k+1:n\n    #     if heap[1] < arr[i]\n    #         heap[1] = arr[i]\n \
    \   #         heap = heapify(heap)\n    #     end\n    # end\n    # sort(heap)\n\
    \    maximum(arr, k)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978090
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    N = length(arr)\n    heap = zeros(Int64, k)\n    indices = zeros(Int64, k)\n\
    \    heap[1] = arr[1]\n    indices[1] = 1\n    for i = 2:k\n        heap[i] =\
    \ arr[i]\n        indices[i] = i\n        heapify(heap, indices, i)\n    end\n\
    \    for i = k+1:N\n        if arr[i] > heap[1]\n            heap[1] = arr[i]\n\
    \            indices[1] = i\n            heapify(heap, indices, 1)\n        end\n\
    \    end\n    sortperm(heap, indices, k)\n    sort(arr[indices[1:k]])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp68r8vaff.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmp68r8vaff.jl:51\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: heapify\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp68r8vaff.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp68r8vaff.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp68r8vaff.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp68r8vaff.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: heapify not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp68r8vaff.jl:34\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp68r8vaff.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp68r8vaff.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp68r8vaff.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: heapify not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp68r8vaff.jl:40\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp68r8vaff.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp68r8vaff.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp68r8vaff.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ heapify not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659978089
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    h = []\n    arr = sort(arr)\n    arr = arr[end:-1:1]\n    for i in 1:k\n\
    \        push!(h, arr[i])\n    end\n    return sort(h)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978085
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array, get k number of max elements\n    sort!(arr)\n    return\
    \ arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978085
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # initialize an empty vector to store the maximum k numbers in arr\n    output\
    \ = Vector{Int64}(undef, k)\n    # loop through arr\n    for i = 1:length(arr)\n\
    \        # if ith number in arr is larger than the minimum in output\n       \
    \ if arr[i] > minimum(output)\n            # replace the minimum with arr[i]\n\
    \            output[output .== minimum(output)] = arr[i]\n        end\n    end\n\
    \    # sort output in ascending order\n    sort!(output)\n    # return output\n\
    \    return output\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp8hv05sa7.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmp8hv05sa7.jl:46\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp8hv05sa7.jl:33\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp8hv05sa7.jl:46 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp8hv05sa7.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp8hv05sa7.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  ArgumentError: indexed assignment with\
    \ a single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64)\n\
    \     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp8hv05sa7.jl:33\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp8hv05sa7.jl:47 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-le"
  timestamp: 1659978089
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    @assert k <= length(arr)\n    return sort(arr)[end - k + 1:end]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpea9xyx6r.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpea9xyx6r.jl:33\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: Int64[] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpea9xyx6r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpea9xyx6r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpea9xyx6r.jl:34\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: Int64[] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpea9xyx6r.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpea9xyx6r.jl:32\ntest set: Test Failed at /tmp/tmpea9xyx6r.jl:35\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: Int64[]\
    \ == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpea9xyx6r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpea9xyx6r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpea9xyx6r.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: Int64[] == [2, 20, 123]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpea9xyx6r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpea9xyx6r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpea9xyx6r.jl:37\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: Int64[] == [0, 1, 2, 20]\nStacktrace:"
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # k > length(arr)\n    if length(arr) < k\n        println(\"k is larger\
    \ than the length of arr\")\n        return arr\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvqtdkfa9.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvqtdkfa9.jl:1\n\
    in expression starting at /tmp/tmpvqtdkfa9.jl:1\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sorted = sort(arr)\n    return sorted[end-k+1:end]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    quickselect!(arr, k)\n    return arr[n-k+1:n]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp_k2q4pne.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp_k2q4pne.jl:35\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: quickselect!\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp_k2q4pne.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_k2q4pne.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_k2q4pne.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_k2q4pne.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: quickselect! not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_k2q4pne.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_k2q4pne.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_k2q4pne.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_k2q4pne.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: quickselect!\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp_k2q4pne.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_k2q4pne.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_k2q4pne.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_k2q4pne.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ quickselect! not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::In"
  timestamp: 1659978090
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    idx = sortperm(arr)\n    return arr[idx[end-k+1:end]]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978087
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    #\n    # YOUR CODE HERE\n    #\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpk48pymhh.jl:35\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpk48pymhh.jl:29\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk48pymhh.jl:35 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk48pymhh.jl:34\ntest set: Error
    During Test at /tmp/tmpk48pymhh.jl:36\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object of type Nothing
    to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpk48pymhh.jl:29\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk48p'
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    time complexity: O(n)\n    space complexity: O(n)\n    \"\"\"\
    \n    heap = Heap()\n    for i in 1:length(arr)\n        heap.push(arr[i])\n \
    \   end\n    res = []\n    for i in 1:k\n        push!(res, heap.pop())\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp766yprdv.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmp766yprdv.jl:45\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp766yprdv.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp766yprdv.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp766yprdv.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp766yprdv.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp766yprdv.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp766yprdv.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp766yprdv.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp766yprdv.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp766yprdv.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp766yprdv.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp766yprdv.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp766yprdv.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ Heap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmp766yprd"
  timestamp: 1659978090
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr[sortperm(arr, rev=true)[1:k]]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnlur1bw_.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpnlur1bw_.jl:33\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnlur1bw_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnlur1bw_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnlur1bw_.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnlur1bw_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnlur1bw_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnlur1bw_.jl:37\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnlur1bw_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnlur1bw_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnlur1bw_.jl:38\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnlur1bw_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnlur1bw_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnlur1bw_.jl:39\n  Expression: "
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 1\n        maximum(arr)\n    else\n        push!(arr, maximum(arr))\n\
    \        maximum(arr[1:end-1], k-1)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpnquswoxb.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpnquswoxb.jl:38\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpnquswoxb.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpnquswoxb.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnquswoxb.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnquswoxb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpnquswoxb.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpnquswoxb.jl:25\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpnquswoxb.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnquswoxb.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnquswoxb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpnquswoxb.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpnquswoxb.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpnquswoxb.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  timestamp: 1659978091
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr1 = sort(arr)\n    arr2 = arr1[end-k+1:end]\n    return arr2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978087
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    @assert k <= length(arr)\n    sort(arr)[end - k + 1:end]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr2 = []\n    for i in arr\n        push!(arr2, i)\n    end\n    sort!(arr2)\n\
    \    answer = []\n    for i in 1:k\n        push!(answer, arr2[i])\n    end\n\
    \    return answer\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw22ckvl0.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpw22ckvl0.jl:43\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw22ckvl0.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw22ckvl0.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpw22ckvl0.jl:44\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw22ckvl0.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpw22ckvl0.jl:41\ntest set: Test Failed at /tmp/tmpw22ckvl0.jl:45\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw22ckvl0.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpw22ckvl0.jl:41\ntest set: Test Failed at /tmp/tmpw22ckvl0.jl:46\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw22ckvl0.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw22ckvl0.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpw22ckvl0.jl:48\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, "
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    end\n    if k == length(arr)\n\
    \        return sort(arr)\n    end\n    push!(arr, -Inf)\n    sorted = []\n  \
    \  for i in 1:k\n        index = argmax(arr)\n        push!(sorted, arr[index])\n\
    \        arr[index] = -Inf\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpu9c6bkvm.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpu9c6bkvm.jl:47\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  InexactError: Int64(-Inf)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] push!(a::Vector{Int64}, item::Float64)\n\
    \     @ Base ./array.jl:994\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n  \
    \   @ Main /tmp/tmpu9c6bkvm.jl:32\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpu9c6bkvm.jl:47 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpu9c6bkvm.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpu9c6bkvm.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  InexactError: Int64(-Inf)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] push!(a::Vector{Int64}, item::Float64)\n\
    \     @ Base ./array.jl:994\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n  \
    \   @ Main /tmp/tmpu9c6bkvm.jl:32\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpu9c6bkvm.jl:48 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpu9c6bkvm.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpu9c6bkvm.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  InexactError:\
    \ Int64(-Inf)\n  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n\
    \   [2] convert\n     @ ./number.jl:7 [inlined]\n   [3] push!(a::Vector{Int64},\
    \ item::Float64)\n     @ Base ./array.jl:994\n   [4] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpu9c6bkvm.jl:32\n   [5] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   "
  timestamp: 1659978090
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if n == k\n        return sort(arr)\n    end\n    left\
    \ = 1\n    right = k\n    while left < right\n        mid = (left + right) \xF7\
    \ 2\n        if check(arr, mid, k)\n            right = mid\n        else\n  \
    \          left = mid + 1\n        end\n    end\n    result = zeros(Int64, k)\n\
    \    idx = 0\n    for i = 1:n\n        if arr[i] > left - 1\n            result[idx\
    \ + 1] = arr[i]\n            idx += 1\n        end\n        if idx == k\n    \
    \        break\n        end\n    end\n    sort(result)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp0bn358bn.jl:55

    '
  stdout: "test set: Error During Test at /tmp/tmp0bn358bn.jl:59\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: check not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp0bn358bn.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0bn358bn.jl:59 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0bn358bn.jl:57\ntest set:\
    \ Error During Test at /tmp/tmp0bn358bn.jl:61\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ check not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmp0bn358bn.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0bn358bn.jl:61 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0bn358bn.jl:57\ntest set:\
    \ Error During Test at /tmp/tmp0bn358bn.jl:62\n  Test threw exception\n  Expression:\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: check\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp0bn358bn.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0bn358bn.jl:62 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0bn358bn.jl:57\ntest set:\
    \ Error During Test at /tmp/tmp0bn358bn.jl:64\n  Test threw exception\n  Expression:\
    \ candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: check not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Ma"
  timestamp: 1659978091
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # convert to an array for more efficient sorting\n    return sort(Array(arr))[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    k > 0 || throw(ArgumentError(\"k must be positive integer\"))\n    k <= length(arr)\
    \ || throw(ArgumentError(\"k must be <= length(arr)\"))\n    arr = sort(arr, rev=true)\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpskzcaum9.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpskzcaum9.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskzcaum9.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskzcaum9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpskzcaum9.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskzcaum9.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskzcaum9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpskzcaum9.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskzcaum9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskzcaum9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpskzcaum9.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskzcaum9.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskzcaum9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpskzcaum9.jl:42\n  Expression: "
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sort(arr, rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3agtrr5o.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp3agtrr5o.jl:33\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:37\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:38\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:39\n  Expression: "
  timestamp: 1659978082
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    # first sort the array \n    sort!(arr)\n    # return\
    \ last k elements\n    return arr[n-k+1:n]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978088
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr_sorted = sort(arr)\n    return arr_sorted[end-k+1:end]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978088
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    n_v = n - k\n    indices = sortperm(arr, rev=true)[1:k]\n\
    \    return sort(arr[indices])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    @assert size(arr, 1) > 0\n    @assert k > 0\n    @assert size(arr, 1) >=\
    \ k\n    # ----------------------------\n    # !!! TYPE YOUR SOLUTION HERE\n \
    \   @assert false \n    # ----------------------------\nend\n\"\"\"\n    Given\
    \ an integer arr, you must increment every element in the array by 1.\n    Return\
    \ the same array after the change.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugp23eav.jl:34\nin expression starting at\
    \ /tmp/tmpugp23eav.jl:34\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ak4bxy4.jl:1\nin expression starting at /tmp/tmp4ak4bxy4.jl:1\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Your Code Here\nend\n \n \n \n \n\"\"\"\n    Given a 3 x 3 matrix named\
    \ A, write a function to return a vector of size 3 \n    containing the sum of\
    \ values in each row of A.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpol04iqk8.jl:32\nin expression starting at /tmp/tmpol04iqk8.jl:32\n"
  stdout: ''
  timestamp: 1659978090
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    arr, k: length of Vector arr, number of top numbers in arr\n\
    \    \"\"\"\n    n = length(arr)\n    sort!(arr)\n    if k == 0\n        return\
    \ []\n    elseif k == n\n        return arr\n    else\n        newarr = [arr[i]\
    \ for i = 1:k]\n        for i = k+1:n\n            if arr[i] > newarr[1]\n   \
    \             newarr[1] = arr[i]\n                sort!(newarr)\n            end\n\
    \        end\n        return newarr\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    Returns a sorted vector with the maximum k numbers in arr.\n\
    \    \"\"\"\n    if k == 0\n        return []\n    end\n    i = 1\n    while k\
    \ > 0 && i <= length(arr)\n        max = i\n        j = i + 1\n        while j\
    \ <= length(arr)\n            if arr[j] > arr[max]\n                max = j\n\
    \            end\n            j += 1\n        end\n        temp = arr[i]\n   \
    \     arr[i] = arr[max]\n        arr[max] = temp\n        k -= 1\n        i +=\
    \ 1\n    end\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_g34mgzz.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmp_g34mgzz.jl:55\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: Int64[] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_g34mgzz.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_g34mgzz.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp_g34mgzz.jl:56\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: Int64[] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_g34mgzz.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_g34mgzz.jl:54\ntest set: Test Failed at /tmp/tmp_g34mgzz.jl:57\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: Int64[]\
    \ == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_g34mgzz.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_g34mgzz.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp_g34mgzz.jl:58\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: Int64[] == [2, 20, 123]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_g34mgzz.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_g34mgzz.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp_g34mgzz.jl:59\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: Int64[] == [0, 1, 2, 20]\nStacktrace:"
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    push!(arr, float(\"inf\"))\n    sort(arr[1:k])\nend\n\
    arr = [5, 6, 1, 2, 7, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2,\
    \ 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2,\
    \ 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2,\
    \ 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2,\
    \ 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2,\
    \ 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2,\
    \ 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2,\
    \ 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2,\
    \ 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 4, 2, 1, 2, 3, 2,\
    \ 1, 2, 4, 2, 1, 2, 3\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzw1dvsb3.jl:31\nin expression starting at\
    \ /tmp/tmpzw1dvsb3.jl:31\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978080
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sorting the vector in place\n    sort!(arr)\n    # Return last k elements\n\
    \    return arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Init of result vector with [-inf] * k\n    res = fill(-typemax(Int64),\
    \ k)\n    for i in 1:length(arr)\n        # If the max of the result vector is\
    \ less than the i'th element of arr\n        # Then modify the result vector to\
    \ contain the i'th element of arr, \n        # and make sure that the result vector\
    \ is sorted\n        if res[end] < arr[i]\n            res[end] = arr[i]\n   \
    \         res = sort(res)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp9nytoq48.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp9nytoq48.jl:44\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-9223372036854775807, -9223372036854775807,\
    \ 5] == [-4, -3, 5]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9nytoq48.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9nytoq48.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp9nytoq48.jl:45\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-9223372036854775807, 4] == [4, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9nytoq48.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9nytoq48.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp9nytoq48.jl:47\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-9223372036854775807, -9223372036854775807,\
    \ 123] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9nytoq48.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9nytoq48.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp9nytoq48.jl:48\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-9223372036854775807, -9223372036854775807,\
    \ -9223372036854775807, 20] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9nytoq48.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp"
  timestamp: 1659978092
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sort(arr)[end - k + 1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    k = min(k, length(arr)) # k cannot be larger than arr length\n    # reverse\
    \ sort and filter array\n    filter!(a -> a >= maximum(arr), sort(arr, rev=true)[1:k])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmph22tqvv_.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmph22tqvv_.jl:35\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmph22tqvv_.jl:25\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{Vector{Int64}})(a::Int64)\n     @ Main /tmp/tmph22tqvv_.jl:28\n\
    \   [2] filter!(f::var\"#1#2\"{Vector{Int64}}, a::Vector{Int64})\n     @ Base\
    \ ./array.jl:2529\n   [3] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmph22tqvv_.jl:28\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmph22tqvv_.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmph22tqvv_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmph22tqvv_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmph22tqvv_.jl:25\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\"{Vector{Int64}})(a::Int64)\n     @ Main /tmp/tmph22tqvv_.jl:28\n\
    \   [2] filter!(f::var\"#1#2\"{Vector{Int64}}, a::Vector{Int64})\n     @ Base\
    \ ./array.jl:2529\n   [3] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmph22tqvv_.jl:28\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmph22tqvv_.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmph22tqvv_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmph22tqvv_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vecto"
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    for i in k:n\n        for j in 1:i-1\n            if\
    \ arr[j] > arr[j+1]\n                tmp = arr[j]\n                arr[j] = arr[j+1]\n\
    \                arr[j+1] = tmp\n            end\n        end\n    end\n    return\
    \ arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp707xyt5s.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp707xyt5s.jl:44\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp707xyt5s.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp707xyt5s.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp707xyt5s.jl:45\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp707xyt5s.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp707xyt5s.jl:42\ntest set: Test Failed at /tmp/tmp707xyt5s.jl:46\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, 0, 1] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp707xyt5s.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp707xyt5s.jl:42\ntest set: Test Failed at /tmp/tmp707xyt5s.jl:47\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, 0, 1, 2] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp707xyt5s.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp707xyt5s.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp707xyt5s.jl:48\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluat"
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    @assert length(arr) >= 1 && length(arr) <= 1000\n    @assert all(e \u2208\
    \ -1000:1000 for e in arr)\n    @assert k >= 1 && k <= length(arr)\n    unique!(sort(arr,\
    \ rev=true)[1:k])\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpmt4qg_0_.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpmt4qg_0_.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmt4qg_0_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmt4qg_0_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpmt4qg_0_.jl:37\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmt4qg_0_.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmt4qg_0_.jl:35\ntest set: Test Failed at /tmp/tmpmt4qg_0_.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmt4qg_0_.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmt4qg_0_.jl:35\ntest set: Test Failed at /tmp/tmpmt4qg_0_.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmt4qg_0_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmt4qg_0_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpmt4qg_0_.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Eva"
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    idx = sortperm(arr, rev=true)\n    return arr[idx[1:k]]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqgbjg_ao.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpqgbjg_ao.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgbjg_ao.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgbjg_ao.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqgbjg_ao.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgbjg_ao.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgbjg_ao.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqgbjg_ao.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgbjg_ao.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgbjg_ao.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqgbjg_ao.jl:39\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgbjg_ao.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgbjg_ao.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqgbjg_ao.jl:40\n  Expression: "
  timestamp: 1659978092
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    heap = MinHeap()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps4ktmrvb.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps4ktmrvb.jl:1\n\
    in expression starting at /tmp/tmps4ktmrvb.jl:1\n"
  stdout: ''
  timestamp: 1659978090
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sorted_arr = sort(arr; rev=true)\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptxmkpdtv.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmptxmkpdtv.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxmkpdtv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxmkpdtv.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptxmkpdtv.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxmkpdtv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxmkpdtv.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptxmkpdtv.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxmkpdtv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxmkpdtv.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptxmkpdtv.jl:39\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxmkpdtv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxmkpdtv.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptxmkpdtv.jl:40\n  Expression: "
  timestamp: 1659978092
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    #initialize a dictionary\n    freq = Dict()\n    #iterate through the array\
    \ and update the dictionary\n    for i = 1:length(arr)\n        if haskey(freq,\
    \ arr[i])\n            freq[arr[i]] += 1\n        else\n            freq[arr[i]]\
    \ = 1\n        end\n    end\n    #sort the dictionary\n    ordered = sort(collect(freq),\
    \ by = x -> x[2], rev = true)\n    #initialize a vector to store the max k elements\n\
    \    max_ele = Vector{Int64}()\n    #iterate through the ordered dictionary \n\
    \    for i = 1:k\n        push!(max_ele, ordered[i][1])\n    end\n    return max_ele\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpd68tlguz.jl:51\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpd68tlguz.jl:51 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpd68tlguz.jl:50\ntest set: Test Failed
    at /tmp/tmpd68tlguz.jl:52\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [4, -4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpd68tlguz.jl:52 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpd68tlguz.jl:50\ntest set: Test Failed
    at /tmp/tmpd68tlguz.jl:54\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [0, 123, -123] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpd68tlguz.jl:54 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpd68tlguz.jl:50\ntest set: Test Failed
    at /tmp/tmpd68tlguz.jl:55\n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4)
    == [0, 1, 2, 20]\n   Evaluated: [0, -123, 20, 2] == [0, 1, 2, 20]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpd68tlguz.jl:55 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpd68tlguz.jl:50\ntest set: Error
    During Test at /tmp/tmpd68tlguz.jl:56\n  Test threw exception\'
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # initialize priority queue\n    pq = PriorityQueue()\n    # push all elements\
    \ into priority queue\n    for i in 1:length(arr)\n        push!(pq, (arr[i],\
    \ i))\n    end\n    # pop k times\n    result = []\n    for i in 1:k\n       \
    \ popped = pop!(pq)\n        push!(result, popped[1])\n    end\n    # return resulting\
    \ array\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpakat68li.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpakat68li.jl:46\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: PriorityQueue\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpakat68li.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakat68li.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpakat68li.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpakat68li.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: PriorityQueue not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpakat68li.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakat68li.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpakat68li.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpakat68li.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: PriorityQueue\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpakat68li.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakat68li.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpakat68li.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpakat68li.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ PriorityQueue not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k"
  timestamp: 1659978093
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr = sort(arr, rev=true)\n    return arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm_zto28a.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpm_zto28a.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_zto28a.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_zto28a.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpm_zto28a.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_zto28a.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_zto28a.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpm_zto28a.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_zto28a.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_zto28a.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpm_zto28a.jl:39\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_zto28a.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_zto28a.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpm_zto28a.jl:40\n  Expression: "
  timestamp: 1659978092
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr = sort(arr)\n    return arr[length(arr) - k + 1:end]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978090
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array from largest to smallest\n    sorted_arr = sort(arr, rev=true)\n\
    \    # Return the first k items of the sorted array\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp94v_en3z.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp94v_en3z.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94v_en3z.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94v_en3z.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp94v_en3z.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94v_en3z.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94v_en3z.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp94v_en3z.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94v_en3z.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94v_en3z.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp94v_en3z.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94v_en3z.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94v_en3z.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp94v_en3z.jl:42\n  Expression: "
  timestamp: 1659978092
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array in descending order\n    sort!(arr, rev=true)\n    # Return\
    \ the first k values\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3d7ol767.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp3d7ol767.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3d7ol767.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3d7ol767.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3d7ol767.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3d7ol767.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3d7ol767.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3d7ol767.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3d7ol767.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3d7ol767.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3d7ol767.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3d7ol767.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3d7ol767.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3d7ol767.jl:42\n  Expression: "
  timestamp: 1659978092
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # First we sort the array in ascending order.\n    sorted_arr = sort(arr)\n\
    \    # Now we want to return the largest k elements, so we return the last k elements.\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978090
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    p = n - k + 1\n    temp = Vector{Int64}(undef, p)\n\
    \    for i in 1:p\n        temp[i] = maximum(arr[i:i+k-1])\n    end\n    return\
    \ temp\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp890va6b0.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp890va6b0.jl:39\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp890va6b0.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp890va6b0.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp890va6b0.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp890va6b0.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp890va6b0.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp890va6b0.jl:25\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp890va6b0.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp890va6b0.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp890va6b0.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp890va6b0.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp890va6b0.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp890va6b0.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl"
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    isempty(arr) && return arr\n    n = length(arr)\n    n == k && return sort(arr)\n\
    \    k == 1 && return [maximum(arr)]\n    half_k = k >> 1\n    left_vec = maximum(arr[1:half_k],\
    \ half_k)\n    right_vec = maximum(arr[n-half_k+1:n], half_k)\n    merge(left_vec,\
    \ right_vec)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpkl75tdvr.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpkl75tdvr.jl:41\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching\
    \ merge(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    merge(!Matched::NamedTuple,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/namedtuple.jl:288\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpkl75tdvr.jl:33\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkl75tdvr.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkl75tdvr.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpkl75tdvr.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpkl75tdvr.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpkl75tdvr.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkl75tdvr.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkl75tdvr.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpkl75tdvr.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: no\
    \ method matching merge(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    merge(!Matched::NamedTuple, ::Any) at ~/.conda/envs/polyglot/share/julia/base/namedtuple.jl:288\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpkl75tdvr.jl:33\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/s"
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return maximum_impl_2(arr, k)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpa3kq8xqc.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpa3kq8xqc.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum_impl_2\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpa3kq8xqc.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa3kq8xqc.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa3kq8xqc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpa3kq8xqc.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_impl_2 not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpa3kq8xqc.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa3kq8xqc.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa3kq8xqc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpa3kq8xqc.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_impl_2\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpa3kq8xqc.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa3kq8xqc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa3kq8xqc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpa3kq8xqc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum_impl_2 not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64"
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    s = sort(arr, rev=true)\n    return s[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3u62pmu1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp3u62pmu1.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3u62pmu1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3u62pmu1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3u62pmu1.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3u62pmu1.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3u62pmu1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3u62pmu1.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3u62pmu1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3u62pmu1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3u62pmu1.jl:39\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3u62pmu1.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3u62pmu1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3u62pmu1.jl:40\n  Expression: "
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 \n        error(\"The value of k must be a positive integer.\")\n\
    \    end\n    if k >= length(arr)\n        return sort(arr, rev=true)\n    end\n\
    \    ind = Vector{Int64}(undef, k)\n    ind[1] = 1\n    for i in 2:k\n       \
    \ if arr[i] > arr[ind[1]]\n            ind[1] = i\n        elseif arr[i] <= arr[ind[end]]\n\
    \            ind[end + 1] = i\n        else\n            l = 1\n            r\
    \ = length(ind)\n            while l < r\n                m = (l + r) >> 1\n \
    \               if arr[i] > arr[ind[m]]\n                    r = m\n         \
    \       else\n                    l = m + 1\n                end\n           \
    \ end\n            ind[l] = i\n        end\n    end\n    ans = Vector{Int64}(undef,\
    \ k)\n    for i in 1:k\n        ans[i] = arr[ind[i]]\n    end\n    return sort(ans,\
    \ rev=true)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp36zmg4ny.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmp36zmg4ny.jl:64\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp36zmg4ny.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp36zmg4ny.jl:63\ntest set: Error\
    \ During Test at /tmp/tmp36zmg4ny.jl:65\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [47614906111408]\n  Stacktrace:\n   [1] getindex\n  \
    \   @ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmp36zmg4ny.jl:37\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp36zmg4ny.jl:65 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp36zmg4ny.jl:63\ntest set:\
    \ Test Failed at /tmp/tmp36zmg4ny.jl:66\n  Expression: candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp36zmg4ny.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp36zmg4ny.jl:63\ntest set: Error During Test\
    \ at /tmp/tmp36zmg4ny.jl:67\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  BoundsError: attempt to access\
    \ 7-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmp36zmg4ny.jl:37\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/s"
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    s = sort(arr, rev=true)\n    return s[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3u62pmu1.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp3u62pmu1.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3u62pmu1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3u62pmu1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3u62pmu1.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3u62pmu1.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3u62pmu1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3u62pmu1.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3u62pmu1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3u62pmu1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3u62pmu1.jl:39\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3u62pmu1.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3u62pmu1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3u62pmu1.jl:40\n  Expression: "
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k >= length(arr)\n        return sort(arr)\n    end\n    heap = Vector{Int64}(undef,\
    \ k)\n    for i in 1:k\n        heap[i] = arr[i]\n    end\n    sort!(heap)\n \
    \   for i in k+1:length(arr)\n        if arr[i] > heap[1]\n            heap[1]\
    \ = arr[i]\n            sort!(heap)\n        end\n    end\n    return heap\nend\n\
    maximum([-3, -4, 5], 3)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp2qv4cixk.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmp2qv4cixk.jl:60\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n\
    \  BoundsError: attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmp2qv4cixk.jl:35\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp2qv4cixk.jl:60 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2qv4cixk.jl:49\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   10      1     11\n"
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    h = BinaryHeap()\n    for a in arr\n        if length(h) < k\n          \
    \  push!(h, a)\n        elseif peek(h) < a\n            pop!(h)\n            push!(h,\
    \ a)\n        end\n    end\n    return sort(h, rev=true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpi64laka4.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpi64laka4.jl:42\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpi64laka4.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi64laka4.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi64laka4.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpi64laka4.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: BinaryHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpi64laka4.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi64laka4.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi64laka4.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpi64laka4.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: BinaryHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpi64laka4.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi64laka4.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi64laka4.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpi64laka4.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ BinaryHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \   "
  timestamp: 1659978095
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Insert your code here\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpmwd1wips.jl:33\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmwd1wips.jl:27\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmwd1wips.jl:33 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmwd1wips.jl:32\ntest set: Error
    During Test at /tmp/tmpmwd1wips.jl:34\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object of type Nothing
    to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmwd1wips.jl:27\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmwd1'
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # @inbounds arr\n    # @inbounds k\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpea31e6my.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpea31e6my.jl:1\n\
    in expression starting at /tmp/tmpea31e6my.jl:1\n"
  stdout: ''
  timestamp: 1659978092
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort\n    arr = sort(arr)\n    # get the last k elements\n    return arr[(end-k+1):end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978092
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    heap = PriorityQueue()\n    for num in arr\n        if length(heap) < k\n\
    \            push!(heap, num)\n        elseif num > peek(heap)\n            pop!(heap)\n\
    \            push!(heap, num)\n        end\n    end\n    return sort(heap)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpuzzwx7rl.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpuzzwx7rl.jl:42\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: PriorityQueue\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpuzzwx7rl.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuzzwx7rl.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuzzwx7rl.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpuzzwx7rl.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: PriorityQueue not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpuzzwx7rl.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuzzwx7rl.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuzzwx7rl.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpuzzwx7rl.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: PriorityQueue\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpuzzwx7rl.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuzzwx7rl.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuzzwx7rl.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpuzzwx7rl.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ PriorityQueue not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k"
  timestamp: 1659978095
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end - k + 1:end]\nend\nmaximum([-3, -4, 5], 3)\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978092
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr[sortperm(arr)[end-k+1:end]]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr, by=x->-x)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3iq4yxcu.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp3iq4yxcu.jl:33\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3iq4yxcu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3iq4yxcu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3iq4yxcu.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3iq4yxcu.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3iq4yxcu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3iq4yxcu.jl:37\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3iq4yxcu.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3iq4yxcu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3iq4yxcu.jl:38\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3iq4yxcu.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3iq4yxcu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3iq4yxcu.jl:39\n  Expression: "
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    k = minimum(k, length(arr))\n    push!(arr, typemax(Int64))\n    @assert\
    \ k > 0\n    r = @inbounds zeros(Int64, k)\n    pos = @inbounds zeros(Int64, k)\n\
    \    mask = @inbounds zeros(Int64, length(arr))\n    for i = 1:k\n        for\
    \ j = 1:length(arr)\n            if mask[j] == 0 && arr[j] > r[i]\n          \
    \      r[i] = arr[j]\n                pos[i] = j\n            end\n        end\n\
    \        mask[pos[i]] = 1\n    end\n    return r[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpvvkr_8m7.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmpvvkr_8m7.jl:48\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpvvkr_8m7.jl:26\n   [6] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmpvvkr_8m7.jl:48 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpvvkr_8m7.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpvvkr_8m7.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n\
    \     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpvvkr_8m7.jl:26\n   [6] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmpvvkr_8m7.jl:49 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpv"
  timestamp: 1659978096
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    @assert n >= k\n    function _maximum(arr::Vector{Int64},\
    \ k::Int64)::Vector{Int64}\n        if k == 1\n            return [maximum(arr)]\n\
    \        else\n            j = searchsortedlast(arr, maximum(arr[1:n-k+1]))\n\
    \            return [maximum(arr[1:j])] * _maximum(arr[j+1:end], k-1)\n      \
    \  end\n    end\n    return _maximum(arr, k)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.\nin expression starting at /tmp/tmp_btluvk1.jl:40\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmp_btluvk1.jl:43\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    no method matching maximum(::Vector{Int64})\n  You may have intended to import
    Base.maximum\n  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64)
    at /tmp/tmp_btluvk1.jl:25\n  Stacktrace:\n   [1] (::var"#_maximum#1"{Int64})(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp_btluvk1.jl:32\n   [2] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp_btluvk1.jl:36\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp_btluvk1.jl:43 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp_btluvk1.jl:42\ntest set: Error During Test at
    /tmp/tmp_btluvk1.jl:44\n  Test threw exception\n  Expression: candidate([4, -4,
    4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Int64})\n  You
    may have intended to import Base.maximum\n  Closest candidates are:\n    maximum(::Vector{Int64},
    !Matched::Int64) at /tmp/tmp_btluvk1.jl:25\n  Stacktrace:\n   [1] (::var"#_maximum#1"{Int64})(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp_btluvk1.jl:32\n   [2] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp_btluvk1.jl:36\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp_btluvk1.jl:44 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp_btluvk1.jl:42\ntest set: Error During Test at
    /tmp/tmp_btluvk1.jl:45\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching maximum(::Vector{Int64})\n  You
    may have intended to import Base.maximum\n  Closest candidates are:\n    maximum'
  timestamp: 1659978097
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Sort the array and return the k elements from the end.\n    sort(arr)[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978092
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Instantiate a vector of size k. Fill with Inf to start.\n    maxVec = fill(Inf,\
    \ k)\n    # Loop through arr.\n    for number in arr\n        # Loop through maxVec.\n\
    \        for i in 1:k\n            # If we find a larger number than current maxVec\
    \ value, update it.\n            if number > maxVec[i]\n                maxVec[i]\
    \ = number\n                # Break the loop.\n                break\n       \
    \     end\n        end\n    end\n    # Return the vector.\n    return sort(maxVec)\n\
    end\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: InexactError: Int64(Inf)\nStacktrace:\n  [1] Int64\n\
    \    @ ./float.jl:812 [inlined]\n  [2] convert\n    @ ./number.jl:7 [inlined]\n\
    \  [3] setindex!\n    @ ./array.jl:903 [inlined]\n  [4] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{Float64}, soffs::Int64, n::Int64)\n    @ Base ./array.jl:253\n\
    \  [5] unsafe_copyto!\n    @ ./array.jl:307 [inlined]\n  [6] _copyto_impl!\n \
    \   @ ./array.jl:331 [inlined]\n  [7] copyto!\n    @ ./array.jl:317 [inlined]\n\
    \  [8] copyto!\n    @ ./array.jl:343 [inlined]\n  [9] copyto_axcheck!\n    @ ./abstractarray.jl:1104\
    \ [inlined]\n [10] Vector{Int64}(x::Vector{Float64})\n    @ Base ./array.jl:563\n\
    \ [11] convert\n    @ ./array.jl:554 [inlined]\n [12] maximum(arr::Vector{Int64},\
    \ k::Int64)\n    @ Main /tmp/tmp_vdcfsr9.jl:41\n [13] top-level scope\n    @ /tmp/tmp_vdcfsr9.jl:43\n\
    in expression starting at /tmp/tmp_vdcfsr9.jl:43\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    return sort(arr)[n-k+1:n]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr = sort(arr)\n    len = length(arr)\n    new_arr = Array{Int64}(undef,\
    \ k)\n    for i in 1:k\n        new_arr[i] = arr[len-i+1]\n    end\n    return\
    \ new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1ezpdegl.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp1ezpdegl.jl:39\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ezpdegl.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ezpdegl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ezpdegl.jl:42\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ezpdegl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ezpdegl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ezpdegl.jl:43\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ezpdegl.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ezpdegl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ezpdegl.jl:44\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ezpdegl.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ezpdegl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ezpdegl.jl:45\n  Expression: "
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr[sortperm(arr, rev=true)[1:k]]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnlur1bw_.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpnlur1bw_.jl:33\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnlur1bw_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnlur1bw_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnlur1bw_.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnlur1bw_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnlur1bw_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnlur1bw_.jl:37\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnlur1bw_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnlur1bw_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnlur1bw_.jl:38\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnlur1bw_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnlur1bw_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnlur1bw_.jl:39\n  Expression: "
  timestamp: 1659978089
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sorted_arr = sort(arr, rev=true)\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgfuksz37.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpgfuksz37.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfuksz37.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfuksz37.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgfuksz37.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfuksz37.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfuksz37.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgfuksz37.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfuksz37.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfuksz37.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgfuksz37.jl:39\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfuksz37.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfuksz37.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgfuksz37.jl:40\n  Expression: "
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Check for trivial cases\n    if k == 0\n        return Int64[]\n    elseif\
    \ k == 1\n        return [maximum(arr)]\n    elseif k == length(arr)\n       \
    \ return sort(arr)\n    end\n    \n    # Pick a pivot element\n    pivot_value\
    \ = arr[rand(1:length(arr))]\n    \n    # Partition array into two, with one being\
    \ greater than the pivot\n    partitioned_arr = [i for i in arr if i >= pivot_value]\n\
    \    \n    # If partitioned array length is less than k, then we want another\
    \ partition\n    if length(partitioned_arr) < k\n        return maximum(arr, k)\n\
    \    elseif length(partitioned_arr) == k\n        return sort(partitioned_arr)\n\
    \    else # length(partitioned_arr) > k\n        return maximum(partitioned_arr,\
    \ k)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp2yrlgk4s.jl:52

    '
  stdout: "test set: Error During Test at /tmp/tmp2yrlgk4s.jl:57\n  Test threw exception\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no\
    \ method matching maximum(::Vector{Int64})\n  You may have intended to import\
    \ Base.maximum\n  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmp2yrlgk4s.jl:25\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmp2yrlgk4s.jl:30\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp2yrlgk4s.jl:57 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2yrlgk4s.jl:54\ntest set:\
    \ Error During Test at /tmp/tmp2yrlgk4s.jl:62\n  Test threw exception\n  Expression:\
    \ candidate([1, 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp2yrlgk4s.jl:25\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp2yrlgk4s.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2yrlgk4s.jl:62 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2yrlgk4s.jl:54\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    9      2     11\n"
  timestamp: 1659978097
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \n    # Create empty list to store the maximum numbers\n    max_list = []\n\
    \    \n    # Iterate through arr, keeping track of the last k elements seen\n\
    \    for i in 1:length(arr)\n        # If max_list isn't full, append the current\
    \ number\n        if length(max_list) < k\n            push!(max_list, arr[i])\n\
    \        # If max_list is full\n        else\n            # Delete the first number\
    \ in max_list\n            deleteat!(max_list, 1)\n            # If current number\
    \ is larger than the first element in max_list, replace it\n            if max_list[1]\
    \ < arr[i]\n                max_list[1] = arr[i]\n            end\n        end\n\
    \    end\n    \n    # Return the sorted vector\n    sort(max_list)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpiycmstx0.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmpiycmstx0.jl:55\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiycmstx0.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpiycmstx0.jl:53\ntest set: Error During Test\
    \ at /tmp/tmpiycmstx0.jl:56\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access 0-element Vector{Any}\
    \ at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpiycmstx0.jl:40\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiycmstx0.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiycmstx0.jl:53\ntest set:\
    \ Test Failed at /tmp/tmpiycmstx0.jl:57\n  Expression: candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-3, 1, 20] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiycmstx0.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiycmstx0.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpiycmstx0.jl:58\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-3, 0, 1, 20] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiycmstx0.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te"
  timestamp: 1659978097
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    k < n && quickselect!(arr, n, k + 1)\n    return arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmphgppealp.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmphgppealp.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgppealp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgppealp.jl:34\ntest set: Error\
    \ During Test at /tmp/tmphgppealp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: quickselect! not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmphgppealp.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphgppealp.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgppealp.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphgppealp.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: quickselect!\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmphgppealp.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphgppealp.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgppealp.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphgppealp.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ quickselect! not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmphgppealp.jl:27\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te"
  timestamp: 1659978097
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # YOUR CODE HERE\n    k = min(k, length(arr))\n    res = sort(arr)[end-k+1:end]\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978094
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if k < 1\n        return []\n    end\n    if k == 1\n\
    \        return findmax(arr)[1]\n    end\n    heap = Base.BinaryHeap{Int64}(arr[1:k])\n\
    \    for i in (k+1):n\n        if arr[i] > heap.min\n            pop!(heap)\n\
    \            push!(heap, arr[i])\n        end\n    end\n    return sort(heap,\
    \ rev=true)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp1k2ec7nb.jl:47\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError:
    BinaryHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmp1k2ec7nb.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1k2ec7nb.jl:47 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1k2ec7nb.jl:46\ntest set: Error
    During Test at /tmp/tmp1k2ec7nb.jl:48\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp1k2ec7nb.jl:33\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1k2ec7nb.jl:48 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1k2ec7nb.jl:46\ntest set: Error
    During Test at /tmp/tmp1k2ec7nb.jl:49\n  Test threw exception\n  Expression: candidate([-3,
    2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: Cannot `convert` an object of type
    Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp1k2ec7nb.jl:31\n   [2]
    macro expansion\n     @ ~/.conda/en'
  timestamp: 1659978098
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array, then reverse it and return the first k elements\n    sort(arr)[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978094
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    copy_arr = copy(arr)\n    arr_length = length(copy_arr)\n    sort!(copy_arr)\n\
    \    if k >= arr_length\n        return copy_arr\n    else\n        return copy_arr[arr_length-k+1:arr_length]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpapc91i9j.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpapc91i9j.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpapc91i9j.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpapc91i9j.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpapc91i9j.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpapc91i9j.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpapc91i9j.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpapc91i9j.jl:35 [inlined]\n\
    \   [4] macro exp"
  timestamp: 1659978098
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    #Possible to have Vector{Any} as well \n    #But we'd like the return type\
    \ to be Int64\n    sorted_vector = sort(arr)\n    sorted_vector[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978094
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Precondition: k <= length(arr)\n    # Initialize return vector\n    k_max\
    \ = fill(Int64, k)\n    # Iterate through array and insert k largest elements\
    \ into return vector\n    for i in 1:length(arr)\n        # Shift all elements\
    \ larger than current element to the right\n        shift = k\n        for j in\
    \ 1:k\n            if arr[i] > k_max[j]\n                shift = j\n         \
    \       break\n            end\n        end\n        # Insert the current element\
    \ into the appropriate position\n        for j in shift:k\n            k_max[j+1]\
    \ = k_max[j]\n        end\n        k_max[shift] = arr[i]\n    end\n    return\
    \ k_max\nend\n\"\"\"\n    Given an integer array arr, return an array of length\
    \ 2 consisting of arr[0] \n    (the minimum value of arr) and arr[1] (the maximum\
    \ value of arr).\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5x4ewgz.jl:47\nin expression starting at\
    \ /tmp/tmpj5x4ewgz.jl:47\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0\n        return []\n    end\n    n = length(arr)\n    push!(arr,\
    \ typemax(Int64))\n    for i in k:n\n        j = 1\n        while j <= k\n   \
    \         if arr[j] > arr[i]\n                j += 1\n            else\n     \
    \           break\n            end\n        end\n        for l in 1:(i-j)\n  \
    \          arr[i-l+1] = arr[i-l]\n        end\n        arr[j] = arr[i]\n    end\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6kewrug7.jl:49

    '
  stdout: "test set: Test Failed at /tmp/tmp6kewrug7.jl:52\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-4, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6kewrug7.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6kewrug7.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp6kewrug7.jl:53\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6kewrug7.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6kewrug7.jl:51\ntest set: Test Failed at /tmp/tmp6kewrug7.jl:54\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6kewrug7.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6kewrug7.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp6kewrug7.jl:55\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, -123] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6kewrug7.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6kewrug7.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp6kewrug7.jl:56\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [0, 0, 0, -123] == [0, 1"
  timestamp: 1659978097
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort array with negative numbers in front\n    sorted_arr = sort(arr, by=x->x\
    \ < 0 ? x : -x)\n    max_k = zeros(Int64, k)\n    for i in 1:k\n        max_k[i]\
    \ = sorted_arr[i] < 0 ? -sorted_arr[i] : sorted_arr[i]\n    end\n    return max_k\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_et89edl.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp_et89edl.jl:39\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, 4, 3] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_et89edl.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_et89edl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_et89edl.jl:41\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_et89edl.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_et89edl.jl:38\ntest set: Test Failed at /tmp/tmp_et89edl.jl:42\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 123, 20] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_et89edl.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_et89edl.jl:38\ntest set: Test Failed at /tmp/tmp_et89edl.jl:43\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [123, 20, 3, 2] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_et89edl.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_et89edl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_et89edl.jl:44\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, "
  timestamp: 1659978097
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"Return a vector with the maximum k numbers in arr.\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktvrb6tv.jl:1\nin expression starting at /tmp/tmpktvrb6tv.jl:1\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    max_idx = zeros(Int64, k)\n    max_arr = zeros(Int64, k)\n    arr_length\
    \ = length(arr)\n    i = 1\n    while i <= k\n        max_arr[i] = arr[i]\n  \
    \      max_idx[i] = i\n        i += 1\n    end\n    while i <= arr_length\n  \
    \      x = arr[i]\n        if x > max_arr[1]\n            max_arr[1] = x\n   \
    \         max_idx[1] = i\n            j = 1\n            while j <= k\n      \
    \          left = 2*j\n                right = 2*j + 1\n                if left\
    \ <= k\n                    if right <= k\n                        next_j = max_arr[left]\
    \ > max_arr[right] ? left : right\n                    else\n                \
    \        next_j = left\n                    end\n                    if max_arr[j]\
    \ > max_arr[next_j]\n                        tmp = max_arr[j]\n              \
    \          max_arr[j] = max_arr[next_j]\n                        max_arr[next_j]\
    \ = tmp\n                        tmp = max_idx[j]\n                        max_idx[j]\
    \ = max_idx[next_j]\n                        max_idx[next_j] = tmp\n         \
    \               j = next_j\n                    else\n                       \
    \ break\n                    end\n                else\n                    break\n\
    \                end\n            end\n        end\n        i += 1\n    end\n\
    \    res = sortperm(max_idx)\n    return max_arr[res]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpe_kasi_n.jl:73

    '
  stdout: "test set: Test Failed at /tmp/tmpe_kasi_n.jl:76\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_kasi_n.jl:76 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_kasi_n.jl:75\ntest set: Test\
    \ Failed at /tmp/tmpe_kasi_n.jl:77\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe_kasi_n.jl:77 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe_kasi_n.jl:75\ntest set: Test Failed at /tmp/tmpe_kasi_n.jl:79\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, -123, 20] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe_kasi_n.jl:79 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe_kasi_n.jl:75\ntest set: Test Failed at /tmp/tmpe_kasi_n.jl:80\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 0, 1, 2] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_kasi_n.jl:80 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_kasi_n.jl:75\ntest set: Test\
    \ Failed at /tmp/tmpe_kasi_n.jl:81\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]"
  timestamp: 1659978099
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    heap = Heap{(Int64, Int64)}()\n    result = Vector{Int64}(undef, k)\n   \
    \ for i in 1:k\n        push!(heap, (-arr[i], i))\n    end\n    for i in k+1:length(arr)\n\
    \        _, i_max = pop!(heap)\n        result[i_max] = arr[i_max]\n        push!(heap,\
    \ (-arr[i], i))\n    end\n    for i in 1:k\n        _, i_max = pop!(heap)\n  \
    \      result[i_max] = arr[i_max]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpx_ufx_70.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmpx_ufx_70.jl:47\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpx_ufx_70.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_ufx_70.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_ufx_70.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpx_ufx_70.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpx_ufx_70.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_ufx_70.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_ufx_70.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpx_ufx_70.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpx_ufx_70.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_ufx_70.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_ufx_70.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpx_ufx_70.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ Heap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpx_ufx_7"
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    ans = sort(arr[1:k], rev=true)\n    for i = k+1:length(arr)\n        for\
    \ j = 1:k\n            if arr[i] > ans[j]\n                insert!(ans, j, arr[i])\n\
    \                popfirst!(ans)\n                break\n            end\n    \
    \    end\n    end\n    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5lzzmqe4.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp5lzzmqe4.jl:43\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5lzzmqe4.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5lzzmqe4.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp5lzzmqe4.jl:44\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5lzzmqe4.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5lzzmqe4.jl:42\ntest set: Test Failed at /tmp/tmp5lzzmqe4.jl:45\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5lzzmqe4.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5lzzmqe4.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp5lzzmqe4.jl:46\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [0, -3, -123] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5lzzmqe4.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5lzzmqe4.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp5lzzmqe4.jl:47\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [1, 0, -3, -123] == [0, 1, 2,"
  timestamp: 1659978097
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    @assert k >= 1 && k <= length(arr)\n    arr_copy = sort(arr[1:k])\n    for\
    \ (i, val) in enumerate(arr[k + 1:end])\n        if val > arr_copy[1]\n      \
    \      arr_copy[1] = val\n            arr_copy = sort(arr_copy)\n        end\n\
    \    end\n    return arr_copy\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpzsluy2j8.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpzsluy2j8.jl:51\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n\
    \  AssertionError: k >= 1 && k <= length(arr)\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpzsluy2j8.jl:26\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzsluy2j8.jl:51 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzsluy2j8.jl:40\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   10      1     11\n"
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \n    n = length(arr)\n    @assert k <= n\n    \n    heap = MaxHeap(arr)\n\
    \    vector = Vector{Int64}(undef, k)\n    \n    for i in 1:k\n        vector[i]\
    \ = pop!(heap)\n    end\n    \n    return vector\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmprf1a_opm.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmprf1a_opm.jl:44\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmprf1a_opm.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprf1a_opm.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprf1a_opm.jl:43\ntest set:\
    \ Error During Test at /tmp/tmprf1a_opm.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmprf1a_opm.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprf1a_opm.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprf1a_opm.jl:43\ntest set:\
    \ Error During Test at /tmp/tmprf1a_opm.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmprf1a_opm.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprf1a_opm.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprf1a_opm.jl:43\ntest set:\
    \ Error During Test at /tmp/tmprf1a_opm.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the array first by value\n    sorted = sort(arr)\n    # reverse the\
    \ sorted array\n    sorted_reversed = sorted[end:-1:1]\n    # return the first\
    \ k elements\n    return sorted_reversed[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz92kgddy.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpz92kgddy.jl:38\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz92kgddy.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz92kgddy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz92kgddy.jl:41\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz92kgddy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz92kgddy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz92kgddy.jl:42\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz92kgddy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz92kgddy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz92kgddy.jl:43\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz92kgddy.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz92kgddy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz92kgddy.jl:44\n  Expression: "
  timestamp: 1659978097
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    s = zeros(Int64, n)\n    for i in 1:n\n        s[i]\
    \ = sum(abs.(arr[i:n]))\n    end\n    res = []\n    for i in 1:k\n        max_val\
    \ = -Inf\n        max_ind = -1\n        for j in 1:n\n            if s[j] > max_val\
    \ && j \u2209 res\n                max_val = s[j]\n                max_ind = j\n\
    \            end\n        end\n        push!(res, max_ind)\n    end\n    return\
    \ sort(arr[res])\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkyl5c8_f.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpkyl5c8_f.jl:51\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkyl5c8_f.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkyl5c8_f.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpkyl5c8_f.jl:52\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkyl5c8_f.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkyl5c8_f.jl:49\ntest set: Test Failed at /tmp/tmpkyl5c8_f.jl:53\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, 20, 123] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkyl5c8_f.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkyl5c8_f.jl:49\ntest set: Test Failed at /tmp/tmpkyl5c8_f.jl:54\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, 0, 1, 20] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkyl5c8_f.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkyl5c8_f.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpkyl5c8_f.jl:56\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-1, 0] == [3, "
  timestamp: 1659978098
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    len = length(arr)\n    if k == len\n        return sort(arr)\n    end\n \
    \   inds = sortperm(arr)[end-k+1:end]\n    return sort(arr[inds])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    #step 1: sort the vector in descending order\n    #step 2: return the vector\
    \ of length k\n    \n    #sort the array by value\n    sorted_arr = sort(arr,\
    \ rev=true)\n    \n    #return a vector of length k\n    return sorted_arr[1:k]\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpioluzxny.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpioluzxny.jl:41\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpioluzxny.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpioluzxny.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpioluzxny.jl:44\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpioluzxny.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpioluzxny.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpioluzxny.jl:45\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpioluzxny.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpioluzxny.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpioluzxny.jl:46\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpioluzxny.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpioluzxny.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpioluzxny.jl:47\n  Expression: "
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    max_arr = []\n    max_k = maximum(arr)\n    first_max\
    \ = max_k\n    push!(max_arr, max_k)\n    while length(max_arr) < k\n        max_k\
    \ = first_max\n        for i in 1:n\n            if arr[i] > max_k\n         \
    \       if isless(arr[i], first_max)\n                    max_k = arr[i]\n   \
    \             end\n            end\n        end\n        push!(max_arr, max_k)\n\
    \    end\n    sort!(max_arr)\n    return max_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp6gax7bj3.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmp6gax7bj3.jl:50\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp6gax7bj3.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp6gax7bj3.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6gax7bj3.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6gax7bj3.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp6gax7bj3.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp6gax7bj3.jl:25\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp6gax7bj3.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6gax7bj3.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6gax7bj3.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp6gax7bj3.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp6gax7bj3.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp6gax7bj3.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl"
  timestamp: 1659978100
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    @assert k <= length(arr) \"k must be less than or equal to the length of\
    \ the input vector\"\n    if k == 0\n        return Int64[]\n    end\n    if k\
    \ == 1\n        return [maximum(arr)]\n    end\n    if k == length(arr)\n    \
    \    return sort(arr)\n    end\n    # Create a binary tree and insert all elements\
    \ of arr \n    # into the binary tree.\n    # Initialize it with the first element.\n\
    \    # Once the binary tree has k elements, each time you insert an element\n\
    \    # do a comparison between the new element and the root node of the binary\
    \ tree.\n    # If the new element is greater than the root node, \n    # remove\
    \ the root node from the binary tree\n    # and insert the new element in the\
    \ binary tree.\n    # If the new element is not greater than the root node,\n\
    \    # simply insert the new element in the binary tree.\n    root = MaxTreeNode(arr[1])\n\
    \    for i in 2:length(arr)\n        if i <= k\n            tree_insert!(root,\
    \ MaxTreeNode(arr[i]))\n        else\n            if arr[i] > root.val\n     \
    \           root = tree_delete_max!(root)\n                tree_insert!(root,\
    \ MaxTreeNode(arr[i]))\n            else\n                tree_insert!(root, MaxTreeNode(arr[i]))\n\
    \            end\n        end\n    end\n    # Finally, do an in-order traversal\
    \ of the binary tree\n    # to get a sorted array of length k.\n    tree_traverse_inorder(root)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp_eokz8lq.jl:65

    '
  stdout: "test set: Error During Test at /tmp/tmp_eokz8lq.jl:69\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxTreeNode\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp_eokz8lq.jl:46\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_eokz8lq.jl:69 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_eokz8lq.jl:67\ntest set:\
    \ Error During Test at /tmp/tmp_eokz8lq.jl:70\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmp_eokz8lq.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_eokz8lq.jl:31\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_eokz8lq.jl:70 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_eokz8lq.jl:67\ntest set:\
    \ Error During Test at /tmp/tmp_eokz8lq.jl:71\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxTreeNode not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmp_eokz8lq.jl:46\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_eokz8lq.jl:71 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_eokz8lq.jl:67\ntest set:\
    \ Error During Test at /tmp/tmp_eokz8lq.jl:72\n  Test threw e"
  timestamp: 1659978100
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \n    # Sort array with insertion sort algorithm\n    @inbounds for i = 2:length(arr)\n\
    \        key = arr[i]\n        j = i - 1\n        while j >= 1 && arr[j] > key\n\
    \            arr[j + 1] = arr[j]\n            j -= 1\n        end\n        arr[j\
    \ + 1] = key\n    end\n    \n    arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpct9ukp27.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpct9ukp27.jl:46\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpct9ukp27.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpct9ukp27.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpct9ukp27.jl:47\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpct9ukp27.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpct9ukp27.jl:44\ntest set: Test Failed at /tmp/tmpct9ukp27.jl:48\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpct9ukp27.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpct9ukp27.jl:44\ntest set: Test Failed at /tmp/tmpct9ukp27.jl:49\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpct9ukp27.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpct9ukp27.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpct9ukp27.jl:51\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, "
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    max_heap = MaxHeap()\n    for i in 1:n\n        if i\
    \ <= k\n            push!(max_heap, arr[i])\n        else\n            x = get_max!(max_heap)\n\
    \            if x < arr[i]\n                push!(max_heap, arr[i])\n        \
    \    else\n                push!(max_heap, x)\n            end\n        end\n\
    \    end\n    res = Int64[]\n    for i in 1:k\n        push!(res, get_max!(max_heap))\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmppdpjyekw.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmppdpjyekw.jl:51\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmppdpjyekw.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppdpjyekw.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppdpjyekw.jl:50\ntest set:\
    \ Error During Test at /tmp/tmppdpjyekw.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmppdpjyekw.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppdpjyekw.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppdpjyekw.jl:50\ntest set:\
    \ Error During Test at /tmp/tmppdpjyekw.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmppdpjyekw.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppdpjyekw.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppdpjyekw.jl:50\ntest set:\
    \ Error During Test at /tmp/tmppdpjyekw.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659978099
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ak4bxy4.jl:1\nin expression starting at /tmp/tmp4ak4bxy4.jl:1\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \n    sort!(arr)\n    arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if length(arr) == k\n        return sort(arr)\n    end\n    # min in Julia\
    \ is for minimum\n    min_heap = BinomialHeap()\n    for val in arr\n        insert!(min_heap,\
    \ val)\n        if length(min_heap) > k\n            extract!(min_heap)\n    \
    \    end\n    end\n    return to_array(min_heap)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpd4ceulqm.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpd4ceulqm.jl:45\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: BinomialHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpd4ceulqm.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4ceulqm.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4ceulqm.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpd4ceulqm.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: BinomialHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpd4ceulqm.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4ceulqm.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4ceulqm.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpd4ceulqm.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ BinomialHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpd4ceulqm.jl:30\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd4ceulqm.jl:47 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4ceulqm.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpd4ceulqm.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: BinomialHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector"
  timestamp: 1659978100
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    heap = BinaryHeap()\n    for num in arr\n        push!(heap, num)\n     \
    \   if length(heap) > k\n            pop!(heap)\n        end\n    end\n    return\
    \ sort(collect(heap))\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpn4yb06yx.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpn4yb06yx.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpn4yb06yx.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn4yb06yx.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn4yb06yx.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpn4yb06yx.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: BinaryHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpn4yb06yx.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn4yb06yx.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn4yb06yx.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpn4yb06yx.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: BinaryHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpn4yb06yx.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn4yb06yx.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn4yb06yx.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpn4yb06yx.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ BinaryHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \   "
  timestamp: 1659978100
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \n    # Sort and select the maximum k elements \n    index = sortperm(arr)\n\
    \    final_arr = zeros(Int64, k)\n    for i in 1:k\n        final_arr[i] = arr[index[end\
    \ - i + 1]]\n    end\n    return final_arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxyxicbi1.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpxyxicbi1.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyxicbi1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyxicbi1.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpxyxicbi1.jl:43\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyxicbi1.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyxicbi1.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpxyxicbi1.jl:44\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyxicbi1.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyxicbi1.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpxyxicbi1.jl:45\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyxicbi1.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyxicbi1.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpxyxicbi1.jl:46\n  Expression: "
  timestamp: 1659978100
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    length = Int64(minimum(k, length(arr)))\n    output = Vector{Int64}(length)\n\
    \    for i in 1:length\n        output[i] = Int64(minimum(arr))\n        pop!(arr,\
    \ findmin(arr)[2])\n    end\n    sort!(output)\n    return output\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpc8tj_7o2.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpc8tj_7o2.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpc8tj_7o2.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc8tj_7o2.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc8tj_7o2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpc8tj_7o2.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpc8tj_7o2.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc8tj_7o2.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc8tj_7o2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpc8tj_7o2.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpc8tj_7o2.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc8tj_7o2.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc8tj_7o2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpc8tj_7o2.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tm"
  timestamp: 1659978100
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    #############################################################\n    ###########\
    \ DO NOT MODIFY THE CODE BELOW THIS LINE ##########\n    #############################################################\n\
    \    n = length(arr)\n    heap = BinomialHeap()\n    for i in 1:n\n        push!(heap,\
    \ arr[i])\n    end\n    for i in 1:n-k\n        pop!(heap)\n    end\n    res =\
    \ Array{Int64}(k)\n    for i in 1:k\n        res[i] = pop!(heap)\n    end\n  \
    \  return res\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpofpdwwwy.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmpofpdwwwy.jl:48\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: BinomialHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpofpdwwwy.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpofpdwwwy.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpofpdwwwy.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpofpdwwwy.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: BinomialHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpofpdwwwy.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpofpdwwwy.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpofpdwwwy.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpofpdwwwy.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: BinomialHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpofpdwwwy.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpofpdwwwy.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpofpdwwwy.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpofpdwwwy.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ BinomialHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::In"
  timestamp: 1659978100
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \n    N = length(arr)\n    arr = sort(arr, rev=true)\n    return arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplnw97qt9.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmplnw97qt9.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnw97qt9.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnw97qt9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplnw97qt9.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnw97qt9.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnw97qt9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplnw97qt9.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnw97qt9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnw97qt9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplnw97qt9.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnw97qt9.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnw97qt9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplnw97qt9.jl:42\n  Expression: "
  timestamp: 1659978099
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    # put maximum integers in front, minimum in back.\n\
    \    qsort!(arr, 1, n)\n    arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp197pvl59.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp197pvl59.jl:36\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: qsort!\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp197pvl59.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp197pvl59.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp197pvl59.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp197pvl59.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: qsort! not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp197pvl59.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp197pvl59.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp197pvl59.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp197pvl59.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: qsort! not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp197pvl59.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp197pvl59.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp197pvl59.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp197pvl59.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ qsort! not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tm"
  timestamp: 1659978101
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    heap = MaxHeap()\n    push!(heap, arr[1:k])\n    for i in k+1:length(arr)\n\
    \        if arr[i] > heap[1]\n            pop!(heap)\n            push!(heap,\
    \ arr[i])\n        end\n    end\n    return sort(heap, rev=true)\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp6i2njwca.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmp6i2njwca.jl:42\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp6i2njwca.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6i2njwca.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6i2njwca.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp6i2njwca.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp6i2njwca.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6i2njwca.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6i2njwca.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp6i2njwca.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp6i2njwca.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6i2njwca.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6i2njwca.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp6i2njwca.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659978101
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr_sorted = sort(arr)\n    return reverse(arr_sorted[1:k])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbixacxv6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpbixacxv6.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbixacxv6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbixacxv6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbixacxv6.jl:35\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbixacxv6.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbixacxv6.jl:33\ntest set: Test Failed at /tmp/tmpbixacxv6.jl:36\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbixacxv6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbixacxv6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbixacxv6.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [0, -3, -123] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbixacxv6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbixacxv6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbixacxv6.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [1, 0, -3, -123] == [0, 1, 2,"
  timestamp: 1659978100
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sort(arr, rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3agtrr5o.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp3agtrr5o.jl:33\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:37\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:38\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3agtrr5o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3agtrr5o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3agtrr5o.jl:39\n  Expression: "
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    @assert k <= length(arr) \"k cannot be greater than length of array\"\n \
    \   arr_copy = copy(arr)\n    for i = 1:k\n        index = i\n        for j =\
    \ i+1:length(arr_copy)\n            if arr_copy[j] > arr_copy[index]\n       \
    \         index = j\n            end\n        end\n        arr_copy[i], arr_copy[index]\
    \ = arr_copy[index], arr_copy[i]\n    end\n    return arr_copy[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0__k_c20.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0__k_c20.jl:44\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0__k_c20.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0__k_c20.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0__k_c20.jl:47\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0__k_c20.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0__k_c20.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0__k_c20.jl:48\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0__k_c20.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0__k_c20.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0__k_c20.jl:49\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0__k_c20.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0__k_c20.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0__k_c20.jl:50\n  Expression: "
  timestamp: 1659978100
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # TODO\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp5rdazp0u.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp5rdazp0u.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp5rdazp0u.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5rdazp0u.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5rdazp0u.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5rdazp0u.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp5rdazp0u.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5rdazp0u.jl:34 [inlined]\n\
    \   [4] macro exp"
  timestamp: 1659978102
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sorted_arr = sort(arr)\n    i = k\n    while i <= length(sorted_arr) && sorted_arr[i]\
    \ == sorted_arr[k]\n        i += 1\n    end\n    return sorted_arr[k:i-1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpcbnqedsu.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpcbnqedsu.jl:38\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5] == [-4, -3, 5]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbnqedsu.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbnqedsu.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpcbnqedsu.jl:40\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcbnqedsu.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcbnqedsu.jl:37\ntest set: Test Failed at /tmp/tmpcbnqedsu.jl:41\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [0] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbnqedsu.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbnqedsu.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpcbnqedsu.jl:42\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [1] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbnqedsu.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbnqedsu.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpcbnqedsu.jl:43\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15] == [-"
  timestamp: 1659978102
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # return maximum(arr, k)\n    # ordered = sort(arr)\n    # return ordered[1:k]\n\
    \    return sort(arr)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj1mr1mib.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpj1mr1mib.jl:37\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj1mr1mib.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj1mr1mib.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpj1mr1mib.jl:38\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj1mr1mib.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj1mr1mib.jl:35\ntest set: Test Failed at /tmp/tmpj1mr1mib.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj1mr1mib.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj1mr1mib.jl:35\ntest set: Test Failed at /tmp/tmpj1mr1mib.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj1mr1mib.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj1mr1mib.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpj1mr1mib.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, "
  timestamp: 1659978100
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # your code goes here\n    n = length(arr)\n    sort!(arr)\n    k == n ?\
    \ arr : arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978099
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # sort the vector using the built-in merge sort\n    sort!(arr)\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp12_q2ewt.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp12_q2ewt.jl:1\n\
    in expression starting at /tmp/tmp12_q2ewt.jl:1\n"
  stdout: ''
  timestamp: 1659978100
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    pq = MaxHeap{Int64}()\n    for (i, a) in enumerate(arr)\n        if i < k\n\
    \            push!(pq, a)\n        else\n            peek(pq) < a && replace!(pq,\
    \ 1, a)\n        end\n    end\n    sort(collect(pq))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmphpfz3wuj.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmphpfz3wuj.jl:41\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmphpfz3wuj.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpfz3wuj.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpfz3wuj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphpfz3wuj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmphpfz3wuj.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpfz3wuj.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpfz3wuj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphpfz3wuj.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmphpfz3wuj.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpfz3wuj.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpfz3wuj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphpfz3wuj.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659978102
- exit_code: 0
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Take a collection of values and return the top `k` values.\n    # Sort\
    \ the array.\n    # Grab the last k items.\n    # Return that array of values.\n\
    \    sort(arr)[end - k + 1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978099
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    heap = Heap{Int64}()\n    for i in 1:length(arr)\n        if length(heap)\
    \ < k\n            push!(heap, arr[i])\n        elseif arr[i] > peek(heap)\n \
    \           pop!(heap)\n            push!(heap, arr[i])\n        end\n    end\n\
    \    heap_to_vector(heap)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpr00oqdkq.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpr00oqdkq.jl:42\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpr00oqdkq.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr00oqdkq.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr00oqdkq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpr00oqdkq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpr00oqdkq.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr00oqdkq.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr00oqdkq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpr00oqdkq.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpr00oqdkq.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr00oqdkq.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr00oqdkq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpr00oqdkq.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ Heap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpr00oqdk"
  timestamp: 1659978102
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if k == n\n        return arr\n    end\n    temp = Vector{Int64}(k)\n\
    \    copy!(temp, arr[1:k])\n    sort!(temp)\n    j = 1\n    for i in (k+1):n\n\
    \        if arr[i] > temp[j]\n            temp[j] = arr[i]\n            sort!(temp)\n\
    \            j = 1\n        elseif arr[i] < temp[j]\n            j += 1\n    \
    \    end\n    end\n    return temp\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpiccagg29.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpiccagg29.jl:50\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiccagg29.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiccagg29.jl:49\ntest set: Error\
    \ During Test at /tmp/tmpiccagg29.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpiccagg29.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiccagg29.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiccagg29.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpiccagg29.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n  \
    \  Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::I"
  timestamp: 1659978103
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # this is an example of a min priority queue which uses a min heap to pop\
    \ \n    # the smallest item\n    # https://github.com/JuliaCollections/PriorityQueues.jl/blob/master/src/PriorityQueues.jl\n\
    \    # an example of a max priority queue, I'd just reverse the compare function\n\
    \    # https://github.com/JuliaCollections/PriorityQueues.jl/blob/master/test/test_priority_queue.jl\n\
    \    # could also just sort the array and return the k last elements\n    # https://docs.julialang.org/en/v1/base/sort/#Base.sort-Tuple{AbstractArray{T,1}\
    \ where T}\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyox065uu.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyox065uu.jl:1\n\
    in expression starting at /tmp/tmpyox065uu.jl:1\n"
  stdout: ''
  timestamp: 1659978100
