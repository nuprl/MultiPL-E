language: jl
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return ((a % 10)\
    \ * (b % 10))\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr2_4bry2.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpr2_4bry2.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr2_4bry2.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr2_4bry2.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)%10\
    \ * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2krnhlnn.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2krnhlnn.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a*b % 10\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7fgdk98i.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp7fgdk98i.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fgdk98i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fgdk98i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7fgdk98i.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fgdk98i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fgdk98i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7fgdk98i.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fgdk98i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fgdk98i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7fgdk98i.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fgdk98i.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fgdk98i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7fgdk98i.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = mod(a, 10)\n\
    \    b = mod(b, 10)\n    c = a * b\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a<10 && b<10\n\
    \        return a*b\n    else\n        a = abs(a)%10\n        b = abs(b)%10\n\
    \        return a*b\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a * b % 10\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8dyh5_o_.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp8dyh5_o_.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8dyh5_o_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8dyh5_o_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8dyh5_o_.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8dyh5_o_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8dyh5_o_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8dyh5_o_.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8dyh5_o_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8dyh5_o_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8dyh5_o_.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8dyh5_o_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8dyh5_o_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8dyh5_o_.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a_unit, b_unit\
    \ = a % 10, b % 10\n    return a_unit * b_unit\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_autd8e8.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp_autd8e8.jl:26\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_autd8e8.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_autd8e8.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (abs(a)%10)*(abs(b)%10)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a * b\nend\nprintln(multiply(148,\
    \ 412))\nprintln(multiply(19, 28))\nprintln(multiply(2020, 1851))\nprintln(multiply(14,\
    \ -15))\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprxbvivya.jl:23

    '
  stdout: "60976\n532\n3739020\n-210\ntest set: Test Failed at /tmp/tmprxbvivya.jl:26\n\
    \  Expression: candidate(148, 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprxbvivya.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprxbvivya.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprxbvivya.jl:27\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprxbvivya.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprxbvivya.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprxbvivya.jl:28\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprxbvivya.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprxbvivya.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprxbvivya.jl:29\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprxbvivya.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprxbvivya.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprxbvivya.jl:30\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)\
    \ % 10 * abs(b) % 10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiucyislk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpiucyislk.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 && b\
    \ < 0\n        a = abs(a)\n        b = abs(b)\n    end\n    c = a*b\n    e = c\
    \ - (c//10)*10\n    return e\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj04u7_sd.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpj04u7_sd.jl:28\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj04u7_sd.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj04u7_sd.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpj04u7_sd.jl:29\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 0 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj04u7_sd.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj04u7_sd.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpj04u7_sd.jl:31\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj04u7_sd.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj04u7_sd.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpj04u7_sd.jl:32\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 0 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj04u7_sd.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj04u7_sd.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpj04u7_sd.jl:33\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 0 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a1 = mod(a, 10)\n\
    \    b1 = mod(b, 10)\n    return a1 * b1\nend\nprintln(multiply(148, 412))\nprintln(multiply(19,\
    \ 28))\nprintln(multiply(2020, 1851))\nprintln(multiply(14, -15))\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: '16

    72

    0

    20

    Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a1 = abs(a)\n\
    \    b1 = abs(b)\n    return ((a1 - a1%10)/10)*((b1 - b1%10)/10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0f2i2axy.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp0f2i2axy.jl:24\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 574 == 16\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0f2i2axy.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f2i2axy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0f2i2axy.jl:25\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f2i2axy.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f2i2axy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0f2i2axy.jl:26\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 37370 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f2i2axy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f2i2axy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0f2i2axy.jl:27\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 1 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f2i2axy.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f2i2axy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0f2i2axy.jl:29\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 2 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    prod = abs(a)\
    \ * abs(b)\n    return mod(prod, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjvy870hu.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpjvy870hu.jl:23\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvy870hu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvy870hu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjvy870hu.jl:24\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvy870hu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvy870hu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjvy870hu.jl:26\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvy870hu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvy870hu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjvy870hu.jl:27\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjvy870hu.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjvy870hu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjvy870hu.jl:28\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn83_vvtc.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpn83_vvtc.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn83_vvtc.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn83_vvtc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a %\
    \ 10) * abs(b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)*abs(b)%10\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkq4zaqhw.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpkq4zaqhw.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkq4zaqhw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkq4zaqhw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkq4zaqhw.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkq4zaqhw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkq4zaqhw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkq4zaqhw.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkq4zaqhw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkq4zaqhw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkq4zaqhw.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkq4zaqhw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkq4zaqhw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkq4zaqhw.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n  a, b = divrem(a,\
    \ 10), divrem(b, 10)\n  return (a[2] * b[2]) % 10\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcn8shxak.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpcn8shxak.jl:23\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcn8shxak.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcn8shxak.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcn8shxak.jl:24\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcn8shxak.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcn8shxak.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcn8shxak.jl:26\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcn8shxak.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcn8shxak.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcn8shxak.jl:27\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcn8shxak.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcn8shxak.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcn8shxak.jl:28\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    x, y = int(str(a)[-1]),\
    \ int(str(b)[-1])\n    return x * y\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp3fbmas1h.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp3fbmas1h.jl:23\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  UndefVarError: str not defined\n \
    \ Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmp3fbmas1h.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3fbmas1h.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3fbmas1h.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp3fbmas1h.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  UndefVarError: str not defined\n  Stacktrace:\n \
    \  [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmp3fbmas1h.jl:15\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3fbmas1h.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3fbmas1h.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp3fbmas1h.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  UndefVarError: str not defined\n  Stacktrace:\n\
    \   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmp3fbmas1h.jl:15\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3fbmas1h.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3fbmas1h.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp3fbmas1h.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  UndefVarError: str not defined\n  Stacktrace:\n\
    \   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmp3fbmas1h.jl:15\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7"
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return mod(abs(a),\
    \ 10) * mod(abs(b), 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (mod(a,\
    \ 10) * mod(b, 10)) % 10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp73oy4jwk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp73oy4jwk.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73oy4jwk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73oy4jwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp73oy4jwk.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73oy4jwk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73oy4jwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp73oy4jwk.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73oy4jwk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73oy4jwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp73oy4jwk.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73oy4jwk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73oy4jwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp73oy4jwk.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73oy4jwk.jl:27 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008669
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    # The product\
    \ of their unit digits\n    return abs(a) % 10 * abs(b) % 10\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzw0il6pz.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpzw0il6pz.jl:23\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzw0il6pz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzw0il6pz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzw0il6pz.jl:24\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzw0il6pz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzw0il6pz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzw0il6pz.jl:26\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzw0il6pz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzw0il6pz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzw0il6pz.jl:27\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzw0il6pz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzw0il6pz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzw0il6pz.jl:28\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzw0il6pz.jl:28 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a1 = mod(a, 10)\n\
    \    b1 = mod(b, 10)\n    return a1 * b1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 a = -a\
    \ end\n    if b < 0 b = -b end\n    a % 10 * b % 10\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq852arvl.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpq852arvl.jl:24\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq852arvl.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq852arvl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq852arvl.jl:25\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq852arvl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq852arvl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq852arvl.jl:27\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq852arvl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq852arvl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq852arvl.jl:28\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq852arvl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq852arvl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq852arvl.jl:29\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq852arvl.jl:29 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)%10\
    \ * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2krnhlnn.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2krnhlnn.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a, b = abs(a),\
    \ abs(b)\n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    s = string(a)[end]\n    c = string(b)[end]\n    d = parse(Int64,\
    \ s)\n    g = parse(Int64, c)\n    return d*g\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return 1\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdegwhk95.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpdegwhk95.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 1 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdegwhk95.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdegwhk95.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdegwhk95.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 1 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdegwhk95.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdegwhk95.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdegwhk95.jl:24\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdegwhk95.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdegwhk95.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdegwhk95.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 1 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdegwhk95.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdegwhk95.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdegwhk95.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 1 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdegwhk95.jl:26 [inlined]\n [3]\
    \ macro e"
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    x = abs(a) % 10\n\
    \    y = abs(b) % 10\n    return x * y\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a * b)\
    \ % 10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfinqliua.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpfinqliua.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfinqliua.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfinqliua.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfinqliua.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfinqliua.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfinqliua.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfinqliua.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfinqliua.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfinqliua.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfinqliua.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfinqliua.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfinqliua.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfinqliua.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfinqliua.jl:27 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008669
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    \"\"\"\n    >>>\
    \ multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\n    return mod1(a)\
    \ * mod1(b)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdbrdajnw.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpdbrdajnw.jl:32\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  MethodError: no method matching mod1(::Int64)\n\
    \  Closest candidates are:\n    mod1(::T, !Matched::T) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/operators.jl:889\n\
    \    mod1(::Real, !Matched::Real) at ~/.conda/envs/polyglot/share/julia/base/promotion.jl:425\n\
    \  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpdbrdajnw.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdbrdajnw.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdbrdajnw.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpdbrdajnw.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  MethodError: no method matching mod1(::Int64)\n \
    \ Closest candidates are:\n    mod1(::T, !Matched::T) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/operators.jl:889\n\
    \    mod1(::Real, !Matched::Real) at ~/.conda/envs/polyglot/share/julia/base/promotion.jl:425\n\
    \  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpdbrdajnw.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdbrdajnw.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdbrdajnw.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpdbrdajnw.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  MethodError: no method matching mod1(::Int64)\n\
    \  Closest candidates are:\n    mod1(::T, !Matched::T) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/operators.jl:889\n\
    \    mod1(::Real, !Matched::Real) at ~/.conda/envs/polyglot/share/julia/base/promotion.jl:425\n\
    \  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ M"
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a %\
    \ 10) * abs(b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return rem(a,\
    \ 10) * rem(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2ffj3817.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2ffj3817.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2ffj3817.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2ffj3817.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008669
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a, b = abs(a),\
    \ abs(b)\n    return a%10 * b%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0dmxfqj6.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp0dmxfqj6.jl:23\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dmxfqj6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dmxfqj6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp0dmxfqj6.jl:24\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dmxfqj6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dmxfqj6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp0dmxfqj6.jl:26\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dmxfqj6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dmxfqj6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp0dmxfqj6.jl:27\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dmxfqj6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dmxfqj6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp0dmxfqj6.jl:28\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dmxfqj6.jl:28 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0\n   \
    \     a = abs(a)\n    end\n    if b < 0\n        b = abs(b)\n    end\n    return\
    \ (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    num = a * b\n\
    \    return (num % 10) * (num / 10 % 10)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgtklws57.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpgtklws57.jl:23\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  InexactError: Int64(45.60000000000218)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] multiply(a::Int64, b::Int64)\n     @ Main\
    \ /tmp/tmpgtklws57.jl:16\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpgtklws57.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpgtklws57.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgtklws57.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  InexactError: Int64(6.400000000000006)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpgtklws57.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpgtklws57.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpgtklws57.jl:22\ntest set:\
    \ Test Failed at /tmp/tmpgtklws57.jl:26\n  Expression: candidate(14, -15) == 20\n\
    \   Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgtklws57.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgtklws57.jl:22\ntest set: Error\
    \ During Test at /tmp/tmpgtklws57.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(76, 67) == 42\n  InexactError: Int64(18.399999999999977)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] multiply("
  timestamp: 1660008671
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn83_vvtc.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpn83_vvtc.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn83_vvtc.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn83_vvtc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a%10)*(b%10)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp12eu5lk7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp12eu5lk7.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp12eu5lk7.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp12eu5lk7.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008669
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    unit_digit_a =\
    \ a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_j0d9g_h.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp_j0d9g_h.jl:27\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_j0d9g_h.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_j0d9g_h.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return rem(a, 10) * rem(b, 10)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    x = string(a)\n\
    \    y = string(b)\n    a = int(x[end])\n    b = int(y[end])\n    return a*b\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprpzo_gb9.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmprpzo_gb9.jl:26\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  UndefVarError: int not defined\n \
    \ Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmprpzo_gb9.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprpzo_gb9.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprpzo_gb9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprpzo_gb9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  UndefVarError: int not defined\n  Stacktrace:\n \
    \  [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmprpzo_gb9.jl:17\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprpzo_gb9.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprpzo_gb9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprpzo_gb9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmprpzo_gb9.jl:17\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprpzo_gb9.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprpzo_gb9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprpzo_gb9.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmprpzo_gb9.jl:17\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   "
  timestamp: 1660008671
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return a % 10 * b % 10\nend\n\"\"\"\n    # Solution\n    def\
    \ multiply(a, b):\n        return (a % 10) * (b % 10)\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp_kjjodnp.jl:19\nin expression starting at /tmp/tmp_kjjodnp.jl:19\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    aa = abs(a)\n\
    \    bb = abs(b)\n    aa = div(aa, 10^(floor(log10(aa))));\n    bb = div(bb, 10^(floor(log10(bb))));\n\
    \    return aa*bb\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp5a_2yo_d.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp5a_2yo_d.jl:26\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5a_2yo_d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5a_2yo_d.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5a_2yo_d.jl:27\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5a_2yo_d.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5a_2yo_d.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5a_2yo_d.jl:28\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 2 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5a_2yo_d.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5a_2yo_d.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5a_2yo_d.jl:29\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 1 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5a_2yo_d.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5a_2yo_d.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5a_2yo_d.jl:31\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 2 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5a_2yo_d.jl:31 [inlined]\n [3]\
    \ macro e"
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    #First we will\
    \ turn the integer into a string, \n    #then extract the last character,\n  \
    \  #then convert back to an integer,\n    #then multiply them together.\n    A::Int64\
    \ = parse(Int64, string(a)[end]) \n    B::Int64 = parse(Int64, string(b)[end])\n\
    \    return A*B\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    # use return or\
    \ nothing.\n    return mod(a, 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    (abs(a)%10)*(abs(b)%10)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a > 0 && b\
    \ > 0\n        i, j = divrem(a, 10)\n        k, l = divrem(b, 10)\n        return\
    \ l * j\n    elseif a < 0 && b < 0\n        i, j = divrem(a, 10)\n        k, l\
    \ = divrem(b, 10)\n        return l * j\n    elseif a > 0 && b < 0\n        i,\
    \ j = divrem(a, 10)\n        k, l = divrem(b, 10)\n        return -l * j\n   \
    \ elseif a < 0 && b > 0\n        i, j = divrem(a, 10)\n        k, l = divrem(b,\
    \ 10)\n        return -l * j\n    end\nend\n \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpobzcklad.jl:53

    '
  stdout: "test set: Error During Test at /tmp/tmpobzcklad.jl:62\n  Test threw exception\n\
    \  Expression: candidate(0, 1) == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpobzcklad.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpobzcklad.jl:62 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpobzcklad.jl:55\ntest set:\
    \ Error During Test at /tmp/tmpobzcklad.jl:63\n  Test threw exception\n  Expression:\
    \ candidate(0, 0) == 0\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpobzcklad.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpobzcklad.jl:63 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpobzcklad.jl:55\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    6      2      8\n"
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    let a_unit = a\
    \ % 10\n    let b_unit = b % 10\n    return a_unit * b_unit\nend\nprintln(multiply(148,\
    \ 412))\nprintln(multiply(19, 28))\nprintln(multiply(2020, 1851))\nprintln(multiply(14,\
    \ -15))\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"let\" at /tmp/tmpnft7_2et.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnft7_2et.jl:1\n\
    in expression starting at /tmp/tmpnft7_2et.jl:1\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return mod(abs(a),\
    \ 10) * mod(abs(b), 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    product=mod(a,10)*mod(b,10)\n\
    \    return product\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a, b = abs(a)\
    \ % 10, abs(b) % 10\n    if a == 0 or b == 0 \n        return 0\n    else\n  \
    \      return a * b\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"b\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpffjumbgi.jl:16\nin expression starting at /tmp/tmpffjumbgi.jl:16\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return  (a%10)*(b%10)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk6e0a99l.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpk6e0a99l.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk6e0a99l.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpk6e0a99l.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a * b < 0\n\
    \        return (-abs(a) % 10) * (-abs(b) % 10)\n    else\n        return (abs(a)\
    \ % 10) * (abs(b) % 10)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)\
    \ % 10 * abs(b) % 10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiucyislk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpiucyislk.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (abs(a\
    \ % 10) * abs(b % 10))\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    p = a * b\n  \
    \  while p >= 10\n        p = p % 10\n    end\n    return p\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqoxvy82k.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpqoxvy82k.jl:26\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoxvy82k.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoxvy82k.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqoxvy82k.jl:27\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoxvy82k.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoxvy82k.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqoxvy82k.jl:29\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoxvy82k.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoxvy82k.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqoxvy82k.jl:30\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoxvy82k.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoxvy82k.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqoxvy82k.jl:31\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoxvy82k.jl:31 [inlined]\n [3]\
    \ macro "
  timestamp: 1660008671
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)%10\
    \ * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2krnhlnn.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2krnhlnn.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: -1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    n, m = 0, 0\n\
    \    while a != 0 && b != 0\n        n = a % 10\n        m = b % 10\n        n\
    \ * m == 0 ? break : continue\n        a /= 10\n        b /= 10\n    end\n   \
    \ return n * m\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)\
    \ % 10 * abs(b) % 10\nend\n@testset \"multiply\" begin\n    @test multiply(148,\
    \ 412) == 16\n    @test multiply(19, 28) == 72\n    @test multiply(2020, 1851)\
    \ == 0\n    @test multiply(14, -15) == 20\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmp05gh9_mp.jl:17

    in expression starting at /tmp/tmp05gh9_mp.jl:17

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return a % 10\
    \ * b % 10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7liyd0o9.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp7liyd0o9.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:27 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (mod(a,\
    \ 10) * mod(b, 10))\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)*abs(b)%10\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkq4zaqhw.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpkq4zaqhw.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkq4zaqhw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkq4zaqhw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkq4zaqhw.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkq4zaqhw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkq4zaqhw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkq4zaqhw.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkq4zaqhw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkq4zaqhw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkq4zaqhw.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkq4zaqhw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkq4zaqhw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkq4zaqhw.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a %\
    \ 10) * abs(b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a > b\n   \
    \     unit_a = a % 10\n        unit_b = b % 10\n    else\n        unit_a = b %\
    \ 10\n        unit_b = a % 10\n    end\n    return unit_a * unit_b\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuzlarbqd.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpuzlarbqd.jl:32\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuzlarbqd.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuzlarbqd.jl:28\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008672
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    # Initialize result\
    \ \n    res = 0\n    # Loop through all bits \n    for i in 0:64 \n        # If\
    \ second bit is set, add first \n        # to result \n        if(b[i]==1)\n \
    \           res = res + a[i] \n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpyd6hoeli.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpyd6hoeli.jl:32\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  BoundsError\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./number.jl:98 [inlined]\n   [2] multiply(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpyd6hoeli.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyd6hoeli.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyd6hoeli.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpyd6hoeli.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  BoundsError\n  Stacktrace:\n   [1] getindex\n   \
    \  @ ./number.jl:98 [inlined]\n   [2] multiply(a::Int64, b::Int64)\n     @ Main\
    \ /tmp/tmpyd6hoeli.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyd6hoeli.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyd6hoeli.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpyd6hoeli.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  BoundsError\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./number.jl:98 [inlined]\n   [2] multiply(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpyd6hoeli.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyd6hoeli.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyd6hoeli.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpyd6hoeli.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  BoundsError\n  Stacktrace:\n   [1] getindex\n  \
    \   @ ./number.jl:98 [inlined]\n   [2] multiply(a::Int64, b::Int64)\n     @ Main\
    \ /tmp/tmpyd6hoeli.j"
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    (a%10)*(b%10)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdehe8bm3.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpdehe8bm3.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdehe8bm3.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdehe8bm3.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a1 = abs(a) %\
    \ 10\n    b1 = abs(b) % 10\n    if a1 == 0 || b1 == 0\n        return 0\n    else\n\
    \        return a1 * b1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return Int64(to_string(a)[end])\
    \ * Int64(to_string(b)[end])\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpjgsvh59a.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpjgsvh59a.jl:23\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  UndefVarError: to_string not defined\n\
    \  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpjgsvh59a.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjgsvh59a.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjgsvh59a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpjgsvh59a.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  UndefVarError: to_string not defined\n  Stacktrace:\n\
    \   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpjgsvh59a.jl:15\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjgsvh59a.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjgsvh59a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpjgsvh59a.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  UndefVarError: to_string not defined\n  Stacktrace:\n\
    \   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpjgsvh59a.jl:15\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjgsvh59a.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjgsvh59a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpjgsvh59a.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  UndefVarError: to_string not defined\n  Stacktrace:\n\
    \   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpjgsvh59a.jl:15\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/T"
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn83_vvtc.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpn83_vvtc.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn83_vvtc.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn83_vvtc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = 10.0^(log10(abs(a))-1)\
    \ * (abs(a) % 10)\n    b = 10.0^(log10(abs(b))-1) * (abs(b) % 10)\n    return\
    \ a * b\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp84yt_vi9.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp84yt_vi9.jl:24\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  InexactError: Int64(9756.16)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmp84yt_vi9.jl:17\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp84yt_vi9.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp84yt_vi9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp84yt_vi9.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  InexactError: Int64(383.03999999999985)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmp84yt_vi9.jl:17\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp84yt_vi9.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp84yt_vi9.jl:23\ntest set:\
    \ Test Failed at /tmp/tmp84yt_vi9.jl:27\n  Expression: candidate(14, -15) == 20\n\
    \   Evaluated: 42 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp84yt_vi9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp84yt_vi9.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp84yt_vi9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(76, 67) == 42\n  InexactError: Int64(2138.64)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] multiply(a::Int64, b::Int64)"
  timestamp: 1660008674
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn83_vvtc.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpn83_vvtc.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn83_vvtc.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn83_vvtc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if abs(a) == 0\
    \ || abs(b) == 0\n        return 0\n    else\n        return mod(abs(a), 10) *\
    \ mod(abs(b), 10)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    \n    return 0\
    \ <= a && a <= 9 && 0 <= b && b <= 9 ? a * b : 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_14qfc4c.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp_14qfc4c.jl:23\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_14qfc4c.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_14qfc4c.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_14qfc4c.jl:24\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 0 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_14qfc4c.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_14qfc4c.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_14qfc4c.jl:26\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_14qfc4c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_14qfc4c.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_14qfc4c.jl:27\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 0 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_14qfc4c.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_14qfc4c.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_14qfc4c.jl:28\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 0 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_14qfc4c.jl:28 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    if a == 0 || b == 0\n        return 0\n    end\n    r = (a%10)\
    \ * (b%10)\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a, b = abs(a),\
    \ abs(b)\n    unit_a, unit_b = a % 10, b % 10\n    return unit_a * unit_b\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    aa = abs(a)\n\
    \    bb = abs(b)\n    if aa > 9 \n        aa = aa % 10\n    end\n    if bb > 9\
    \ \n        bb = bb % 10\n    end\n    return aa * bb\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\n \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd0pgb5sv.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpd0pgb5sv.jl:26\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd0pgb5sv.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpd0pgb5sv.jl:22\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (abs(a)%10)\
    \ * (abs(b)%10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    (a%10) * (b%10)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp10q7isf6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp10q7isf6.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp10q7isf6.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp10q7isf6.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008672
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    res = a % 10\n\
    \    res = res * (b % 10)\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3_jzvfho.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp3_jzvfho.jl:27\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3_jzvfho.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3_jzvfho.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a<0 \n    \
    \    a = -a\n    end\n    if b<0 \n        b = -b\n    end\n    a = div(a,10)\n\
    \    b = div(b,10)\n    return a*b \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5q97gigs.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp5q97gigs.jl:30\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 574 == 16\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5q97gigs.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5q97gigs.jl:29\ntest set: Test Failed at /tmp/tmp5q97gigs.jl:31\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5q97gigs.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5q97gigs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5q97gigs.jl:32\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 37370 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5q97gigs.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5q97gigs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5q97gigs.jl:33\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 1 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5q97gigs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5q97gigs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5q97gigs.jl:35\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 2 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5q97gigs.jl:35 [inlined]\n [3]\
    \ m"
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return(a % 10)\
    \ * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvd2zkf5p.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvd2zkf5p.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvd2zkf5p.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvd2zkf5p.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008673
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a %\
    \ 10) * abs(b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    prod = (a%10)*(b%10)\n    return prod\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a % 10 * b % 10\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpva1913lw.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpva1913lw.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpva1913lw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpva1913lw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpva1913lw.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpva1913lw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpva1913lw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpva1913lw.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpva1913lw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpva1913lw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpva1913lw.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpva1913lw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpva1913lw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpva1913lw.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpva1913lw.jl:27 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn83_vvtc.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpn83_vvtc.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn83_vvtc.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn83_vvtc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return a*b\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuncqq9_z.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpuncqq9_z.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuncqq9_z.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuncqq9_z.jl:21\ntest set: Test Failed at /tmp/tmpuncqq9_z.jl:23\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 532 == 72\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuncqq9_z.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuncqq9_z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuncqq9_z.jl:24\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuncqq9_z.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuncqq9_z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuncqq9_z.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuncqq9_z.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuncqq9_z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuncqq9_z.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuncqq9_z.jl:26 [inl"
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a); b\
    \ = abs(b)\n    return a*b % 10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpax4yyfms.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpax4yyfms.jl:23\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax4yyfms.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax4yyfms.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpax4yyfms.jl:24\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax4yyfms.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax4yyfms.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpax4yyfms.jl:26\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax4yyfms.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax4yyfms.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpax4yyfms.jl:27\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax4yyfms.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax4yyfms.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpax4yyfms.jl:28\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax4yyfms.jl:28 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    prod = (a - a\
    \ % 10) / 10 * (b - b % 10) / 10 + (a % 10) * (b % 10)\n    return prod\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_st_cx5_.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp_st_cx5_.jl:23\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 590 == 16\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_st_cx5_.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_st_cx5_.jl:22\ntest set: Test Failed at /tmp/tmp_st_cx5_.jl:24\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 74 == 72\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_st_cx5_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_st_cx5_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_st_cx5_.jl:25\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 37370 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_st_cx5_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_st_cx5_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_st_cx5_.jl:26\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -21 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_st_cx5_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_st_cx5_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_st_cx5_.jl:27\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 84 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_st_cx5_.jl:27 [inlined]\n ["
  timestamp: 1660008674
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 \n  \
    \      a = -a\n    end\n    if b < 0 \n        b = -b\n    end\n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a); b\
    \ = abs(b)\n    return (a%10)*(b%10)\nend\nprintln(multiply(19, 28))\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: '72

    Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    \n    a = abs(a)\n\
    \    b = abs(b)\n    \n    if a < 10 && b < 10\n        return a*b\n    else\n\
    \        a = mod(a, 10)\n        b = mod(b, 10)\n        return a*b\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a*b < 0\n \
    \       return abs(a % 10) * abs(b % 10)\n    else\n        return (a % 10) *\
    \ (b % 10)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a%10) * (b%10)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    s = a % 10\n    t = b % 10\n    return s * t\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn83_vvtc.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpn83_vvtc.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn83_vvtc.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn83_vvtc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn83_vvtc.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpn83_vvtc.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn83_vvtc.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn83_vvtc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return a % 10\
    \ * b % 10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7liyd0o9.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp7liyd0o9.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:27 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)\
    \ % 10 * abs(b) % 10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiucyislk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpiucyislk.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    unit_a = a % 10\n\
    \    unit_b = b % 10\n    return unit_a * unit_b\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvtyvygwj.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpvtyvygwj.jl:27\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvtyvygwj.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvtyvygwj.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008674
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (mod(a,\
    \ 10) * mod(b, 10))\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn83_vvtc.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpn83_vvtc.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn83_vvtc.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn83_vvtc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a1 = a%10\n  \
    \  b1 = b%10\n    return a1*b1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf2aeese3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpf2aeese3.jl:27\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf2aeese3.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpf2aeese3.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008674
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (mod(a,\
    \ 10)*mod(b, 10)) \nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a_unit_digit =\
    \ a % 10\n    b_unit_digit = b % 10\n    return a_unit_digit * b_unit_digit\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpehms067r.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpehms067r.jl:27\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpehms067r.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpehms067r.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a_ = abs(a)\n\
    \    b_ = abs(b)\n    r = a_%10 * b_%10\n    return r\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe5sma8f2.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpe5sma8f2.jl:25\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe5sma8f2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe5sma8f2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpe5sma8f2.jl:26\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe5sma8f2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe5sma8f2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpe5sma8f2.jl:28\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe5sma8f2.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe5sma8f2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpe5sma8f2.jl:29\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe5sma8f2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe5sma8f2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpe5sma8f2.jl:30\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe5sma8f2.jl:30 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    abs(a%10) * abs(b%10)\n\
    end\n\"\"\"1040. Move Zeroes\nGiven an array nums, write a function to move all\
    \ 0's to the end of it \nwhile maintaining the relative order of the non-zero\
    \ elements.\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppurgf32d.jl:17\nin expression starting at\
    \ /tmp/tmppurgf32d.jl:17\n"
  stdout: ''
  timestamp: 1660008674
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a*b)%10\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphdjmolgl.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmphdjmolgl.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdjmolgl.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdjmolgl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphdjmolgl.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdjmolgl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdjmolgl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphdjmolgl.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdjmolgl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdjmolgl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphdjmolgl.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdjmolgl.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdjmolgl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphdjmolgl.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdjmolgl.jl:27 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a % 10 * b % 10\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpva1913lw.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpva1913lw.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpva1913lw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpva1913lw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpva1913lw.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpva1913lw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpva1913lw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpva1913lw.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpva1913lw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpva1913lw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpva1913lw.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpva1913lw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpva1913lw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpva1913lw.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpva1913lw.jl:27 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a*b == 0\n\
    \        return 0\n    else\n        return abs(a)%10 * abs(b)%10\n    end\nend\n\
    println(multiply(148, 412))\nprintln(multiply(19, 28))\nprintln(multiply(2020,\
    \ 1851))\nprintln(multiply(14, -15))\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_vvg2fgt.jl:28

    '
  stdout: "6\n2\n0\n0\ntest set: Test Failed at /tmp/tmp_vvg2fgt.jl:31\n  Expression:\
    \ candidate(148, 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_vvg2fgt.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_vvg2fgt.jl:30\ntest set: Test Failed at /tmp/tmp_vvg2fgt.jl:32\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vvg2fgt.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vvg2fgt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_vvg2fgt.jl:34\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vvg2fgt.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vvg2fgt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_vvg2fgt.jl:35\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vvg2fgt.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vvg2fgt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_vvg2fgt.jl:36\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vvg2fgt.jl:36 [inlined]\n [3]\
    \ m"
  timestamp: 1660008675
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a == 0 || b\
    \ == 0\n        return 0\n    else\n        return (abs(a) % 10) * (abs(b) % 10)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    remainder_a = mod(a, 10)\n    remainder_b = mod(b, 10)\n \
    \   return remainder_a * remainder_b\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn83_vvtc.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpn83_vvtc.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn83_vvtc.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn83_vvtc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return a % 10 * b % 10\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp066tiqgh.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp066tiqgh.jl:24\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp066tiqgh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp066tiqgh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp066tiqgh.jl:25\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp066tiqgh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp066tiqgh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp066tiqgh.jl:27\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp066tiqgh.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp066tiqgh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp066tiqgh.jl:28\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp066tiqgh.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp066tiqgh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp066tiqgh.jl:29\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp066tiqgh.jl:29 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008675
- exit_code: -1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    \n    println(a*b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "60976\ntest set: Error During Test at /tmp/tmpxbdioxh6.jl:23\n  Test threw\
    \ exception\n  Expression: candidate(148, 412) == 16\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpxbdioxh6.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxbdioxh6.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxbdioxh6.jl:22\n532\ntest\
    \ set: Error During Test at /tmp/tmpxbdioxh6.jl:24\n  Test threw exception\n \
    \ Expression: candidate(19, 28) == 72\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpxbdioxh6.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxbdioxh6.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxbdioxh6.jl:22\n3739020\n\
    test set: Error During Test at /tmp/tmpxbdioxh6.jl:25\n  Test t"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0\n   \
    \     a = -a\n    end\n    if b < 0\n        b = -b\n    end\n    return (a %\
    \ 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008673
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a == 0 || b\
    \ == 0\n        return 0\n    else\n        return (abs(a)*abs(b))%10\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4s589dov.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp4s589dov.jl:26\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4s589dov.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4s589dov.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4s589dov.jl:27\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4s589dov.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4s589dov.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4s589dov.jl:29\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4s589dov.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4s589dov.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4s589dov.jl:30\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4s589dov.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4s589dov.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4s589dov.jl:31\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4s589dov.jl:31 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    #your code goes\
    \ here\n    a_unit, b_unit = divrem(a, 10)[1], divrem(b, 10)[1]\n    return a_unit\
    \ * b_unit\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6n5cuwn9.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp6n5cuwn9.jl:24\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 574 == 16\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6n5cuwn9.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6n5cuwn9.jl:23\ntest set: Test Failed at /tmp/tmp6n5cuwn9.jl:25\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6n5cuwn9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6n5cuwn9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6n5cuwn9.jl:26\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 37370 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6n5cuwn9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6n5cuwn9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6n5cuwn9.jl:27\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -1 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6n5cuwn9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6n5cuwn9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6n5cuwn9.jl:29\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 2 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6n5cuwn9.jl:29 [inlined]\n [3] "
  timestamp: 1660008675
- exit_code: -1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    #implement this\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpm637cdz2.jl:22\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpm637cdz2.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm637cdz2.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm637cdz2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpm637cdz2.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpm637cdz2.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm637cdz2.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm637cdz2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpm637cdz2.jl:24\n  Test threw exception\n  E"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a, b = abs(a)\
    \ % 10, abs(b) % 10\n    return a * b\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008674
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a_last = rem(a,\
    \ 10)\n    b_last = rem(b, 10)\n    return a_last * b_last\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp21f32rqd.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp21f32rqd.jl:27\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp21f32rqd.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp21f32rqd.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008676
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    res = 1\n    for\
    \ x in tostr.([a, b])\n        for y in x\n            res *= y\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpw7qlb6kv.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpw7qlb6kv.jl:28\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  UndefVarError: tostr not defined\n\
    \  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpw7qlb6kv.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw7qlb6kv.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw7qlb6kv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw7qlb6kv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  UndefVarError: tostr not defined\n  Stacktrace:\n\
    \   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpw7qlb6kv.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw7qlb6kv.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw7qlb6kv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw7qlb6kv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  UndefVarError: tostr not defined\n  Stacktrace:\n\
    \   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpw7qlb6kv.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw7qlb6kv.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw7qlb6kv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw7qlb6kv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  UndefVarError: tostr not defined\n  Stacktrace:\n\
    \   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpw7qlb6kv.jl:16\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1660008677
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if (a<0) a *=\
    \ -1 end\n    if (b<0) b *= -1 end\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008674
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    \n    @assert\
    \ (a >= 0 && b >= 0) \"a and b must be positive\"\n    if a == 0 || b == 0\n \
    \       return 0\n    end\n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpr4ro88t3.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpr4ro88t3.jl:30\n  Test threw exception\n\
    \  Expression: candidate(14, -15) == 20\n  AssertionError: a and b must be positive\n\
    \  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpr4ro88t3.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr4ro88t3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr4ro88t3.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1660008676
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)%10\
    \ * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2krnhlnn.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2krnhlnn.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn83_vvtc.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpn83_vvtc.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn83_vvtc.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn83_vvtc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a%10)*(b%10)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp12eu5lk7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp12eu5lk7.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp12eu5lk7.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp12eu5lk7.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008669
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a_unit = a % 10\n\
    \    b_unit = b % 10\n    return a_unit * b_unit\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsglskt40.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpsglskt40.jl:27\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsglskt40.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsglskt40.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008676
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a*b % 10\nend;\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptnopn32w.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmptnopn32w.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnopn32w.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnopn32w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptnopn32w.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnopn32w.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnopn32w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptnopn32w.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnopn32w.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnopn32w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptnopn32w.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnopn32w.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnopn32w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptnopn32w.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnopn32w.jl:27 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008676
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a1 = mod(a, 10)\n\
    \    b1 = mod(b, 10)\n    return a1 * b1\nend\n\"\"\"\n    AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: AssertionError: AssertionError:\
    \ AssertionError: AssertionError: AssertionError: Ass\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzmhfcmt.jl:19\nin expression starting at\
    \ /tmp/tmpqzmhfcmt.jl:19\n"
  stdout: ''
  timestamp: 1660008675
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a_u = mod(a, 10)\n\
    \    b_u = mod(b, 10)\n    prod = a_u * b_u\n    return prod\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008674
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (mod(a,\
    \ 10) * mod(b, 10))\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    # return something\
    \ in here\n    prod = 0\n    for i in 0:4\n        for j in 0:4\n            prod\
    \ += (a % 10)*(b % 10)\n            a = div(a, 10)\n            b = div(b, 10)\n\
    \        end\n    end\n    return prod\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzap1pdq5.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpzap1pdq5.jl:31\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 24 == 16\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzap1pdq5.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzap1pdq5.jl:30\ntest set: Test Failed at /tmp/tmpzap1pdq5.jl:32\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 74 == 72\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzap1pdq5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzap1pdq5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpzap1pdq5.jl:33\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 12 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzap1pdq5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzap1pdq5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpzap1pdq5.jl:34\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -21 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzap1pdq5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzap1pdq5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpzap1pdq5.jl:35\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 84 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzap1pdq5.jl:35 [inlined]\n [3]\
    \ m"
  timestamp: 1660008677
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a, b = (b, a)\
    \ if a>b else (a, b) \n    c = a % 10\n    d = b % 10\n    if c == 0 || d == 0\n\
    \        return 0\n    else\n        return c * d\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpf1p67ho1.jl:14 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf1p67ho1.jl:15\n\
    in expression starting at /tmp/tmpf1p67ho1.jl:15\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    absa = abs(a)\n\
    \    absb = abs(b)\n    e1 = mod(absa, 10)\n    e2 = mod(absb, 10)\n    return\
    \ e1 * e2\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    # Convert to str\n\
    \    # select only digits\n    # Convert to integer\n    return a % 10 * b % 10\n\
    end\nprintln(multiply(148, 412))\nprintln(multiply(19, 28))\nprintln(multiply(2020,\
    \ 1851))\nprintln(multiply(14, -15))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplq7mq7ja.jl:26

    '
  stdout: "6\n2\n0\n0\ntest set: Test Failed at /tmp/tmplq7mq7ja.jl:29\n  Expression:\
    \ candidate(148, 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplq7mq7ja.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplq7mq7ja.jl:28\ntest set: Test Failed at /tmp/tmplq7mq7ja.jl:30\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplq7mq7ja.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplq7mq7ja.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplq7mq7ja.jl:32\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplq7mq7ja.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplq7mq7ja.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplq7mq7ja.jl:33\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplq7mq7ja.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplq7mq7ja.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplq7mq7ja.jl:34\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplq7mq7ja.jl:34 [inlined]\n [3]\
    \ m"
  timestamp: 1660008677
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (mod(a,\
    \ 10) * mod(b, 10))\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a%10)*(b%10)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp12eu5lk7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp12eu5lk7.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp12eu5lk7.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp12eu5lk7.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)%10\
    \ * abs(b)%10\nend\n# Test cases\n# 3 tests, 100 points\n# Input:\n# Arguments:\
    \ (148, 412)\n# Expected Output: 16\n# Got: 16\n# Input:\n# Arguments: (19, 28)\n\
    # Expected Output: 72\n# Got: 72\n# Input:\n# Arguments: (2020, 1851)\n# Expected\
    \ Output: 0\n# Got: 0\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfhxmn_eq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpfhxmn_eq.jl:36\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhxmn_eq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhxmn_eq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpfhxmn_eq.jl:37\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhxmn_eq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhxmn_eq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpfhxmn_eq.jl:39\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhxmn_eq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhxmn_eq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpfhxmn_eq.jl:40\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhxmn_eq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhxmn_eq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpfhxmn_eq.jl:41\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhxmn_eq.jl:41 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008677
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return rem(abs(a),\
    \ 10) * rem(abs(b), 10)\nend\nmultiply(148, 412)\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a%10)*(b%10)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp12eu5lk7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp12eu5lk7.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp12eu5lk7.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp12eu5lk7.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008669
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    # abs in case\
    \ of negative numbers\n    return (abs(a)%10)*(abs(b)%10)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008675
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0\n   \
    \     a = -a\n    end\n    if b < 0\n        b = -b\n    end\n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nprintln(multiply(148, 412))\nprintln(multiply(19, 28))\n\
    println(multiply(2020, 1851))\nprintln(multiply(14, -15))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: '16

    72

    0

    20

    Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008675
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a%10)*(b%10)\n\
    end\nmultiply(148, 412)\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4miaieb0.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp4miaieb0.jl:26\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4miaieb0.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4miaieb0.jl:22\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008677
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return rem(a,\
    \ 10) * rem(b, 10)\nend\nmultiply(148, 412)\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gdo_6k4.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5gdo_6k4.jl:26\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5gdo_6k4.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5gdo_6k4.jl:22\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008677
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\na = 148\nb = 412\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr_9qxwib.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpr_9qxwib.jl:27\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr_9qxwib.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpr_9qxwib.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    num_a, num_b =\
    \ abs(a), abs(b)\n    if num_a < 10 && num_b < 10\n        return num_a * num_b\n\
    \    elseif num_a < 10\n        return num_a * (num_b % 10)\n    elseif num_b\
    \ < 10\n        return num_b * (num_a % 10)\n    else\n        return (num_a %\
    \ 10) * (num_b % 10)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008675
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (abs(a)%10)*(abs(b)%10)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a*b)%10\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphdjmolgl.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmphdjmolgl.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdjmolgl.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdjmolgl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphdjmolgl.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdjmolgl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdjmolgl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphdjmolgl.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdjmolgl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdjmolgl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphdjmolgl.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdjmolgl.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphdjmolgl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphdjmolgl.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphdjmolgl.jl:27 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008675
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a%10) * (b%10)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    aa = mod(a, 10)\n\
    \    bb = mod(b, 10)\n    return aa * bb\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008668
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    c = mod(a, 10)\
    \ * mod(b, 10)\n    return c\nend\n@testset \"Basic\" begin\n    @test multiply(148,\
    \ 412) == 16\n    @test multiply(19, 28) == 72\n    @test multiply(2020, 1851)\
    \ == 0\n    @test multiply(14, -15) == 20\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmp2frf8d6y.jl:18

    in expression starting at /tmp/tmp2frf8d6y.jl:18

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)%10\
    \ * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2krnhlnn.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2krnhlnn.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2krnhlnn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2krnhlnn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2krnhlnn.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a, b = abs(a),\
    \ abs(b)\n    if a%10 == 0 || b%10 == 0\n        return 0\n    else\n        return\
    \ a%10 * b%10\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo0lmne_r.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpo0lmne_r.jl:27\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0lmne_r.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0lmne_r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo0lmne_r.jl:28\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0lmne_r.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0lmne_r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo0lmne_r.jl:30\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0lmne_r.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0lmne_r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo0lmne_r.jl:31\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0lmne_r.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0lmne_r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo0lmne_r.jl:32\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0lmne_r.jl:32 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008678
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return rem(a,\
    \ 10) * rem(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2ffj3817.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2ffj3817.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2ffj3817.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2ffj3817.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008669
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)\
    \ % 10 * abs(b) % 10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiucyislk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpiucyislk.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiucyislk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiucyislk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiucyislk.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /t"
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    (a % 10) * (b\
    \ % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnjwioy5c.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpnjwioy5c.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnjwioy5c.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnjwioy5c.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    (abs(a) % 10)\
    \ * (abs(b) % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a %\
    \ 10) * abs(b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a = abs(a)\n \
    \   b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (mod(a,\
    \ 10) * mod(b, 10))\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return a % 10\
    \ * b % 10\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7liyd0o9.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp7liyd0o9.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7liyd0o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7liyd0o9.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7liyd0o9.jl:27 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008671
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0 \n  \
    \      a = -a\n    end\n    if b < 0 \n        b = -b\n    end\n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a_digits = split(string(a))\n\
    \    b_digits = split(string(b))\n    a_digit = parse(Int64, a_digits[end])\n\
    \    b_digit = parse(Int64, b_digits[end])\n    return a_digit * b_digit\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9tscrxc0.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp9tscrxc0.jl:26\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9tscrxc0.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9tscrxc0.jl:25\ntest set: Test Failed at /tmp/tmp9tscrxc0.jl:27\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 532 == 72\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tscrxc0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tscrxc0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9tscrxc0.jl:28\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tscrxc0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tscrxc0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9tscrxc0.jl:29\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tscrxc0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tscrxc0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9tscrxc0.jl:30\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tscrxc0.jl:30 [inl"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a == 0 || b\
    \ == 0\n        return 0\n    elseif a < 0\n        a = abs(a)\n    elseif b <\
    \ 0\n        b = abs(b)\n    end\n    return (a % 10) * (b % 10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (rem(a,\
    \ 10) * rem(b, 10))\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp9bavtky.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpp9bavtky.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp9bavtky.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpp9bavtky.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    abs_a = abs(a)\n\
    \    abs_b = abs(b)\n    prod = (abs_a % 10) * (abs_b % 10)\n    return prod \n\
    end\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    result = 1\n \
    \   for i in [a, b]\n        n = i % 10\n        result *= n\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbks_9fcc.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpbks_9fcc.jl:30\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbks_9fcc.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbks_9fcc.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008678
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return abs(a)*abs(b)\
    \ % 10 \nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdek3tc4j.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpdek3tc4j.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdek3tc4j.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdek3tc4j.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdek3tc4j.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdek3tc4j.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdek3tc4j.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdek3tc4j.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdek3tc4j.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdek3tc4j.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdek3tc4j.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdek3tc4j.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdek3tc4j.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdek3tc4j.jl:27\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdek3tc4j.jl:27 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    x = Int64(a <\
    \ 0 ? -1*a : a) % 10\n    y = Int64(b < 0 ? -1*b : b) % 10\n    return x*y\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a, b = abs(a),\
    \ abs(b)\n    return (a * b) % 10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsduyg_gq.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpsduyg_gq.jl:23\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsduyg_gq.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsduyg_gq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpsduyg_gq.jl:24\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsduyg_gq.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsduyg_gq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpsduyg_gq.jl:26\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsduyg_gq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsduyg_gq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpsduyg_gq.jl:27\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsduyg_gq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsduyg_gq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpsduyg_gq.jl:28\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsduyg_gq.jl:28 [inlined]\n [3]\
    \ macro exp"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a, b = abs(a),\
    \ abs(b) \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008677
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    x = abs(a) % 10\n\
    \    y = abs(b) % 10\n    product = x * y\n    return product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008677
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return (a % 10)\
    \ * (b % 10)\nend\nprintln(multiply(148, 412))\nprintln(multiply(19, 28))\nprintln(multiply(2020,\
    \ 1851))\nprintln(multiply(14, -15))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq4ok6dr3.jl:23

    '
  stdout: "16\n72\n0\n-20\ntest set: Test Failed at /tmp/tmpq4ok6dr3.jl:29\n  Expression:\
    \ candidate(14, -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq4ok6dr3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq4ok6dr3.jl:25\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    \"\"\"Creates\
    \ new integer from the unit digits of a and b and then returns their product.\n\
    \    \"\"\"\n    # Create c from the unit digits of a and b:\n    c::Int64 = (mod(a,\
    \ 10) * mod(b, 10))\n    # Return c:\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008677
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a, b = abs(a),\
    \ abs(b)\n    if a < 10 || b < 10\n        return (a%10)*(b%10)\n    else\n  \
    \      return multiply(a//10, b//10)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpwc3b1yhl.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpwc3b1yhl.jl:27\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  MethodError: no method matching multiply(::Rational{Int64},\
    \ ::Rational{Int64})\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n   \
    \  @ Main /tmp/tmpwc3b1yhl.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwc3b1yhl.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwc3b1yhl.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwc3b1yhl.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  MethodError: no method matching multiply(::Rational{Int64},\
    \ ::Rational{Int64})\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n   \
    \  @ Main /tmp/tmpwc3b1yhl.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwc3b1yhl.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwc3b1yhl.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwc3b1yhl.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  MethodError: no method matching multiply(::Rational{Int64},\
    \ ::Rational{Int64})\n  Stacktrace:\n   [1] multiply(a::Int64, b::Int64)\n   \
    \  @ Main /tmp/tmpwc3b1yhl.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwc3b1yhl.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwc3b1yhl.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwc3b1yhl.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  MethodError: no method matching multiply(::Rational{Int64},\
    \ ::Rational{Int64})\n  St"
  timestamp: 1660008680
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return ((a % 10)\
    \ * (b % 10))\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr2_4bry2.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpr2_4bry2.jl:25\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr2_4bry2.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr2_4bry2.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return mod(a,\
    \ 10) * mod(b, 10)\nend\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    return a % 10\
    \ * b % 10\nend\na = multiply(148, 412)\nb = multiply(19, 28)\nc = multiply(2020,\
    \ 1851)\nd = multiply(14, -15)\nprintln(a, b, c, d)\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn703h_g1.jl:24

    '
  stdout: "6200\ntest set: Test Failed at /tmp/tmpn703h_g1.jl:27\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn703h_g1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn703h_g1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpn703h_g1.jl:28\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 2 == 72\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn703h_g1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn703h_g1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpn703h_g1.jl:30\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: 0 == 20\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn703h_g1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn703h_g1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpn703h_g1.jl:31\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 2 == 42\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn703h_g1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn703h_g1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpn703h_g1.jl:32\n  Expression: candidate(17, 27) == 49\n  \
    \ Evaluated: 9 == 49\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn703h_g1.jl:32 [inlined]\n [3]\
    \ macr"
  timestamp: 1660008679
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    if a < 0\n   \
    \     a = -a\n    end\n    if b < 0\n        b = -b\n    end\n    return mod(a,\
    \ 10) * mod(b, 10)\nend\n\"\"\"Given two strings, the function returns the number\
    \ of functions \n    that the common substring appears in the longest string.\n\
    \    For example, given two strings \"abxabxabxabx\" and \"abcabcabcabcabc\",\
    \ \n    the function will return 3, because the longest common substring \"abc\"\
    \ \n    appears 3 times in the longest string.\n    Here is a table:\n    >>>\
    \ substring_count(\"abxabxabxabx\", \"abcabcabcabcabc\")\n    3\n    >>> substring_count(\"\
    zabxabxabxabxabxabxabx\", \"abcabcabcabcabc\")\n    3\n    >>> substring_count(\"\
    abxabxabxabxabxabxabx\", \"abcabcabcabcabc\")\n    2\n    >>> substring_count(\"\
    abxabxabxabxabxabxabx\", \"abcabcabcabcabcabcabcabc\")\n    2\n    >>> substring_count(\"\
    abababababab\", \"ab\")\n    12\n    >>> substring_count(\"abababababab\", \"\
    ba\")\n    6\n    >>> substring_count(\"abababababab\", \"aba\")\n    8\n    >>>\
    \ substring_count(\"abababababab\", \"abab\")\n    10\n    >>> substring_count(\"\
    abababababab\", \"ababa\")\n    6\n    >>> substring_count(\"abababababab\", \"\
    ababab\")\n    6\n    >>> substring_count(\"abababababab\", \"abababa\")\n   \
    \ 4\n    >>> substring_count(\"abababababab\", \"abababab\")\n    4\n    >>> substring_count(\"\
    abababababab\", \"ababababa\")\n    2\n    >>> substring_count(\"abababababab\"\
    , \"ababababab\")\n    2\n    >>> substring_count(\"abababababab\", \"ababab\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3mve75a.jl:23\nin expression starting at\
    \ /tmp/tmpn3mve75a.jl:23\n"
  stdout: ''
  timestamp: 1660008678
- exit_code: 0
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    a1 = mod(a, 10)\n\
    \    b1 = mod(b, 10)\n    return a1 * b1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n    \n    function\
    \ reduce(n::Int64)::Int64\n        m = n % 10\n        return m\n    end\n   \
    \ \n    return reduce(a) * reduce(b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp001msr7y.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp001msr7y.jl:31\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp001msr7y.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp001msr7y.jl:27\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660008679
