language: jl
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # YOUR CODE HERE\n    max_uniqs = 0\n    max_uniq_word = \"\"\n    for\
    \ word in words\n        uniqs = length(unique(word))\n        if uniqs > max_uniqs\n\
    \            max_uniqs = uniqs\n            max_uniq_word = word\n        end\n\
    \    end\n    return max_uniq_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3emgxvbi.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp3emgxvbi.jl:32\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3emgxvbi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3emgxvbi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3emgxvbi.jl:35\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3emgxvbi.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3emgxvbi.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    #initialize max_word with the first word\n    max_word = words[1] \n \
    \   # find the maximum word in the vector of words\n    for i in 2:length(words)\n\
    \        if unique_chars(words[i]) > unique_chars(max_word)\n            max_word\
    \ = words[i]\n        end\n    end\n    return max_word\nend\n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmprtnlsr5r.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmprtnlsr5r.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ unique_chars not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmprtnlsr5r.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprtnlsr5r.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprtnlsr5r.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprtnlsr5r.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: unique_chars\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmprtnlsr5r.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprtnlsr5r.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprtnlsr5r.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprtnlsr5r.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: unique_chars\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmprtnlsr5r.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprtnlsr5r.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprtnlsr5r.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprtnlsr5r.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: unique_chars not\
    \ defined\n  Stacktrace:\n   [1] find_max(words::Vector{St"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word = \"\"\n    for i in 1:length(words)\n        if length(unique(words[i]))\
    \ > length(unique(word))\n            word = words[i]\n        end\n    end\n\
    \    word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg6bsuloj.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpg6bsuloj.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6bsuloj.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6bsuloj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpg6bsuloj.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6bsuloj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6bsuloj.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # this is a vector of uniq characters in each word in vector\n    uniq_chars\
    \ = [Set(collect(word)) for word in words]\n    # this is a vector of max uniq\
    \ char for each word\n    max_uniq = [length(uniq_chars[i]) for i in 1:length(uniq_chars)]\n\
    \    # find index of word with max number of uniq characters\n    max_index =\
    \ findall(max_uniq .== maximum(max_uniq))\n    # if more than one index, return\
    \ first of them\n    if length(max_index) == 1\n        return words[max_index[1]]\n\
    \    else\n        # find index of word in lexicographical order\n        # sort\
    \ words and calculate index of first word in sorted list\n        sorted_index\
    \ = findall(sort(words) .== words[max_index[1]])\n        return words[sorted_index[1]]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy2tv7x44.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpy2tv7x44.jl:36\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"game\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy2tv7x44.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy2tv7x44.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpy2tv7x44.jl:39\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"of\" == \"\
    footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy2tv7x44.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy2tv7x44.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpy2tv7x44.jl:40\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"are\" == \"gonna\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy2tv7x44.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy2tv7x44.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max = 0\n    index = 1\n    for i in 1:length(words)\n        if length(unique(words[i]))\
    \ > max\n            max = length(unique(words[i]))\n            index = i\n \
    \       end\n    end\n    return words[index]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8c6_ab6o.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp8c6_ab6o.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8c6_ab6o.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8c6_ab6o.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8c6_ab6o.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8c6_ab6o.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8c6_ab6o.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max = 0\n    for word in words\n        if length(unique(word)) > max\n\
    \            max = length(unique(word))\n            winner = word\n        end\n\
    \    end\n    return winner\nend\nfind_max([\"name\", \"of\", \"string\"])\nfind_max([\"\
    name\", \"enam\", \"game\"])\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: winner not defined\nStacktrace:\n [1]\
    \ find_max(words::Vector{String})\n   @ Main /tmp/tmp0l0_hfqy.jl:21\n [2] top-level\
    \ scope\n   @ /tmp/tmp0l0_hfqy.jl:23\nin expression starting at /tmp/tmp0l0_hfqy.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_count = count_unique(words[1])\n    max_word = words[1]\n    for i\
    \ = 2:length(words)\n        if count_unique(words[i]) > max_count\n         \
    \   max_count = count_unique(words[i])\n            max_word = words[i]\n    \
    \    end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpfz72tksx.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpfz72tksx.jl:29\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ count_unique not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpfz72tksx.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfz72tksx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfz72tksx.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfz72tksx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: count_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpfz72tksx.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfz72tksx.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfz72tksx.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfz72tksx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: count_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpfz72tksx.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfz72tksx.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfz72tksx.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfz72tksx.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: count_unique not\
    \ defined\n  Stacktrace:\n   [1] find_max(words::Vector{St"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    maxlen = 0\n    maxword = \"\"\n    for word in words\n        if length(unique(word))\
    \ > maxlen\n            maxlen = length(unique(word))\n            maxword = word\n\
    \        end\n    end\n    return maxword\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe6f8fbst.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpe6f8fbst.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6f8fbst.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6f8fbst.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpe6f8fbst.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6f8fbst.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6f8fbst.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_len = length(words[1])\n    max_word = words[1]\n    for i = 2:length(words)\n\
    \        if length(words[i]) > max_len\n            max_len = length(words[i])\n\
    \            max_word = words[i]\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl1yngs5a.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpl1yngs5a.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1yngs5a.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1yngs5a.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # initialising variables\n    max_unique = 0\n    max_unique_word = \"\
    \"\n    # determining max unique chars\n    for word in words\n        unique_char\
    \ = length(unique(word))\n        if unique_char > max_unique\n            max_unique\
    \ = unique_char\n            max_unique_word = word\n        end\n    end\n  \
    \  return max_unique_word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzavyy2gl.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpzavyy2gl.jl:33\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzavyy2gl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzavyy2gl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzavyy2gl.jl:36\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzavyy2gl.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzavyy2gl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # 3\n    for i = length(words):-1:1 \n        for j = 1:i-1 \n       \
    \     if length(words[j]) < length(words[j+1]) \n                words[j], words[j+1]\
    \ = words[j+1], words[j] \n            end \n        end \n    end \n    # 4\n\
    \    for i = 1:length(words) \n        k = 1 \n        while k <= length(words[i])\
    \ \n            j = 1 \n            while j <= length(words[i]) \n           \
    \     if j > k && words[i][k] == words[i][j] \n                    words[i] =\
    \ replace(words[i], j, \"\") \n                end \n                j += 1 \n\
    \            end \n            k += 1 \n        end \n    end \n    # 5\n    res\
    \ = words[1] \n    # 6\n    for i = 2:length(words) \n        if length(words[i])\
    \ == length(res) \n            if words[i] < res \n                res = words[i]\
    \ \n            end \n        elseif length(words[i]) > length(res) \n       \
    \     res = words[i] \n        end \n    end \n    return res \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpkh7o0r71.jl:57\n  Test threw
    exception\n  Expression: candidate(["aaaaaaa", "bb", "cc"]) == "aaaaaaa"\n  MethodError:
    no method matching replace(::String, ::Int64, ::String)\n  Closest candidates
    are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n    replace(::String,
    !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n    replace(::AbstractString,
    !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n    ...\n  Stacktrace:\n   [1]
    find_max(words::Vector{String})\n     @ Main /tmp/tmpkh7o0r71.jl:29\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkh7o0r71.jl:57 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkh7o0r71.jl:54\ntest set: Error
    During Test at /tmp/tmpkh7o0r71.jl:59\n  Test threw exception\n  Expression: candidate(["play",
    "this", "game", "of", "footbott"]) == "footbott"\n  MethodError: no method matching
    replace(::String, ::Int64, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,
    Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n    replace(::String,
    !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n    replace(::AbstractString,
    !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n    ...\n  Stacktrace:\n   [1]
    find_max(words::Vector{String})\n     @ Main /tmp/tmpkh7o0r71.jl:29\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkh7o0r71.jl:59 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdl'
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    s = sort(words, by=length, rev=true)\n    for i in eachindex(s)\n    \
    \    if (length(unique(s[i])) == length(s[i]))\n            return s[i]\n    \
    \    end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpqoeyqyot.jl:27\n  Expression: candidate(["name",
    "enam", "game"]) == "enam"\n   Evaluated: "name" == "enam"\nStacktrace:\n [1]
    macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoeyqyot.jl:27 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoeyqyot.jl:25\n'''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        count\
    \ = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl0ctne00.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpl0ctne00.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl0ctne00.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl0ctne00.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpl0ctne00.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl0ctne00.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl0ctne00.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_uniq = []\n    max_val = 0\n    for word in words\n        if max_val\
    \ < length(unique(word))\n            max_val = length(unique(word))\n       \
    \     max_uniq = [word]\n        elseif max_val == length(unique(word))\n    \
    \        push!(max_uniq, word)\n        end\n    end\n    return sort(max_uniq)[1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    max_word_length = length(unique(words[1]))\n\
    \    for i in 1:length(words)\n        current_length = length(unique(words[i]))\n\
    \        if current_length > max_word_length\n            max_word = words[i]\n\
    \            max_word_length = current_length\n        end\n    end\n    return\
    \ max_word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppdplkt74.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmppdplkt74.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppdplkt74.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppdplkt74.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppdplkt74.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppdplkt74.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppdplkt74.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \"\"\"\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\
    \n    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \"\"\"\n    max_len = 0\n  \
    \  max_word = \"\"\n    for word in words\n        if word_len(word) > max_len\n\
    \            max_len = word_len(word)\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmphdcx1gfj.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmphdcx1gfj.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ word_len not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmphdcx1gfj.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphdcx1gfj.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphdcx1gfj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmphdcx1gfj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: word_len\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmphdcx1gfj.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphdcx1gfj.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphdcx1gfj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmphdcx1gfj.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: word_len\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmphdcx1gfj.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphdcx1gfj.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphdcx1gfj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmphdcx1gfj.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: word_len not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Ma"
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    temp_dict = Dict{String, Int}()\n    for i in words\n        temp_dict[i]\
    \ = length(unique(i))\n    end\n    max_val = maximum(temp_dict)\n    max_string\
    \ = findall(value -> value == max_val, temp_dict)\n    min_string = findmin(max_string)\n\
    \    return min_string\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpzxaos45a.jl:28\n  Test threw
    exception\n  Expression: candidate(["name", "of", "string"]) == "string"\n  ArgumentError:
    reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n      @
    Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmin)},
    T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var"#262#263"{typeof(identity)},
    Base.BottomRF{typeof(Base._rf_findmin)}}, #unused#::Type{Pair{Int64, Union{}}})\n      @
    Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [5]
    reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n    [6] foldl_impl(op::Base.MappingRF{Base.var"#262#263"{typeof(identity)},
    Base.BottomRF{typeof(Base._rf_findmin)}}, nt::Base._InitialValue, itr::Base.Pairs{Int64,
    Union{}, LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Vector{Union{}}})\n      @
    Base ./reduce.jl:49\n    [7] mapfoldl_impl(f::Base.var"#262#263"{typeof(identity)},
    op::typeof(Base._rf_findmin), nt::Base._InitialValue, itr::Base.Pairs{Int64, Union{},
    LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Vector{Union{}}})\n      @ Base ./reduce.jl:44\n    [8]
    mapfoldl(f::Function, op::Function, itr::Base.Pairs{Int64, Union{}, LinearIndices{1,
    Tuple{Base.OneTo{Int64}}}, Vector{Union{}}}; init::Base._InitialValue)\n      @
    Base ./reduce.jl:162\n    [9] mapfoldl(f::Function, op::Function, itr::Base.Pairs{Int64,
    Union{}, LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Vector{Union{}}})\n      @
    Base ./reduce.jl:162\n   [10] findmin(f::typeof(identity), domain::Vector{Union{}})\n      @
    Base ./reduce.jl:862\n   [11] _findmin(a::Vector{Union{}}, #unused#::Colon)\n      @
    Base ./reduce.jl:888\n   [12] findmin(A::Vector{Union{}}; dims::Function)\n      @
    Base ./reducedim.jl:1005\n   [13] findmin(A::Vector{Union{}})\n      @ Base ./reducedim.jl:1005\n   [14]
    find_max(words::Vector{String})\n      @ Main /tmp/tmpzxaos45a.jl:20\n   [15]
    macro expansion\n      @ /shared/'
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    max_len = 0\n    for w in words\n        if length(unique(w))\
    \ > max_len\n            max_word = w\n            max_len = length(unique(w))\n\
    \        end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxfe92n6i.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpxfe92n6i.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxfe92n6i.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxfe92n6i.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpxfe92n6i.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxfe92n6i.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxfe92n6i.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_idx = 1\n    max_uniq = length(unique(words[1]))\n    for i in 2:length(words)\n\
    \        if length(unique(words[i])) > max_uniq\n            max_idx = i\n   \
    \         max_uniq = length(unique(words[i]))\n        end\n    end\n    return\
    \ words[max_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp78882doc.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp78882doc.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78882doc.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78882doc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp78882doc.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78882doc.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78882doc.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_length = 0\n    max_word = \"\"\n    for word in words\n        unique_count\
    \ = length(unique(collect(word)))\n        if unique_count > max_length\n    \
    \        max_length = unique_count\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3okruwry.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp3okruwry.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3okruwry.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3okruwry.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3okruwry.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3okruwry.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3okruwry.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    arr = string.(words)\n    arr1 = string.(words)\n    n = length(arr)\n\
    \    for i in 1:n \n        arr[i] = String(unique(arr[i]))\n    end\n    t =\
    \ count_unique(arr[1])\n    for i in 2:n\n        if count_unique(arr[i]) > t\n\
    \            t = count_unique(arr[i])\n            k = i\n        end\n    end\n\
    \    find_max = arr1[k]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp4g9uel31.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp4g9uel31.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ count_unique not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp4g9uel31.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4g9uel31.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4g9uel31.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4g9uel31.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: count_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp4g9uel31.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4g9uel31.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4g9uel31.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4g9uel31.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: count_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp4g9uel31.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4g9uel31.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4g9uel31.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4g9uel31.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: count_unique not\
    \ defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp4g9"
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # number of unique chars in each word\n    v = [size(unique(word), 1)\
    \ for word in words]\n    idx = findmax(v)[2]\n    return words[idx]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl95hpnrn.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpl95hpnrn.jl:25\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl95hpnrn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl95hpnrn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl95hpnrn.jl:28\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl95hpnrn.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl95hpnrn.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    num_words = length(words)\n    num_unique_char = zeros(num_words)\n  \
    \  for (i, word) in enumerate(words)\n        num_unique_char[i] = length(unique(word))\n\
    \    end\n    max_idx = indmax(num_unique_char)\n    return words[max_idx]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp0b7s98e3.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp0b7s98e3.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ indmax not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp0b7s98e3.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0b7s98e3.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0b7s98e3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0b7s98e3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp0b7s98e3.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0b7s98e3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0b7s98e3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0b7s98e3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp0b7s98e3.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0b7s98e3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0b7s98e3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0b7s98e3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: indmax not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmp0b7s98e3.jl:19\n\
    \   [2] macro"
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # Find the word with the most unique characters.\n    max = 0\n    max_word\
    \ = \"\"\n    for word in words\n        unique_count = length(unique(word))\n\
    \        if unique_count > max\n            max = unique_count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpppnh91he.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpppnh91he.jl:32\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpppnh91he.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpppnh91he.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpppnh91he.jl:35\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpppnh91he.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpppnh91he.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_n_unique = 0\n    best_word = \"\"\n    for word in words\n      \
    \  unique_chars = unique(word)\n        n_unique = length(unique_chars)\n    \
    \    if n_unique > max_n_unique\n            max_n_unique = n_unique\n       \
    \     best_word = word\n        elseif n_unique == max_n_unique\n            best_word\
    \ = min(best_word, word)\n        end\n    end\n    return best_word\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    if length(words)==0\n        return \"\"\n    end\n    index=1\n    for\
    \ i=2:length(words)\n        if length(unique(words[i]))>length(unique(words[index]))\n\
    \            index=i\n        elseif length(unique(words[i]))==length(unique(words[index]))\
    \ && words[i]<words[index]\n            index=i\n        end\n    end\n    return\
    \ words[index]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    best_word = \"\"\n    best_word_char_count = 0\n    for word in words\n\
    \        # Would be nice to use length(Set(word))\n        # but Julia doesn't\
    \ have the Set type yet\n        word_char_count = length(unique(word))\n    \
    \    if word_char_count > best_word_char_count\n            best_word = word\n\
    \            best_word_char_count = word_char_count\n        end\n    end\n  \
    \  return best_word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpppomyjyk.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpppomyjyk.jl:33\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpppomyjyk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpppomyjyk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpppomyjyk.jl:36\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpppomyjyk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpppomyjyk.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    longest_unique_chars_word = \"\"\n    max_unique_chars = 0\n    for word\
    \ in words\n        unique_chars = length(unique(word))\n        if unique_chars\
    \ > max_unique_chars\n            max_unique_chars = unique_chars\n          \
    \  longest_unique_chars_word = word\n        end\n    end\n    return longest_unique_chars_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxr80c4jn.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpxr80c4jn.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxr80c4jn.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxr80c4jn.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxr80c4jn.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxr80c4jn.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxr80c4jn.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    if length(words) == 0 \n        error(\"Vector is empty!\")\n    end\n\
    \    max_string = words[1]\n    max_unique = unique_characters(max_string)\n \
    \   for i in 2:length(words)\n        if unique_characters(words[i]) > max_unique\n\
    \            max_string = words[i]\n            max_unique = unique_characters(max_string)\n\
    \        end\n    end\n    return max_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp43b86ywl.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp43b86ywl.jl:32\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ unique_characters not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp43b86ywl.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp43b86ywl.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp43b86ywl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp43b86ywl.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: unique_characters\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp43b86ywl.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp43b86ywl.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp43b86ywl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp43b86ywl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: unique_characters\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp43b86ywl.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp43b86ywl.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp43b86ywl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp43b86ywl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: unique_characters\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n   "
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_unique_chars = 0\n    for i in 1:length(words)\n\
    \        if length(unique(words[i])) > max_unique_chars\n            max_unique_chars\
    \ = length(unique(words[i]))\n            max_word = words[i]\n        end\n \
    \   end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6egvh740.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp6egvh740.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6egvh740.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6egvh740.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6egvh740.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6egvh740.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6egvh740.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    if length(words) == 0\n        return \"\"\n    end\n    result = words[1]\n\
    \    max_unique = length(unique(result))\n    for i in 2:length(words)\n     \
    \   if max_unique < length(unique(words[i]))\n            result = words[i]\n\
    \            max_unique = length(unique(result))\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqkxdhl7i.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpqkxdhl7i.jl:33\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqkxdhl7i.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqkxdhl7i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqkxdhl7i.jl:36\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqkxdhl7i.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqkxdhl7i.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    i = 1\n    while i < n\n        if length(unique(words[i]))\
    \ > length(unique(words[i+1]))\n            return words[i]\n        else\n  \
    \          return words[i+1]\n        end\n        i += 1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpbxrmgnzm.jl:30\n  Expression: candidate(["name",
    "of", "string"]) == "string"\n   Evaluated: "name" == "string"\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxrmgnzm.jl:30 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxrmgnzm.jl:29\ntest set: Test Failed
    at /tmp/tmpbxrmgnzm.jl:32\n  Expression: candidate(["aaaaaaa", "bb", "cc"]) ==
    "aaaaaaa"\n   Evaluated: "bb" == "aaaaaaa"\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpbxrmgnzm.jl:32 [inlined]\n [3] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpbxrmgnzm.jl:29\ntest set: Test Failed at /tmp/tmpbxrmgnzm.jl:33\n  Expression:
    candidate(["abc", "cba"]) == "abc"\n   Evaluated: "cba" == "abc"\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxrmgnzm.jl:33 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxrmgnzm.jl:29\ntest set: Test Failed
    at /tmp/tmpbxrmgnzm.jl:34\n  Expression: candidate(["play", "this", "game", "of",
    "footbott"]) == "footbott"\n   Evaluated: "this" == "footbott"\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxrmgnzm.jl:34 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxrmgnzm.jl:29\ntest set: Test Failed
    at /tmp/tmpbxrmgnzm.jl:35\n  Expression: candidate(["we", "are", "gonna", "rock"])
    ='
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_count::Int64 = 0\n    max_word::String = \"\"\n    for word in words\n\
    \        if length(unique(word)) > max_count\n            max_count = length(unique(word))\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1w4bhtux.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp1w4bhtux.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1w4bhtux.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1w4bhtux.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1w4bhtux.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1w4bhtux.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1w4bhtux.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # Initialize a variable to keep track of the word with the most unique\n\
    \    # characters.\n    word_with_most_uniques = words[1]\n    # Initialize a\
    \ variable to keep track of the number of unique characters\n    # that word has.\n\
    \    max_unique_chars = length(unique(words[1]))\n    # Iterate over the words.\n\
    \    for i = 2:length(words)\n        # Get the number of unique characters in\
    \ the current word.\n        num_uniques = length(unique(words[i]))\n        #\
    \ Check if it is the new maximum.\n        if num_uniques > max_unique_chars\n\
    \            # Update the maximum number of unique characters.\n            max_unique_chars\
    \ = num_uniques\n            # Update the word with the most unique characters.\n\
    \            word_with_most_uniques = words[i]\n        end\n    end\n    # Return\
    \ the word with the most unique characters.\n    return word_with_most_uniques\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjae3ketl.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpjae3ketl.jl:41\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjae3ketl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjae3ketl.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpjae3ketl.jl:44\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjae3ketl.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjae3ketl.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # find the len of each word\n    # set diff to 0\n    # create a string\
    \ to store max word\n    # iterate through list of words\n        # iterate through\
    \ the letters of each word\n            # if letter in list_of_letters:\n    \
    \            # do nothing\n            # else:\n                # add it to list\
    \ of letters\n                # diff = diff + 1\n        # if diff > diff_of_max_word:\n\
    \            # diff_of_max_word = diff\n            # max_word = current_word\n\
    \        # diff = 0\n    # return max_word\n    diff = 0\n    diff_of_max_word\
    \ = 0\n    max_word = \"\"\n    for word in words\n        for letter in word\n\
    \            if letter in list_of_letters:\n                # do nothing\n   \
    \         else:\n                push!(list_of_letters, letter)\n            \
    \    diff = diff + 1\n        end\n        if diff > diff_of_max_word\n      \
    \      diff_of_max_word = diff\n            max_word = word\n        end\n   \
    \     diff = 0\n        list_of_letters = []\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdre7xo3n.jl:35\nin expression starting at\
    \ /tmp/tmpdre7xo3n.jl:35\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_len = 0\n    max_word = \"\"\n    for w in words\n        if length(unique(w))\
    \ > max_len\n            max_len = length(unique(w))\n            max_word = w\n\
    \        end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsd6bm4a4.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpsd6bm4a4.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsd6bm4a4.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsd6bm4a4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsd6bm4a4.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsd6bm4a4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsd6bm4a4.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        count\
    \ = 0\n        for c in word\n            if !(c in max_word)\n              \
    \  count += 1\n            end\n        end\n        if count > max_count\n  \
    \          max_word = word\n            max_count = count\n        end\n    end\n\
    \    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsjq1o9u7.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpsjq1o9u7.jl:36\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsjq1o9u7.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsjq1o9u7.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    num_unique = Dict()\n    for word in words\n        num_unique[word] =\
    \ length(unique(word))\n    end\n    max_unique = maximum(values(num_unique))\n\
    \    for key in keys(num_unique)\n        if num_unique[key] == max_unique\n \
    \           return key\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7xvih70o.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp7xvih70o.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7xvih70o.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7xvih70o.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp7xvih70o.jl:32\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"bb\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7xvih70o.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7xvih70o.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp7xvih70o.jl:35\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"rock\" == \"gonna\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7xvih70o.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7xvih70o.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
  timestamp: 1659979967
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    ch = Vector{String}()\n    for word in words\n        append!(ch, word)\n\
    \    end\n    p = 0\n    t = 0\n    for word in ch\n        if length(unique(word))\
    \ >= p\n            t = word\n            p = length(unique(word))\n        end\n\
    \    end\n    return t\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpsn0a36_x.jl:33\n  Test threw
    exception\n  Expression: candidate(["name", "of", "string"]) == "string"\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(A::Vector{String}, x::Char, i1::Int64)\n     @ Base ./array.jl:903\n   [2]
    _append!(a::Vector{String}, #unused#::Base.HasLength, iter::String)\n     @ Base
    ./array.jl:1060\n   [3] append!\n     @ ./array.jl:1050 [inlined]\n   [4] find_max(words::Vector{String})\n     @
    Main /tmp/tmpsn0a36_x.jl:16\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpsn0a36_x.jl:33 [inlined]\n   [7]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpsn0a36_x.jl:32\ntest set: Error
    During Test at /tmp/tmpsn0a36_x.jl:34\n  Test threw exception\n  Expression: candidate(["name",
    "enam", "game"]) == "enam"\n  MethodError: Cannot `convert` an object of type
    Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(A::Vector{String}, x::Char, i1::Int64)\n     @ Base ./array.jl:903\n   [2]
    _ap'
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    maxlength = 0\n    maxword = \"\"\n    for word in words\n        letters\
    \ = Set(collect(word))\n        if length(letters) > maxlength\n            maxlength\
    \ = length(letters)\n            maxword = word\n        end\n    end\n    return\
    \ maxword\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkpf_9a6s.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpkpf_9a6s.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkpf_9a6s.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkpf_9a6s.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpkpf_9a6s.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkpf_9a6s.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkpf_9a6s.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    max = 0\n    ret = 0\n    for i in 1:n\n      \
    \  t = length(unique(collect(words[i])))\n        if t > max\n            max\
    \ = t\n            ret = i\n        end\n    end\n    return words[ret]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3jo33_0f.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp3jo33_0f.jl:32\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3jo33_0f.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3jo33_0f.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3jo33_0f.jl:35\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3jo33_0f.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3jo33_0f.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_len = 0\n    for w in words\n        unique_letters\
    \ = Set()\n        for l in w\n            push!(unique_letters, l)\n        end\n\
    \        if length(unique_letters) > max_len ||\n            (length(unique_letters)\
    \ == max_len && w < max_word)\n            max_word = w\n            max_len =\
    \ length(unique_letters)\n        end\n    end\n    return max_word\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_string = \"\"\n    for word in words\n        if length(unique(word))\
    \ > length(unique(max_string))\n            max_string = word\n        end\n \
    \   end\n    return max_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl0ctnjsj.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpl0ctnjsj.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl0ctnjsj.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl0ctnjsj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl0ctnjsj.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl0ctnjsj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl0ctnjsj.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    max_chars::Int = 0\n    max_word::String = \"\"\n    \n    for word\
    \ in words\n        num_chars::Int = length(unique(word))\n        if num_chars\
    \ > max_chars\n            max_chars = num_chars\n            max_word = word\n\
    \        end\n    end\n    \n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp31wgh1as.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp31wgh1as.jl:34\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp31wgh1as.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp31wgh1as.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp31wgh1as.jl:37\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp31wgh1as.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp31wgh1as.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979968
- exit_code: -11
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    min_length, max_unique = length(words[1]), 0\n    @inbounds for i in 2:length(words)\n\
    \        max_unique = max(max_unique, length(setdiff(words[i], words[i-1])))\n\
    \        min_length = min(min_length, length(words[i]))\n    end\n    @inbounds\
    \ for i in 1:length(words)\n        length_ = length(words[i])\n        if length_\
    \ == min_length && length_(setdiff(words[i], words[i-1])) == max_unique\n    \
    \        return words[i]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: '

    signal (11): Segmentation fault

    in expression starting at /tmp/tmpjjhvqpka.jl:28

    ncodeunits at ./strings/string.jl:98 [inlined]

    iterate at ./strings/string.jl:193 [inlined]

    iterate at ./strings/string.jl:193 [inlined]

    setdiff! at ./abstractset.jl:196

    _shrink at ./array.jl:2632 [inlined]

    setdiff at ./array.jl:2637 [inlined]

    find_max at /tmp/tmpjjhvqpka.jl:21

    jl_apply at /usr/local/src/conda/julia-1.7.3/src/julia.h:1788 [inlined]

    do_call at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:126

    eval_value at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:215

    eval_stmt_value at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:166 [inlined]

    eval_body at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:587

    eval_body at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:516

    eval_body at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:516

    eval_body at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:516

    jl_interpret_toplevel_thunk at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:731

    jl_toplevel_eval_flex at /usr/local/src/conda/julia-1.7.3/src/toplevel.c:885

    jl_toplevel_eval_flex at /usr/local/src/conda/julia-1.7.3/src/toplevel.c:830

    jl_toplevel_eval_in at /usr/local/src/conda/julia-1.7.3/src/toplevel.c:944

    eval at ./boot.jl:373 [inlined]

    include_string at ./loading.jl:1196

    _include at ./loading.jl:1253

    include at ./Base.jl:418

    exec_options at ./client.jl:292

    _start at ./client.jl:495

    jfptr__start_26222.clone_1 at /home/a.guha/.conda/envs/polyglot/lib/julia/sys.so
    (unknown line)

    jl_apply at /usr/local/src/conda/julia-1.7.3/src/julia.h:1788 [inlined]

    true_main at /usr/local/src/conda/julia-1.7.3/src/jlapi.c:559

    jl_repl_entrypoint at /usr/local/src/conda/julia-1.7.3/src/jlapi.c:701

    main at julia (unknown line)

    __libc_start_main at /lib64/libc.so.6 (unknown line)

    unknown function (ip: 0x559594ac7098)

    Allocations: 2457281 (Pool: 2455527; Big: 1754); GC: 3

    '
  stdout: "test set: Error During Test at /tmp/tmpjjhvqpka.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ objects of type Int64 are not callable\n  Maybe you forgot to use an operator\
    \ such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpjjhvqpka.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjjhvqpka.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjjhvqpka.jl:30\n"
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    output = Vector{String}()\n    max_length = 0\n    for word in words\n\
    \        # If the word is longer than the other words, \n        # it will have\
    \ more unique characters so we \n        # don't need to check it\n        if\
    \ length(word) > max_length\n            output = [word]\n            max_length\
    \ = length(word)\n        # If the word is equal to the max length\n        #\
    \ it might be the word with the most\n        # unique characters\n        elseif\
    \ length(word) == max_length\n            output = [word]\n        end\n    end\n\
    \    return output[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2mxnbkng.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2mxnbkng.jl:38\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"game\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mxnbkng.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mxnbkng.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2mxnbkng.jl:40\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"cba\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2mxnbkng.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2mxnbkng.jl:36\ntest set: Test Failed at /tmp/tmp2mxnbkng.jl:44\n\
    \  Expression: candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"\n  \
    \ Evaluated: \"prrk\" == \"this\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mxnbkng.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mxnbkng.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # we will use a dictionary to count the number of unique characters\n\
    \    # in a given word. The unique character is the key and the value is the \n\
    \    # count. The count will be 1 as we only care if it is unique or not.\n  \
    \  # we will use a vector to compare the result of the computation of the \n \
    \   # words based on the maximum number of unique characters. When two words\n\
    \    # have the same number of unique characters, we will choose the one that\
    \ \n    # is lexicographically smaller.\n    # intialize the maximum number of\
    \ unique characters to 0\n    # initialize the index of the word with the maximum\
    \ number of unique \n    # characters to 0 \n    max = 0\n    index = 0\n    for\
    \ i in 1:length(words)\n        dictionary = Dict{String,Int}()\n        for j\
    \ in 1:length(words[i])\n            dict_key = words[i][j]\n            if haskey(dictionary,\
    \ dict_key)\n                dictionary[dict_key] += 1\n            else\n   \
    \             dictionary[dict_key] = 1\n            end\n        end\n       \
    \ if length(dictionary) > max\n            max = length(dictionary)\n        \
    \    index = i\n        end\n    end\n    return words[index]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp39stg_o9.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmp39stg_o9.jl:48\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp39stg_o9.jl:33\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp39stg_o9.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp39stg_o9.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp39stg_o9.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp39stg_o9.jl:33\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4"
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    max_word_freq = Dict()\n    for word in words\n\
    \        for char in word\n            if get(max_word_freq, char, 0) == 0\n \
    \               max_word_freq[char] = 1\n            end\n        end\n      \
    \  if length(max_word_freq) > length(Dict())\n            return max_word\n  \
    \      end\n        max_word_freq = Dict()\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg_ikzz0m.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpg_ikzz0m.jl:34\n  Expression: candidate([\"\
    name\", \"of\", \"string\"]) == \"string\"\n   Evaluated: \"name\" == \"string\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_ikzz0m.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_ikzz0m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg_ikzz0m.jl:35\n  Expression: candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_ikzz0m.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_ikzz0m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg_ikzz0m.jl:38\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_ikzz0m.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_ikzz0m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg_ikzz0m.jl:39\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"we\" == \"gonna\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_ikzz0m.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_ikzz0m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg_ikzz0m.jl:40\n  Expression: candidate([\"we\", \"are\",\
    \ \"a\", \"mad\", \"nation\"]) == \"nation\"\n   Evaluated: \"we\" "
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_length = 0\n    max_string = \"\"\n    for word in words\n       \
    \ if length(unique(word)) > max_length\n            max_length = length(unique(word))\n\
    \            max_string = word\n        end\n    end\n    return max_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplm935rqh.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmplm935rqh.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplm935rqh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplm935rqh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplm935rqh.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplm935rqh.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplm935rqh.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_length = 0\n    max_word = words[1]\n    for word in words\n     \
    \   unique_chars = unique(word)\n        if length(unique_chars) > max_length\n\
    \            max_length = length(unique_chars)\n            max_word = word\n\
    \        end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxoiejp_d.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpxoiejp_d.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxoiejp_d.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxoiejp_d.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxoiejp_d.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxoiejp_d.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxoiejp_d.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique = 0\n    max_unique_word = \"\"\n    for word in words\n  \
    \      current_unique = length(unique(collect(word)))\n        if current_unique\
    \ > max_unique\n            max_unique = current_unique\n            max_unique_word\
    \ = word\n        elseif current_unique == max_unique\n            if word < max_unique_word\n\
    \                max_unique_word = word\n            end\n        end\n    end\n\
    \    return max_unique_word\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_count = 0\n    max_str = \"\"\n    for word in words\n        temp_count\
    \ = Set(word)\n        if length(temp_count) > max_count\n            max_count\
    \ = length(temp_count)\n            max_str = word\n        end\n    end\n   \
    \ return max_str\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw96igct4.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpw96igct4.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw96igct4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw96igct4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw96igct4.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw96igct4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw96igct4.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    #initialize empty vector\n    count_unique_characters = []\n    #iterate\
    \ through every word in vector\n    for word in words\n        #calculate unique\
    \ characters in word and append to vector\n        push!(count_unique_characters,\
    \ length(unique(word)))\n    end\n    #store index of maximum value\n    i = findmax(count_unique_characters)[2]\n\
    \    #return max unique char string\n    return words[i]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp729_t00r.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp729_t00r.jl:32\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp729_t00r.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp729_t00r.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp729_t00r.jl:35\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp729_t00r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp729_t00r.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979970
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    maxunique = 0\n    maxunique_word = \" \"\n    for i = 1:length(words)\n\
    \        numunique = length(unique(words[i]))\n        if (numunique > maxunique)\n\
    \            maxunique = numunique\n            maxunique_word = words[i]\n  \
    \      elseif (numunique == maxunique)\n            if words[i] < maxunique_word\n\
    \                maxunique_word = words[i]\n            end\n        end\n   \
    \ end\n    return maxunique_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    max_uniq = 0\n    uniq_chars = Set()\n    for\
    \ word in words\n        uniq_chars = Set()\n        for ch in word\n        \
    \    push!(uniq_chars, ch)\n        end\n        if length(uniq_chars) > max_uniq\n\
    \            max_uniq = length(uniq_chars)\n            max_word = word\n    \
    \    end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprjz9p479.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmprjz9p479.jl:35\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjz9p479.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjz9p479.jl:33\ntest set: Test\
    \ Failed at /tmp/tmprjz9p479.jl:38\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjz9p479.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjz9p479.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    m = length(words[1])\n    max_word = words[1]\n    for word in words\n\
    \        if length(unique(word)) > m\n            m = length(unique(word))\n \
    \           max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxi1o2pzs.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpxi1o2pzs.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxi1o2pzs.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxi1o2pzs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpxi1o2pzs.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxi1o2pzs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxi1o2pzs.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    return reduce(unique_max, words)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpafuxyxes.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpafuxyxes.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ unique_max not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpafuxyxes.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpafuxyxes.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpafuxyxes.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpafuxyxes.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: unique_max\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpafuxyxes.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpafuxyxes.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpafuxyxes.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpafuxyxes.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: unique_max\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpafuxyxes.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpafuxyxes.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpafuxyxes.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpafuxyxes.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: unique_max not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpafuxyxes.jl"
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # Initialize a dictionary\n    dic = Dict()\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpudyij5ai.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpudyij5ai.jl:1\n\
    in expression starting at /tmp/tmpudyij5ai.jl:1\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    max_length = 0\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx7x4ikp5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx7x4ikp5.jl:1\n\
    in expression starting at /tmp/tmpx7x4ikp5.jl:1\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    max_unique = unique_count(max_word)\n    for\
    \ word in words[2:end]\n        unique = unique_count(word)\n        if unique\
    \ > max_unique || (unique == max_unique && word < max_word)\n            max_word\
    \ = word\n            max_unique = unique\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpj23rj_1s.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpj23rj_1s.jl:30\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ unique_count not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpj23rj_1s.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj23rj_1s.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj23rj_1s.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpj23rj_1s.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: unique_count\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpj23rj_1s.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj23rj_1s.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj23rj_1s.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpj23rj_1s.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: unique_count\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpj23rj_1s.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj23rj_1s.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj23rj_1s.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpj23rj_1s.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: unique_count not\
    \ defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpj23"
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    uniq_char_count = map(str -> length(Set(str)), words)\n    index = findmax(uniq_char_count)[2]\n\
    \    words[index]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr2bc0hx0.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpr2bc0hx0.jl:24\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr2bc0hx0.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr2bc0hx0.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpr2bc0hx0.jl:27\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr2bc0hx0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr2bc0hx0.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    temp_word = \"\"\n    max_unique = 0\n    for x in words\n        if length(unique(x))\
    \ >= max_unique\n            temp_word = x\n            max_unique = length(unique(x))\n\
    \        end\n    end\n    return temp_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj80qjqi1.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpj80qjqi1.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"game\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj80qjqi1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj80qjqi1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj80qjqi1.jl:31\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"cc\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj80qjqi1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj80qjqi1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj80qjqi1.jl:32\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"cba\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj80qjqi1.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj80qjqi1.jl:28\ntest set: Test Failed at /tmp/tmpj80qjqi1.jl:34\n\
    \  Expression: candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"\n\
    \   Evaluated: \"rock\" == \"gonna\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj80qjqi1.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj80qjqi1.jl:28\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     4     10\n"
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_len = 0\n    max_str = \"\"\n    for word in words\n        unique_chars\
    \ = Set(word)\n        curr_len = length(unique_chars)\n        if curr_len >\
    \ max_len\n            max_len = curr_len\n            max_str = word\n      \
    \  elseif curr_len == max_len\n            max_str = ifelse(word > max_str, word,\
    \ max_str)\n        end\n    end\n    return max_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcu4x2rty.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpcu4x2rty.jl:34\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcu4x2rty.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu4x2rty.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpcu4x2rty.jl:35\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"cc\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcu4x2rty.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu4x2rty.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpcu4x2rty.jl:36\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"cba\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcu4x2rty.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcu4x2rty.jl:32\ntest set: Test Failed at /tmp/tmpcu4x2rty.jl:37\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"this\" == \"footbott\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcu4x2rty.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu4x2rty.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpcu4x2rty.jl:38\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"rock\" == \"gonna\"\nStacktrace:\n\
    \ "
  timestamp: 1659979970
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    best_string = \"\"\n    best_set = Set()\n    best_size = 0\n    for word\
    \ in words\n        curr_set = Set(word)\n        if length(curr_set) > best_size\
    \ || \n            (length(curr_set) == best_size && word < best_string)\n   \
    \         best_string = word\n            best_set = curr_set\n            best_size\
    \ = length(curr_set)\n        end\n    end\n    return best_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    m = 0\n    cnt = 0\n    maxword = \"\"\n    for w in words\n        s\
    \ = Set(w)\n        if length(s) > m\n            m = length(s)\n            maxword\
    \ = w\n        end\n    end\n    return maxword\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7bfghegr.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp7bfghegr.jl:32\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7bfghegr.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7bfghegr.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7bfghegr.jl:35\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7bfghegr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7bfghegr.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    maxLength = 0\n    maxString = \"\"\n    for word in words\n        if(length(unique(word))\
    \ > maxLength)\n            maxLength = length(unique(word))\n            maxString\
    \ = word\n        end\n    end\n    return maxString\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv4t9re5g.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpv4t9re5g.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv4t9re5g.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv4t9re5g.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpv4t9re5g.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv4t9re5g.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv4t9re5g.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    max = 0\n    max_word = \"\"\n    for i in 1:n\n\
    \        count = count_unique(words[i])\n        if count > max\n            max\
    \ = count\n            max_word = words[i]\n        elseif count == max\n    \
    \        if words[i] < max_word\n                max_word = words[i]\n       \
    \     end\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpejilg_ng.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpejilg_ng.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ count_unique not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpejilg_ng.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejilg_ng.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejilg_ng.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpejilg_ng.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: count_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpejilg_ng.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejilg_ng.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejilg_ng.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpejilg_ng.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: count_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpejilg_ng.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejilg_ng.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejilg_ng.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpejilg_ng.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: count_unique not\
    \ defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpeji"
  timestamp: 1659979972
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    ret_string = \"\"\n    ret_size = 0\n    for word in words\n        word_set\
    \ = Set(word)\n        if length(word_set) > ret_size\n            ret_string\
    \ = word\n            ret_size = length(word_set)\n        end\n    end\n    return\
    \ ret_string\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj4f07ewh.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpj4f07ewh.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4f07ewh.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4f07ewh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpj4f07ewh.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4f07ewh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4f07ewh.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # words = [\"name\", \"of\", \"string\"]\n    string_to_return = \"\"\n\
    \    # set a max to compare against\n    max_unique_characters = 0 \n    for word\
    \ in words\n        # if the word is larger than the current word, do nothing.\n\
    \        if length(word) <= max_unique_characters\n            continue\n    \
    \    end\n        # make an empty dictionary to store the characters\n       \
    \ characters = Dict{String, Int}()\n        # iterate through the word\n     \
    \   for char in word\n            if haskey(characters, char)\n              \
    \  continue\n            else\n                characters[char] = 1\n        \
    \    end\n        end\n        if length(characters) > max_unique_characters\n\
    \            max_unique_characters = length(characters)\n            string_to_return\
    \ = word\n        end\n    end\n    return string_to_return\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpygt3q6z_.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpygt3q6z_.jl:45\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpygt3q6z_.jl:30\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpygt3q6z_.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpygt3q6z_.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpygt3q6z_.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpygt3q6z_.jl:30\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4"
  timestamp: 1659979973
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \"\"\"Finds the maximum length of a string\"\"\"\n    max = 0\n    for\
    \ w in words\n        if length(w) > max\n            max = length(w)\n      \
    \  end\n    end\n    max\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpek0owvzw.jl:28\n  Test threw
    exception\n  Expression: candidate(["name", "of", "string"]) == "string"\n  MethodError:
    Cannot `convert` an object of type Int64 to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    find_max(words::Vector{String})\n     @ Main /tmp/tmpek0owvzw.jl:21\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpek0owvzw.jl:28 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpek0owvzw.jl:27\ntest set: Error
    During Test at /tmp/tmpek0owvzw.jl:29\n  Test threw exception\n  Expression: candidate(["name",
    "enam", "game"]) == "enam"\n  MethodError: Cannot `convert` an object of type
    Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    find_max(words::Vector{String})\n     @ Main /tmp/tmpek0owvzw.jl:21\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpek0owvzw.jl:29 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test'
  timestamp: 1659979974
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # find the word with maximum number of unique characters\n    # if multiple\
    \ strings have maximum number of unique characters, return the\n    # one which\
    \ comes first in lexicographical order\n    word = \"\"\n    num_chars = 0\n \
    \   for w in words\n        # w = words[1]\n        if length(unique(w)) > num_chars\n\
    \            word = w\n            num_chars = length(unique(w))\n        end\n\
    \    end\n    return word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmporjtnwx7.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmporjtnwx7.jl:34\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmporjtnwx7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmporjtnwx7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmporjtnwx7.jl:37\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmporjtnwx7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmporjtnwx7.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    maxchar = 0\n    maxstr = \"\"\n    for word in words\n        unique_chars\
    \ = unique(word)\n        if length(unique_chars) > maxchar\n            maxchar\
    \ = length(unique_chars)\n            maxstr = word\n        end\n    end\n  \
    \  return maxstr\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf94207gj.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpf94207gj.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf94207gj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf94207gj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpf94207gj.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf94207gj.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf94207gj.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \"\"\"\"\"\"\n    length = size(words, 1)\n    if length == 0\n      \
    \  return \"\"\n    end\n    max_word = words[1]\n    max_len = length(unique(max_word))\n\
    \    for i = 2:length\n        word = words[i]\n        len = length(unique(word))\n\
    \        if len > max_len || (len == max_len && word < max_word)\n           \
    \ max_word = word\n            max_len = len\n        end\n    end\n    return\
    \ max_word\nend\n \n@testset \"Test for find_max\" begin\n    @test find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n    @test find_max([\"name\", \"enam\"\
    , \"game\"]) == \"enam\"\n    @test find_max([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\"\nend\n \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpw5pu3syj.jl:32

    in expression starting at /tmp/tmpw5pu3syj.jl:32

    '
  stdout: ''
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    uniques = length.(Set.(words)) # unique number of characters\n    maxindex\
    \ = findmax(uniques)[2]\n    return words[maxindex]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvpz0y8z1.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpvpz0y8z1.jl:24\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvpz0y8z1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvpz0y8z1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpvpz0y8z1.jl:27\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvpz0y8z1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvpz0y8z1.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979972
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    return indmax(map(s -> length(Set(s)), words))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpo5fcptfy.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpo5fcptfy.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ indmax not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpo5fcptfy.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo5fcptfy.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo5fcptfy.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo5fcptfy.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpo5fcptfy.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo5fcptfy.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo5fcptfy.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo5fcptfy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpo5fcptfy.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo5fcptfy.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo5fcptfy.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo5fcptfy.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: indmax not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpo5fcptfy.jl:14\n\
    \   [2] macro"
  timestamp: 1659979973
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    num_unique_chars = [length(unique(s)) for s in words]\n    i = argmax(num_unique_chars)\n\
    \    return words[i]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi46xbt1b.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpi46xbt1b.jl:24\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi46xbt1b.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi46xbt1b.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpi46xbt1b.jl:27\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi46xbt1b.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi46xbt1b.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979972
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # Write your function here\n    max_word_index = 0\n    max_num_unique_char\
    \ = length(unique(words[1]))\n    for word_index in 2:length(words)\n        current_num_unique_char\
    \ = length(unique(words[word_index]))\n        if current_num_unique_char > max_num_unique_char\n\
    \            max_num_unique_char = current_num_unique_char\n            max_word_index\
    \ = word_index\n        end\n    end\n    return words[max_word_index]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpiv9nzzxm.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpiv9nzzxm.jl:32\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  BoundsError:\
    \ attempt to access 3-element Vector{String} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpiv9nzzxm.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiv9nzzxm.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiv9nzzxm.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpiv9nzzxm.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  BoundsError: attempt\
    \ to access 3-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] find_max(words::Vector{String})\n   \
    \  @ Main /tmp/tmpiv9nzzxm.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiv9nzzxm.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiv9nzzxm.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpiv9nzzxm.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  BoundsError: attempt to access 2-element\
    \ Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] find_max(words::Vector{String})\n     @ Main /tmp/tmpiv9nzzxm.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiv9nzzxm.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiv9nzzxm.jl:30\ntest set:\
    \ Error During Tes"
  timestamp: 1659979973
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    (word, m_word, n) = (\"\", \"\", 0)\n    for i in 1:length(words)\n  \
    \      word = words[i]\n        if length(unique(word)) > n\n            n = length(unique(word))\n\
    \            m_word = word\n        end\n    end\n    return m_word\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpll2td_mr.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpll2td_mr.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpll2td_mr.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpll2td_mr.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpll2td_mr.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpll2td_mr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpll2td_mr.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979972
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    maximum = 0\n    for i in 1:length(words)\n        # Test if there are\
    \ any repeating characters in the word\n        if length(Set(words[i])) > maximum\n\
    \            maximum = length(Set(words[i]))\n            word = words[i]\n  \
    \      end\n    end\n    return word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpc6ngqx1c.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpc6ngqx1c.jl:29\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ word not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n  \
    \   @ Main /tmp/tmpc6ngqx1c.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc6ngqx1c.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc6ngqx1c.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpc6ngqx1c.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: word\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpc6ngqx1c.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc6ngqx1c.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc6ngqx1c.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpc6ngqx1c.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: word\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpc6ngqx1c.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc6ngqx1c.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc6ngqx1c.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpc6ngqx1c.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: word not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpc6ngqx1c.jl:22\n\
    \   [2] macro expansi"
  timestamp: 1659979973
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_length = maximum(map(length, words)) # find the max number of unique\
    \ characters in the list\n    words_sorted = sort(words) # sort the list of words\n\
    \    words_max_length = [] # create an empty list to store the strings with max\
    \ number of characters\n    for word in words_sorted # iterate through the list\n\
    \        if length(word) == max_length # if the length of the word is equal to\
    \ the max number of characters\n            push!(words_max_length, word) # append\
    \ the word to the new list \n        end\n    end\n    return words_max_length[1]\
    \ # print the first word in the new list\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnkbvoq1p.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpnkbvoq1p.jl:36\n  Expression: candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\"\n   Evaluated: \"prrk\" == \"this\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnkbvoq1p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnkbvoq1p.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  timestamp: 1659979972
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    if length(words)==0\n        return \"\"\n    end\n    if length(words)==1\n\
    \        return words[1]\n    end\n    word_0=words[1]\n    max_unique=length(unique(word_0))\n\
    \    max_ind=1\n    for i in 2:length(words)\n        unique_num=length(unique(words[i]))\n\
    \        if unique_num>max_unique\n            max_unique=unique_num\n       \
    \     max_ind=i\n        elseif unique_num==max_unique\n            if words[i]<word_0\n\
    \                max_ind=i\n            end\n        end\n    end\n    return\
    \ words[max_ind]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8u92nfud.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp8u92nfud.jl:42\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"game\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8u92nfud.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8u92nfud.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp8u92nfud.jl:46\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"rock\" == \"gonna\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8u92nfud.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8u92nfud.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979972
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_len = -1\n    max_len_word = \"\"\n    for word in words\n       \
    \ unique_len = length(unique(word))\n        if unique_len > max_len\n       \
    \     max_len = unique_len\n            max_len_word = word\n        end\n   \
    \ end\n    return max_len_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptbx_ef6a.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmptbx_ef6a.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptbx_ef6a.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbx_ef6a.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptbx_ef6a.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptbx_ef6a.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbx_ef6a.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979972
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_i = 0\n    max_char = 0\n    for (i, word) in enumerate(words)\n \
    \       nchar = length(unique(word))\n        if nchar > max_char\n          \
    \  max_i = i\n            max_char = nchar\n        end\n    end\n    return words[max_i]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd_sheo9o.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpd_sheo9o.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_sheo9o.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_sheo9o.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpd_sheo9o.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_sheo9o.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_sheo9o.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979972
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word::String = words[1]\n    for word in words\n        if max_word\
    \ < word\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpelhej_sx.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpelhej_sx.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpelhej_sx.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelhej_sx.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpelhej_sx.jl:29\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"cc\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpelhej_sx.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelhej_sx.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpelhej_sx.jl:30\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"cba\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpelhej_sx.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpelhej_sx.jl:26\ntest set: Test Failed at /tmp/tmpelhej_sx.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"this\" == \"footbott\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpelhej_sx.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelhej_sx.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpelhej_sx.jl:32\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"we\" == \"gonna\"\nStacktrace:\n\
    \ [1"
  timestamp: 1659979973
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = nothing\n    for i in 1:length(words)\n        if max_word\
    \ == nothing || length(unique(words[i])) > length(unique(max_word))\n        \
    \    max_word = words[i]\n        end\n    end\n    return max_word\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzjary925.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpzjary925.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzjary925.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzjary925.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzjary925.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzjary925.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzjary925.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979973
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_score::Int64 = 0\n    output::String = \"\"\n    for word in words\n\
    \        # check the score for the current word\n        score::Int64 = length(unique(word))\n\
    \        if score > max_score\n            max_score = score\n            output\
    \ = word\n        elseif score == max_score\n            # if the score is the\
    \ same, compare the lexicographical order\n            if word < output\n    \
    \            output = word\n            end\n        end\n    end\n    return\
    \ output\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    words_dict = Dict{String, Int}()\n    for word in words\n        words_dict[word]\
    \ = unique_char_count(word)\n    end\n    max_word = maximum(words_dict, by=values)\n\
    \    return max_word[1]\nend\n    \n@testset \"Test find_max\" begin\n    @test\
    \ find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    @test find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    @test find_max([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmphy6gwdaq.jl:22

    in expression starting at /tmp/tmphy6gwdaq.jl:22

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_count = 0\n    max_word = \"\"\n    for word in words\n        count\
    \ = length(unique(word))\n        if count > max_count\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3mr7jfgp.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp3mr7jfgp.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mr7jfgp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mr7jfgp.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3mr7jfgp.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mr7jfgp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mr7jfgp.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979973
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    num = zeros(length(words))\n    for i = 1:length(words)\n        num[i]\
    \ = find_max(words[i])\n    end\n    return words[argmax(num)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpm8q3kt2d.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpm8q3kt2d.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ no method matching find_max(::String)\n  Closest candidates are:\n    find_max(!Matched::Vector{String})\
    \ at /tmp/tmpm8q3kt2d.jl:13\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpm8q3kt2d.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm8q3kt2d.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm8q3kt2d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpm8q3kt2d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: no method\
    \ matching find_max(::String)\n  Closest candidates are:\n    find_max(!Matched::Vector{String})\
    \ at /tmp/tmpm8q3kt2d.jl:13\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpm8q3kt2d.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm8q3kt2d.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm8q3kt2d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpm8q3kt2d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  MethodError: no method\
    \ matching find_max(::String)\n  Closest candidates are:\n    find_max(!Matched::Vector{String})\
    \ at /tmp/tmpm8q3kt2d.jl:13\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpm8q3kt2d.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm8q3kt2d.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ ["
  timestamp: 1659979976
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    max = [0 for i in 1:n]\n    for i in 1:n\n    \
    \    max[i] = length(unique(words[i]))\n    end\n    ind = argmax(max)\n    return\
    \ words[ind]\nend\n@test find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n@test find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n@test find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmpv45jsexy.jl:22

    in expression starting at /tmp/tmpv45jsexy.jl:22

    '
  stdout: ''
  timestamp: 1659979973
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n   \n    max = 0\n    s = \"\"\n    for i in words\n        if length(unique(i))\
    \ > max\n            max = length(unique(i))\n            s = i\n        end\n\
    \    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprwjs6yzr.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmprwjs6yzr.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprwjs6yzr.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprwjs6yzr.jl:29\ntest set: Test\
    \ Failed at /tmp/tmprwjs6yzr.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprwjs6yzr.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprwjs6yzr.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979974
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    index_unique = collect(1:length(words))\n    index_length = collect(1:length(words))\n\
    \    for i in 1:length(words)\n        index_unique[i] = length(unique(collect(words[i])))\n\
    \        index_length[i] = length(words[i])\n    end\n    println(index_unique)\n\
    \    println(index_length)\n    if length(unique(index_unique)) != length(index_unique)\n\
    \        index_unique = index_unique[index_unique .== maximum(index_unique)]\n\
    \        index_length = index_length[index_unique .== maximum(index_unique)]\n\
    \        return words[findfirst(index_length .== minimum(index_length))]\n   \
    \ else\n        return words[findfirst(index_unique .== maximum(index_unique))]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''[4, 2, 6]\n[4, 2, 6]\n[4, 4, 4]\n[4, 4, 4]\ntest set: Test Failed at
    /tmp/tmpmqoqny02.jl:36\n  Expression: candidate(["name", "enam", "game"]) == "enam"\n   Evaluated:
    "name" == "enam"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpmqoqny02.jl:36 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpmqoqny02.jl:34\n[1, 1, 1]\n[7, 2,
    2]\ntest set: Test Failed at /tmp/tmpmqoqny02.jl:37\n  Expression: candidate(["aaaaaaa",
    "bb", "cc"]) == "aaaaaaa"\n   Evaluated: "bb" == "aaaaaaa"\nStacktrace:\n [1]
    macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpmqoqny02.jl:37 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpmqoqny02.jl:34\n[3, 3]\n[3, 3]\n[4,
    4, 4, 2, 4]\n[4, 4, 4, 2, 8]\ntest set: Error During Test at /tmp/tmpmqoqny02.jl:39\n  Test
    threw exception\n  Expression: candidate(["play", "this", "game", "of", "footbott"])
    == "footbott"\n  BoundsError: attempt to access 5-element Vector{Int64} at index
    [4-element BitVector]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},
    I::Tuple{Base.LogicalIndex{Int64, BitVector}})\n     @ Base ./abstractarray.jl:691\n   [2]
    checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @
    ./multidimensional.jl:838 [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218
    [inlined]\n   [5] find_max(words::Vector{String})\n     @ Main /tmp/tmpmqoqny02.jl:24\n   [6]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [7] macro expansion\n     @ /tmp/tmpmqoqny02.jl:39 [inlined]\n   [8]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [9] top-level scope\n     @'
  timestamp: 1659979976
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # Establish the initial guess.\n    max_word = words[1]\n    max_unique\
    \ = find_unique(max_word)\n    # See if there is a better guess.\n    for word\
    \ in words[2:end]\n        if find_unique(word) > max_unique\n            max_word\
    \ = word\n            max_unique = find_unique(word)\n        end\n    end\n \
    \   # Return the best guess.\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpr7i_s7cv.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpr7i_s7cv.jl:32\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ find_unique not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpr7i_s7cv.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr7i_s7cv.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr7i_s7cv.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpr7i_s7cv.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: find_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpr7i_s7cv.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr7i_s7cv.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr7i_s7cv.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpr7i_s7cv.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: find_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpr7i_s7cv.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr7i_s7cv.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr7i_s7cv.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpr7i_s7cv.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: find_unique not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpr7i_s7c"
  timestamp: 1659979975
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    maxUniqueLetterCount = 0\n    maxWord = \"\"\n    for word in words\n\
    \        uniqueLetterCount = uniqueCharsCount(word)\n        if uniqueLetterCount\
    \ > maxUniqueLetterCount\n            maxUniqueLetterCount = uniqueLetterCount\n\
    \            maxWord = word\n        elseif uniqueLetterCount == maxUniqueLetterCount\n\
    \            if word < maxWord\n                maxWord = word\n            end\n\
    \        end\n    end\n    return maxWord\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpbm95qg4l.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpbm95qg4l.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ uniqueCharsCount not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpbm95qg4l.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbm95qg4l.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbm95qg4l.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpbm95qg4l.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: uniqueCharsCount\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpbm95qg4l.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbm95qg4l.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbm95qg4l.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpbm95qg4l.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: uniqueCharsCount\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpbm95qg4l.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbm95qg4l.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbm95qg4l.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpbm95qg4l.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: uniqueCharsCount\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ "
  timestamp: 1659979975
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \"\"\"\n    We will loop through the input vector and for each word we\
    \ will create a dictionary \n    that holds the unique elements. We will loop\
    \ through the dictionary to find out how many unique\n    characters there are.\
    \ We will save the word if it is the longest word and if it is the same length\n\
    \    as the current longest word, we will compare it to our current longest word\
    \ to decide if we will\n    save it or not.\n    \"\"\"\n    longestWord = \"\"\
    \n    longestWordLength = 0\n    for word in words\n        wordDict = Dict{Char,\
    \ Int}()\n        length = 0\n        for char in word\n            if !haskey(wordDict,\
    \ char)\n                wordDict[char] = 1\n                length += 1\n   \
    \         end\n        end\n        if (length > longestWordLength)\n        \
    \    longestWord = word\n            longestWordLength = length\n        elseif\
    \ (length == longestWordLength)\n            if (word < longestWord)\n       \
    \         longestWord = word\n            end\n        end\n    end\n    return\
    \ longestWord\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979973
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    max_count = 0\n    max_index = 0\n    for i in\
    \ 1:n\n        count = length(unique(words[i]))\n        if max_count < count\n\
    \            max_count = count\n            max_index = i\n        end\n    end\n\
    \    return words[max_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpblzkgbmr.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpblzkgbmr.jl:32\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpblzkgbmr.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpblzkgbmr.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpblzkgbmr.jl:35\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpblzkgbmr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpblzkgbmr.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979974
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    cnt = Vector{Int}(undef, n)\n    for i in 1:n\n\
    \        cur = sort(Set(words[i]))\n        cnt[i] = length(cur)\n    end\n  \
    \  idx = argmax(cnt)\n    return words[idx]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp7fqwl6e7.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp7fqwl6e7.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ no method matching sort(::Set{Char})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmp7fqwl6e7.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7fqwl6e7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7fqwl6e7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7fqwl6e7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: no method\
    \ matching sort(::Set{Char})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmp7fqwl6e7.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7fqwl6e7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7fqwl6e7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7fqwl6e7.jl:30\n  "
  timestamp: 1659979977
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    max_num = 0\n    max_index = 1\n    for i in 1:n\n\
    \        if length(unique(words[i])) >= max_num\n            max_num = length(unique(words[i]))\n\
    \            max_index = i\n        end\n    end\n    words[max_index]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpunzuh74c.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpunzuh74c.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"game\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunzuh74c.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunzuh74c.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpunzuh74c.jl:32\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"cc\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunzuh74c.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunzuh74c.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpunzuh74c.jl:33\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"cba\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpunzuh74c.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpunzuh74c.jl:29\ntest set: Test Failed at /tmp/tmpunzuh74c.jl:35\n\
    \  Expression: candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"\n\
    \   Evaluated: \"rock\" == \"gonna\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpunzuh74c.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpunzuh74c.jl:29\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     4     10\n"
  timestamp: 1659979975
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    for word in words[2:end]\n        if length(unique(word))\
    \ > length(unique(max_word))\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkoympd0a.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpkoympd0a.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkoympd0a.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkoympd0a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpkoympd0a.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkoympd0a.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkoympd0a.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979975
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max = (0, 0)\n    for (i, word) in enumerate(words)\n        if count_unique(word)\
    \ > max[1]\n            max = (count_unique(word), i)\n        end\n    end\n\
    \    return words[max[2]]\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp8dv7__ai.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp8dv7__ai.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ count_unique not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp8dv7__ai.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8dv7__ai.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8dv7__ai.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8dv7__ai.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: count_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp8dv7__ai.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8dv7__ai.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8dv7__ai.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8dv7__ai.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: count_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp8dv7__ai.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8dv7__ai.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8dv7__ai.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8dv7__ai.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: count_unique not\
    \ defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp8dv"
  timestamp: 1659979976
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    count = 0\n    maximum = \"\"\n    for word in words\n        if count\
    \ < length(unique(word))\n            count = length(unique(word))\n         \
    \   maximum = word\n        end\n    end\n    return maximum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk0qljne1.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpk0qljne1.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk0qljne1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0qljne1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpk0qljne1.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk0qljne1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0qljne1.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979975
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    for word in words[2:end]\n        if length(unique(word))\
    \ > length(unique(max_word)) ||\n            (length(unique(word)) == length(unique(max_word))\
    \ && word < max_word)\n            max_word = word\n        end\n    end\n   \
    \ return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979973
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_count = 0\n    word = \"\"\n    for word_ in words\n        if length(unique(word_))\
    \ > max_count\n            max_count = length(unique(word_))\n            word\
    \ = word_\n        end\n    end\n    return word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpys_tq3c0.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpys_tq3c0.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpys_tq3c0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpys_tq3c0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpys_tq3c0.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpys_tq3c0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpys_tq3c0.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979975
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_num_unique = 0\n    max_index = 0\n    for (i, word) in enumerate(words)\n\
    \        num_unique = length(unique(word))\n        if num_unique > max_num_unique\n\
    \            max_num_unique = num_unique\n            max_index = i\n        end\n\
    \    end\n    return words[max_index]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwu3b7ij6.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpwu3b7ij6.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwu3b7ij6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwu3b7ij6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpwu3b7ij6.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwu3b7ij6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwu3b7ij6.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979975
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_char_n = 0\n    max_char_s = \"\"\n    for i in 1:length(words)\n\
    \        unique_char = unique(words[i])\n        if length(unique_char) > max_char_n\n\
    \            max_char_n = length(unique_char)\n            max_char_s = words[i]\n\
    \        elseif length(unique_char) == max_char_n\n            if words[i] < max_char_s\n\
    \                max_char_s = words[i]\n            end\n        end\n    end\n\
    \    return max_char_s\nend\nprintln(find_max([\"name\", \"of\", \"string\"]))\n\
    println(find_max([\"name\", \"enam\", \"game\"]))\nprintln(find_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'string

    enam

    aaaaaaa

    Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979973
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    num_unique_chars = [count_unique_chars(word) for word in words]\n    max_num_unique_chars\
    \ = maximum(num_unique_chars)\n    max_inds = findall(num_unique_chars .== max_num_unique_chars)\n\
    \    max_ind = findfirst(num_unique_chars .== max_num_unique_chars)\n    return\
    \ words[max_ind]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp8r0i2km4.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp8r0i2km4.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ count_unique_chars not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::String)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{String}, var\"#1#2\"})\n     @ Base ./array.jl:724\n\
    \   [4] find_max(words::Vector{String})\n     @ Main /tmp/tmp8r0i2km4.jl:14\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8r0i2km4.jl:25 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8r0i2km4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8r0i2km4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: count_unique_chars\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::String)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{String},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp8r0i2km4.jl:14\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8r0i2km4.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8r0i2km4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8r0i2km4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: count_unique_chars\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::String)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{String},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] find_max(words::Vector{String})\n\
    \     @"
  timestamp: 1659979976
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # The function will return a string\n    max_word = \"\"\n    max_len\
    \ = 0\n    for word in words\n        if length(unique(collect(word))) > max_len\n\
    \            max_len = length(unique(collect(word)))\n            max_word = word\n\
    \        end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpalsh9ne9.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpalsh9ne9.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalsh9ne9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalsh9ne9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpalsh9ne9.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalsh9ne9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalsh9ne9.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979975
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    #maxcount = count(unique(words[1]))\n    #maxindex = 1\n    #for i in\
    \ 2:length(words)\n    #    count(unique(words[i]))\n    #    if count(unique(words[i]))\
    \ > maxcount\n    #        maxcount = count(unique(words[i]))\n    #        maxindex\
    \ = i\n    #    end\n    #end\n    #return words[maxindex]\n    wds = length(unique(words[1]))\n\
    \    idx = 1\n    for i in 2:length(words)\n        if length(unique(words[i]))\
    \ > wds\n            wds = length(unique(words[i]))\n            idx = i\n   \
    \     end\n    end\n    return words[idx]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe04azr4q.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpe04azr4q.jl:40\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe04azr4q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe04azr4q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe04azr4q.jl:43\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe04azr4q.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe04azr4q.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979976
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    longest_word = 1\n    length_of_longest_word = length(words[longest_word])\n\
    \    num_unique_chars = length(unique(words[longest_word]))\n    for (idx, word)\
    \ in enumerate(words)\n        if length(unique(word)) > num_unique_chars\n  \
    \          num_unique_chars = length(unique(word))\n            length_of_longest_word\
    \ = length(word)\n            longest_word = idx\n        elseif length(unique(word))\
    \ == num_unique_chars\n            if length(word) > length_of_longest_word\n\
    \                longest_word = idx\n            end\n        end\n    end\n \
    \   return words[longest_word]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1loglk3w.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp1loglk3w.jl:36\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1loglk3w.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1loglk3w.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  timestamp: 1659979976
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    index = 0\n    maxchar = 0\n    for i in 1:length(words)\n        if length(unique(words[i]))\
    \ > maxchar\n            maxchar = length(unique(words[i]))\n            index\
    \ = i\n        end\n    end\n    return words[index]\nend\nprint(find_max([\"\
    name\", \"of\", \"string\"]))\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzirs1miv.jl:27

    '
  stdout: "stringtest set: Test Failed at /tmp/tmpzirs1miv.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzirs1miv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzirs1miv.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzirs1miv.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzirs1miv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzirs1miv.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979976
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # @assert all(String === word for word in words)\n    n = length(words)\n\
    \    assert(n > 0)\n    idx_max = 1\n    chars_max = length(unique(collect(words[1])))\n\
    \    for i = 2:n\n        chars = length(unique(collect(words[i])))\n        if\
    \ chars > chars_max\n            idx_max = i\n            chars_max = chars\n\
    \        end\n    end\n    return words[idx_max]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpuv0rwyan.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpuv0rwyan.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ assert not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpuv0rwyan.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuv0rwyan.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuv0rwyan.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuv0rwyan.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: assert\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpuv0rwyan.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuv0rwyan.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuv0rwyan.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuv0rwyan.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: assert\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpuv0rwyan.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuv0rwyan.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuv0rwyan.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuv0rwyan.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: assert not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpuv0rwyan.jl:16\n\
    \   [2] macro"
  timestamp: 1659979977
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    if length(words)==0\n        return \"empty\"\n    end\n    \n \
    \   max_length = 0\n    max_word = \"\"\n    for w in words\n        if length(unique(w))\
    \ > max_length\n            max_length = length(unique(w))\n            max_word\
    \ = w\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5sunfsuj.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp5sunfsuj.jl:35\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5sunfsuj.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5sunfsuj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5sunfsuj.jl:38\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5sunfsuj.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5sunfsuj.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979976
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique_chars = 0\n    max_unique_word = \"\"\n    for word in words\n\
    \        unique_chars = length(unique(word))\n        if unique_chars > max_unique_chars\n\
    \            max_unique_chars = unique_chars\n            max_unique_word = word\n\
    \        end\n    end\n    return max_unique_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgm2v3f0e.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpgm2v3f0e.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgm2v3f0e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgm2v3f0e.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpgm2v3f0e.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgm2v3f0e.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgm2v3f0e.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979976
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    current_max = \"\"\n    for word in words\n        if length(unique(word))\
    \ > length(unique(current_max))\n            current_max = word\n        end\n\
    \    end\n    return current_max\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp065926pl.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp065926pl.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp065926pl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp065926pl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp065926pl.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp065926pl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp065926pl.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979976
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique_letters_word = \"\"\n    max_unique_letters = 0\n    for i\
    \ = 1:length(words)\n        num_unique_letters = length(unique(char.(words[i])))\n\
    \        if num_unique_letters > max_unique_letters\n            max_unique_letters\
    \ = num_unique_letters\n            max_unique_letters_word = words[i]\n     \
    \   end\n    end\n    return max_unique_letters_word\nend\nwords = [\"name\",\
    \ \"of\", \"string\"]\nfind_max(words)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: char not defined\nStacktrace:\n [1] find_max(words::Vector{String})\n\
    \   @ Main /tmp/tmp4xbgu66l.jl:17\n [2] top-level scope\n   @ /tmp/tmp4xbgu66l.jl:26\n\
    in expression starting at /tmp/tmp4xbgu66l.jl:26\n"
  stdout: ''
  timestamp: 1659979976
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    result_index = 1\n    result_chars = length(unique(chars(words[1])))\n\
    \    for (i, word) in enumerate(words)\n        number_of_chars = length(unique(chars(word)))\n\
    \        if number_of_chars > result_chars\n            result_index = i\n   \
    \         result_chars = number_of_chars\n        end\n    end\n    return words[result_index]\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpnty8w3an.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpnty8w3an.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ chars not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n \
    \    @ Main /tmp/tmpnty8w3an.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnty8w3an.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnty8w3an.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpnty8w3an.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: chars\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpnty8w3an.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnty8w3an.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnty8w3an.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpnty8w3an.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: chars\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpnty8w3an.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnty8w3an.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnty8w3an.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpnty8w3an.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: chars not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpnty8w3an.jl:15\n\
    \   [2] macro exp"
  timestamp: 1659979978
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_char = Set()\n    max_word = \"\"\n    for word in words\n       \
    \ if length(Set(word)) > length(max_char)\n            max_char = Set(word)\n\
    \            max_word = word\n        elseif length(Set(word)) == length(max_char)\n\
    \            if word < max_word\n                max_char = Set(word)\n      \
    \          max_word = word\n            end\n        end\n    end\n    return\
    \ max_word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979975
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    max_len = length(Set(words[1]))\n    for word\
    \ in words[2:end]\n        cur_len = length(Set(word))\n        if cur_len > max_len\n\
    \            max_len = cur_len\n            max_word = word\n        elseif cur_len\
    \ == max_len\n            max_word = min(max_word, word)\n        end\n    end\n\
    \    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979975
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    result = words[1]\n    max_unique = length(unique(words[1]))\n    for\
    \ word in words[2:end]\n        uniq = length(unique(word))\n        if uniq >\
    \ max_unique\n            max_unique = uniq\n            result = word\n     \
    \   elseif uniq == max_unique\n            if result > word\n                result\
    \ = word\n            end\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979975
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    i = 0\n    max_word = \"\"\n    max_unique = 0\n    for word in words\n\
    \        count = 0\n        for char in word\n            if !(char in words[i])\n\
    \                count += 1\n            end\n        end\n        if count >\
    \ max_unique\n            max_unique = count\n            max_word = word\n  \
    \      end\n        i += 1\n    end\n    return max_word\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpprs98l53.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpprs98l53.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  BoundsError:\
    \ attempt to access 3-element Vector{String} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpprs98l53.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpprs98l53.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpprs98l53.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpprs98l53.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  BoundsError: attempt\
    \ to access 3-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] find_max(words::Vector{String})\n   \
    \  @ Main /tmp/tmpprs98l53.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpprs98l53.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpprs98l53.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpprs98l53.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  BoundsError: attempt\
    \ to access 3-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] find_max(words::Vector{String})\n   \
    \  @ Main /tmp/tmpprs98l53.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpprs98l53.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpprs98l53.jl:36\ntest set:\
    \ Err"
  timestamp: 1659979979
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = [count_unique(w) for w in words]\n    max_count = maximum(word_counts)\n\
    \    indices = findall(word_counts .== max_count)\n    max_indices = [indices[1]]\n\
    \    for i in indices[2:end]\n        if words[i] < words[max_indices[1]]\n  \
    \          max_indices = [i]\n        elseif words[i] == words[max_indices[1]]\n\
    \            push!(max_indices, i)\n        end\n    end\n    return words[max_indices[1]]\n\
    end\n \nfind_max([\"name\", \"of\", \"string\"])\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: count_unique not defined\nStacktrace:\n\
    \ [1] (::var\"#1#2\")(w::String)\n   @ Main ./none:0\n [2] iterate\n   @ ./generator.jl:47\
    \ [inlined]\n [3] collect(itr::Base.Generator{Vector{String}, var\"#1#2\"})\n\
    \   @ Base ./array.jl:724\n [4] find_max(words::Vector{String})\n   @ Main /tmp/tmpyd8u8qug.jl:14\n\
    \ [5] top-level scope\n   @ /tmp/tmpyd8u8qug.jl:28\nin expression starting at\
    \ /tmp/tmpyd8u8qug.jl:28\n"
  stdout: ''
  timestamp: 1659979978
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique_cnt = 0\n    max_unique_word = \"\"\n    for word in words\n\
    \        unique_cnt = find_unique_cnt(word)\n        if unique_cnt > max_unique_cnt\n\
    \            max_unique_cnt = unique_cnt\n            max_unique_word = word\n\
    \        elseif unique_cnt == max_unique_cnt\n            if word < max_unique_word\n\
    \                max_unique_word = word\n            end\n        end\n    end\n\
    \    return max_unique_word\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpydv_qmv0.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpydv_qmv0.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ find_unique_cnt not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpydv_qmv0.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydv_qmv0.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydv_qmv0.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpydv_qmv0.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: find_unique_cnt\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpydv_qmv0.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydv_qmv0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydv_qmv0.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpydv_qmv0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: find_unique_cnt\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpydv_qmv0.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydv_qmv0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydv_qmv0.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpydv_qmv0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: find_unique_cnt not\
    \ defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main"
  timestamp: 1659979979
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_char_word = \"\"\n    max_chars = 0\n    for word in words\n     \
    \   char_count = 0\n        for char in word\n            if !(char in word[1:word.index(char)])\n\
    \                char_count += 1\n            end\n        end\n        if char_count\
    \ > max_chars || (char_count == max_chars && word < max_char_word)\n         \
    \   max_char_word = word\n            max_chars = char_count\n        end\n  \
    \  end\n    return max_char_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp06_4nxtj.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp06_4nxtj.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  type\
    \ String has no field index\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] find_max(words::Vector{String})\n     @ Main /tmp/tmp06_4nxtj.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp06_4nxtj.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp06_4nxtj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp06_4nxtj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  type String has no\
    \ field index\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] find_max(words::Vector{String})\n     @ Main /tmp/tmp06_4nxtj.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp06_4nxtj.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp06_4nxtj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp06_4nxtj.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  type String has no\
    \ field index\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] find_max(words::Vector{String})\n     @ Main /tmp/tmp06_4nxtj.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp06_4nxtj.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp06_4nxtj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp06_4nxtj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc"
  timestamp: 1659979979
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_len = 0\n    max_string = \"\"\n    for word in words\n        if\
    \ length(unique(word)) > max_len\n            max_len = length(unique(word))\n\
    \            max_string = word\n        end\n    end\n    return max_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_ngmcpo5.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp_ngmcpo5.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ngmcpo5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ngmcpo5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_ngmcpo5.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ngmcpo5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ngmcpo5.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979978
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    # maxLength = maximum(length.(words))\n    maxUniqueCharacters\
    \ = maximum(map(x -> length(unique(x)), words))\n    # max(map(x -> length(unique(x)),\
    \ words))\n    # return words[indmax(words)], maxLength, maxUniqueCharacters\n\
    \    if n <= 2\n        return [words[1], words[2]]\n    else\n        return\
    \ find_max([maxUniqueCharacters, max(words)])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpy5bfiadp.jl:30\n  Test threw
    exception\n  Expression: candidate(["name", "of", "string"]) == "string"\n  MethodError:
    no method matching max(::Vector{String})\n  Closest candidates are:\n    max(::Any,
    !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n    max(::Any,
    !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n    max(::Any,
    !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    ...\n  Stacktrace:\n   [1]
    find_max(words::Vector{String})\n     @ Main /tmp/tmpy5bfiadp.jl:22\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy5bfiadp.jl:30 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy5bfiadp.jl:29\ntest set: Error
    During Test at /tmp/tmpy5bfiadp.jl:31\n  Test threw exception\n  Expression: candidate(["name",
    "enam", "game"]) == "enam"\n  MethodError: no method matching max(::Vector{String})\n  Closest
    candidates are:\n    max(::Any, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n    max(::Any,
    !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n    max(::Any,
    !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    ...\n  Stacktrace:\n   [1]
    find_max(words::Vector{String})\n     @ Main /tmp/tmpy5bfiadp.jl:22\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy5bfiadp.jl:31 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy5bfiadp.jl:29\ntest set: Error
    During Test at /tmp/tmpy5bfiadp.jl:32\n  Test threw exception\n  Expression: candi'
  timestamp: 1659979980
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    result = 1\n    i = 1\n    while i < n\n      \
    \  if unique_characters(words[i]) > unique_characters(words[result])\n       \
    \     result = i\n        end\n        i += 1\n    end\n    return words[result]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmp_224spoc.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp_224spoc.jl:30\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ unique_characters not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp_224spoc.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_224spoc.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_224spoc.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_224spoc.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: unique_characters\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp_224spoc.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_224spoc.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_224spoc.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_224spoc.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: unique_characters\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp_224spoc.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_224spoc.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_224spoc.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_224spoc.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: unique_characters\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n   "
  timestamp: 1659979979
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique_char_count = 0\n    max_unique_word = \"\"\n    for word in\
    \ words\n        unique_char_count = unique_count(word)\n        if unique_char_count\
    \ > max_unique_char_count\n            max_unique_char_count = unique_char_count\n\
    \            max_unique_word = word\n        end\n    end\n    return max_unique_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp9o08nse1.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp9o08nse1.jl:30\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ unique_count not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp9o08nse1.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9o08nse1.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9o08nse1.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9o08nse1.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: unique_count\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp9o08nse1.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9o08nse1.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9o08nse1.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9o08nse1.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: unique_count\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp9o08nse1.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9o08nse1.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9o08nse1.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9o08nse1.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: unique_count not\
    \ defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp9o0"
  timestamp: 1659979979
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_chars = 0\n    max_word = \"\"\n    for word in words\n        if\
    \ length(unique(word)) > max_chars\n            max_chars = length(unique(word))\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy2oaihxh.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpy2oaihxh.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy2oaihxh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy2oaihxh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy2oaihxh.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy2oaihxh.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy2oaihxh.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979978
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique = 0\n    unique_characters = Dict{Char, Bool}()\n    for word\
    \ in words\n        for character in word\n            unique_characters[character]\
    \ = true\n        end\n        if length(unique_characters) > max_unique\n   \
    \         max_unique = length(unique_characters)\n            output = word\n\
    \        end\n        unique_characters = Dict{Char, Bool}()\n    end\n    return\
    \ output\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpf2hvp_ei.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpf2hvp_ei.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ output not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpf2hvp_ei.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf2hvp_ei.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2hvp_ei.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpf2hvp_ei.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: output\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpf2hvp_ei.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf2hvp_ei.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2hvp_ei.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpf2hvp_ei.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: output\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpf2hvp_ei.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf2hvp_ei.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2hvp_ei.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpf2hvp_ei.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: output not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpf2hvp_ei.jl:26\n\
    \   [2] macro"
  timestamp: 1659979979
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # first we will compare the length of each word to get the most long word\n\
    \    long_word = maximum(words, lt = \n        function(a::String, b::String)\n\
    \            length(a) < length(b)\n        end)\n    # second we will return\
    \ the first word with unique characters\n    unique_words = filter(long_word)\
    \ do\n        word -> length(unique(word)) == length(word)\n    end\n    return\
    \ unique_words[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp66ywd9vc.jl:30\n  Test threw
    exception\n  Expression: candidate(["name", "of", "string"]) == "string"\n  MethodError:
    no method matching mapreduce(::typeof(identity), ::typeof(max), ::Vector{String};
    lt=var"#1#4"())\n  Closest candidates are:\n    mapreduce(::Any, ::Any, ::Union{Base.AbstractBroadcasted,
    AbstractArray}; dims, init) at ~/.conda/envs/polyglot/share/julia/base/reducedim.jl:322
    got unsupported keyword argument "lt"\n    mapreduce(::Any, ::Any, ::Union{Base.AbstractBroadcasted,
    AbstractArray}...; kw...) at ~/.conda/envs/polyglot/share/julia/base/reducedim.jl:324\n    mapreduce(::Any,
    ::Any, ::Any; kw...) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:289\n    ...\n  Stacktrace:\n   [1]
    kwerr(::NamedTuple{(:lt,), Tuple{var"#1#4"}}, ::Function, ::Function, ::Function,
    ::Vector{String})\n     @ Base ./error.jl:163\n   [2] _maximum(f::Function, a::Vector{String},
    ::Colon; kw::Base.Pairs{Symbol, var"#1#4", Tuple{Symbol}, NamedTuple{(:lt,), Tuple{var"#1#4"}}})\n     @
    Base ./reducedim.jl:894\n   [3] _maximum(a::Vector{String}, ::Colon; kw::Base.Pairs{Symbol,
    var"#1#4", Tuple{Symbol}, NamedTuple{(:lt,), Tuple{var"#1#4"}}})\n     @ Base
    ./reducedim.jl:893\n   [4] #maximum#746\n     @ ./reducedim.jl:889 [inlined]\n   [5]
    find_max(words::Vector{String})\n     @ Main /tmp/tmp66ywd9vc.jl:15\n   [6] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [7] macro expansion\n     @ /tmp/tmp66ywd9vc.jl:30 [inlined]\n   [8]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [9] top-level scope\n     @ /tmp/tmp66ywd9vc.jl:29\ntest set: Error
    During Test at /tmp/tmp66ywd9vc.jl:31\n  Test threw exception\n  Expression: candidate(["name",
    "enam", "game"]) == "enam"\n  MethodError: no method matching mapreduce(::typeof(identity),
    ::typeof(max), ::Vector{String}; lt=var"#1#4"())\n  Closest candidates are:\n    mapreduce(::Any,
    ::Any, ::Union{Base.AbstractBroadcasted, Abst'
  timestamp: 1659979981
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    maximum = maximum(map(unique, words))\n    length_sort = sort(words, by=length)\n\
    \    for i in length_sort\n        if length(unique(i)) == maximum\n         \
    \   return i\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp0oftr_6d.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp0oftr_6d.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp0oftr_6d.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0oftr_6d.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0oftr_6d.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0oftr_6d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp0oftr_6d.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0oftr_6d.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0oftr_6d.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0oftr_6d.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp0oftr_6d.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0oftr_6d.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0oftr_6d.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0oftr_6d.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: maximum not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmp0oftr_6d.jl:14\n\
    \   [2] m"
  timestamp: 1659979980
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique = 0\n    max_unique_index = 0\n    for i in 1:length(words)\n\
    \        word = words[i]\n        word_unique = length(unique(word))\n       \
    \ if word_unique > max_unique\n            max_unique = word_unique\n        \
    \    max_unique_index = i\n        end\n    end\n    return words[max_unique_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnua97tzr.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpnua97tzr.jl:32\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnua97tzr.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnua97tzr.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnua97tzr.jl:35\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnua97tzr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnua97tzr.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979978
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_uniqs = 0\n    for (i, w) in enumerate(words)\n        if length(unique(w))\
    \ > max_uniqs\n            max_uniqs = length(unique(w))\n            max_word\
    \ = w\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp0x3pp4wt.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp0x3pp4wt.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ max_word not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp0x3pp4wt.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0x3pp4wt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0x3pp4wt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0x3pp4wt.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: max_word\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp0x3pp4wt.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0x3pp4wt.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0x3pp4wt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0x3pp4wt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: max_word\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp0x3pp4wt.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0x3pp4wt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0x3pp4wt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0x3pp4wt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: max_word not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmp0x3pp4wt.jl:21\n\
    \   ["
  timestamp: 1659979980
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_word = word\n            max_len = length(unique(word))\n\
    \        end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj8zg_2ed.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpj8zg_2ed.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8zg_2ed.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8zg_2ed.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj8zg_2ed.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8zg_2ed.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8zg_2ed.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979978
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_counts = map(word -> length(unique(word)), words)\n    idx = argmax(unique_counts)\n\
    \    return words[idx]\nend\nprintln(find_max([\"name\", \"of\", \"string\"]))\n\
    println(find_max([\"name\", \"enam\", \"game\"]))\nprintln(find_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"]))\n \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1kenvyx2.jl:24

    '
  stdout: "string\nname\naaaaaaa\ntest set: Test Failed at /tmp/tmp1kenvyx2.jl:28\n\
    \  Expression: candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated:\
    \ \"name\" == \"enam\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kenvyx2.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kenvyx2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1kenvyx2.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kenvyx2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kenvyx2.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979979
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    temp = []\n    while !isempty(words)\n        push!(temp, length(unique(words[1])))\n\
    \        words = words[2:end]\n    end\n    ind = findall(temp .== maximum(temp))\n\
    \    return(words[ind[1]])\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp9a3tnyt4.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp9a3tnyt4.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  BoundsError:\
    \ attempt to access 0-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex(A::Vector{String}, i1::Int64)\n     @ Base ./array.jl:861\n   [2] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp9a3tnyt4.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9a3tnyt4.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9a3tnyt4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9a3tnyt4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex(A::Vector{String},\
    \ i1::Int64)\n     @ Base ./array.jl:861\n   [2] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp9a3tnyt4.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9a3tnyt4.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9a3tnyt4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9a3tnyt4.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex(A::Vector{String},\
    \ i1::Int64)\n     @ Base ./array.jl:861\n   [2] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp9a3tnyt4.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9a3tnyt4.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ ["
  timestamp: 1659979981
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    if length(words) == 0\n        return \"\"\n    end\n    if length(words)\
    \ == 1\n        return words[1]\n    end\n    max_word = words[1]\n    max_uniques\
    \ = length(unique(max_word))\n    for i in 2:length(words)\n        if length(unique(words[i]))\
    \ > max_uniques\n            max_word = words[i]\n            max_uniques = length(unique(max_word))\n\
    \        end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph10nw9ep.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmph10nw9ep.jl:36\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph10nw9ep.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph10nw9ep.jl:34\ntest set: Test\
    \ Failed at /tmp/tmph10nw9ep.jl:39\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph10nw9ep.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph10nw9ep.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979979
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    num = Vector{Int}(length(words))\n    lex = Vector{String}(length(words))\n\
    \    for i in 1:length(words)\n        num[i] = length(unique(collect(words[i])))\n\
    \        lex[i] = words[i]\n    end\n    return(lex[findall(num .== maximum(num))[1]])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpamhp1t52.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpamhp1t52.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpamhp1t52.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpamhp1t52.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpamhp1t52.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpamhp1t52.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: no method\
    \ matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpamhp1t52.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpamhp1t52.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpamhp1t52.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpamhp1t52.jl:29\n  Test threw exception\n  Expression:\
    \ candida"
  timestamp: 1659979981
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique = 0\n    max_word = \"\"\n    for word in words\n        unique\
    \ = count_unique(word)\n        if unique > max_unique\n            max_unique\
    \ = unique\n            max_word = word\n        end\n    end\n    return max_word\n\
    end\nfind_max([\"name\", \"of\", \"string\"])\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: count_unique not defined\nStacktrace:\n\
    \ [1] find_max(words::Vector{String})\n   @ Main /tmp/tmpydfdbved.jl:17\n [2]\
    \ top-level scope\n   @ /tmp/tmpydfdbved.jl:25\nin expression starting at /tmp/tmpydfdbved.jl:25\n"
  stdout: ''
  timestamp: 1659979979
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    if length(words) == 0\n        return \"Not found.\"\n    end\n    curr_max\
    \ = length(unique(words[1]))\n    curr_max_index = 1\n    for i in 2:length(words)\n\
    \        if length(unique(words[i])) > curr_max\n            curr_max = length(unique(words[i]))\n\
    \            curr_max_index = i\n        end\n    end\n    return words[curr_max_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyd8u44o3.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpyd8u44o3.jl:33\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyd8u44o3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyd8u44o3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyd8u44o3.jl:36\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyd8u44o3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyd8u44o3.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979979
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Vector{Int}(length(words))\n    for i in eachindex(words)\n\
    \        unique_chars[i] = length(unique(words[i]))\n    end\n    mx = maximum(unique_chars)\n\
    \    for i in eachindex(words)\n        if length(unique(words[i])) == mx\n  \
    \          return words[i]\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpb2dldzs8.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpb2dldzs8.jl:30\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpb2dldzs8.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb2dldzs8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb2dldzs8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpb2dldzs8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: no method\
    \ matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpb2dldzs8.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb2dldzs8.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb2dldzs8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpb2dldzs8.jl:32\n  Test threw exception\n  Expression:\
    \ candida"
  timestamp: 1659979982
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_count = 0\n    for word in words\n        if\
    \ length(unique(word)) > max_count\n            max_count = length(unique(word))\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp61kl2zhn.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp61kl2zhn.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp61kl2zhn.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp61kl2zhn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp61kl2zhn.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp61kl2zhn.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp61kl2zhn.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979980
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    new_words = [word for word in words if length(unique(word)) == maximum([length(unique(word))\
    \ for word in words])]\n    return new_words[1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8nobypwo.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp8nobypwo.jl:23\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8nobypwo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8nobypwo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8nobypwo.jl:26\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8nobypwo.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8nobypwo.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979980
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    #We will use a dictionary to count the number of unique characters for\
    \ each string in the vector.\n    counter=Dict{String, Int}()\n    max_number_unique=0\n\
    \    result=\"\"\n    for word in words\n        if !haskey(counter, word)\n \
    \           counter[word]=length(unique(word))\n        end\n        if counter[word]>max_number_unique\
    \ || (counter[word]==max_number_unique && word<result)\n            max_number_unique=counter[word]\n\
    \            result=word\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979979
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique_char_count = 0\n    max_unique_char_string = \"\"\n    for\
    \ i in 1:length(words)\n        current_unique_char_count = length(unique(collect(words[i])))\n\
    \        if current_unique_char_count > max_unique_char_count\n            max_unique_char_count\
    \ = current_unique_char_count\n            max_unique_char_string = words[i]\n\
    \        elseif current_unique_char_count == max_unique_char_count\n         \
    \   if words[i] < max_unique_char_string\n                max_unique_char_string\
    \ = words[i]\n            end\n        end\n    end\n    return max_unique_char_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979979
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_len, max_word = 0, \"\"\n    for w in words\n        if length(unique(w))\
    \ > max_len\n            max_len, max_word = length(unique(w)), w\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvlq9eb6j.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpvlq9eb6j.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlq9eb6j.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlq9eb6j.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvlq9eb6j.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlq9eb6j.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlq9eb6j.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979981
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    set_max = 0\n    find = \"\"\n    for i = 1:length(words)\n        temp\
    \ = Set(words[i])\n        if length(temp) >= set_max\n            set_max = length(temp)\n\
    \            find = words[i]\n        end\n    end\n    return find\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr98ziwjo.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpr98ziwjo.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"game\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr98ziwjo.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr98ziwjo.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpr98ziwjo.jl:32\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"cc\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr98ziwjo.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr98ziwjo.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpr98ziwjo.jl:33\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"cba\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr98ziwjo.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpr98ziwjo.jl:29\ntest set: Test Failed at /tmp/tmpr98ziwjo.jl:35\n\
    \  Expression: candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"\n\
    \   Evaluated: \"rock\" == \"gonna\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr98ziwjo.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpr98ziwjo.jl:29\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     4     10\n"
  timestamp: 1659979981
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max = 0\n    idx = 1\n    for (i, w) in enumerate(words)\n        aux\
    \ = length(unique(w))\n        if aux > max\n            max = aux\n         \
    \   idx = i\n        end\n    end\n    return words[idx]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxunuwi73.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpxunuwi73.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxunuwi73.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxunuwi73.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxunuwi73.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxunuwi73.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxunuwi73.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979981
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    s = Set(String)\n    max_word = words[1]\n    max_count = length(Set(max_word))\n\
    \    for word in words\n        s = Set(word)\n        c = length(s)\n       \
    \ if c > max_count || (c == max_count && word < max_word)\n            max_word\
    \ = word\n            max_count = c\n        end\n    end\n    return max_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp7049tkxn.jl:32\n  Test threw
    exception\n  Expression: candidate(["name", "of", "string"]) == "string"\n  MethodError:
    no method matching length(::Type{String})\n  Closest candidates are:\n    length(!Matched::Union{Base.KeySet,
    Base.ValueIterator}) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:58\n    length(!Matched::Union{LinearAlgebra.Adjoint{T,
    S}, LinearAlgebra.Transpose{T, S}} where {T, S}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\n    length(!Matched::Base.Iterators.Stateful)
    at ~/.conda/envs/polyglot/share/julia/base/iterators.jl:1338\n    ...\n  Stacktrace:\n   [1]
    union!(s::Set{Char}, itr::Type)\n     @ Base ./abstractset.jl:98\n   [2] Set{Char}(itr::Type)\n     @
    Base ./set.jl:10\n   [3] _Set(itr::Type, #unused#::Base.HasEltype)\n     @ Base
    ./set.jl:25\n   [4] Set(itr::Type)\n     @ Base ./set.jl:23\n   [5] find_max(words::Vector{String})\n     @
    Main /tmp/tmp7049tkxn.jl:14\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [7] macro expansion\n     @ /tmp/tmp7049tkxn.jl:32 [inlined]\n   [8]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [9] top-level scope\n     @ /tmp/tmp7049tkxn.jl:31\ntest set: Error
    During Test at /tmp/tmp7049tkxn.jl:33\n  Test threw exception\n  Expression: candidate(["name",
    "enam", "game"]) == "enam"\n  MethodError: no method matching length(::Type{String})\n  Closest
    candidates are:\n    length(!Matched::Union{Base.KeySet, Base.ValueIterator})
    at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:58\n    length(!Matched::Union{LinearAlgebra.Adjoint{T,
    S}, LinearAlgebra.Transpose{T, S}} where {T, S}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\n    length(!Matched::Base.Iterators.Stateful)
    at ~/.conda/envs/polyglot/share/julia/base/iterators.jl:1338\n    ...\n  Stacktrace:\n   [1]
    union!(s::Set{Char}, itr::Type)\n   '
  timestamp: 1659979984
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    length_of_string = zeros(Int64, length(words))\n    for i in eachindex(words)\n\
    \        length_of_string[i] = length(unique(collect(words[i])))\n    end\n  \
    \  if length(findmax(length_of_string)[2]) != 1\n        return findfirst(length_of_string\
    \ .== findmax(length_of_string)[1],1)\n    else\n        return findmax(length_of_string)[2]\n\
    \    end\nend\n# Question 2\n# In this question, we will explore the effect of\
    \ changing the basis of a\n# function. The function f : R \u2192 R is defined\
    \ by f(x) = x.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpfjpdqs_m.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpfjpdqs_m.jl:32\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ Cannot `convert` an object of type Int64 to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpfjpdqs_m.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjpdqs_m.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjpdqs_m.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpfjpdqs_m.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpfjpdqs_m.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjpdqs_m.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659979984
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    global maximum_unique = -1\n    global result = \"\"\n    for word in\
    \ words\n        unique_char = unique(word)\n        if length(unique_char) >\
    \ maximum_unique || (length(unique_char) == maximum_unique && word < result)\n\
    \            maximum_unique = length(unique_char)\n            result = word\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979980
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    if length(words) == 0\n        throw(DomainError())\n    end\n    sorted_words\
    \ = sort(words)\n    max_word = sorted_words[1]\n    for word in sorted_words\n\
    \        if length(unique(word)) > length(unique(max_word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979980
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # YOUR CODE HERE\n    maximum = 1\n    index = 1\n    for (i, word) in\
    \ enumerate(words)\n        if length(unique(word)) > maximum\n            maximum\
    \ = length(unique(word))\n            index = i\n        end\n    end\n    return\
    \ words[index]\n    \nend\n \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt3dotsmf.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpt3dotsmf.jl:33\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3dotsmf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3dotsmf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt3dotsmf.jl:36\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3dotsmf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3dotsmf.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979982
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    m = Dict()\n    for word in words\n        d = Dict()\n        for c in\
    \ word\n            if haskey(d, c)\n                d[c] += 1\n            else\n\
    \                d[c] = 1\n            end\n        end\n        m[word] = length(keys(d))\n\
    \    end\n    max_keys = keys(m)[argmax(values(m))]\n    min_key = max_keys[1]\n\
    \    for key in max_keys\n        if key < min_key\n            min_key = key\n\
    \        end\n    end\n    return min_key\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpkbqynr04.jl:40\n  Test threw
    exception\n  Expression: candidate(["name", "of", "string"]) == "string"\n  MethodError:
    no method matching keys(::Base.ValueIterator{Dict{Any, Any}})\n  Closest candidates
    are:\n    keys(!Matched::GenericArray) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1823\n    keys(!Matched::Tuple)
    at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:72\n    keys(!Matched::Tuple,
    !Matched::Tuple...) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:77\n    ...\n  Stacktrace:\n    [1]
    pairs(collection::Base.ValueIterator{Dict{Any, Any}})\n      @ Base ./abstractdict.jl:138\n    [2]
    findmax(f::typeof(identity), domain::Base.ValueIterator{Dict{Any, Any}})\n      @
    Base ./reduce.jl:803\n    [3] _findmax(a::Base.ValueIterator{Dict{Any, Any}},
    #unused#::Colon)\n      @ Base ./reduce.jl:829\n    [4] findmax(itr::Base.ValueIterator{Dict{Any,
    Any}})\n      @ Base ./reduce.jl:828\n    [5] argmax(itr::Base.ValueIterator{Dict{Any,
    Any}})\n      @ Base ./reduce.jl:938\n    [6] find_max(words::Vector{String})\n      @
    Main /tmp/tmpkbqynr04.jl:26\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [8] macro expansion\n      @ /tmp/tmpkbqynr04.jl:40 [inlined]\n    [9]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [10] top-level scope\n      @ /tmp/tmpkbqynr04.jl:39\ntest set:
    Error During Test at /tmp/tmpkbqynr04.jl:41\n  Test threw exception\n  Expression:
    candidate(["name", "enam", "game"]) == "enam"\n  MethodError: no method matching
    keys(::Base.ValueIterator{Dict{Any, Any}})\n  Closest candidates are:\n    keys(!Matched::GenericArray)
    at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1823\n    keys(!Matched::Tuple)
    at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:72\n    keys(!Matched::Tuple,
    !Matched::Tuple...) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:77\n    ...\n  Stacktrace:\n    [1]
    p'
  timestamp: 1659979984
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max = 0\n    i = 0\n    val = \"\"\n    for word in words\n        if\
    \ length(unique(word)) > max\n            max = length(unique(word))\n       \
    \     val = word\n        end\n    end\n    return val\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4adtwpfx.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp4adtwpfx.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4adtwpfx.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4adtwpfx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4adtwpfx.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4adtwpfx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4adtwpfx.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979982
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_num_chars = 0\n    max_ind = 0\n    for i = 1:length(words)\n    \
    \    if length(unique(words[i])) > max_num_chars\n            max_num_chars =\
    \ length(unique(words[i]))\n            max_ind = i\n        end\n    end\n  \
    \  return words[max_ind]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppzdf4rm5.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmppzdf4rm5.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzdf4rm5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzdf4rm5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppzdf4rm5.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzdf4rm5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzdf4rm5.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979982
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    count_words = Dict{String, Int}()\n    for word in words\n        count_words[word]\
    \ = length(unique(word))\n    end\n    sorted_words = sort(collect(keys(count_words)),\
    \ by=x->(count_words[x], x))\n    return last(sorted_words)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe1k9vdv8.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpe1k9vdv8.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1k9vdv8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1k9vdv8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpe1k9vdv8.jl:28\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"cc\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1k9vdv8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1k9vdv8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpe1k9vdv8.jl:29\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"cba\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe1k9vdv8.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe1k9vdv8.jl:25\ntest set: Test Failed at /tmp/tmpe1k9vdv8.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"this\" == \"footbott\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1k9vdv8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1k9vdv8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpe1k9vdv8.jl:31\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"rock\" == \"gonna\"\nStacktrace:\n\
    \ "
  timestamp: 1659979982
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    max_val = length(Set(collect(max_word)))\n  \
    \  for word in words[2:end]\n        curr_val = length(Set(collect(word)))\n \
    \       if curr_val > max_val\n            max_val = curr_val\n            max_word\
    \ = word\n        elseif curr_val == max_val\n            if word < max_word\n\
    \                max_word = word\n            end\n        end\n    end\n    return\
    \ max_word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979980
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    return sort([(length(unique(word)), word) for word in words])[end][2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphz2qsdzp.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmphz2qsdzp.jl:22\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphz2qsdzp.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphz2qsdzp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphz2qsdzp.jl:23\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"cc\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphz2qsdzp.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphz2qsdzp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphz2qsdzp.jl:24\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"cba\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphz2qsdzp.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphz2qsdzp.jl:20\ntest set: Test Failed at /tmp/tmphz2qsdzp.jl:25\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"this\" == \"footbott\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphz2qsdzp.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphz2qsdzp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphz2qsdzp.jl:26\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"rock\" == \"gonna\"\nStacktrace:\n\
    \ "
  timestamp: 1659979982
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # check if empty\n    if length(words) == 0\n        return \"\"\n   \
    \ end\n    # max unique charecters\n    max_uniques = 0\n    max_str = \"\"\n\
    \    for word in words\n        uniques = 0\n        for char in word\n      \
    \      if count(findall(word, char)) == 1\n                uniques += 1\n    \
    \        end\n        end\n        if uniques > max_uniques\n            max_uniques\
    \ = uniques\n            max_str = word\n        end\n    end\n    return max_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpefusc3dk.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpefusc3dk.jl:40\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ no method matching findall(::String, ::Char)\n  Closest candidates are:\n  \
    \  findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    findall(::String,\
    \ !Matched::LibGit2.GitIndex) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpefusc3dk.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpefusc3dk.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpefusc3dk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpefusc3dk.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: no method\
    \ matching findall(::String, ::Char)\n  Closest candidates are:\n    findall(::Union{AbstractPattern,\
    \ AbstractString}, !Matched::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    findall(::String, !Matched::LibGit2.GitIndex) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpefusc3dk.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpefusc3dk.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpefusc3dk.jl:39\ntest set: "
  timestamp: 1659979984
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    max_string = \"\"\n    max_count = 0\n    for i\
    \ in 1:n\n        word = words[i]\n        unique_chars = unique(word)\n     \
    \   if length(unique_chars) > max_count\n            max_count = length(unique_chars)\n\
    \            max_string = word\n        end\n    end\n    return max_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl7u1nnu6.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpl7u1nnu6.jl:33\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl7u1nnu6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl7u1nnu6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl7u1nnu6.jl:36\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl7u1nnu6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl7u1nnu6.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979982
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # For each word, count the number of unique characters\n    num_unique_chars\
    \ = [unique(w) for w in words]\n    # Determine the maximum number of unique characters\n\
    \    max_unique_char = maximum(num_unique_chars)\n    # Return the word that has\
    \ the maximum number of unique characters\n    return words[findfirst(num_unique_chars\
    \ .== max_unique_char)]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpszulljt5.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpszulljt5.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 3\
    \ and 6\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] find_max(words::Vector{String})\n\
    \      @ Main /tmp/tmpszulljt5.jl:19\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpszulljt5.jl:26 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpszulljt5.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpszulljt5.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 3\
    \ and 4\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] find_max(words::Vector{String})\n\
    \      @ Main /tmp/tmpszulljt5.jl:19\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpszulljt5.jl:27 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpszulljt5.jl:25\ntest set:\
    \ Error During Tes"
  timestamp: 1659979984
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = 0\n    best_word = \"\"\n    for word in words\n        n_chars =\
    \ length(unique(word))\n        if n_chars > n\n            n = n_chars\n    \
    \        best_word = word\n        end\n    end\n    return best_word\nend\n \n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjyowoks2.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpjyowoks2.jl:32\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyowoks2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjyowoks2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjyowoks2.jl:35\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyowoks2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjyowoks2.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979982
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_index = 1\n    max_len = length(unique(words[1]))\n    for i in 2:length(words)\n\
    \        # Check for unique elements in the word,\n        # and store length\
    \ of the word with maximum number of unique elements\n        # in a variable\
    \ max_len\n        # We are checking if length of the word with maximum number\
    \ of\n        # unique elements is less than the length of the current word\n\
    \        # because we want the word with maximum number of unique elements\n \
    \       if max_len < length(unique(words[i]))\n            max_len = length(unique(words[i]))\n\
    \            max_index = i\n        end\n    end\n    return words[max_index]\n\
    end\nfind_max([\"name\", \"of\", \"string\"])\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpay4vgpp0.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpay4vgpp0.jl:37\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpay4vgpp0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpay4vgpp0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpay4vgpp0.jl:40\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpay4vgpp0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpay4vgpp0.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979983
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # find the maximum number of unique characters\n    # in words and store\
    \ in this variable\n    max_unique = 0\n    # store the index of the word with\
    \ maximum number\n    # of unique characters. If multiple words have\n    # this\
    \ number, store the index of the word which\n    # comes first in lexicographical\
    \ order\n    max_index = 0\n    index = 0\n    # store the number of unique characters\
    \ in the word\n    uniques = 0\n    # store the characters in the word\n    word\
    \ = \"\"\n    # loop over the vector words, find the word with maximum\n    #\
    \ number of unique characters and store it at index\n    # max_index\n    for\
    \ (i, w) in enumerate(words)\n        # find the number of unique characters in\
    \ the word\n        # and store it in uniques\n        uniques = count_unique(w)\n\
    \        # if uniques is greater than max_unique\n        # store the index of\
    \ the word in max_index\n        # and update max_unique\n        if uniques >\
    \ max_unique\n            max_unique = uniques\n            max_index = i\n  \
    \      end\n    end\n    # return the word at max_index\n    words[max_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp7koza_2q.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmp7koza_2q.jl:50\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ count_unique not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmp7koza_2q.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7koza_2q.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7koza_2q.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp7koza_2q.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: count_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp7koza_2q.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7koza_2q.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7koza_2q.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp7koza_2q.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: count_unique\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp7koza_2q.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7koza_2q.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7koza_2q.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp7koza_2q.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: count_unique not\
    \ defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp7ko"
  timestamp: 1659979984
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    max_word_set = Set(collect(max_word))\n    max_word_len\
    \ = length(max_word_set)\n    for i in 2:length(words)\n        word = words[i]\n\
    \        word_set = Set(collect(word))\n        word_len = length(word_set)\n\
    \        if word_len > max_word_len\n            max_word = word\n           \
    \ max_word_set = word_set\n            max_word_len = word_len\n        elseif\
    \ word_len == max_word_len\n            if word > max_word\n                max_word\
    \ = word\n                max_word_set = word_set\n                max_word_len\
    \ = word_len\n            end\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa0dokad7.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpa0dokad7.jl:41\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0dokad7.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0dokad7.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpa0dokad7.jl:42\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"cc\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0dokad7.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0dokad7.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpa0dokad7.jl:43\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"cba\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa0dokad7.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa0dokad7.jl:39\ntest set: Test Failed at /tmp/tmpa0dokad7.jl:44\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"this\" == \"footbott\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0dokad7.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0dokad7.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpa0dokad7.jl:45\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"rock\" == \"gonna\"\nStacktrace:\n\
    \ "
  timestamp: 1659979983
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = map(x -> unique(x), words)\n    max_value = maximum(map(x\
    \ -> length(x), unique_chars))\n    filtered_vector = filter(x -> length(x) ==\
    \ max_value, unique_chars)\n    return words[argmin(map(x -> length(x), filtered_vector))]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpex193vc5.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpex193vc5.jl:24\n  Expression: candidate([\"\
    name\", \"of\", \"string\"]) == \"string\"\n   Evaluated: \"name\" == \"string\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpex193vc5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpex193vc5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpex193vc5.jl:25\n  Expression: candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpex193vc5.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpex193vc5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpex193vc5.jl:28\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpex193vc5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpex193vc5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpex193vc5.jl:29\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"we\" == \"gonna\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpex193vc5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpex193vc5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpex193vc5.jl:30\n  Expression: candidate([\"we\", \"are\",\
    \ \"a\", \"mad\", \"nation\"]) == \"nation\"\n   Evaluated: \"we\" "
  timestamp: 1659979983
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # Your code goes here\n    return \"Dummy\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp01s2m23d.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp01s2m23d.jl:22\n  Expression: candidate([\"\
    name\", \"of\", \"string\"]) == \"string\"\n   Evaluated: \"Dummy\" == \"string\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp01s2m23d.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp01s2m23d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp01s2m23d.jl:23\n  Expression: candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\"\n   Evaluated: \"Dummy\" == \"enam\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp01s2m23d.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp01s2m23d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp01s2m23d.jl:24\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"Dummy\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp01s2m23d.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp01s2m23d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp01s2m23d.jl:25\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"Dummy\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp01s2m23d.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp01s2m23d.jl:21\ntest set: Test Failed at /tmp/tmp01s2m23d.jl:26\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"Dummy\" == \"footbott\"\nStacktrac"
  timestamp: 1659979984
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    ind = 1\n    unique = unique_char(words[1])\n    for i in 2:length(words)\n\
    \        if unique_char(words[i]) > unique\n            unique = unique_char(words[i])\n\
    \            ind = i\n        end\n    end\n    return words[ind]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpre17d2_6.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpre17d2_6.jl:29\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ unique_char not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpre17d2_6.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpre17d2_6.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpre17d2_6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpre17d2_6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: unique_char\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpre17d2_6.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpre17d2_6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpre17d2_6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpre17d2_6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: unique_char\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpre17d2_6.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpre17d2_6.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpre17d2_6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpre17d2_6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: unique_char not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpre17d2_"
  timestamp: 1659979984
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    w1 = words[1]\n    w2 = words[2]\n    if length(unique(w1)) > length(unique(w2))\n\
    \        return w1\n    elseif length(unique(w1)) < length(unique(w2))\n     \
    \   return w2\n    else\n        w3 = words[3]\n        if length(unique(w3))\
    \ > length(unique(w1))\n            return w3\n        else\n            if w1\
    \ < w2\n                return w1\n            else\n                return w2\n\
    \            end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmppxdcix1n.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmppxdcix1n.jl:38\n  Expression: candidate([\"\
    name\", \"of\", \"string\"]) == \"string\"\n   Evaluated: \"name\" == \"string\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxdcix1n.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxdcix1n.jl:37\ntest set: Error\
    \ During Test at /tmp/tmppxdcix1n.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  BoundsError: attempt to access 2-element\
    \ Vector{String} at index [3]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] find_max(words::Vector{String})\n     @ Main /tmp/tmppxdcix1n.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppxdcix1n.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppxdcix1n.jl:37\ntest set:\
    \ Test Failed at /tmp/tmppxdcix1n.jl:42\n  Expression: candidate([\"play\", \"\
    this\", \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\"\
    \ == \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxdcix1n.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppxdcix1n.jl:37\ntest set: Test\
    \ Failed at /tmp/tmppxdcix1n.jl:43\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"are\" == \"gonna\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppxdcix1n.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 "
  timestamp: 1659979985
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    c = 0\n    for i in words\n        if length(unique(i))>c\n          \
    \  c = length(unique(i))\n            @show c\n            s = i\n        end\n\
    \    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmphb7_jnn9.jl:26

    '
  stdout: "c = 4\nc = 6\ntest set: Error During Test at /tmp/tmphb7_jnn9.jl:29\n \
    \ Test threw exception\n  Expression: candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\"\n  UndefVarError: s not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmphb7_jnn9.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphb7_jnn9.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphb7_jnn9.jl:28\nc = 4\ntest\
    \ set: Error During Test at /tmp/tmphb7_jnn9.jl:30\n  Test threw exception\n \
    \ Expression: candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError:\
    \ s not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @\
    \ Main /tmp/tmphb7_jnn9.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphb7_jnn9.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphb7_jnn9.jl:28\nc = 1\ntest\
    \ set: Error During Test at /tmp/tmphb7_jnn9.jl:31\n  Test threw exception\n \
    \ Expression: candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError:\
    \ s not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @\
    \ Main /tmp/tmphb7_jnn9.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphb7_jnn9.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphb7_jnn9.jl:28\nc = 3\ntest\
    \ set: Error During Test at /tmp/tmphb7_jnn9.jl:32\n  Test threw exception\n \
    \ Expression: candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: s not\
    \ defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmphb7_jnn9.jl:22\n  "
  timestamp: 1659979985
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_num = 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_num\n            max_num = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph696faiw.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmph696faiw.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph696faiw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph696faiw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph696faiw.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph696faiw.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph696faiw.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979983
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    n = 0\n    count = 0\n    word = \"\"\n   \n    for i in 1:length(words)\n\
    \        word = words[i]\n        count = 0\n        for j in 1:length(word)\n\
    \            if occursin(word[j], word[1:j-1]) == false\n                count\
    \ += 1\n            end\n        end\n        if count > n\n            n = count\n\
    \            word = words[i]\n        end\n    end\n    return word\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9r9kbi9x.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp9r9kbi9x.jl:40\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"game\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9r9kbi9x.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9r9kbi9x.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp9r9kbi9x.jl:41\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"cc\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9r9kbi9x.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9r9kbi9x.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp9r9kbi9x.jl:42\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"cba\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9r9kbi9x.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9r9kbi9x.jl:38\ntest set: Test Failed at /tmp/tmp9r9kbi9x.jl:44\n\
    \  Expression: candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"\n\
    \   Evaluated: \"rock\" == \"gonna\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9r9kbi9x.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9r9kbi9x.jl:38\ntest set: Test Failed at /tmp/tmp9r9kbi9x.jl:46\n\
    \  Expression: candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"\n  \
    \ Evaluated: \"prrk\" == \"this\"\nStacktrace:\n [1] macro expansion\n   "
  timestamp: 1659979984
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique = 0\n    max_unique_word = \"\"\n    for word in words\n  \
    \      unique_chars = unique(collect(word))\n        if length(unique_chars) >\
    \ max_unique\n            max_unique = length(unique_chars)\n            max_unique_word\
    \ = word\n        end\n    end\n    return max_unique_word\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfjr8pr7p.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpfjr8pr7p.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjr8pr7p.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjr8pr7p.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfjr8pr7p.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjr8pr7p.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjr8pr7p.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979984
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_char_words = unique_char_count.(words)\n    idx = indmax(unique_char_words)\n\
    \    return words[idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmppms_4pit.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmppms_4pit.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ unique_char_count not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmppms_4pit.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppms_4pit.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppms_4pit.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppms_4pit.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: unique_char_count\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmppms_4pit.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppms_4pit.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppms_4pit.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppms_4pit.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: unique_char_count\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmppms_4pit.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppms_4pit.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppms_4pit.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppms_4pit.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: unique_char_count\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n   "
  timestamp: 1659979986
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max = 1\n    max_word = words[1]\n    for word in words\n        characters\
    \ = 0\n        character_array = Array{Int, 1}(length(word))\n        for c in\
    \ word\n            if character_array[Int(c)] == 0\n                character_array[Int(c)]\
    \ = 1\n                characters += 1\n            end\n        end\n       \
    \ if characters > max\n            max = characters\n            max_word = word\n\
    \        end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpw2gs61mj.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpw2gs61mj.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpw2gs61mj.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw2gs61mj.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw2gs61mj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpw2gs61mj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: no method\
    \ matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpw2gs61mj.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw2gs61mj.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw2gs61mj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpw2gs61mj.jl:39\n  Test threw exception\n  Expression:\
    \ candida"
  timestamp: 1659979986
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # YOUR CODE HERE\n    return argmax(string -> length(unique(string)),\
    \ words)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnfc_ayde.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpnfc_ayde.jl:23\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfc_ayde.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfc_ayde.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnfc_ayde.jl:26\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfc_ayde.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfc_ayde.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979984
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    min_idx = 1\n    max_idx = 1\n    for i = 1:length(words)\n        # find\
    \ max unique characters\n        if length(unique(chars(words[i]))) > length(unique(chars(words[max_idx])))\n\
    \            max_idx = i\n        end\n        # find lexicographical index\n\
    \        if words[i] < words[min_idx]\n            min_idx = i\n        end\n\
    \    end\n    if max_idx == min_idx\n        return words[max_idx]\n    else\n\
    \        return words[min_idx]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp51s_8lrs.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp51s_8lrs.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ chars not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n \
    \    @ Main /tmp/tmp51s_8lrs.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp51s_8lrs.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp51s_8lrs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp51s_8lrs.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: chars\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp51s_8lrs.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp51s_8lrs.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp51s_8lrs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp51s_8lrs.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: chars\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmp51s_8lrs.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp51s_8lrs.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp51s_8lrs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp51s_8lrs.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: chars not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmp51s_8lrs.jl:18\n\
    \   [2] macro exp"
  timestamp: 1659979986
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    num_unique = zeros(length(words))\n    for (idx, word) in enumerate(words)\n\
    \        num_unique[idx] = length(unique(word))\n    end\n    max_idx = argmax(num_unique)\n\
    \    return words[max_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7a4qh35v.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp7a4qh35v.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7a4qh35v.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7a4qh35v.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7a4qh35v.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7a4qh35v.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7a4qh35v.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979985
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = \"\"\n    max_length = 0\n    for word in words\n        if\
    \ length(unique(word)) > max_length\n            max_length = length(unique(word))\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf93ih35u.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpf93ih35u.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf93ih35u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf93ih35u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpf93ih35u.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf93ih35u.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf93ih35u.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979985
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_count = 0\n    max_words = []\n    for i in 1:length(words)\n    \
    \    if length(unique(words[i])) > max_count\n            max_count = length(unique(words[i]))\n\
    \            max_words = [words[i]]\n        elseif length(unique(words[i])) ==\
    \ max_count\n            push!(max_words, words[i])\n        end\n    end\n  \
    \  #println(max_words)\n    return find_min(max_words)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpwdk_9wb7.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpwdk_9wb7.jl:32\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ find_min not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmpwdk_9wb7.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwdk_9wb7.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwdk_9wb7.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpwdk_9wb7.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: find_min\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpwdk_9wb7.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwdk_9wb7.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwdk_9wb7.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpwdk_9wb7.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: find_min\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpwdk_9wb7.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwdk_9wb7.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwdk_9wb7.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpwdk_9wb7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: find_min not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpwdk_9wb7.jl:25\n\
    \   ["
  timestamp: 1659979986
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict()\n    for word in words\n        word_counts[word]\
    \ = length(unique(word))\n    end\n    max_count = maximum(values(word_counts))\n\
    \    max_count_words = [k for (k, v) in word_counts if v == max_count]\n    sort!(max_count_words)\n\
    \    return max_count_words[1]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979984
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    return sort(unique(words), by=x->length(x), rev=true)[1]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx76e0dpv.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpx76e0dpv.jl:22\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx76e0dpv.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx76e0dpv.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  timestamp: 1659979986
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    n_max = n_unique_chars(max_word)\n    for word\
    \ in words[2:end]\n        n_word = n_unique_chars(word)\n        if n_word >\
    \ n_max\n            max_word = word\n            n_max = n_word\n        end\n\
    \    end\n    return max_word\nend\n@test find_max([\"name\", \"of\", \"string\"\
    ]) == \"string\"\n@test find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n\
    @test find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmpkeh3uctr.jl:25

    in expression starting at /tmp/tmpkeh3uctr.jl:25

    '
  stdout: ''
  timestamp: 1659979985
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # Get length of words\n    num_words = length(words)\n    # Assign the\
    \ first word to a variable to compare to\n    max_word = words[1]\n    # Iterate\
    \ over the rest of the words\n    for i in 2:num_words\n        # Get first word\
    \ from the array\n        word1 = words[i]\n        # Get the word that was assigned\
    \ to max_word\n        word2 = max_word\n        # Get the lengths of each word\n\
    \        len1 = length(word1)\n        len2 = length(word2)\n        # If the\
    \ lengths are the same, compare them lexicographically\n        if len1 == len2\n\
    \            if word1 < word2\n                max_word = word1\n            end\n\
    \        # Otherwise, find the longest word and assign it to max_word\n      \
    \  elseif len1 > len2\n            max_word = word1\n        end\n    end\n  \
    \  return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuk5lo46_.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpuk5lo46_.jl:51\n  Expression: candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\"\n   Evaluated: \"prrk\" == \"this\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuk5lo46_.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuk5lo46_.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  timestamp: 1659979986
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    uniq = [length(unique(w)) for w in words]\n    maxi = indmax(uniq)\n \
    \   return words[maxi]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmphq9hq_8n.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmphq9hq_8n.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ indmax not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n\
    \     @ Main /tmp/tmphq9hq_8n.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphq9hq_8n.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphq9hq_8n.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphq9hq_8n.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmphq9hq_8n.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphq9hq_8n.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphq9hq_8n.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphq9hq_8n.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmphq9hq_8n.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphq9hq_8n.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphq9hq_8n.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphq9hq_8n.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: indmax not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmphq9hq_8n.jl:15\n\
    \   [2] macro"
  timestamp: 1659979987
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    # TODO: Implement this function\n    result::String = \"\"\n    uniques::Set{Char}\
    \ = Set{Char}()\n    max_unique::Int = 0\n    for w in words\n        for c in\
    \ w\n            if !(c in uniques)\n                push!(uniques, c)\n     \
    \       end\n        end\n        if max_unique < length(uniques)\n          \
    \  max_unique = length(uniques)\n            result = w\n        end\n       \
    \ uniques = Set{Char}()\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoctfs4nf.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpoctfs4nf.jl:38\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoctfs4nf.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoctfs4nf.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpoctfs4nf.jl:41\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoctfs4nf.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoctfs4nf.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979986
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    sorted = sort(unique(words))\n    string = sorted[end]\n    return string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxgxcflma.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpxgxcflma.jl:24\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgxcflma.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgxcflma.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpxgxcflma.jl:25\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"cc\" == \"aaaaaaa\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgxcflma.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgxcflma.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpxgxcflma.jl:26\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"cba\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxgxcflma.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxgxcflma.jl:22\ntest set: Test Failed at /tmp/tmpxgxcflma.jl:27\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"this\" == \"footbott\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgxcflma.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgxcflma.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpxgxcflma.jl:28\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"gonna\"\n   Evaluated: \"we\" == \"gonna\"\nStacktrace:\n\
    \ [1"
  timestamp: 1659979986
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    len_max = 0\n    ind_max = 0\n    for (ind, word) in enumerate(words)\n\
    \        letters = set(ch for ch in word)\n        len_letters = length(letters)\n\
    \        if len_letters > len_max\n            len_max = len_letters\n       \
    \     ind_max = ind\n        end\n    end\n    return words[ind_max]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpbdajw_nl.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpbdajw_nl.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  UndefVarError:\
    \ set not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n   \
    \  @ Main /tmp/tmpbdajw_nl.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbdajw_nl.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbdajw_nl.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpbdajw_nl.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  UndefVarError: set\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpbdajw_nl.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbdajw_nl.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbdajw_nl.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpbdajw_nl.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  UndefVarError: set\
    \ not defined\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main\
    \ /tmp/tmpbdajw_nl.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbdajw_nl.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbdajw_nl.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpbdajw_nl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", \"cba\"]) == \"abc\"\n  UndefVarError: set not defined\n\
    \  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpbdajw_nl.jl:17\n\
    \   [2] macro expansion\n "
  timestamp: 1659979987
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    max_num_unique = 0\n    max_word = \"\"\n    for\
    \ i in 1:n\n        num_unique = 0\n        curr_word = words[i]\n        for\
    \ j in 1:length(curr_word)\n            if curr_word[j] \u2209 max_word\n    \
    \            num_unique += 1\n            end\n        end\n        if num_unique\
    \ > max_num_unique\n            max_num_unique = num_unique\n            max_word\
    \ = curr_word\n        end\n    end\n    return max_word\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp08cmshja.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp08cmshja.jl:38\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp08cmshja.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp08cmshja.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     1     10\n"
  timestamp: 1659979986
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n = length(words)\n    maxIndex = 1\n    maxNum = length(unique(words[1]))\n\
    \    for i in 1:n\n        temp = length(unique(words[i]))\n        if temp >\
    \ maxNum\n            maxNum = temp\n            maxIndex = i\n        end\n \
    \   end\n    return words[maxIndex]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf4yn8nff.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpf4yn8nff.jl:32\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf4yn8nff.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf4yn8nff.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpf4yn8nff.jl:35\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf4yn8nff.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf4yn8nff.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979986
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_val = 0\n    max_idx = 0\n    for i in 1:length(words)\n        unique_chars\
    \ = unique(words[i])\n        if length(unique_chars) > max_val\n            max_val\
    \ = length(unique_chars)\n            max_idx = i\n        end\n    end\n    return\
    \ words[max_idx]\nend\n    \n \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnvo5okle.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpnvo5okle.jl:33\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnvo5okle.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnvo5okle.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnvo5okle.jl:36\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnvo5okle.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnvo5okle.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979986
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = nothing\n    max_n = 0\n    for word in words\n        if isnothing(max_word)\n\
    \            max_word = word\n            max_n = length(unique(collect(word)))\n\
    \        else\n            if length(unique(collect(word))) > max_n\n        \
    \        max_word = word\n                max_n = length(unique(collect(word)))\n\
    \            end\n        end\n    end\n    return max_word\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw8r1gpiz.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpw8r1gpiz.jl:35\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8r1gpiz.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8r1gpiz.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpw8r1gpiz.jl:38\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8r1gpiz.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8r1gpiz.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979987
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    words_dict = Dict{String,Int}()\n    unique_dict = Dict{String,Int}()\n\
    \    for word in words\n        words_dict[word] = length(word)\n        unique_dict[word]\
    \ = length(Set(word))\n    end\n    max_unique = maximum(values(unique_dict))\n\
    \    max_set = []\n    for (key, value) in unique_dict\n        if value == max_unique\n\
    \            push!(max_set, key)\n        end\n    end\n    min_word = min(max_set)\n\
    \    return min_word\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpdvi0n3qs.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpdvi0n3qs.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ no method matching min(::Vector{Any})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpdvi0n3qs.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdvi0n3qs.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdvi0n3qs.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdvi0n3qs.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: no method\
    \ matching min(::Vector{Any})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:134\n    min(::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:506\n    min(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpdvi0n3qs.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdvi0n3qs.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdvi0n3qs.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdvi0n3qs.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  Metho"
  timestamp: 1659979989
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_unique_char = 0\n    max_unique_word = \"\"\n    for word in words\n\
    \        word_unique_char = length(unique(word))\n        if word_unique_char\
    \ > max_unique_char\n            max_unique_char = word_unique_char\n        \
    \    max_unique_word = word\n        elseif word_unique_char == max_unique_char\n\
    \            if word < max_unique_word\n                max_unique_word = word\n\
    \            end\n        end\n    end\n    return max_unique_word\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979985
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    chars::Set{Char} = Set{Char}()\n    unique_chars::Int = 0\n    unique_word::String\
    \ = \"\"\n    for word in words\n        chars = unique(word)\n        if unique_chars\
    \ <= length(chars)\n            unique_chars = length(chars)\n            unique_word\
    \ = word\n        end\n    end\n    return unique_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpy43bx5_t.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpy43bx5_t.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Char} to an object of type Set{Char}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractSet\
    \ at ~/.conda/envs/polyglot/share/julia/base/set.jl:433\n    convert(::Type{T},\
    \ !Matched::AbstractSet) where T<:AbstractSet at ~/.conda/envs/polyglot/share/julia/base/set.jl:434\n\
    \    convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpy43bx5_t.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy43bx5_t.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy43bx5_t.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpy43bx5_t.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type Set{Char}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractSet at\
    \ ~/.conda/envs/polyglot/share/julia/base/set.jl:433\n    convert(::Type{T}, !Matched::AbstractSet)\
    \ where T<:AbstractSet at ~/.conda/envs/polyglot/share/julia/base/set.jl:434\n\
    \    convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpy43bx5_t.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy43bx5_t.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy43bx5_t.jl:30\n"
  timestamp: 1659979989
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    max_word = words[1]\n    max_len = length(Set(words[1]))\n    for (i,\
    \ word) in enumerate(words)\n        if length(Set(word)) > max_len\n        \
    \    max_word = word\n            max_len = length(Set(word))\n        end\n \
    \   end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm44p51v4.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpm44p51v4.jl:30\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm44p51v4.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm44p51v4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpm44p51v4.jl:33\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm44p51v4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm44p51v4.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979987
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    return findmax([length(unique(x)) for x in words])[2]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpv2h5ko5c.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpv2h5ko5c.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ Cannot `convert` an object of type Int64 to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpv2h5ko5c.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv2h5ko5c.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv2h5ko5c.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpv2h5ko5c.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpv2h5ko5c.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv2h5ko5c.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659979989
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    n_uniq_chars_max = 0\n    uniq_chars_max = \"\"\n    for word in words\n\
    \        n_uniq_chars = length(Set(collect(word)))\n        if n_uniq_chars >\
    \ n_uniq_chars_max\n            n_uniq_chars_max = n_uniq_chars\n            uniq_chars_max\
    \ = word\n        end\n    end\n    return uniq_chars_max\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd3eto_6l.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpd3eto_6l.jl:31\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3eto_6l.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3eto_6l.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpd3eto_6l.jl:34\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3eto_6l.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3eto_6l.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  timestamp: 1659979987
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    str_len_dict = Dict{String, Int}()\n    for i in words\n        if haskey(str_len_dict,\
    \ i) == false\n            str_len_dict[i] = length(unique(collect(i)))\n    \
    \    end\n    end\n    max = maximum(values(str_len_dict))\n    max_words = [k\
    \ for (k,v) in str_len_dict if v == max]\n    max_words = sort(max_words)\n  \
    \  return max_words[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   10     10

    '
  stdout: ''
  timestamp: 1659979986
