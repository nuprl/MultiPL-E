language: jl
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    output = [string[1:i]\
    \ for i in 1:length(string)]\n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if length(string)\
    \ == 0\n        return []\n    elseif length(string) == 1\n        return [string]\n\
    \    else\n        return [string[1:i] for i in 1:length(string)]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    my_prefixes =\
    \ []\n    for i in 1:length(string)\n        push!(my_prefixes, string[1:i])\n\
    \    end\n    return my_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = length(string)\n\
    \    to_ret = String[]\n    for i in 1:n\n        push!(to_ret, string[1:i])\n\
    \    end\n    return to_ret\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all = Vector{String}(undef,\
    \ length(string))\n    for i in 1:length(string)\n        all[i] = string[1:i]\n\
    \    end\n    return all\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return map(s ->\
    \ string[1:s], 1:length(string))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    N = length(string)\n\
    \    prefixes = Vector{String}(undef, N)\n    for i in 1:N\n        prefixes[i]\
    \ = string[1:i]\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    Prefixes = Vector{String}[]\n\
    \    for j in 1:length(string)\n        push!(Prefixes, string[1:j])\n    end\n\
    \    return Prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpogrlvavn.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpogrlvavn.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: Cannot `convert` an object of type String\
    \ to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Vector{String}}, item::String)\n\
    \     @ Base ./array.jl:994\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpogrlvavn.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpogrlvavn.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpogrlvavn.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpogrlvavn.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Vector{String}}, item::String)\n\
    \     @ Base ./array."
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    p = []\n    for\
    \ k in 1:length(string)\n        push!(p, string[1:k])\n    end\n    return p\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\
    \"\n        return []\n    else\n        return [string[1:end]] .+ all_prefixes(string[1:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    len = length(string)\n\
    \    if len == 0 \n        return [\"\"]\n    else\n        return vcat(all_prefixes(string[1:len]),\
    \ [string])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpsnt6ql6d.jl:18\n  Expression: candidate("")
    == Vector{String}([])\n   Evaluated: [""] == String[]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpsnt6ql6d.jl:18 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpsnt6ql6d.jl:17\n'''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 0:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4impmmuh.jl:10

    '
  stdout: "test set: Test Failed at /tmp/tmp4impmmuh.jl:13\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4impmmuh.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4impmmuh.jl:12\ntest set: Test\
    \ Failed at /tmp/tmp4impmmuh.jl:14\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"\", \"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4impmmuh.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4impmmuh.jl:12\ntest set: Test\
    \ Failed at /tmp/tmp4impmmuh.jl:15\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"W\", \"WW\", \"WWW\"] == [\"W\", \"\
    WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4impmmuh.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4impmmuh.jl:12\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    length = length(string)\n\
    \    prefixes = []\n    for i = 1:length\n        push!(prefixes,string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpr53bxc_1.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpr53bxc_1.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpr53bxc_1.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr53bxc_1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr53bxc_1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpr53bxc_1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: length not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpr53bxc_1.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr53bxc_1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr53bxc_1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpr53bxc_1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpr53bxc_1.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr53bxc_1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr53bxc_1.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = [string[1:i]\
    \ for i in 1:length(string)]\n    append!(prefixes, [string])\n    return prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvxxaqbia.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpvxxaqbia.jl:15\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvxxaqbia.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvxxaqbia.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpvxxaqbia.jl:16\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"a\",\
    \ \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\", \"asdfgh\"] == [\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvxxaqbia.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvxxaqbia.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpvxxaqbia.jl:17\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"W\", \"WW\", \"WWW\", \"WWW\"] == [\"W\"\
    , \"WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvxxaqbia.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvxxaqbia.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    for i in 1:length(string)\n        prefixes = append!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpwf5posja.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpwf5posja.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: Cannot `convert` an object of type Char to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] all_prefixes(string::String)\n      @ Main /tmp/tmpwf5posja.jl:10\n \
    \  [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpwf5posja.jl:18 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpwf5posja.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpwf5posja.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials."
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    N = length(string)\n\
    \    p = [string[1:i] for i in 1:N]\n    return p\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    len = length(string)\n\
    \    return [string[1:i] for i in 1:len]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [prefix(string,\
    \ i) for i in 0:length(string)]\nend;\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa4tpa0yr.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmpa4tpa0yr.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: prefix\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(i::Int64)\n     @\
    \ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{String}})\n     @ Base ./array.jl:724\n   [4] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpa4tpa0yr.jl:6\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpa4tpa0yr.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpa4tpa0yr.jl:12\ntest set:\
    \ Error During Test at /tmp/tmpa4tpa0yr.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: prefix not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(i::Int64)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{String}})\n  \
    \   @ Base ./array.jl:724\n   [4] all_prefixes(string::String)\n     @ Main /tmp/tmpa4tpa0yr.jl:6\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpa4tpa0yr.jl:14 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpa4tpa0yr.jl:12\ntest set:\
    \ Error During Test at /tmp/tmpa4tpa0yr.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: prefix not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(i::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{String}})\n     @ Base ./array.jl:724\n   [4] all_prefixes(strin"
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    string_vec = Vector{String}(undef,\
    \ length(string))\n    for i = 1:length(string)\n        string_vec[i] = string[1:i]\n\
    \    end\n    return string_vec\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    res = []\n   \
    \ for i = 1:length(string)\n        push!(res, string[1:i])\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    m = length(string)\n\
    \    prefixes = Vector{String}(m)\n    for i = 1:m\n        prefixes[i] = string[1:i]\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2t3q7n37.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp2t3q7n37.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp2t3q7n37.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2t3q7n37.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2t3q7n37.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp2t3q7n37.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp2t3q7n37.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2t3q7n37.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2t3q7n37.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp2t3q7n37.jl:20\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    length = length(string)\n\
    \    return [string[1:length(i)] for i in 1:length]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp1nz_0270.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmp1nz_0270.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp1nz_0270.jl:6\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1nz_0270.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1nz_0270.jl:13\ntest set:\
    \ Error During Test at /tmp/tmp1nz_0270.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: length not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp1nz_0270.jl:6\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1nz_0270.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1nz_0270.jl:13\ntest set:\
    \ Error During Test at /tmp/tmp1nz_0270.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp1nz_0270.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1nz_0270.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1nz_0270.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009413
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    # vector of all\
    \ prefixes from shortest to longest of the input string\n    k = length(string)\n\
    \    all_pref = String[]\n    for i in 1:k\n        push!(all_pref, string[1:i])\n\
    \    end\n    return all_pref\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i=1:length(string)]\nend\n \n\"\"\" Find the longest common prefix of 2\
    \ strings\n    >>> longest_common_prefix(\"abc\",\"abd\")\n    \"ab\"\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpo2ft87_j.jl:9\nin expression starting at /tmp/tmpo2ft87_j.jl:9\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    # vector of all\
    \ prefixes\n    prefixes = []\n    # iterate over whole string\n    for i in 1:length(string)\n\
    \        # add substring starting at 1, ending at i\n        push!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    N = length(string)\n\
    \    prefixes = Vector{String}(undef,N)\n    for i in 1:N\n        prefixes[i]\
    \ = string[1:i]\n    end\n    return prefixes\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    res = []\n   \
    \ for i in 1:length(string)\n        push!(res, string[1:i])\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:end-i]\
    \ for i in 0:length(string)-1]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpptfw6ffo.jl:10

    '
  stdout: "test set: Test Failed at /tmp/tmpptfw6ffo.jl:14\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"] == [\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpptfw6ffo.jl:14 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpptfw6ffo.jl:12\ntest set: Test Failed at /tmp/tmpptfw6ffo.jl:15\n\
    \  Expression: candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n   Evaluated: [\"\
    WWW\", \"WW\", \"W\"] == [\"W\", \"WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpptfw6ffo.jl:15 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpptfw6ffo.jl:12\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ String[]\n    for i in 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i=1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if length(string)\
    \ == 0\n        return String[]\n    else\n        return all_prefixes(string[1:end])\n\
    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009414
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    splits = Vector{String}()\n\
    \    for i = 1:length(string)\n        push!(splits, string[1:i])\n    end\n \
    \   return splits\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\
    \" \n        return String[]\n    else \n        prefix = string[1:end-1]\n  \
    \      return [prefix, string]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpov4tw3u4.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpov4tw3u4.jl:19\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfg\", \"asdfgh\"] == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpov4tw3u4.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpov4tw3u4.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpov4tw3u4.jl:20\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WW\", \"WWW\"] == [\"W\", \"WW\", \"WWW\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpov4tw3u4.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpov4tw3u4.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i=1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    vector = []\n\
    \    for i in 1:length(string)\n        push!(vector, string[1:i])\n    end\n\
    \    return vector\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ []\n    for i = 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:n]\
    \ for n in 1:length(string)]\nend\n    \n\"\"\" Return vector of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp5vzptg3q.jl:9\nin expression starting at /tmp/tmp5vzptg3q.jl:9\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return split(string,\
    \ \"\")[1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqgtfersq.jl:10

    '
  stdout: "test set: Test Failed at /tmp/tmpqgtfersq.jl:13\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgtfersq.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgtfersq.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpqgtfersq.jl:14\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"a\",\
    \ \"s\", \"d\", \"f\", \"g\", \"h\"] == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgtfersq.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgtfersq.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpqgtfersq.jl:15\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"W\", \"W\", \"W\"] == [\"W\", \"WW\", \"\
    WWW\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqgtfersq.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqgtfersq.jl:12\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return map(s ->\
    \ s[1:end], findall(r\"(?=\\w)\", string))\nend\n```\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16s7f6xx.jl:8\nin expression starting at /tmp/tmp16s7f6xx.jl:8\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \"\"\" Return\
    \ vector of all prefixes from shortest to longest of the input string\n    >>>\
    \ all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\n    all_prefixes\
    \ = [string[1:i] for i in 1:length(string)]\n    return all_prefixes\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    string_split =\
    \ split(string, \"\")\n    all_prefixes = []\n    for i in 1:length(string_split)\n\
    \        push!(all_prefixes, join(string_split[1:i]))\n    end\n    return all_prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp57fskvth.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp57fskvth.jl:18\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp57fskvth.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp57fskvth.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \"Return a vector\
    \ of all prefixes of the input string\"\n    return [string[1:i] for i in 1:length(string)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:end]\
    \ for i in 1:length(string)]\nend\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp181_g950.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmp181_g950.jl:15\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"] ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp181_g950.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp181_g950.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp181_g950.jl:16\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WWW\", \"WWW\", \"WWW\"] == [\"W\", \"WW\"\
    , \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp181_g950.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp181_g950.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009413
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \"\"\"Function\
    \ to find all prefixes of a string\"\"\"\n    return [string[1:i] for i in 1:length(string)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:idx]\
    \ for idx in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    end_index = length(string)\n\
    \    prefixes = [string[1:i] for i in 1:end_index]\n    return prefixes\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \"\"\"\n    Return\
    \ vector of all prefixes from shortest to longest of the input string\n    \"\"\
    \"\n    output = []\n    for i in 1:length(string)\n        push!(output, string[1:i])\n\
    \    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    # All prefixes\
    \ will be a subtring of the original string, so we just split the string at each\
    \ point\n    # and return all but the last as the prefixes\n    substrings = split(string,\
    \ \"\")[1:end-1]\n    prefixes = []\n    for s in substrings\n        push!(prefixes,\
    \ join(split(string, s)[1], \"\"))\n    end\n    return prefixes\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2kp2mhvx.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp2kp2mhvx.jl:21\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"\", \"a\", \"as\", \"asd\", \"asdf\"] == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2kp2mhvx.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2kp2mhvx.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp2kp2mhvx.jl:22\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"\"] == [\"W\", \"WW\", \"WWW\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2kp2mhvx.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2kp2mhvx.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = [\"\
    \"]\n    for ch in string\n        push!(prefixes, prefixes[end] * ch)\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmf890wd8.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpmf890wd8.jl:17\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmf890wd8.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmf890wd8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmf890wd8.jl:18\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"\", \"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmf890wd8.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmf890wd8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmf890wd8.jl:19\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"W\", \"WW\", \"WWW\"] == [\"W\", \"\
    WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmf890wd8.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmf890wd8.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1660009413
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = length(string)\n\
    \    return [string[1:k] for k in 1:n]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    @assert(string\
    \ != \"\")\n    prefixes = []\n    for i = 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpy483lhgc.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpy483lhgc.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  AssertionError: string\
    \ != \"\"\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpy483lhgc.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy483lhgc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy483lhgc.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    letters = []\n\
    \    for letter in string\n        push!(letters, letter)\n    end\n    return\
    \ letters\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpy4d7wz_6.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpy4d7wz_6.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: Cannot `convert` an object of type Char to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] all_prefixes(string::String)\n      @ Main /tmp/tmpy4d7wz_6.jl:10\n \
    \  [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpy4d7wz_6.jl:18 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpy4d7wz_6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpy4d7wz_6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, "
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\
    \"\n        return []\n    else\n        return [string[1:i] for i = 1:length(string)]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    l = length(string)\n\
    \    prefixes = Vector{String}(l)\n    for i in 1:l\n        prefixes[i] = string[1:i]\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqr2zu968.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpqr2zu968.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpqr2zu968.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqr2zu968.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqr2zu968.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqr2zu968.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpqr2zu968.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqr2zu968.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqr2zu968.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqr2zu968.jl:20\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    substrings = []\n\
    \    for i in 1:length(string)\n        push!(substrings, string[1:i])\n    end\n\
    \    return substrings\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    # change to character\
    \ vectors, easier to work with\n    #string = collect(string)\n    out = []\n\
    \    for i in 1:length(string)\n        push!(out, string[1:i])\n    end\n   \
    \ return out\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i=1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    ans = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(ans, string[1:i])\n    end\n   \
    \ return ans\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    p = Vector{String}()\
    \ \n    for i in 1:length(string) \n        push!(p, string[1:i]) \n    end \n\
    \    return p \nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = [string[1:i]\
    \ for i in 1:length(string)]\n    return prefixes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if length(string)\
    \ == 0\n        return []\n    else\n        all_prefixes(string[1:end])\n   \
    \ end\n    push!(all_prefixes(string[1:end]), string)\nend\n\"\"\"\n    >>> all_suffixes(\"\
    abc\")\n    [\"abc\", \"bc\", \"c\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp7_n1iyfa.jl:13\nin expression starting at /tmp/tmp7_n1iyfa.jl:13\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if isempty(string)\n\
    \        return []\n    else\n        out = [string[1:end]]\n        append!(out,\
    \ all_prefixes(string[1:end-1]))\n        return out\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl25k5e3k.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpl25k5e3k.jl:20\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"] == [\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpl25k5e3k.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpl25k5e3k.jl:18\ntest set: Test Failed at /tmp/tmpl25k5e3k.jl:21\n\
    \  Expression: candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n   Evaluated: [\"\
    WWW\", \"WW\", \"W\"] == [\"W\", \"WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpl25k5e3k.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpl25k5e3k.jl:18\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n\
    \    n = nchar(string)\n    for i = 1:n\n        string_prefix = substr(string,\
    \ 1:i)\n        push!(prefixes, string_prefix)\n    end\n    return prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp51lnybza.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp51lnybza.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: nchar not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp51lnybza.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp51lnybza.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp51lnybza.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp51lnybza.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: nchar not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp51lnybza.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp51lnybza.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp51lnybza.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp51lnybza.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: nchar not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp51lnybza.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp51lnybza.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp51lnybza.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ []\n    for i in 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    out = String[]\n\
    \    for i in 1:length(string)\n        push!(out, string[1:i])\n    end\n   \
    \ return out\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n\
    \    n = length(string)\n    for i in 1:n\n        push!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if isempty(string)\n\
    \        return []\n    else\n        all_prefixes(string[1:end])\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009417
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:end]\
    \ for i=1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsk6q8qva.jl:10

    '
  stdout: "test set: Test Failed at /tmp/tmpsk6q8qva.jl:14\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"] ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk6q8qva.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk6q8qva.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpsk6q8qva.jl:15\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WWW\", \"WWW\", \"WWW\"] == [\"W\", \"WW\"\
    , \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk6q8qva.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk6q8qva.jl:12\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    @assert !isempty(string)\n\
    \    tmpprefixes = Array{String}(undef, n=0) # array of all prefixes\n    for\
    \ i in 1:length(string)\n        push!(tmpprefixes, string[1:i])\n    end\n  \
    \  tmpprefixes # return the list of all prefixes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi719im85.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpi719im85.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  AssertionError: !(isempty(string))\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpi719im85.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi719im85.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi719im85.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi719im85.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching (Array{String})(::UndefInitializer; n=0)\n\
    \  Closest candidates are:\n    (Array{T})(::UndefInitializer, !Matched::Tuple{Vararg{Int64,\
    \ N}}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/boot.jl:474 got\
    \ unsupported keyword argument \"n\"\n    (Array{T})(::UndefInitializer, !Matched::Tuple{Vararg{Integer,\
    \ N}}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:35 got\
    \ unsupported keyword argument \"n\"\n    (Array{T})(::UndefInitializer, !Matched::Int64)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:471 got unsupported\
    \ keyword argument \"n\"\n    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpi719im85.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi719im85.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi719im85.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi719im85.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ (Array{String})(::UndefInitializer; n=0)\n  Closest candidates are:\n    (Array{T})(::UndefInitializer,\
    \ !Matched:"
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if length(string)\
    \ < 1 \n        return []\n    elseif length(string) == 1\n        return [string]\n\
    \    else\n        prefix = string[1:end-1]\n        return all_prefixes(prefix)\
    \ .*string[end]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprn322ynr.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmprn322ynr.jl:21\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\"] == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprn322ynr.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprn322ynr.jl:19\ntest set: Test\
    \ Failed at /tmp/tmprn322ynr.jl:22\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WWW\"] == [\"W\", \"WW\", \"WWW\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprn322ynr.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprn322ynr.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    # Note that vector\
    \ does not allow for empty string.\n    pfx = Vector{String}(undef, length(string))\n\
    \    for i in 1:length(string)\n        pfx[i] = string[1:i]\n    end\n    return\
    \ pfx\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009413
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    vec = String[]\n\
    \    for i = 1:length(string)\n        push!(vec, string[1:i])\n    end\n    return\
    \ vec\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    len = length(string)\n\
    \    m = create_empty_vector(len)\n    for i in 1:len\n        m[i] = string[1:i]\n\
    \    end\n    return m\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp34m9pyb2.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp34m9pyb2.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: create_empty_vector\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp34m9pyb2.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp34m9pyb2.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp34m9pyb2.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp34m9pyb2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: create_empty_vector not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp34m9pyb2.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp34m9pyb2.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp34m9pyb2.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp34m9pyb2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: create_empty_vector\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp34m9pyb2.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp34m9pyb2.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp34m9pyb2.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009416
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = length(string)\n\
    \    return [string[1:i] for i in 1:n]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009413
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    V = []\n    for\
    \ i = 1:length(string)\n        push!(V, string[1:i])\n    end\n    return V\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009413
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    count = 1\n  \
    \  prefixes = []\n    while count <= length(string)\n        push!(prefixes, string[1:count])\n\
    \        count += 1\n    end\n    return prefixes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009413
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ []\n    for i = 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if length(string)\
    \ == 0\n        return [\"\"]\n    elseif length(string) == 1\n        return\
    \ [string]\n    else\n        return string[1:end-1]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Test Failed at /tmp/tmpq_5073lo.jl:19\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_5073lo.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_5073lo.jl:18\ntest set: Error\
    \ During Test at /tmp/tmpq_5073lo.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: Cannot `convert` an object of type String to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpq_5073lo.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_5073lo.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_5073lo.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpq_5073lo.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vecto"
  timestamp: 1660009417
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    v = Vector{String}()\n\
    \    for i in 1:length(string)\n        v = vcat(v, string[1:i])\n    end\n  \
    \  return v\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    N = length(string)\n\
    \    return [string[1:k] for k in 1:N]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009413
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    lst = []\n   \
    \ for i = 1:length(string)\n        push!(lst,string[1:i])\n    end\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    for idx in 1:length(string)\n        push!(prefixes,string[1:idx])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ []\n    for i in 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n\
    \    for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ []\n    for i in 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    # Return empty\
    \ vector if the input string is empty\n    if (length(string) == 0)\n        return\
    \ []\n    end\n    # Initalize an empty vector to store the prefixes\n    prefixes\
    \ = []\n    # Use a counter to keep track of the length of the prefix\n    prefix_length\
    \ = 1\n    # Loop through the length of the input string, pushing prefixes to\
    \ the vector\n    while (prefix_length <= length(string))\n        push!(prefixes,\
    \ string[1:prefix_length])\n        prefix_length += 1\n    end\n    return prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \"Strings are\
    \ immutable, so we can just keep track of the current index as a side effect\"\
    \n    function _all_prefixes(accum::Vector{String}, i::Int)\n        if i == 0\n\
    \            return accum\n        else\n            push!(accum, string[1:i])\n\
    \            return _all_prefixes(accum, i-1)\n        end\n    end\n    return\
    \ _all_prefixes(String[], length(string))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5reg45q_.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp5reg45q_.jl:23\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"] == [\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5reg45q_.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5reg45q_.jl:21\ntest set: Test Failed at /tmp/tmp5reg45q_.jl:24\n\
    \  Expression: candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n   Evaluated: [\"\
    WWW\", \"WW\", \"W\"] == [\"W\", \"WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5reg45q_.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5reg45q_.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009416
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = length(string)\n\
    \    return [ string[1:i] for i in 1:n ]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    output = []\n\
    \    for i in 1:length(string)\n        push!(output, string[1:i])\n    end\n\
    \    return output\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    len = length(string)\n\
    \    Vector{String}(len)\n    for i in 1:len\n        Vector{String}[i] = string[1:i]\n\
    \    end\n    return Vector{String}\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt_7514ja.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpt_7514ja.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpt_7514ja.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt_7514ja.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt_7514ja.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpt_7514ja.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpt_7514ja.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt_7514ja.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt_7514ja.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpt_7514ja.jl:20\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660009418
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    N = length(string)\n\
    \    prefixes = Vector{String}(undef, N)\n    for i in 1:N\n        prefixes[i]\
    \ = string[1:i]\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    len = length(string)\n\
    \    p = Vector{String}(len)\n    for i in 1:len\n        p[i] = string[1:i]\n\
    \    end\n    return p\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp80yufbb8.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp80yufbb8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp80yufbb8.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp80yufbb8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp80yufbb8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp80yufbb8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp80yufbb8.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp80yufbb8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp80yufbb8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp80yufbb8.jl:20\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660009418
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i=1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ []\n    for i in 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    out = String[]\n\
    \    for i in 1:length(string)\n        push!(out, string[1:i])\n    end\n   \
    \ return out\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return map(x ->\
    \ string[1:x], 1:length(string))\nend\nall_prefixes(\"abc\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = length(string)\n\
    \    prefixes = []\n    for i in 1:n\n        push!(prefixes, string[1:i])\n \
    \   end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [ string[1:i]\
    \ for i in 1:length(string) ]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if length(string)==0\n\
    \        return []\n    else\n        prefixes = []\n        for i=1:length(string)\n\
    \            push!(prefixes,string[1:i])\n        end\n        return prefixes\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ []\n    for i = 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    substring = 1\n\
    \    pref_vec = []\n    for i = 1:length(string)\n        push!(pref_vec,string[substring:i])\n\
    \        substring += 1\n    end\n    return pref_vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3qfit7b_.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp3qfit7b_.jl:20\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"] == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qfit7b_.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qfit7b_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp3qfit7b_.jl:21\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"W\", \"W\", \"W\"] == [\"W\", \"WW\", \"\
    WWW\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qfit7b_.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qfit7b_.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009417
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \"Returns all\
    \ prefixes of a string, sorted from shortest to longest\"\n    n = length(string)\n\
    \    return [string[1:i] for i in 1:n]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = [string[1:i]\
    \ for i in 1:length(string)]\n    return prefixes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    for length(string)\
    \ \u2208 1:length(string)\n        string[1:length(string)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmi1d0zul.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpmi1d0zul.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpmi1d0zul.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmi1d0zul.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmi1d0zul.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpmi1d0zul.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpmi1d0zul.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expan"
  timestamp: 1660009419
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    i = 1\n    v =\
    \ String[]\n    for l in 1:length(string)\n        push!(v, string[i:l])\n   \
    \ end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    # First, initialize\
    \ the vector of prefixes by adding empty string.\n    # Note that append!() doesn't\
    \ return anything,\n    # instead, it modifies its first argument:\n    # https://docs.julialang.org/en/v1/base/collections/#Base.append!\n\
    \    prefixes = Vector()\n    append!(prefixes, \"\")\n    \n    # Now, iterate\
    \ over all the letters in the input string and\n    # add the prefix from the\
    \ beginning of the string to the current letter\n    # to the vector.\n    for\
    \ letter in string\n        append!(prefixes, prefixes[end] * letter)\n    end\n\
    \    \n    # Finally, return the vector\n    return prefixes\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpxplvz9ke.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpxplvz9ke.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  BoundsError: attempt to access 0-element Vector{Any} at\
    \ index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] all_prefixes(string::String)\n     @ Main /tmp/tmpxplvz9ke.jl:17\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxplvz9ke.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxplvz9ke.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxplvz9ke.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{Any} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmpxplvz9ke.jl:17\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxplvz9ke.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxplvz9ke.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009418
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    vcat(map(s ->\
    \ string[1:s], 1:length(string)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = length(string)\n\
    \    prefixes = []\n    for i in 1:n\n        push!(prefixes, string[1:i])\n \
    \   end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    num_prefixes =\
    \ length(string)\n    vec = Vector{String}(num_prefixes)\n    for i = 1:num_prefixes\n\
    \        vec[i] = string[1:i]\n    end\n    return vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpl1qo_gu6.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpl1qo_gu6.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpl1qo_gu6.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1qo_gu6.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1qo_gu6.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpl1qo_gu6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpl1qo_gu6.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1qo_gu6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1qo_gu6.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpl1qo_gu6.jl:20\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660009419
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    letters = 1:length(string)\n\
    \    return [string[1:i] for i in letters]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return map(x ->\
    \ string[1:x], 1:length(string))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = nchar(string)\n\
    \    return [string[1:i] for i in 1:n]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp704ej35y.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmp704ej35y.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: nchar not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp704ej35y.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp704ej35y.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp704ej35y.jl:13\ntest set:\
    \ Error During Test at /tmp/tmp704ej35y.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: nchar not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp704ej35y.jl:6\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp704ej35y.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp704ej35y.jl:13\ntest set:\
    \ Error During Test at /tmp/tmp704ej35y.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: nchar not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp704ej35y.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp704ej35y.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp704ej35y.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009418
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    #initialize prefixes\
    \ to empty array\n    prefixes = []\n    #loop from 1 to length of string\n  \
    \  for i in 1:length(string)\n        #add the substring from 1 to i to the array\n\
    \        push!(prefixes, string[1:i])\n    end\n    #return all prefixes\n   \
    \ return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = length(string)\n\
    \    prefixes = Vector{String}(undef,n)\n    for i = 1:n\n        prefixes[i]\
    \ = string[1:i]\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \"\"\"non-recursive\
    \ solution\"\"\"\n    # preallocate vector (for speed)\n    prefixes = String[]\n\
    \    for i in 1:length(string)\n        # find prefix\n        prefix = string[1:i]\n\
    \        # add to vector\n        push!(prefixes, prefix)\n    end\n    # return\
    \ final vector\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return map(p ->\
    \ string[1:p], 1:length(string))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    string_length\
    \ = length(string)\n    all_prefixes = Vector{String}(string_length)\n    for\
    \ i in 1:string_length\n        all_prefixes[i] = string[1:i]\n    end\n    return\
    \ all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpymdq7e38.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpymdq7e38.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpymdq7e38.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpymdq7e38.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpymdq7e38.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpymdq7e38.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpymdq7e38.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpymdq7e38.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpymdq7e38.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpymdq7e38.jl:20\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660009419
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    res = []\n   \
    \ curr = \"\"\n    for i in 1:length(string)\n        curr = string[1:i]\n   \
    \     push!(res, curr)\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    L = length(string)\n\
    \    return [string[1:i] for i=1:L]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ []\n    for i in 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i=1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n\
    \    for i in 1:length(string)\n        append!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\n\"\"\" Return vector of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"\
    bc\", \"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpigsxptlp.jl:12\nin expression starting at /tmp/tmpigsxptlp.jl:12\n"
  stdout: ''
  timestamp: 1660009417
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:j]\
    \ for j in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = length(string)\n\
    \    return [string[1:i] for i in 1:n]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009413
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    out = []\n   \
    \ for i in 1:length(string)\n        push!(out,string[1:i])\n    end\n    return\
    \ out\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    result = Vector{String}(length(string))\n\
    \    for i in 1:length(string)\n        result[i] = string[1:i]\n    end\n   \
    \ return result\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpre_7mdnv.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpre_7mdnv.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpre_7mdnv.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpre_7mdnv.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpre_7mdnv.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpre_7mdnv.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpre_7mdnv.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpre_7mdnv.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpre_7mdnv.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpre_7mdnv.jl:19\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    a::Vector{String}\
    \ = Vector(string)\n    i = 1\n    while i <= length(string)\n        push!(a,\
    \ string[1:i])\n        i += 1\n    end\n    return a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvpft0xfa.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpvpft0xfa.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching (Vector)(::String)\n  Closest candidates are:\n    (Vector)() at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:38\n\
    \    (Vector)(!Matched::SuiteSparse.CHOLMOD.Dense{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:856\n\
    \    (Vector)(!Matched::SparseArrays.AbstractSparseVector{Tv}) where Tv at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:946\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpvpft0xfa.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvpft0xfa.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvpft0xfa.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpvpft0xfa.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching (Vector)(::String)\n  Closest candidates\
    \ are:\n    (Vector)() at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:38\n\
    \    (Vector)(!Matched::SuiteSparse.CHOLMOD.Dense{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:856\n\
    \    (Vector)(!Matched::SparseArrays.AbstractSparseVector{Tv}) where Tv at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:946\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpvpft0xfa.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvpft0xfa.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvpft0xfa.jl:18\ntest set:"
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if length(string)\
    \ == 0\n        # the empty string has no prefixes, so the empty vector is returned\n\
    \        return []\n    else\n        # all prefixes of the tail are appended\
    \ to the single prefix of the head\n        return append(all_prefixes(string[2:end]),\
    \ string[1])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpspsb8agu.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpspsb8agu.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  UndefVarError: append not defined\n  Stacktrace:\n   [1]\
    \ all_prefixes(string::String) (repeats 6 times)\n     @ Main /tmp/tmpspsb8agu.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpspsb8agu.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpspsb8agu.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpspsb8agu.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: append not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String) (repeats 3 times)\n\
    \     @ Main /tmp/tmpspsb8agu.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpspsb8agu.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpspsb8agu.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009419
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    p = String[]\n\
    \    for i = 1:length(string)\n        push!(p, string[1:i])\n    end\n    return\
    \ p\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if length(string)\
    \ == 0 \n        return []\n    else\n        all = Array{String}(1)\n       \
    \ for i = 1:length(string)\n            if i == 1\n                push!(all,\
    \ string[i])\n            else\n                push!(all, join(string[1:i], \"\
    \"))\n            end\n        end\n        return all\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp38wwr9a2.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp38wwr9a2.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching (Array{String})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp38wwr9a2.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp38wwr9a2.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp38wwr9a2.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp38wwr9a2.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ (Array{String})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/"
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    L = length(string)\n\
    \    all_prefixes = Vector{String}(L)\n    for i = 1:L\n        all_prefixes[i]\
    \ = string[1:i]\n    end\n    return all_prefixes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7fk_1qwm.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp7fk_1qwm.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp7fk_1qwm.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7fk_1qwm.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7fk_1qwm.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp7fk_1qwm.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp7fk_1qwm.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7fk_1qwm.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7fk_1qwm.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp7fk_1qwm.jl:20\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    string_vec = collect(string)\n\
    \    n = length(string_vec)\n    prefixes = Vector{String}(n)\n    for i in 1:n\n\
    \        prefixes[i] = join(string_vec[1:i])\n    end\n    return prefixes\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpq581rwv1.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpq581rwv1.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpq581rwv1.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq581rwv1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq581rwv1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpq581rwv1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpq581rwv1.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq581rwv1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq581rwv1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpq581rwv1.jl:21\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    # List of single\
    \ character prefixes\n    prefixes = [string[1:1]]\n    l = length(string)\n \
    \   # Iterate over characters of the string, making longer prefixes as we go\n\
    \    for i in 2:l\n        push!(prefixes, string[1:i])\n    end\n    return prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmphw4vjnnq.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmphw4vjnnq.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access empty String at index [1:1]\n  Stacktrace:\n   [1] checkbounds\n    \
    \ @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] all_prefixes(string::String)\n     @ Main /tmp/tmphw4vjnnq.jl:7\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmphw4vjnnq.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmphw4vjnnq.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009419
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    length(string)\
    \ == 0 && return []\n    prefixes = Vector{String}(undef, length(string))\n  \
    \  for i in 1:length(string)\n        prefixes[i] = string[1:i]\n    end\n   \
    \ return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009417
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ String[]\n    for i = 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009417
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    while length(string) > 0\n        push!(prefixes, string)\n        string\
    \ = string[1:end-1]\n    end\n    return prefixes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeidz2bbh.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpeidz2bbh.jl:19\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"] == [\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpeidz2bbh.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpeidz2bbh.jl:17\ntest set: Test Failed at /tmp/tmpeidz2bbh.jl:20\n\
    \  Expression: candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n   Evaluated: [\"\
    WWW\", \"WW\", \"W\"] == [\"W\", \"WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpeidz2bbh.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpeidz2bbh.jl:17\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009419
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    m = length(string)\n\
    \    return [string[1:i] for i in 1:m]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009417
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return map(x ->\
    \ string[1:x], 1:length(string))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = [string[1:end]]\n\
    \    while length(prefixes[end]) > 0\n        push!(prefixes, prefixes[end][1:end-1])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnc92xfrc.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpnc92xfrc.jl:17\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnc92xfrc.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnc92xfrc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpnc92xfrc.jl:18\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"asdfgh\"\
    , \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\", \"\"] == [\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnc92xfrc.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnc92xfrc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpnc92xfrc.jl:19\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WWW\", \"WW\", \"W\", \"\"] == [\"W\", \"\
    WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnc92xfrc.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnc92xfrc.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1660009419
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n\
    \    for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    # (1) all_prefixes(\"\
    abc\") = [\"a\", \"ab\", \"abc\"]\n    all_prefixes = [string[1:end]] # [abc]\n\
    \    # (2) while all_prefixes[1] > 1 continue to chop off left characters\n  \
    \  while length(all_prefixes[1]) > 1\n        push!(all_prefixes, all_prefixes[1][1:end-1])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Test Failed at /tmp/tmpei8yjdnc.jl:19\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpei8yjdnc.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpei8yjdnc.jl:18\n"
  timestamp: 1660009422
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ String[]\n    for i in 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i=1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    output = []\n\
    \    for i in 1:length(string)\n        push!(output, string[1:i])\n    end\n\
    \    return output\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    #Convert to a\
    \ character array\n    charArray = collect(string)\n    result = []\n    for (index,\
    \ char) in enumerate(charArray)\n        #J is the range of indices in charArray\
    \ that end at index\n        #Ex: [\"a\", \"ab\", \"abc\"]\n        push!(result,\
    \ join(charArray[1:index]))\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    #Base Case\n \
    \   if length(string) == 1\n        return [string]\n    else\n        #all_prefixes(str[1:])\
    \ will always return the correct result, \n        #so we can append to it and\
    \ return the result\n        return all_prefixes(string[1:]) .* append!(string)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqn7lp05s.jl:12\nin expression\
    \ starting at /tmp/tmpqn7lp05s.jl:12\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    string_length\
    \ = length(string)\n    return [string[1:i] for i = 1:string_length]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009418
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    N = length(string)\n\
    \    prefixes = Vector{String}(undef, N)\n    for i in 1:N\n        prefixes[i]\
    \ = string[1:i]\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return prefixes(string)\
    \ |> Vector\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpkmna_5e7.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmpkmna_5e7.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: prefixes\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpkmna_5e7.jl:6\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkmna_5e7.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkmna_5e7.jl:12\ntest set:\
    \ Error During Test at /tmp/tmpkmna_5e7.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: prefixes not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpkmna_5e7.jl:6\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkmna_5e7.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkmna_5e7.jl:12\ntest set:\
    \ Error During Test at /tmp/tmpkmna_5e7.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: prefixes not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpkmna_5e7.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkmna_5e7.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkmna_5e7.jl:12\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009420
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = [string[1:i]\
    \ for i in 1:length(string)]\n    return prefixes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = length(string)\n\
    \    prefixes = Vector{String}(undef,n)\n    for i = 1:n\n        prefixes[i]\
    \ = string[1:i]\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if length(string)\
    \ == 0\n        # empty vector\n        Vector{String}()\n    else\n        #\
    \ return the first character of the string, plus all its prefixes\n        [string[1]]\
    \ .* all_prefixes(string[2:end])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph5hua7h3.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmph5hua7h3.jl:20\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ String[] == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5hua7h3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5hua7h3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmph5hua7h3.jl:21\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: String[] == [\"W\", \"WW\", \"WWW\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5hua7h3.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5hua7h3.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009420
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n::Int = length(string)\n\
    \    all_prefixes::Vector{String} = String[]\n    for i::Int = 1:n\n        push!(all_prefixes,\
    \ string[1:i])\n    end\n    return all_prefixes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009418
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    res = []\n   \
    \ for i = 1:length(string)\n        push!(res, string[1:i])\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = length(string)\n\
    \    V = []\n    for i in 1:n\n        push!(V, string[1:i])\n    end\n    return\
    \ V\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009418
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    output = String[]\n\
    \    for i in 1:length(string)\n        push!(output, string[1:i])\n    end\n\
    \    return output\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    string_length\
    \ = length(string)\n    prefixes = Vector{String}(string_length)\n    for i in\
    \ 1:string_length\n        prefixes[i] = string[1:i]\n    end\n    return prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpkv7qxnk_.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpkv7qxnk_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpkv7qxnk_.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkv7qxnk_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkv7qxnk_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpkv7qxnk_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpkv7qxnk_.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkv7qxnk_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkv7qxnk_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpkv7qxnk_.jl:20\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660009421
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    out = [\"\"]\n\
    \    for char in string\n        push!(out, out[end]*char)\n    end\n    return\
    \ out\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjzfa2o4z.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpjzfa2o4z.jl:17\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzfa2o4z.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzfa2o4z.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpjzfa2o4z.jl:18\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"\", \"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzfa2o4z.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzfa2o4z.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpjzfa2o4z.jl:19\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"W\", \"WW\", \"WWW\"] == [\"W\", \"\
    WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzfa2o4z.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzfa2o4z.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    results = [string[1:i]\
    \ for i in 1:length(string)]\n    reverse!(results)\n    return results\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnpikwgnq.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpnpikwgnq.jl:16\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"] == [\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnpikwgnq.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnpikwgnq.jl:14\ntest set: Test Failed at /tmp/tmpnpikwgnq.jl:17\n\
    \  Expression: candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n   Evaluated: [\"\
    WWW\", \"WW\", \"W\"] == [\"W\", \"WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnpikwgnq.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnpikwgnq.jl:14\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009420
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    v = []\n    for\
    \ i in 1:length(string)\n        push!(v,string[1:i])\n    end\n    return v\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\
    \"\n        return [\"\"]\n    else\n        return [string[1:i] for i in 1:length(string)]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdmna3z2s.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpdmna3z2s.jl:17\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmna3z2s.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmna3z2s.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1660009420
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009414
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009411
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    v = String[]\n\
    \    for i in 1:length(string)\n        push!(v, string[1:i])\n    end\n    return\
    \ v\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009419
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = [string[1:i]\
    \ for i in 1:length(string)]\n    return prefixes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefs = Vector{String}(undef,\
    \ n)\n    for i in 1:n\n        all_prefs[i] = string[1:i]\n    end\n    return\
    \ all_prefs\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0tczo16s.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp0tczo16s.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: n not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp0tczo16s.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0tczo16s.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0tczo16s.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp0tczo16s.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: n not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp0tczo16s.jl:6\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0tczo16s.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0tczo16s.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp0tczo16s.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: n not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp0tczo16s.jl:6\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0tczo16s.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0tczo16s.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009421
- exit_code: 0
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all_prefixes =\
    \ []\n    for i in 1:length(string)\n        push!(all_prefixes, string[1:i])\n\
    \    end\n    return all_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    letters = split(string,\
    \ \"\")\n    prefixes = [\"\"]\n    for i = 1:length(letters)\n        # push!()\
    \ is used instead of append() to add to the existing list in place\n        push!(prefixes,\
    \ join(letters[1:i], \"\"))\n    end\n    return prefixes\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp18_6eb4u.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp18_6eb4u.jl:19\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\", \"\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp18_6eb4u.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp18_6eb4u.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp18_6eb4u.jl:20\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"\", \"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp18_6eb4u.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp18_6eb4u.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp18_6eb4u.jl:21\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"W\", \"WW\", \"WWW\"] == [\"W\", \"\
    WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp18_6eb4u.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp18_6eb4u.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1660009421
