name: HumanEval_14_all_prefixes
language: jl
results:
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    output = [string[1:i]\
    \ for i in 1:length(string)]\n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if length(string)\
    \ == 0\n        return []\n    elseif length(string) == 1\n        return [string]\n\
    \    else\n        return [string[1:i] for i in 1:length(string)]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    my_prefixes =\
    \ []\n    for i in 1:length(string)\n        push!(my_prefixes, string[1:i])\n\
    \    end\n    return my_prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    n = length(string)\n\
    \    to_ret = String[]\n    for i in 1:n\n        push!(to_ret, string[1:i])\n\
    \    end\n    return to_ret\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    all = Vector{String}(undef,\
    \ length(string))\n    for i in 1:length(string)\n        all[i] = string[1:i]\n\
    \    end\n    return all\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return map(s ->\
    \ string[1:s], 1:length(string))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    N = length(string)\n\
    \    prefixes = Vector{String}(undef, N)\n    for i in 1:N\n        prefixes[i]\
    \ = string[1:i]\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    Prefixes = Vector{String}[]\n\
    \    for j in 1:length(string)\n        push!(Prefixes, string[1:j])\n    end\n\
    \    return Prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpogrlvavn.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: Cannot `convert` an object of type String\
    \ to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Vector{String}}, item::String)\n\
    \     @ Base ./array.jl:994\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpogrlvavn.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpogrlvavn.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpogrlvavn.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpogrlvavn.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Vector{String}}, item::String)\n\
    \     @ Base ./array."
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpogrlvavn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    p = []\n    for\
    \ k in 1:length(string)\n        push!(p, string[1:k])\n    end\n    return p\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    if string == \"\
    \"\n        return []\n    else\n        return [string[1:end]] .+ all_prefixes(string[1:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    len = length(string)\n\
    \    if len == 0 \n        return [\"\"]\n    else\n        return vcat(all_prefixes(string[1:len]),\
    \ [string])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsnt6ql6d.jl:18\\n  Expression: candidate(\"\
    \") == Vector{String}([])\\n   Evaluated: [\"\"] == String[]\\nStacktrace:\\n\
    \ [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpsnt6ql6d.jl:18 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpsnt6ql6d.jl:17\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [string[1:i]\
    \ for i in 0:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4impmmuh.jl:13\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4impmmuh.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4impmmuh.jl:12\ntest set: Test\
    \ Failed at /tmp/tmp4impmmuh.jl:14\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"\", \"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4impmmuh.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4impmmuh.jl:12\ntest set: Test\
    \ Failed at /tmp/tmp4impmmuh.jl:15\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"\", \"W\", \"WW\", \"WWW\"] == [\"W\", \"\
    WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4impmmuh.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4impmmuh.jl:12\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4impmmuh.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    length = length(string)\n\
    \    prefixes = []\n    for i = 1:length\n        push!(prefixes,string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr53bxc_1.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpr53bxc_1.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr53bxc_1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr53bxc_1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpr53bxc_1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: length not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpr53bxc_1.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr53bxc_1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr53bxc_1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpr53bxc_1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpr53bxc_1.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr53bxc_1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr53bxc_1.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr53bxc_1.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = [string[1:i]\
    \ for i in 1:length(string)]\n    append!(prefixes, [string])\n    return prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvxxaqbia.jl:15\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvxxaqbia.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvxxaqbia.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpvxxaqbia.jl:16\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"a\",\
    \ \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\", \"asdfgh\"] == [\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvxxaqbia.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvxxaqbia.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpvxxaqbia.jl:17\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"W\", \"WW\", \"WWW\", \"WWW\"] == [\"W\"\
    , \"WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvxxaqbia.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvxxaqbia.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvxxaqbia.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    for i in 1:length(string)\n        prefixes = append!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwf5posja.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: Cannot `convert` an object of type Char to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] all_prefixes(string::String)\n      @ Main /tmp/tmpwf5posja.jl:10\n \
    \  [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpwf5posja.jl:18 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpwf5posja.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpwf5posja.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: Cannot `convert`\
    \ an object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials."
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwf5posja.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    N = length(string)\n\
    \    p = [string[1:i] for i in 1:N]\n    return p\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    len = length(string)\n\
    \    return [string[1:i] for i in 1:len]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    return [prefix(string,\
    \ i) for i in 0:length(string)]\nend;\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa4tpa0yr.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: prefix\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(i::Int64)\n     @\
    \ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{String}})\n     @ Base ./array.jl:724\n   [4] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpa4tpa0yr.jl:6\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpa4tpa0yr.jl:13 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpa4tpa0yr.jl:12\ntest set:\
    \ Error During Test at /tmp/tmpa4tpa0yr.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: prefix not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(i::Int64)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{String}})\n  \
    \   @ Base ./array.jl:724\n   [4] all_prefixes(string::String)\n     @ Main /tmp/tmpa4tpa0yr.jl:6\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpa4tpa0yr.jl:14 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpa4tpa0yr.jl:12\ntest set:\
    \ Error During Test at /tmp/tmpa4tpa0yr.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: prefix not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(i::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{String}})\n     @ Base ./array.jl:724\n   [4] all_prefixes(strin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa4tpa0yr.jl:10\n"
  exit_code: 1
  status: SyntaxError
