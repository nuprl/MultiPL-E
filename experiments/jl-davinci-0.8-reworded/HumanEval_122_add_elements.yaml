name: HumanEval_122_add_elements
language: jl
prompt: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k, return\n\
  \    the sum of the elements with at most two digits from the first k elements of\
  \ arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
  \ 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1\
  \ <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64}, k::Int64)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
  \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
  \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
  \ 1) == 1)\nend\n"
completions: ["    if length(arr) <= 100 && length(arr) >= 1 && k <= length(arr) &&\
    \ k >= 1 \n        \n        @show arr \n        @show k \n        \n        new_arr\
    \ = [] \n        \n        for i in 1:k \n            digit = arr[i] \n      \
    \      count = 0 \n            while digit >= 10 \n                digit = div(digit,\
    \ 10) \n                count += 1 \n            end \n            if count <=\
    \ 2 \n                push!(new_arr, arr[i]) \n            end \n        end \n\
    \        \n        sum = 0 \n        for i in 1:length(new_arr) \n           \
    \ sum += new_arr[i] \n        end \n        \n        @show new_arr \n       \
    \ @show sum \n        \n        return sum \n        \n    else \n        @show\
    \ \"failure\" \n        return false \n    end \nend ", "    if k == 0 return\
    \ 0 end\n    if arr[k] < 10 return arr[k] + add_elements(arr, k-1) end\n    if\
    \ arr[k] < 100 return arr[k] + add_elements(arr, k-1) end\n    add_elements(arr,\
    \ k-1)\nend", "    #initialize to 0\n    sum = 0\n    #loop through elements in\
    \ arr\n    for (i, num) in enumerate(arr)\n        #if we've hit the kth element,\
    \ break the loop\n        if i == k\n            break\n        end\n        #if\
    \ the number is less than 100, add it to the sum\n        if num < 100\n     \
    \       sum += num\n        end\n    end\n    return sum\nend", "    \"\"\"\n\
    \    Given a non-empty vector of integers arr and an integer k, return\n    the\
    \ sum of the elements with at most two digits from the first k elements of arr.",
  "    \n    sum = 0\n    for i in 1:k\n        num = arr[i]\n        if num < 10\n\
    \            sum += num\n        elseif num < 100\n            sum += num\n  \
    \      end\n    end\n    return sum\nend", "    total = 0\n    for i in 1:k\n\
    \        if i <= length(arr)\n            if arr[i] < 100\n                total\
    \ += arr[i]\n            end\n        end\n    end\n    return total\nend", " \
    \   \"\"\"\n    Given a non-empty vector of integers arr and an integer k, return\n\
    \    the sum of the elements with at most two digits from the first k elements\
    \ of arr.", "    sum = 0\n    for i in arr[1:k]\n        if i < 100\n        \
    \    sum += i\n        end\n    end\n    return sum\nend", "    tmp = 0\n    for\
    \ i in arr[1:k]\n        if 0 < i < 100\n            tmp += i\n        end\n \
    \   end\n    return tmp\nend", "    sum = 0\n    for i = 1:k\n        if arr[i]\
    \ >= 10 && arr[i] < 100\n            sum += arr[i]\n        end\n    end\n   \
    \ return sum\nend", "    # Compute a value using the k'th element in arr (0-indexed)\n\
    \    sum(i in arr[1:k] ? i < 100 ? i : 0 : 0)\nend", "    sum = 0\n    i = 1\n\
    \    while i <= k\n        element = arr[i]\n        if is_two_digit(element)\n\
    \            sum += element\n        end\n        i += 1\n    end\n    return\
    \ sum\nend", "    return sum(i for i in arr[1:k] if length(string(i)) <= 2)\n\
    end", "    \"\"\"\n    Given a non-empty vector of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.", "    # create a vector for the first k elements\n    sum\
    \ = 0\n    for (x, v) in enumerate(arr)\n        if x <= k\n            if v <\
    \ 100\n                sum += v\n            end\n        end\n    end\n    return\
    \ sum\nend", "    total = 0\n    for i in 1:k\n        if length(string(arr[i]))\
    \ <= 2\n            total += arr[i]\n        end\n    end\n    return total\n\
    end", "    s = 0\n    for (i, v) in enumerate(arr)\n        s += v < 100 ? v :\
    \ 0\n        if i == k - 1\n            break\n        end\n    end\n    return\
    \ s\nend", "    if k == 0\n        return 0\n    end\n    sum = 0\n    for i in\
    \ 1:k\n        if length(arr[i]) <= 2\n            sum += arr[i]\n        end\n\
    \    end\n    return sum\nend", "    retval = 0\n    for i = 1:k\n        if (arr[i]>=1\
    \ && arr[i]<=9)\n            retval += arr[i]\n        elseif (arr[i]>=10 && arr[i]<=99)\n\
    \            retval += arr[i]\n        end\n    end\n    return retval\nend",
  "    sum = 0\n    for i = 1:k\n        if arr[i] < 100\n            sum += arr[i]\n\
    \        end\n    end\n    return sum\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
