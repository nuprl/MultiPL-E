name: HumanEval_122_add_elements
language: jl
prompt: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k, return\n\
  \    the sum of the elements with at most two digits from the first k elements of\
  \ arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
  \ 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1\
  \ <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64}, k::Int64)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
  \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
  \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
  \ 1) == 1)\nend\n"
completions: ["    if length(arr) <= 100 && length(arr) >= 1 && k <= length(arr) &&\
    \ k >= 1 \n        \n        @show arr \n        @show k \n        \n        new_arr\
    \ = [] \n        \n        for i in 1:k \n            digit = arr[i] \n      \
    \      count = 0 \n            while digit >= 10 \n                digit = div(digit,\
    \ 10) \n                count += 1 \n            end \n            if count <=\
    \ 2 \n                push!(new_arr, arr[i]) \n            end \n        end \n\
    \        \n        sum = 0 \n        for i in 1:length(new_arr) \n           \
    \ sum += new_arr[i] \n        end \n        \n        @show new_arr \n       \
    \ @show sum \n        \n        return sum \n        \n    else \n        @show\
    \ \"failure\" \n        return false \n    end \nend ", "    if k == 0 return\
    \ 0 end\n    if arr[k] < 10 return arr[k] + add_elements(arr, k-1) end\n    if\
    \ arr[k] < 100 return arr[k] + add_elements(arr, k-1) end\n    add_elements(arr,\
    \ k-1)\nend", "    #initialize to 0\n    sum = 0\n    #loop through elements in\
    \ arr\n    for (i, num) in enumerate(arr)\n        #if we've hit the kth element,\
    \ break the loop\n        if i == k\n            break\n        end\n        #if\
    \ the number is less than 100, add it to the sum\n        if num < 100\n     \
    \       sum += num\n        end\n    end\n    return sum\nend", "    \"\"\"\n\
    \    Given a non-empty vector of integers arr and an integer k, return\n    the\
    \ sum of the elements with at most two digits from the first k elements of arr.",
  "    \n    sum = 0\n    for i in 1:k\n        num = arr[i]\n        if num < 10\n\
    \            sum += num\n        elseif num < 100\n            sum += num\n  \
    \      end\n    end\n    return sum\nend", "    total = 0\n    for i in 1:k\n\
    \        if i <= length(arr)\n            if arr[i] < 100\n                total\
    \ += arr[i]\n            end\n        end\n    end\n    return total\nend", " \
    \   \"\"\"\n    Given a non-empty vector of integers arr and an integer k, return\n\
    \    the sum of the elements with at most two digits from the first k elements\
    \ of arr.", "    sum = 0\n    for i in arr[1:k]\n        if i < 100\n        \
    \    sum += i\n        end\n    end\n    return sum\nend", "    tmp = 0\n    for\
    \ i in arr[1:k]\n        if 0 < i < 100\n            tmp += i\n        end\n \
    \   end\n    return tmp\nend", "    sum = 0\n    for i = 1:k\n        if arr[i]\
    \ >= 10 && arr[i] < 100\n            sum += arr[i]\n        end\n    end\n   \
    \ return sum\nend", "    # Compute a value using the k'th element in arr (0-indexed)\n\
    \    sum(i in arr[1:k] ? i < 100 ? i : 0 : 0)\nend", "    sum = 0\n    i = 1\n\
    \    while i <= k\n        element = arr[i]\n        if is_two_digit(element)\n\
    \            sum += element\n        end\n        i += 1\n    end\n    return\
    \ sum\nend", "    return sum(i for i in arr[1:k] if length(string(i)) <= 2)\n\
    end", "    \"\"\"\n    Given a non-empty vector of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.", "    # create a vector for the first k elements\n    sum\
    \ = 0\n    for (x, v) in enumerate(arr)\n        if x <= k\n            if v <\
    \ 100\n                sum += v\n            end\n        end\n    end\n    return\
    \ sum\nend", "    total = 0\n    for i in 1:k\n        if length(string(arr[i]))\
    \ <= 2\n            total += arr[i]\n        end\n    end\n    return total\n\
    end", "    s = 0\n    for (i, v) in enumerate(arr)\n        s += v < 100 ? v :\
    \ 0\n        if i == k - 1\n            break\n        end\n    end\n    return\
    \ s\nend", "    if k == 0\n        return 0\n    end\n    sum = 0\n    for i in\
    \ 1:k\n        if length(arr[i]) <= 2\n            sum += arr[i]\n        end\n\
    \    end\n    return sum\nend", "    retval = 0\n    for i = 1:k\n        if (arr[i]>=1\
    \ && arr[i]<=9)\n            retval += arr[i]\n        elseif (arr[i]>=10 && arr[i]<=99)\n\
    \            retval += arr[i]\n        end\n    end\n    return retval\nend",
  "    sum = 0\n    for i = 1:k\n        if arr[i] < 100\n            sum += arr[i]\n\
    \        end\n    end\n    return sum\nend", "    n = size(arr, 1)\n    count,\
    \ result = 0, 0\n    for i in 1:n\n        curr = arr[i]\n        if (curr < 10)\
    \ || (curr < 100 && curr >= 10)\n            count += 1\n            result +=\
    \ curr\n        end\n        if count == k\n            break\n        end\n \
    \   end\n    return result\nend", "    sum = 0\n    for i in 1:k\n        if arr[i]\
    \ < 100\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "  total = 0\n  for i in 1:k\n    if arr[i] < 100\n      total += arr[i]\n    end\n\
    \  end\n  return total\nend\n@test add_elements([11, 10, 2, 33, 44, 55, 66, 77,\
    \ 88, 99], 4) == 34", "    tot = 0\n    for i = 1:k\n        len = length(string(arr[i]))\n\
    \        if len <= 2\n            tot += arr[i]\n        end\n    end\n    return\
    \ tot\nend", "    if length(arr) > 100 || k > length(arr) || length(arr) < 1 ||\
    \ k < 1\n        throw(DomainError())\n    end\n    sum = 0\n    for i = 1:k\n\
    \        if arr[i] < 100\n            sum += arr[i]\n        end\n    end\n  \
    \  return sum\nend", "    array1 = []\n    sum1 = 0\n    i = 1\n    while i <=\
    \ k\n        if length(string(arr[i])) == 1 || length(string(arr[i])) == 2\n \
    \           push!(array1, arr[i])\n        end\n        i += 1\n    end\n    for\
    \ i = 1:length(array1)\n        sum1 += array1[i]\n    end\n    return sum1\n\
    end", "    sum = 0\n    for (i,v) in enumerate(arr)\n        if i > k\n      \
    \      break\n        end\n        if v < 100\n            sum += v\n        end\n\
    \    end\n    return sum\nend", "    sum = 0\n    for i in 1:k\n        if arr[i]\
    \ < 100\n            sum += arr[i]\n        end\n    end\n    return sum\nend\n\
    arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nprintln(add_elements(arr, 4))", "   \
    \ i = 0\n    n = length(arr)\n    s = 0\n    while (i < k) & (i < n)\n       \
    \ n_digits = length(string(arr[i+1]))\n        if n_digits <= 2\n            s\
    \ += arr[i+1]\n        end\n        i += 1\n    end\n    return s\nend", "   \
    \ sum = 0\n    for i in arr[1:k]\n        if 0 < i < 100\n            sum += i\n\
    \        end\n    end\n    return sum\nend", "    sum = 0\n    for i = 1:k\n \
    \       digit_count = count_digits(arr[i])\n        if digit_count <= 2\n    \
    \        sum += arr[i]\n        end\n    end\n    return sum\nend", "    v = Int64[]\n\
    \    for i in 1:k\n        if length(string(arr[i])) <= 2\n            push!(v,\
    \ arr[i])\n        end\n    end\n    sum(v)\nend", "    if k == 0 return 0 end\n\
    \    if length(arr) == 1 return arr[1] end\n    if length(arr) == 2 return sum(arr)\
    \ end\n    res = 0\n    for i in 1:k\n        if arr[i] > 99\n            res\
    \ += 0\n        else\n            res += arr[i]\n        end\n    end\n    return\
    \ res\nend", "    n = 0 \n    for i in arr[1:k]\n        if i >= 10 && i <= 99\n\
    \            n += i\n        end\n    end\n    return n\nend", "    k = min(k,\
    \ length(arr))\n    sum = 0\n    for i in 1:k\n        if length(string(arr[i]))\
    \ < 3\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "    \"\"\"\n    Parameters:\n        arr: non-empty vector of integers\n      \
    \  k: integer\n    \"\"\"\n    new_arr = [elem for elem in arr if elem<100]\n\
    \    sum_of_elements = 0\n    for elem in new_arr[1:k]\n        sum_of_elements\
    \ += elem\n    end\n    return sum_of_elements\nend", "    # filter values less\
    \ than 100 then sum\n    return sum( filter(x -> x < 100, arr)[1:k] )\nend", " \
    \   sum = 0\n    for i in 1:k\n        if arr[i] >= 10 && arr[i] < 100\n     \
    \       sum += arr[i]\n        end\n    end\n    return sum\nend", "    if length(arr)\
    \ < 1 || length(arr) > 100\n        return -1\n    end\n    if k < 1 || k > length(arr)\n\
    \        return -1\n    end\n    sum = 0\n    for i in 1:k\n        if arr[i]\
    \ < 10\n            sum += arr[i]\n        elseif arr[i] < 100\n            sum\
    \ += arr[i]\n        end\n    end\n    return sum\nend", "    s = 0\n    for i\
    \ = 1:k\n        if arr[i] < 100\n            s += arr[i]\n        end\n    end\n\
    \    return s\nend", "    # your code goes here\n    return -1\nend\n@testset\
    \ \"Example tests\" begin\n    @test add_elements([111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4) == 24\n    @test add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 45\n\
    \    @test add_elements([99, 100, 101, 1001, 10000, 1, 2, 3, 4, 5, 6, 7, 8, 9],\
    \ 3) == 111\nend\n \n ", "    sum::Int64 = 0\n    i::Int64 = 1\n    for i in 1:k\n\
    \        if i <= 2\n            sum += arr[i]\n        end\n    end\n    return\
    \ sum\nend", "    # your code here\nend", "    sum = 0\n    for i in 1:k\n   \
    \     sum += arr[i] % 100 > 9 ? arr[i] % 100 : arr[i]\n    end\n    return sum\n\
    end", "    total = 0\n    for i in 1:k\n        if arr[i] < 100\n            total\
    \ += arr[i]\n        end\n    end\n    return total\nend", "    elements_to_add\
    \ = []\n    for element in arr[1:k]\n        if length(string(element)) < 3\n\
    \            push!(elements_to_add, element)\n        end\n    end\n    sum(elements_to_add)\n\
    end", "    \"\"\"\n    Returns the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    index = 1\n\
    \    while index <= k && index <= length(arr)\n        if arr[index] >= 10 &&\
    \ arr[index] < 100\n            sum += arr[index]\n        end\n        index\
    \ += 1\n    end\n    return sum\nend", "    return arr[1:k] |> filter(x -> x <\
    \ 100, k) |> sum\nend", "    sum = 0\n    for i in 1:k\n        if abs(arr[i])\
    \ < 100\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for element in arr[1:k]\n        if element >= 0 && element <\
    \ 10\n            sum += element\n        elseif element >= 10 && element < 100\n\
    \            sum += element\n        end\n    end\n    return sum\nend\nprintln(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n ", "    l = [x for x in arr[1:k] if x < 100]\n\
    \    return sum(l)\nend", "    sum = 0\n    for i = 1:k\n        if length(string(arr[i]))\
    \ <= 2\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "    i = 0\n    sum = 0\n    while i < k\n        if arr[i] < 100\n            sum\
    \ += arr[i]\n        end\n        i += 1\n    end\n    return sum\nend", "   \
    \ \"\"\"\n    Given a non-empty vector of integers arr and an integer k, return\n\
    \    the sum of the elements with at most two digits from the first k elements\
    \ of arr.", "    \"\"\"\n    Initialise counter.\n    \"\"\"\n    counter = 0",
  "    count = 0\n    for i in 1:k\n        if 0 <= arr[i] <= 9\n            count\
    \ += arr[i]\n        elseif 10 <= arr[i] <= 99\n            count += arr[i]\n\
    \        end\n    end\n    return count\nend\nadd_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)", "    if isempty(arr)\n        return 0\n    end\n    return\
    \ sum(x for x in arr[1:k] if x < 100)\nend", "  \"\"\"\n  Return the sum of the\
    \ elements with at most two digits from the first k elements of arr.\n  \"\"\"\
    \n  @assert 1 <= length(arr) <= 100\n  @assert 1 <= k <= length(arr)\n  sum_elements_with_less_than_three_digits\
    \ = 0\n  for i in 1:k\n    if arr[i] < 100\n      sum_elements_with_less_than_three_digits\
    \ += arr[i]\n    end\n  end\n  return sum_elements_with_less_than_three_digits\n\
    end", "    i::Int64 = 0\n    sum::Int64 = 0\n    while i <= k-1\n        if arr[i]\
    \ >= 10 && arr[i] <= 99\n            sum += arr[i]\n        end\n        i +=\
    \ 1\n    end\n    return sum\nend", "    s = 0\n    for i in 1:k\n        if abs(arr[i])\
    \ < 100\n            s += arr[i]\n        end\n    end\n    return s\nend", " \
    \   total = 0\n    for i in 1:k\n        if abs(arr[i]) < 100\n            total\
    \ += arr[i]\n        end\n    end\n    return total\nend", "    res = 0\n    for\
    \ i in 1:k\n        if arr[i] < 100\n            res += arr[i]\n        end\n\
    \    end\n    return res\nend\n@testset \"Example Tests\" begin\n    @test add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    @test add_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9], 4) == 6\n    @test add_elements([100, 101, 102, 103, 104, 105,\
    \ 106, 107, 108, 109], 10) == 1064\n    @test add_elements([100, 102, 110, 120,\
    \ 130, 140, 150, 160, 170, 180], 2) == 300\n    @test add_elements([100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100], 8) == 908\n    @test add_elements([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1], 8) == 8\n    @test add_elements([1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1], 9) == 9\n    @test add_elements([1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1], 10) == 10\n    @test add_elements([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1) ==\
    \ 1\n    @test add_elements([100, 100, 100, 100, 100, 100, 100, 100, 100, 100],\
    \ 10) == 1000\n    @test add_elements([100, 100, 100, 100, 100, 100, 100, 100,\
    \ 100, 100], 5) == 500\n    @test add_elements([100, 100, 100, 100, 100, 100,\
    \ 100, 100, 100, 100], 4) == 400\n    @test add_elements([100, 100, 100, 100,\
    \ 100, 100, 100, 100, 100, 100], 3) == 300\n    @test add_elements([100, 100,\
    \ 100, 100, 100, 100, 100, 100, 100, 100], 2) == 200\n", "    \"\"\"\n    Return\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n    \"\"\"\n    sum = 0\n    for i in 1:k\n        if arr[i] >= 10 &&\
    \ arr[i] < 100\n            sum += arr[i]\n        end\n    end\n    return sum\n\
    end", "    \"\"\"\n    Calculate the sum of the first k digits of an array that\
    \ are less than 100\n    \"\"\"\n    sum = 0\n    for i in 1:k\n        if arr[i]\
    \ < 100\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in 1:k\n        if length(string(arr[i])) <= 2\n       \
    \     sum += arr[i]\n        end\n    end\n    return sum\nend", "    # i :: 1\
    \ <= i <= len(arr)\n    # j :: 1 <= j <= k\n    # Inductive invariant: \n    #\
    \   1. 0 <= j <= k\n    #   2. sum(arr[1:j]) is sum of the elements with at most\
    \ two digits from the first j elements of arr\n    #   3. j == i\n    # Initialization:\
    \ \n    #   1. j == 1 and sum(arr[1:j]) == 0\n    #   2. j == i\n    # Maintenance:\
    \ \n    #   1. sum(arr[1:j]) += arr[j] if len(arr[j]) <= 2, else sum(arr[1:j])\
    \ += 0\n    #   2. j += 1\n    # Termination:\n    #   1. i == k + 1, then j ==\
    \ k + 1, then sum(arr[1:j]) is sum of the elements with at most two digits from\
    \ the first k elements of arr\n    #   2. j == k + 1, then j == i\n    sum = 0\n\
    \    for i in 1:k\n        if i > 9 \n            continue\n        end\n    \
    \    sum += arr[i]\n    end\n    return sum\nend", "    \"THIS IS WRONG\"\n  \
    \  return sum(a for a in arr if a <= 99 && k-- > 0)\nend", "    return sum(filter(x\
    \ -> x < 100, arr[1:k]))\nend", "    sum = 0\n    for i = 1:k\n        if arr[i]\
    \ <= 99\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "    return sum(x for x in arr[1:k] if x < 100)\nend", "    sum = 0\n    for i =\
    \ 1:k\n        if arr[i] < 100\n            sum += arr[i]\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for x in arr[1:k]\n        if x < 100\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n \n\"\"\"\n\
    \    Given a non-empty vector of integers arr and an integer k, return\n    the\
    \ sum of the elements with at most two digits from the first k elements of arr.",
  "    sum = 0\n    for i in 1:k\n        num = string(arr[i])\n        if length(num)\
    \ < 3\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "    \"\"\"\n    Given a non-empty vector of integers arr and an integer k, return\n\
    \    the sum of the elements with at most two digits from the first k elements\
    \ of arr.", "    \n    # Define list of elements with at most two digits\n   \
    \ # Define the sum of elements with at most two digits\n    list_two_digits =\
    \ Int64[]\n    sum_two_digits = 0\n    \n    # Loop over the first k elements\
    \ of arr, and for each element,\n    # see if it has at most two digits, and add\
    \ it to the list of elements\n    # with at most two digits.\n    for i in 1:k\n\
    \        if arr[i] < 100\n            push!(list_two_digits, arr[i])\n       \
    \ end\n    end\n    \n    # Sum the elements of the list of elements with at most\
    \ two digits\n    for i in 1:length(list_two_digits)\n        sum_two_digits +=\
    \ list_two_digits[i]\n    end\n    \n    # Return the sum of the elements with\
    \ at most two digits\n    return sum_two_digits\n    \nend", "    s = 0\n    for\
    \ i in 1:k\n        if arr[i] < 100\n            s += arr[i]\n        end\n  \
    \  end\n    return s\nend", "    sum = 0\n    for (i,x) in enumerate(arr)\n  \
    \      if i <= k && length(string(x)) <= 2\n            sum += x\n        end\n\
    \    end\n    return sum\nend", "    sum = 0\n    # loop through first k elements\
    \ of arr\n    for i = 1:k\n        # if element is less than 100, then add it\
    \ to sum\n        if arr[i] < 100\n            sum += arr[i]\n        end\n  \
    \  end\n    return sum\nend", "    return sum(i <= 99 ? i : 0 for i in arr[1:k])\n\
    end", "    N = length(arr)\n    p = 1\n    q = 1\n    sum = 0\n    while q <=\
    \ k\n        if arr[q] > 9\n            sum += arr[q]\n        else\n        \
    \    sum += arr[q]\n            p += 1\n        end\n        q += 1\n    end\n\
    \    sum\nend", "    # Your code here!\nend\n\"\"\"\n    Given a matrix mat and\
    \ a coordinate (i, j), return the sum of\n    the cells in the rectangle formed\
    \ by (i - 1, j - 1), (i - 1, j),\n    (i, j - 1), and (i, j). The outer boundary\
    \ of the rectangle is not part of the cells.", "    nums = 0\n    for i = 1:k\n\
    \        if arr[i] < 100\n            nums += arr[i]\n        end\n    end\n \
    \   return nums\nend", "    sum = 0\n    for i in 1:k\n        if arr[i] > 9 &&\
    \ arr[i] < 100\n            sum += arr[i]\n        end\n    end\n    return sum\n\
    end", "    total = 0\n    for i = 1:k\n        if arr[i] < 100\n            total\
    \ += arr[i]\n        end\n    end\n    return total\nend", "    # Initialize result\
    \ and right index of the result\n    result, right_index = 0, 0\n    \n    # Loop\
    \ through the array\n    for (i, num) in enumerate(arr)\n        # Update result\
    \ and right index if number is less than 10\n        if num < 10\n           \
    \ result += num\n            right_index = i\n        elseif num < 100\n     \
    \       # Update result and right index if number is less than 100\n         \
    \   result += num\n            right_index = i\n        else\n            # Break\
    \ if we've processed k elements\n            if i >= k\n                break\n\
    \            end\n        end\n    end\n    \n    # Subtract the elements from\
    \ the last two indices from the result\n    result -= sum(arr[(right_index-1):end])\n\
    \    \n    return result\nend", "    l = min(k, length(arr))\n    if l == 0\n\
    \        return 0\n    end\n    a = arr[1:l]\n    @assert 1 <= length(a) <= 100\n\
    \    @assert 1 <= k <= length(a)\n    return sum(x for x in a if x < 100)\nend",
  "  sum = 0\n  for element in arr[1:k]\n    if element < 100\n      sum += element\n\
    \    end\n  end\n  return sum\nend", "    \"\"\"\n    Sums up elements in vector\
    \ `arr` that have at most two digits.", "    res = 0\n    for i = 1:k\n      \
    \  if arr[i] < 100\n            res += arr[i]\n        end\n    end\n    return\
    \ res\nend", "    sums = 0\n    for i = 1:k\n        if length(string(arr[i]))\
    \ <= 2\n            sums += arr[i]\n        end\n    end\n    return sums\nend",
  "    sum = 0\n    for i in 1:k\n        if (arr[i] < 100) && (arr[i] > 9)\n    \
    \        sum += arr[i]\n        end\n    end\n    return sum\nend", "    \"\"\"\
    \n    Given a non-empty vector of integers arr and an integer k, return\n    the\
    \ sum of the elements with at most two digits from the first k elements of arr.",
  "    \"\"\"\n    Iterate from beginning to end of array and add element to \n  \
    \  counter if it is two digits or less. Once you reach the \n    kth element in\
    \ the array, return the counter.\n    \"\"\"\n    counter = 0\n    for i in 1:k\n\
    \        if length(arr[i]) <= 2\n            counter += arr[i]\n        end\n\
    \    end\n    return counter\nend", "    arr2 = arr[arr .< 100]\n    k2 = min(k,\
    \ length(arr2))\n    sum(arr2[1:k2])\nend", "    # YOUR CODE HERE\n    sum = 0\n\
    \    for i in 1:k\n        elem = arr[i]\n        if elem<100\n            sum\
    \ += elem\n        end\n    end\n    return sum\nend\nusing Test\n@test add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24", "    sum = 0\n    for e in arr[1:k]\n\
    \        if e >= 10\n            sum += e\n        end\n    end\n    return sum\n\
    end", "    \"\"\"\n    Adds the elements with at most two digits from the first\
    \ k elements of arr.\n    \"\"\"\n    return sum(arr[i] for i in 1:k if length(string(arr[i]))\
    \ <= 2)\nend", "    s = 0\n    for i = 1:k\n        if arr[i] >= 10\n        \
    \    s += arr[i]\n        end\n    end\n    return s\nend", "    output = 0\n\
    \    for i in 1:k\n        if arr[i] < 100\n            output += arr[i]\n   \
    \     end\n    end\n    return output\nend", "    sum = 0\n    for i = 1:k\n \
    \       if arr[i] <= 99\n            sum += arr[i]\n        end\n    end\n   \
    \ return sum\nend", "    \"\"\"\n    Returns sum of elements with at most two\
    \ digits\n    given a non-empty vector of integers arr and an integer k.\n   \
    \ \"\"\"\n    if k > length(arr)\n        return -1\n    end\n    a = arr[1:k]\n\
    \    sum(map(x -> if x > 99 x else x end, a))\nend", "    sum = 0\n    for i =\
    \ 1:k\n        if arr[i] < 100\n            sum += arr[i]\n        end\n    end\n\
    \    return sum\nend", "    summation = 0\n    for index in 1:k\n        if arr[index]\
    \ < 100\n            summation += arr[index]\n        end\n    end\n    return\
    \ summation\nend", "    total = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            total += arr[i]\n        end\n    end\n    return total\nend", " \
    \   return sum(map(x -> x < 100 ? x : 0, arr[1:k]))\nend", "    s = 0\n    for\
    \ i = 1:k\n        if arr[i] < 100 && arr[i] > 9\n            s += arr[i]\n  \
    \      end\n    end\n    return s\nend", "    arr[arr.>99] = arr[arr.>99] - 100\n\
    \    sum(arr[1:k])\nend", "    \n    elements_to_sum = []", "    return sum(filter(num\
    \ -> length(num) <= 2, arr[1:k]))\nend", "    sums = 0\n    for i in 1:k\n   \
    \     if(arr[i] < 10)\n            sums += arr[i]\n        elseif(arr[i] < 100)\n\
    \            sums += arr[i]\n        end\n    end\n    return sums\nend", "  \
    \  sum = 0\n    for i in 1:k\n        if arr[i] < 100\n            sum += arr[i]\n\
    \        end\n    end\n    return sum\nend", '    sum = 0', "    arr = arr[1:k]\n\
    \    arr = [x for x in arr if x < 100]\n    return sum(arr)\nend", "    sum_two_digits\
    \ = 0\n    sum_one_digit = 0\n    for i in 1:k\n        @inbounds if arr[i] <\
    \ 100\n            sum_two_digits += arr[i]\n        elseif arr[i] < 10\n    \
    \        sum_one_digit += arr[i]\n        end\n    end\n    return sum_two_digits\
    \ + sum_one_digit\nend", "    \"\"\"[summary]\n    \n    Args:\n        arr (Vector{Int64}):\
    \ [description]\n        k (Int64): [description]\n    \n    Returns:\n      \
    \  Int64: [description]\n    \"\"\"\n    return sum(i for i in arr[1:k] if i <\
    \ 100)\nend", "    # 3*len(arr) for later\n    two_digit_sum = 0\n    for i in\
    \ 1:k\n        if length(string(arr[i])) == 2\n            two_digit_sum += arr[i]\n\
    \        end\n    end\n    return two_digit_sum\nend", "    s = 0\n    for i in\
    \ 1:k\n        if arr[i] < 100\n            s += arr[i]\n        end\n    end\n\
    \    return s\nend", "    sum = 0\n    for i in 1:k\n        if abs(arr[i]) <\
    \ 100\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "  res = 0\n  for i in 1:k\n    if length(string(arr[i])) <= 2\n      res += arr[i]\n\
    \    end\n  end\n  return res\nend", "    sum = 0\n    for i in 1:k\n        if\
    \ arr[i] < 100\n            sum += arr[i]\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n            sum\
    \ += arr[i]\n        end\n    end\n    return sum\nend", "    added_elements =\
    \ 0\n    for i in 1:k\n        if arr[i] < 100\n            added_elements +=\
    \ arr[i]\n        end\n    end\n    return added_elements\nend", "    i = 0\n\
    \    sum = 0\n    while i < k\n        if arr[i] < 100\n            sum += arr[i]\n\
    \        end\n        i += 1\n    end\n    return sum\nend", "    sum_elements\
    \ = 0\n    for i in 1:k\n        if abs(arr[i]) <= 99\n            sum_elements\
    \ += arr[i]\n        end\n    end\n    return sum_elements\nend", "    output\
    \ = 0\n    if k > 0\n        for i in 1:k\n            if arr[i] < 100\n     \
    \           output += arr[i]\n            end\n        end\n    end\n    return\
    \ output\nend", "    sum = 0\n    for i in arr[1:k]\n        if i >= 10 && i <\
    \ 100\n            sum += i\n        end\n    end\n    return sum\nend", "   \
    \ answer = 0\n    for i = 1:k\n        if length(string(arr[i])) <= 2\n      \
    \      answer += arr[i]\n        end\n    end\n    return answer\nend", "    #\
    \ we want the sum of values with at most two digits in k elements\n    # \n  \
    \  _sum = 0\n    for i in 1:k\n        # arr[i] is the current value we are looking\
    \ at\n        if arr[i] > 99\n            # if it is greater than 99, we are done\
    \ with this element\n            continue\n        elseif arr[i] > 9\n       \
    \     # if it is greater than 9, but less than 99\n            # we add that value\
    \ to our sum and move on\n            _sum += arr[i]\n        else\n         \
    \   # if it is less than 10, it must be a single digit number\n            # so\
    \ we add it to our sum and continue\n            _sum += arr[i]\n        end\n\
    \    end\n    # return our sum\n    return _sum\nend", "   \n    # Initialize\
    \ a sum\n    sum = 0\n    \n    # Get the first k elements from the array\n  \
    \  arr_k = arr[1:k]\n    \n    # Loop through the first k elements\n    for i\
    \ in arr_k\n        \n        # If the number has two digits, add it to the sum.\n\
    \        if i < 100\n            sum += i\n        end\n    end\n    \n    # Return\
    \ the sum\n    return sum\n    \nend", "    n = 0\n    for i = 1:k\n        if\
    \ (arr[i] < 100) \n            n += arr[i]\n        end\n    end\n    return n\n\
    end\narr1 = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk1 = 4\nadd_elements(arr1, k1)",
  "    return arr[1:k] |> x -> sum(y -> if y >= 100 || y <= 9 \n                 \
    \               return y\n                                else\n             \
    \                   return 0\n                                end, x)\nend", " \
    \   arr[1:k] .<= 99 |> sum\nend", "    sum = 0\n    for i in 1:k\n        if arr[i]\
    \ <= 99 && arr[i] >= 10\n            sum += arr[i]\n        end\n    end\n   \
    \ return sum\nend", "    n_elements_under_100 = 0\n    elements_under_100 = []\n\
    \    elements_over_100 = []\n    total = 0\n    for value in arr\n        if value\
    \ < 100\n            push!(elements_under_100, value)\n            n_elements_under_100\
    \ += 1\n        else\n            push!(elements_over_100, value)\n        end\n\
    \    end\n    if n_elements_under_100 < k\n        total += sum(elements_under_100)\n\
    \        elements_over_100 = sort(elements_over_100)\n        for n in 1:k-n_elements_under_100\n\
    \            total += elements_over_100[n]\n        end\n    else\n        sort!(elements_under_100)\n\
    \        for n in 1:k\n            total += elements_under_100[n]\n        end\n\
    \    end\n    return total\nend\nadd_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4)", "    n = length(arr)\n    sum = 0\n    if n == 0\n        return 0\n  \
    \  end\n    i = 1\n    while i <= n && i <= k\n        if arr[i] < 100\n     \
    \       sum += arr[i]\n        end\n        i += 1\n    end\n    return sum\n\
    end", "    total = 0\n    for i in 1:k\n        if arr[i] < 100\n            total\
    \ += arr[i]\n        end\n    end\n    return total\nend\nadd_elements([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4)", "    sum = 0\n    for i in 1:k\n        if arr[i]\
    \ < 100\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "    n = length(arr)\n    num_elements = min(k, n)\n    total = 0\n    for i in\
    \ 1:num_elements\n        element = arr[i]\n        num_digits = length(string(element))\n\
    \        if num_digits > 2\n            element = div(element, 10^(num_digits\
    \ - 2))\n        end\n        total += element\n    end\n    return total\nend",
  "    \n    suma = 0\n    for i in arr[1:k]\n        if i < 100\n            suma\
    \ += i\n        end\n    end\n    return suma\nend", "    sum = 0\n    for i =\
    \ 1:k\n        if arr[i] < 100 && arr[i] > 9\n            sum += arr[i]\n    \
    \    end\n    end\n    return sum\nend", "    ret = 0\n    for i = 1:k\n     \
    \   if i > length(arr)\n            break\n        end\n        if arr[i] < 100\n\
    \            ret += arr[i]\n        end\n    end\n    return ret\nend", "    sum\
    \ = 0\n    for i in 1:k\n        num = arr[i]\n        if num < 10\n         \
    \   sum += num\n        elseif num >= 10 && num < 100\n            sum += num\n\
    \        end\n    end\n    return sum\nend", "    # declare our return variable\n\
    \    total = 0\n    # loop over the first k elements\n    for i in 1:k\n     \
    \   if arr[i] < 100 && arr[i] > 9\n            total += arr[i]\n        end\n\
    \    end\n    return total\nend", "    sum = 0\n    for i in 1:k\n        if arr[i]\
    \ <= 99\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in 1:k\n        a = arr[i]\n        if a < 10\n        \
    \    sum += a\n        elseif a < 100\n            sum += a\n        end\n   \
    \ end\n    return sum\nend", "    count = 0\n    nums = 0\n    for i = 1:k\n \
    \       if arr[i] < 100 && arr[i] > 9\n            nums += arr[i]\n          \
    \  count += 1\n        end\n    end\n    return nums\nend", "    s = 0\n    for\
    \ i in 1:k\n        if arr[i] >= 10 && arr[i] < 100\n            s += arr[i]\n\
    \        end\n    end\n    return s\nend", "    res = 0\n    i = 1\n    while\
    \ (i <= k) && (i <= length(arr))\n        if arr[i] < 100\n            res +=\
    \ arr[i]\n        end\n        i += 1\n    end\n    return res\nend", "    sum\
    \ = 0\n    for i = 1:k\n        if arr[i] > 9 && arr[i] < 100\n            sum\
    \ += arr[i]\n        end\n    end\n    return sum\nend", "    \n    # Take the\
    \ first k elements\n    k_arr = arr[1:k]\n    \n    # If the number has less than\
    \ 3 digits add it to the sum\n    sum = sum([x for x in k_arr if x < 100])\n \
    \   \n    return sum\nend", "    \"\"\"\"\n    Given an array arr, find the median\
    \ of the elements from the\n    first k elements of arr. Return the rounded integer\
    \ value of your median.", "    sum = 0\n    for i in 1:k\n        if arr[i] <\
    \ 100\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "    \n    total = 0\n    for i in 1:k\n        if (arr[i] < 100)\n            total\
    \ += arr[i]\n        end\n    end\n    return total\nend", "    sum = 0\n    for\
    \ i in 1:k\n        sum += i <= 10 ? i : 0\n    end\n    return sum\nend", " \
    \   sum = 0\n    for i in 1:k\n        if arr[i] < 100\n            sum += arr[i]\n\
    \        end\n    end\n    return sum\nend", "    sum = 0\n    for i in 1:k\n\
    \        if arr[i] < 100 && arr[i] > 9\n            sum += arr[i]\n        end\n\
    \    end\n    return sum\nend", "    sum = 0\n    for (idx, element) in enumerate(arr)\n\
    \        if idx > k\n            break\n        end\n        if length(string(element))\
    \ <= 2\n            sum += element\n        end\n    end\n    return sum\nend",
  "    return sum(x for x in arr[1:k] if x < 100)\nend", '    sum = 0', "    # define\
    \ result\n    result = 0\n    # iterate over first k elements of arr\n    for\
    \ x in arr[1:k]\n        # add to result only if the number has two digits\n \
    \       if x < 100\n            result += x\n        end\n    end\n    # return\
    \ result\n    return result\nend", "    \n    # initialize sum\n    s = 0\n  \
    \  \n    # iterate over first k elements\n    for i in arr[1:k]\n        \n  \
    \      # get integer string representation\n        str_i = string(i)\n      \
    \  \n        # sum up if length is less than or equal to 2\n        if length(str_i)\
    \ <= 2\n            s += i\n        end\n    end\n    return s\nend", "    \"\"\
    \"\n    Given a non-empty vector of integers arr and an integer k, return\n  \
    \  the sum of the elements with at most two digits from the first k elements of\
    \ arr.", "    n = length(arr)\n    sm = 0\n    for i in 1:k\n        if arr[i]\
    \ >= 10\n            sm += arr[i]\n        end\n    end\n    return sm\nend",
  "    sum = 0\n    for i in 1:k\n        if arr[i] < 100 && arr[i] > 9\n        \
    \    sum += arr[i]\n        end\n    end\n    return sum\nend", '    num_digits(num::Int64)
    = ceil(log10(num))', "    \"\"\"Return the sum of all elements with at most two\
    \ digits from the first k elements of arr\"\"\"\n    sum = 0\n    for i in 1:k\n\
    \        if arr[i] < 100\n            sum += arr[i]\n        end\n    end\n  \
    \  return sum\nend", '    sum = 0', "    \n    sum = 0\n    for i in 1:k\n   \
    \     if arr[i] < 100\n            sum += arr[i]\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in 1:k\n        len = length(string(arr[i]))\n\
    \        if len <= 2\n            sum += arr[i]\n        end\n    end\n    return\
    \ sum\nend", "    limit = 10^2\n    sum = 0\n    for n in arr[1:k]\n        if\
    \ n < limit\n            sum += n\n        end\n    end\n    return sum\nend",
  "    s = 0\n    for i = 1:k\n        if arr[i] < 100\n            s += arr[i]\n\
    \        end\n    end\n    return s\nend\nadd_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4)", "    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n   \
    \         sum += arr[i]\n        end\n    end\n    return sum\nend", "    sum\
    \ = 0\n    if k > length(arr)\n        return sum\n    end\n    for i in 1:k\n\
    \        if arr[i] < 100\n            sum += arr[i]\n        end\n    end\n  \
    \  return sum\nend", "    elements_added = 0\n    total = 0\n    for i in arr\n\
    \        if elements_added == k\n            break\n        end\n        if i\
    \ < 100\n            total += i\n            elements_added += 1\n        end\n\
    \    end\n    return total\nend", "    local_sum = 0\n    for i in 1:k\n     \
    \   if arr[i] >= 100 || arr[i] < 0\n            local_sum += 0\n        else\n\
    \            local_sum += arr[i]\n        end\n    end\n    return local_sum\n\
    end", "    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n            sum\
    \ += arr[i]\n        end\n    end\n    return sum\nend", "    res = 0\n    for\
    \ i in 1:k\n        num = arr[i]\n        if num < 10\n            res += num\n\
    \        elseif num < 100\n            res += num\n        end\n    end\n    return\
    \ res\nend\nadd_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)", "    add = 0\n\
    \    for i = 1:k\n        add += arr[i] <= 99 ? arr[i] : 0\n    end\n    return\
    \ add\nend", "    \"\"\"\n    Sum up the first k elements of arr, with at most\
    \ two digits.", "    \"\"\"\n    Given a non-empty vector of integers arr and\
    \ an integer k, return\n    the sum of the elements with at most two digits from\
    \ the first k elements of arr.", "    total = 0\n    for (i, v) in enumerate(arr)\n\
    \        if i < k\n            if v < 100 && v > 9\n                total += v\n\
    \            end\n        end\n    end\n    return total\nend", "    return sum(i\
    \ for i in arr[1:k] if i < 100)\nend", "    s = 0\n    for i in 1:k\n        if\
    \ (arr[i] < 100) && (arr[i] > 9)\n            s += arr[i]\n        end\n    end\n\
    \    return s\nend", "    output = 0\n    for i in 1:k\n        s = string(arr[i])\n\
    \        if length(s) <= 2\n            output += arr[i]\n        end\n    end\n\
    \    return output\nend", "    sum = 0\n    for i in 1:k\n        if abs(arr[i])\
    \ < 100\n            sum += arr[i]\n        end\n    end\n    return sum\nend\n\
    \"\"\"\n    Given a string s, return the length of the longest substring with\
    \ no duplicate characters.", "    two_digits = [x for x in arr if x < 100 && x\
    \ > 9]\n    one_digit = [x for x in arr if x < 10]\n    return sum(two_digits)\
    \ + sum(one_digit)\nend", "    current_sum = 0\n    index = 1\n    while index\
    \ <= k\n        if 1 <= arr[index] <= 9\n            current_sum += arr[index]\n\
    \        elseif 10 <= arr[index] <= 99\n            current_sum += arr[index]\n\
    \        end\n        index += 1\n    end\n    return current_sum\nend", "   \
    \ sum = 0\n    for i in 1:k\n        if arr[i] < 100 && arr[i] > 9\n         \
    \   sum += arr[i]\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for i in 1:k\n        if arr[i] >= 10 && arr[i] < 100\n            sum +=\
    \ arr[i]\n        end\n    end\n    return sum\nend", "    # base case\n    if\
    \ k <= 0\n        return 0\n    end\n    \n    # recursion\n    if length(arr)\
    \ > 1\n        return abs(Int64(arr[1])) < 100 ? arr[1] + add_elements(arr[2:end],\
    \ k-1) : add_elements(arr[2:end], k-1)\n    else\n        return abs(Int64(arr[1]))\
    \ < 100 ? arr[1] : 0\n    end\nend", "    total = 0\n    for i in 1:k\n      \
    \  if arr[i] <= 9 || arr[i] >= 100\n            total += arr[i]\n        end\n\
    \    end\n    return total\nend", "    len = min(k, length(arr))\n    total =\
    \ 0\n    for i in 1:len\n        if arr[i] >= 10 && arr[i] < 100\n           \
    \ total += arr[i]\n        end\n    end\n    return total\nend", "    \"\"\"\n\
    \    Args:\n        arr: a non-empty vector of integers\n        k: an integer\
    \ within the range of the length of arr", "    sum = 0\n    for i in arr[1:k]\n\
    \        if i < 100\n            sum += i\n        end\n    end\n    return sum\n\
    end", "    \"\"\"\n    Given a non-empty vector of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.", "    sum = 0\n    for i in 1:k\n        if length(string(arr[i]))\
    \ <= 2\n            sum += arr[i]\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i = 1:k\n        if arr[i] < 100\n            sum += arr[i]\n\
    \        end\n    end\n    return sum\nend", "    sum = 0\n    for x in arr[1:k]\n\
    \        x_str = string(x)\n        if length(x_str) <= 2\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i in 1:k\n\
    \        (num::Int64) = div(arr[i], 10)\n        sum += (arr[i] - num*10)\n  \
    \      if num >= 1\n            sum += num\n        end\n    end\n    return sum\n\
    end", "    sums = 0\n    i = 1\n    while i <= k\n        if arr[i] < 100\n  \
    \          sums += arr[i]\n        end\n        i += 1\n    end\n    return sums\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
