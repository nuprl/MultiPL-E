name: HumanEval_58_common
language: jl
prompt: "\"\"\"Return sorted unique common elements for two vectors.\n    >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5,\
  \ 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\nfunction common(l1::Vector{Int64},\
  \ l2::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = common;\n\t@test(candidate([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5,\
  \ 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
  \ 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\n\
  end\n"
completions: ["    temp = intersect(l1, l2)\n    temp[sortperm(temp)]\nend", "   \
    \ ll = zeros(Int64, min(length(l1), length(l2)))\n    k = 0\n    for e in l1\n\
    \        if e in l2\n            k += 1\n            ll[k] = e\n        end\n\
    \    end\n    return ll[1:k]\nend", "    l = intersect(l1, l2)\n    sort!(l)\n\
    \    l\nend", "    common_elements = intersect(l1, l2)\n    return sort(unique(common_elements))\n\
    end", "    #combine all the elements of l1 and l2 in a single array\n    c = vcat(l1,\
    \ l2)\n    #sort elements of combined array\n    s = sort(c)\n    #remove duplicates\n\
    \    v = unique(s)\n    #make a new array to store common elements\n    a = []\n\
    \    #iterate over the unique elements\n    for i = 1:length(v)\n        #check\
    \ how many times each element is in the combined array\n        if count(c, v[i])\
    \ > 1\n            #if more than once, it's a common element\n            #store\
    \ the element in array 'a'\n            push!(a, v[i])\n        end\n    end\n\
    \    #return the array of common elements\n    return a\nend", "    res = []\n\
    \    for i in l1\n        for j in l2\n            if i == j\n               \
    \ push!(res,i)\n            end\n        end\n    end\n    return sort(unique(res))\n\
    end", "    # Use set for more speed since it has O(1) access\n    l1, l2 = Set(l1),\
    \ Set(l2)\n    return sort(intersect(l1, l2))\nend", "    ll = []\n    common_elements\
    \ = unique(intersect(l1, l2))\n    sort!(common_elements)\n    return common_elements\n\
    end", "    \"\"\"        \n    #Sorting\n    l1 = sort(l1)\n    l2 = sort(l2)\n\
    \    # Sorting doesn't work for the following line because all elements are\n\
    \    # unique.\n    l1 = unique(l1)\n    l2 = unique(l2)\n    \"\"\"\n    n =\
    \ length(l1)\n    m = length(l2)\n    i1 = 1\n    i2 = 1\n    result = Vector{Int64}(0)\n\
    \    while i1 <= n && i2 <= m\n        if l1[i1] == l2[i2]\n            push!(result,\
    \ l1[i1])\n            i1 += 1\n            i2 += 1\n        elseif l1[i1] < l2[i2]\n\
    \            i1 += 1\n        else\n            i2 += 1\n        end\n    end\n\
    \    return result\nend", "    l1 = sort(unique(l1))\n    l2 = sort(unique(l2))\n\
    \    i1 = 1\n    i2 = 1\n    results = Int64[]\n    while i1 <= length(l1) &&\
    \ i2 <= length(l2)\n        if l1[i1] == l2[i2]\n            push!(results, l1[i1])\n\
    \            i1 += 1\n            i2 += 1\n        elseif l1[i1] < l2[i2]\n  \
    \          i1 += 1\n        else\n            i2 += 1\n        end\n    end\n\
    \    return results\nend", "    v = []\n    for i in l1\n        if i in l2 &&\
    \ !(i in v)\n            append!(v, i)\n        end\n    end\n    sort(v)\nend",
  "    return unique(sort(intersect(l1, l2)))\nend", "    vec = Vector{Int64}()\n\
    \    for i in l1 \n        for j in l2 \n            if i == j \n            \
    \    push!(vec, i)\n            end\n        end\n    end\n    vec\nend", "  \
    \  i = j = 1\n    s = Set()\n    while i <= length(l1) && j <= length(l2)\n  \
    \      if l1[i] < l2[j]\n            i += 1\n        elseif l1[i] > l2[j]\n  \
    \          j += 1\n        else\n            push!(s, l1[i])\n            i +=\
    \ 1\n            j += 1\n        end\n    end\n    return sort(collect(s))\nend",
  "    l1_uniq = unique(l1)\n    l2_uniq = unique(l2)\n    common_indices = intersect(l1_uniq,\
    \ l2_uniq)\n    return l1_uniq[common_indices]\nend", "    res = Set()\n    for\
    \ i in l1\n        for j in l2\n            if i == j\n                push!(res,\
    \ i)\n            end\n        end\n    end\n    sort(collect(res))\nend", " \
    \   return sort(unique(intersect(l1, l2)))\nend\n    \n    \n    \n\"\"\"Sum of\
    \ squares of elements in a vector.\n    >>> sum_of_squares([1, 4, 3, 34, 653,\
    \ 2, 5])\n    44119\n    >>> sum_of_squares([5, 3, 2, 8])\n    104", "    res\
    \ = intersect(l1, l2)\n    sort!(res)\n    return res\nend", "    return sort(unique(intersect(l1,\
    \ l2)))\nend", "    c1 = Counter(l1)\n    c2 = Counter(l2)\n    c12 = c1 + c2\n\
    \    return sort(collect(keys(c12[c12 .> 1])))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
