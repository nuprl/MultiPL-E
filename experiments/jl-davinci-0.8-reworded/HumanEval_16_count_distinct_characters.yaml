name: HumanEval_16_count_distinct_characters
language: jl
prompt: "\"\"\" Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n \
  \   3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
  \ count_distinct_characters(string::String)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
  @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
  abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
  Jerry jERRY JeRRRY\") == 5)\nend\n"
completions: ["    char_set = Set{Char}()\n    for char in string\n        push!(char_set,\
    \ char)\n    end\n    return length(char_set)\nend", "    dist_char = distinct(lowercase(string))\n\
    \    return length(dist_char)\nend", "    \n    # convert string to uppercase\n\
    \    uppercase_string = uppercase(string)\n    \n    # convert string to lowercase\n\
    \    lowercase_string = lowercase(string)\n    \n    # create empty list\n   \
    \ distinct_letters = []\n    \n    # loop through each character in uppercase\
    \ string\n    for i in 1:length(uppercase_string)\n        \n        # if character\
    \ not in lowercase string, then append to list\n        if !(uppercase_string[i]\
    \ in lowercase_string)\n            push!(distinct_letters, uppercase_string[i])\n\
    \        end\n    end\n    \n    # return length of distinct letters list\n  \
    \  return length(distinct_letters)\nend", "    \"\"\" \n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\
    \"\n    uniques = Set()\n    for c in string\n        push!(uniques, c)\n    end\n\
    \    return length(uniques)\nend", "    chars = Set{Char}()\n    for char in string\n\
    \        push!(chars, char)\n    end\n    return length(chars)\nend", "    cnt\
    \ = 0\n    chars = Set{String}()\n    for c in string\n        if !(c in chars)\n\
    \            cnt += 1\n            push!(chars, c)\n        end\n    end\n   \
    \ return cnt\nend", "    count = 0\n    character_list = Set()\n    for character\
    \ in string\n        if character in character_list\n            continue\n  \
    \      else\n            push!(character_list, character)\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\n \n \n \n\"\"\" Return a new\
    \ string that is a substring of the original string from character of index start\
    \ up to, but not including, character of index end.\n    >>> substr(\"Jerry\"\
    , 2, 4)\n    \"rr\"\n    >>> substr(\"Jerry\", 1, 2)\n    \"er\"\n    \"\"\"",
  "    ###########################################\n    #     write your code below\
    \ this line\n    ###########################################\n    arr=Array{Any,1}(undef,1)\n\
    \    arr[1]=string[1]\n    j=1\n    for i=2:length(string)\n        s=string[i]\n\
    \        t=false\n        for k=1:j\n            if arr[k]==s\n              \
    \  t=true\n                break\n            end\n        end\n        if t==false\n\
    \            j+=1\n            arr[j]=s\n        end\n    end\n    return j\n\
    end", "    # set ignores duplicates\n    return length(unique(lowercase(string)))\n\
    end", "    char_set = Set{Char}()\n    for char in string\n        push!(char_set,\
    \ char)\n    end\n    return length(char_set)\nend", "    num_distinct = 0\n \
    \   is_distinct = Set{Char}()\n    for ch in string\n        if ch in is_distinct\n\
    \            continue\n        end\n        is_distinct = union(is_distinct, Set{Char}([ch]))\n\
    \        num_distinct += 1\n    end\n    return num_distinct\nend", "    num_of_distinct_characters\
    \ = 0\n    for i = 1:length(string)\n        if string[i] in string[1:i-1]\n \
    \           continue\n        else\n            num_of_distinct_characters +=\
    \ 1\n        end\n    end\n    return num_of_distinct_characters\nend", "    #\
    \ YOUR CODE HERE\nend", "    # Your code here\n    # You can add extra functions\
    \ to help you\n    count = 0\n    lower = string[1:end]\n    upper = string[1:end]\n\
    \    lower = lower |> upcase\n    upper = upper |> lowercase\n    for i in 1:length(string)\n\
    \        if string[i] in upper\n            count += 1\n        end\n    end\n\
    \    for i in 1:length(string)\n        if string[i] in lower\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    return length(unique(uppercase(string)))\n\
    end", "    return length(Set(lowercase(string)))\nend", "    my_dict = Dict{Char,Int64}()\n\
    \    for i in 1:length(string)\n        if !haskey(my_dict, string[i])\n     \
    \       my_dict[string[i]] = 1\n        else\n            my_dict[string[i]] +=\
    \ 1\n        end\n    end\n    return length(my_dict)\nend", "    characters =\
    \ Set{Char}()\n    for char in string\n        push!(characters, char)\n    end\n\
    \    return length(characters)\nend", "  if length(string) == 0\n    return 0\n\
    \  else\n    if string[1] in split(string[2:], \"\")\n      return count_distinct_characters(string[2:])\n\
    \    else\n      return 1 + count_distinct_characters(string[2:])\n  end\nend",
  "    distinct_count = 0\n    set = Set()\n    for char in string\n        if !(haskey(set,\
    \ char))\n            set[char] = 1\n            distinct_count += 1\n       \
    \ end\n    end\n    return distinct_count\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
