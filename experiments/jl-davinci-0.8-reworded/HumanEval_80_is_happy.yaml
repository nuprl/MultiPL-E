name: HumanEval_80_is_happy
language: jl
prompt: "\"\"\"You are given a string s.\n    Your task is to check if the string\
  \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
  \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n  \
  \  false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n  \
  \  >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
  \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
  a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
  ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
  \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") ==\
  \ true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
completions: ["    n = length(s)\n    if n < 3\n        return false\n    end\n  \
    \  for i = 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n\
    \            return false\n        end\n    end\n    return true\nend", "    #\
    \ check if length of string is at least 3\n    length(s) >= 3 && all(s[i] != s[i\
    \ + 1] for i in 1:3:length(s))\nend", "    n = length(s)\n    if n < 3\n     \
    \   return false\n    end\n    for i = 1:n-2\n        if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n    end\n\
    \    return true\nend", "    n = length(s)\n    if n < 3 \n        return false\n\
    \    end\n    for i in 1:n-2\n        j = i + 2\n        if s[i] == s[i+1] ||\
    \ s[i] == s[j] || s[i+1] == s[j]\n            return false\n        end\n    end\n\
    \    return true\nend\n        ", "   s = s # ? edit\n   for i = 1:length(s)-2\n\
    \       if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n           return\
    \ false\n       end\n   end\n   return true\nend", "    if length(s) < 3\n   \
    \     return false\n    end\n    if s[1] == s[2] || s[2] == s[3] || s[1] == s[3]\n\
    \        return false\n    end\n    return true\nend", "    for i in 1:length(s)-2\n\
    \        if s[i] == s[i+1] && s[i] == s[i+2]\n            return false\n     \
    \   end\n    end\n    return true\nend", "   is_happy(s) = (length(s) > 3) &&\
    \ every(i -> s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2], 1:length(s)-2)\n\
    end", "    n = length(s)\n    if n < 3\n        return false\n    end\n    for\
    \ i in 3:n\n        if s[i-2] == s[i-1] || s[i-1] == s[i] || s[i-2] == s[i]\n\
    \            return false\n        end\n    end\n    return true\nend", "    hapjl\
    \ = true\n    if length(s) >= 3\n        i = 1\n        while i < length(s)-1\
    \ && hapjl\n            hapjl = (s[i] != s[i+1]) && (s[i] != s[i+2]) && (s[i+1]\
    \ != s[i+2])\n            i += 1\n        end\n    else\n        hapjl = false\n\
    \    end\n    return hapjl\nend", "    if length(s) < 3\n        return false\n\
    \    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend", "    if s == \"ab\" || s == \"aa\" || s == \"bb\" || s == \"ac\"\
    \ || s == \"bc\" || s == \"cc\" || s == \"b\" || s == \"a\" || s == \"c\"\n  \
    \      return false\n    end\n    if length(s) > 3\n        if s[1] == s[2]\n\
    \            return false\n        end\n        if s[2] == s[3]\n            return\
    \ false\n        end\n        if s[3] == s[4]\n            return false\n    \
    \    end\n    end\n    return true\nend", "    N = length(s)\n    for i in 1:N-2\n\
    \        for j in i+1:N-1\n            for k in j+1:N\n                if (s[i]\
    \ == s[j] || s[i] == s[k] || s[j] == s[k])\n                    return false\n\
    \                end\n            end\n        end\n    end\n    return true\n\
    end", "    n = length(s)\n    if n<3 return false end\n    i=1\n    while i+2<=n\n\
    \        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n           \
    \ return false\n        end\n        i += 1\n    end\n    return true\nend", " \
    \   if length(s)<3\n        return false\n    end\n    for i=1:length(s)-2\n \
    \       if s[i]==s[i+1] && s[i]==s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend", "    counter = 0\n    for i in 1:length(s)\n\
    \        if s[i] == s[i-1]\n            counter += 1\n        end\n    end\n \
    \   if counter >= 3\n        return false\n    else\n        return true\n   \
    \ end\nend", "    function helper(s::String)::Bool\n        if length(s) < 3\n\
    \            return true\n        elseif s[1] == s[2] == s[3]\n            return\
    \ false\n        else\n            return helper(s[2:end])\n        end\n    end\n\
    \    return helper(s)\nend", "    n = length(s)\n    if n < 3 \n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\n \n\"\"\"You are given a string s.\n    Your task is to check if\
    \ the string is hapjl or not.\n    A string is hapjl if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"", "    n = length(s)\n    if n < 3 \n        return false\n\
    \    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2]\n            return false\n        end\n    end\n    return true\n\
    end\nprintln(is_happy(\"a\"))\nprintln(is_happy(\"aa\"))\nprintln(is_happy(\"\
    abcd\"))\nprintln(is_happy(\"aabb\"))\nprintln(is_happy(\"adb\"))\nprintln(is_happy(\"\
    xyy\"))", "    strlen = length(s)\n    if strlen < 3\n        return false\n \
    \   end\n    for i in 2:strlen - 1\n        if s[i-1] == s[i] && s[i] == s[i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\n    \n\"\
    \"\"You are given a string s.\n    Your task is to check if the string is hapjl\
    \ or not.\n    A string is hapjl if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n   \
    \ >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n\
    \    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n\
    \    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
