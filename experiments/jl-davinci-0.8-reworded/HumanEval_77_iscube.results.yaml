name: HumanEval_77_iscube
language: jl
results:
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0 \n        return true\n \
    \   end\n    b = 0\n    while b*b*b <= a\n        if b*b*b == a\n            return\
    \ true\n        end\n        b += 1\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    x = floor(Int64, a^(1/3))\n    return\
    \ (x^3 == a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpek91m8x4.jl:30\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpek91m8x4.jl:20\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpek91m8x4.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpek91m8x4.jl:27\ntest set:\
    \ Test Failed at /tmp/tmpek91m8x4.jl:31\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpek91m8x4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpek91m8x4.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpek91m8x4.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpek91m8x4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpek91m8x4.jl:27\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpek91m8x4.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # if the value is 0 (zero) then it\
    \ is true\n    if a == 0\n        return true\n    end\n    end\n    \n    # if\
    \ the value is larger then zero\n    if a > 0\n    i = 0\n    while i <= a\n \
    \       i += 1\n        if a == i^3\n            return true\n        end\n  \
    \  end\n    end\n    \n    # if the value is less then zero\n    if a < 0\n  \
    \  i = 0\n    while i >= a\n        i -= 1\n        if a == i^3\n            return\
    \ true\n        end\n    end\n    end\n    \n    # if the value isn't a cube (above\
    \ returns don't work) then return false\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "\u250C Warning: Assignment to `i` in soft scope is ambiguous because a\
    \ global variable by the same name exists: `i` will be treated as a new local.\
    \ Disambiguate by using `local i` to suppress this warning or `global i` to assign\
    \ to the existing global variable.\n\u2514 @ /tmp/tmpgd3vjhtk.jl:30\nERROR: LoadError:\
    \ UndefVarError: a not defined\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgd3vjhtk.jl:27\n\
    in expression starting at /tmp/tmpgd3vjhtk.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return sqrt(a) % 1 == 0\nend\niscube(2)\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuiiz2h5r.jl:30\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  sqrt will only\
    \ return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3]\
    \ sqrt\n     @ ./math.jl:1221 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpuiiz2h5r.jl:20\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuiiz2h5r.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuiiz2h5r.jl:27\ntest set:\
    \ Test Failed at /tmp/tmpuiiz2h5r.jl:33\n  Expression: candidate(1000) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuiiz2h5r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuiiz2h5r.jl:27\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    6     1      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuiiz2h5r.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 || trunc(Int64, (abs(a)\
    \ ^ (1//3))) ^ 3 == abs(a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9th2ulcb.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9th2ulcb.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9th2ulcb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9th2ulcb.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9th2ulcb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9th2ulcb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9th2ulcb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return typeof(a) == Int64 && a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg8b_ydf0.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg8b_ydf0.jl:1\n\
    in expression starting at /tmp/tmpg8b_ydf0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a > 0\n        return true\n  \
    \  elseif a < 0\n        return true\n    else\n        return false\n    end\n\
    end\niscube(64)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpid1mljb5.jl:35\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpid1mljb5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpid1mljb5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpid1mljb5.jl:38\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpid1mljb5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpid1mljb5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpid1mljb5.jl:40\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpid1mljb5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpid1mljb5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpid1mljb5.jl:41\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpid1mljb5.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpid1mljb5.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpid1mljb5.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a >= 0 && isinteger(Int64(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpg1339sfz.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == false\n  InexactError: Int64(1.2599210498948732)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n\
    \     @ Main /tmp/tmpg1339sfz.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg1339sfz.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg1339sfz.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpg1339sfz.jl:29\n  Expression: candidate(-1) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1339sfz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1339sfz.jl:26\ntest set: Error\
    \ During Test at /tmp/tmpg1339sfz.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(180) == false\n  InexactError: Int64(5.646216173286171)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n    \
    \ @ Main /tmp/tmpg1339sfz.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg1339sfz.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg1339sfz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpg1339sfz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1729) == false\n  InexactError: Int64(12.002314368427685)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n    \
    \ @ Main /tmp/tmpg1339sfz.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg1339sfz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    r = round(Int64,Int64,(a>=0 ? a :\
    \ -a)^(1/3))\n    r^3 == a | r^3 == -a\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdw8uw8xx.jl:28\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  MethodError: no method matching round(::Type{Int64},\
    \ ::Type{Int64}, ::Float64)\n  Closest candidates are:\n    round(::Type{T}, !Matched::Rational{Bool})\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:468\n  \
    \  round(::Type{T}, !Matched::Rational{Bool}, !Matched::RoundingMode) where T\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:468\n    round(::Type{T},\
    \ !Matched::Rational{Tr}) where {T, Tr} at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:461\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmpdw8uw8xx.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdw8uw8xx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdw8uw8xx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdw8uw8xx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  MethodError: no method matching round(::Type{Int64},\
    \ ::Type{Int64}, ::Float64)\n  Closest candidates are:\n    round(::Type{T}, !Matched::Rational{Bool})\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:468\n  \
    \  round(::Type{T}, !Matched::Rational{Bool}, !Matched::RoundingMode) where T\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:468\n    round(::Type{T},\
    \ !Matched::Rational{Tr}) where {T, Tr} at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:461\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmpdw8uw8xx.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdw8uw8xx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdw8uw8"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdw8uw8xx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return iscube2(a)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx9pp34yi.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: iscube2 not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpx9pp34yi.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx9pp34yi.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9pp34yi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx9pp34yi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: iscube2 not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpx9pp34yi.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx9pp34yi.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9pp34yi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx9pp34yi.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: iscube2 not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpx9pp34yi.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx9pp34yi.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9pp34yi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx9pp34yi.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: iscube2 not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpx9pp34yi.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx9pp34yi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if sqrt(abs(a))%1 == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpptpgkq5k.jl:36\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpptpgkq5k.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpptpgkq5k.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpptpgkq5k.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    for i = -100:100 \n        if i^3\
    \ == a \n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        a = -a\n    end\n\
    \    for i = 1:a\n        if i^3 == a\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6c9uefuc.jl:41\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6c9uefuc.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6c9uefuc.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6c9uefuc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        a = -a\n    end\n\
    \    if a == 0\n        return true\n    end\n    j = 1\n    while j^3 <= a\n\
    \        if j^3 == a\n            return true\n        end\n        j = j + 1\n\
    \    end\n    return false\nend\n# test cases\n@assert iscube(1) == true\n@assert\
    \ iscube(2) == false\n@assert iscube(-1) == true\n@assert iscube(64) == true\n\
    @assert iscube(0) == true\n@assert iscube(180) == false\n\"\"\"\n    Write a function\
    \ that takes a positive integer n and returns the integer sum of \n    the squares\
    \ of the first n positive integers.\n    Examples:\n    >>> sumsqr(1)\n    1\n\
    \    >>> sumsqr(3)\n    14\n    >>> sumsqr(20)\n    2870\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmprwm07n0t.jl:42\nin expression starting at /tmp/tmprwm07n0t.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if isinteger(pow(a,1/3)) == true\n\
    \    return true\n    else return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyr63as5u.jl:30\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpyr63as5u.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyr63as5u.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyr63as5u.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpyr63as5u.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: pow not defined\n  Stacktrace:\n   [1]\
    \ iscube(a::Int64)\n     @ Main /tmp/tmpyr63as5u.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyr63as5u.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyr63as5u.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpyr63as5u.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n   [1]\
    \ iscube(a::Int64)\n     @ Main /tmp/tmpyr63as5u.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyr63as5u.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyr63as5u.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpyr63as5u.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n   [1]\
    \ iscube(a::Int64)\n     @ Main /tmp/tmpyr63as5u.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyr63as5u.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n\
    \    end\n    if a < 0 \n        a = -a\n    end\n    b = round(Int64, real(a)\
    \ ^ (1/3))\n    if b^3 == a\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n\
    \    end\n    if a < 0 \n        a = -a\n    end\n    i = 1\n    while i < a\n\
    \        i = i+1\n        if i^3 == a\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzk936yl5.jl:40\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzk936yl5.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzk936yl5.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzk936yl5.jl:42\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzk936yl5.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzk936yl5.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzk936yl5.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    t = a\n    if (a < 0)\n        t =\
    \ -a\n    end\n    return isinteger(t^(1/3))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3vnzq_ty.jl:34\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3vnzq_ty.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vnzq_ty.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3vnzq_ty.jl:36\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vnzq_ty.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vnzq_ty.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3vnzq_ty.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a2 = abs(a)\n    if a2 == 0 \n   \
    \     return true\n    end\n    # find a largest integer b such that b*b*b <=\
    \ a2\n    # note: in Julia the integer division operator is \"div\"\n    b = trunc(Int64,\
    \ cbrt(a2))\n    b1 = b + 1\n    return b*b*b == a2 || b1*b1*b1 == a2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a == floor(a^(1/3))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt60xcnra.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpt60xcnra.jl:20\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpt60xcnra.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpt60xcnra.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpt60xcnra.jl:30\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt60xcnra.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt60xcnra.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt60xcnra.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt60xcnra.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt60xcnra.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt60xcnra.jl:24\n"
  exit_code: 1
  status: SyntaxError
