language: jl
name: HumanEval_77_iscube
results:
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0 \n        return true\n \
    \   end\n    b = 0\n    while b*b*b <= a\n        if b*b*b == a\n            return\
    \ true\n        end\n        b += 1\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    x = floor(Int64, a^(1/3))\n    return\
    \ (x^3 == a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpek91m8x4.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpek91m8x4.jl:30\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpek91m8x4.jl:20\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpek91m8x4.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpek91m8x4.jl:27\ntest set:\
    \ Test Failed at /tmp/tmpek91m8x4.jl:31\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpek91m8x4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpek91m8x4.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpek91m8x4.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpek91m8x4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpek91m8x4.jl:27\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # if the value is 0 (zero) then it\
    \ is true\n    if a == 0\n        return true\n    end\n    end\n    \n    # if\
    \ the value is larger then zero\n    if a > 0\n    i = 0\n    while i <= a\n \
    \       i += 1\n        if a == i^3\n            return true\n        end\n  \
    \  end\n    end\n    \n    # if the value is less then zero\n    if a < 0\n  \
    \  i = 0\n    while i >= a\n        i -= 1\n        if a == i^3\n            return\
    \ true\n        end\n    end\n    end\n    \n    # if the value isn't a cube (above\
    \ returns don't work) then return false\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "\u250C Warning: Assignment to `i` in soft scope is ambiguous because a\
    \ global variable by the same name exists: `i` will be treated as a new local.\
    \ Disambiguate by using `local i` to suppress this warning or `global i` to assign\
    \ to the existing global variable.\n\u2514 @ /tmp/tmpgd3vjhtk.jl:30\nERROR: LoadError:\
    \ UndefVarError: a not defined\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgd3vjhtk.jl:27\n\
    in expression starting at /tmp/tmpgd3vjhtk.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return sqrt(a) % 1 == 0\nend\niscube(2)\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpuiiz2h5r.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpuiiz2h5r.jl:30\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  sqrt will only\
    \ return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3]\
    \ sqrt\n     @ ./math.jl:1221 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpuiiz2h5r.jl:20\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuiiz2h5r.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuiiz2h5r.jl:27\ntest set:\
    \ Test Failed at /tmp/tmpuiiz2h5r.jl:33\n  Expression: candidate(1000) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuiiz2h5r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuiiz2h5r.jl:27\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    6     1      1      8\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 || trunc(Int64, (abs(a)\
    \ ^ (1//3))) ^ 3 == abs(a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9th2ulcb.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp9th2ulcb.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9th2ulcb.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9th2ulcb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9th2ulcb.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9th2ulcb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9th2ulcb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return typeof(a) == Int64 && a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg8b_ydf0.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg8b_ydf0.jl:1\n\
    in expression starting at /tmp/tmpg8b_ydf0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a > 0\n        return true\n  \
    \  elseif a < 0\n        return true\n    else\n        return false\n    end\n\
    end\niscube(64)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpid1mljb5.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpid1mljb5.jl:35\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpid1mljb5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpid1mljb5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpid1mljb5.jl:38\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpid1mljb5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpid1mljb5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpid1mljb5.jl:40\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpid1mljb5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpid1mljb5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpid1mljb5.jl:41\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpid1mljb5.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpid1mljb5.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a >= 0 && isinteger(Int64(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpg1339sfz.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpg1339sfz.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == false\n  InexactError: Int64(1.2599210498948732)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n\
    \     @ Main /tmp/tmpg1339sfz.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg1339sfz.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg1339sfz.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpg1339sfz.jl:29\n  Expression: candidate(-1) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1339sfz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1339sfz.jl:26\ntest set: Error\
    \ During Test at /tmp/tmpg1339sfz.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(180) == false\n  InexactError: Int64(5.646216173286171)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n    \
    \ @ Main /tmp/tmpg1339sfz.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg1339sfz.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg1339sfz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpg1339sfz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1729) == false\n  InexactError: Int64(12.002314368427685)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n    \
    \ @ Main /tmp/tmpg1339sfz.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/s"
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    r = round(Int64,Int64,(a>=0 ? a :\
    \ -a)^(1/3))\n    r^3 == a | r^3 == -a\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdw8uw8xx.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpdw8uw8xx.jl:28\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  MethodError: no method matching round(::Type{Int64},\
    \ ::Type{Int64}, ::Float64)\n  Closest candidates are:\n    round(::Type{T}, !Matched::Rational{Bool})\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:468\n  \
    \  round(::Type{T}, !Matched::Rational{Bool}, !Matched::RoundingMode) where T\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:468\n    round(::Type{T},\
    \ !Matched::Rational{Tr}) where {T, Tr} at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:461\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmpdw8uw8xx.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdw8uw8xx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdw8uw8xx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdw8uw8xx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  MethodError: no method matching round(::Type{Int64},\
    \ ::Type{Int64}, ::Float64)\n  Closest candidates are:\n    round(::Type{T}, !Matched::Rational{Bool})\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:468\n  \
    \  round(::Type{T}, !Matched::Rational{Bool}, !Matched::RoundingMode) where T\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:468\n    round(::Type{T},\
    \ !Matched::Rational{Tr}) where {T, Tr} at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:461\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmpdw8uw8xx.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdw8uw8xx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdw8uw8"
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return iscube2(a)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpx9pp34yi.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpx9pp34yi.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: iscube2 not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpx9pp34yi.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx9pp34yi.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9pp34yi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx9pp34yi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: iscube2 not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpx9pp34yi.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx9pp34yi.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9pp34yi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx9pp34yi.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: iscube2 not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpx9pp34yi.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx9pp34yi.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9pp34yi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx9pp34yi.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: iscube2 not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpx9pp34yi.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro ex"
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if sqrt(abs(a))%1 == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpptpgkq5k.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpptpgkq5k.jl:36\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpptpgkq5k.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpptpgkq5k.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    for i = -100:100 \n        if i^3\
    \ == a \n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        a = -a\n    end\n\
    \    for i = 1:a\n        if i^3 == a\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6c9uefuc.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp6c9uefuc.jl:41\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6c9uefuc.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6c9uefuc.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        a = -a\n    end\n\
    \    if a == 0\n        return true\n    end\n    j = 1\n    while j^3 <= a\n\
    \        if j^3 == a\n            return true\n        end\n        j = j + 1\n\
    \    end\n    return false\nend\n# test cases\n@assert iscube(1) == true\n@assert\
    \ iscube(2) == false\n@assert iscube(-1) == true\n@assert iscube(64) == true\n\
    @assert iscube(0) == true\n@assert iscube(180) == false\n\"\"\"\n    Write a function\
    \ that takes a positive integer n and returns the integer sum of \n    the squares\
    \ of the first n positive integers.\n    Examples:\n    >>> sumsqr(1)\n    1\n\
    \    >>> sumsqr(3)\n    14\n    >>> sumsqr(20)\n    2870\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmprwm07n0t.jl:42\nin expression starting at /tmp/tmprwm07n0t.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if isinteger(pow(a,1/3)) == true\n\
    \    return true\n    else return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpyr63as5u.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpyr63as5u.jl:30\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpyr63as5u.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyr63as5u.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyr63as5u.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpyr63as5u.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: pow not defined\n  Stacktrace:\n   [1]\
    \ iscube(a::Int64)\n     @ Main /tmp/tmpyr63as5u.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyr63as5u.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyr63as5u.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpyr63as5u.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n   [1]\
    \ iscube(a::Int64)\n     @ Main /tmp/tmpyr63as5u.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyr63as5u.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyr63as5u.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpyr63as5u.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n   [1]\
    \ iscube(a::Int64)\n     @ Main /tmp/tmpyr63as5u.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n\
    \    end\n    if a < 0 \n        a = -a\n    end\n    b = round(Int64, real(a)\
    \ ^ (1/3))\n    if b^3 == a\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n\
    \    end\n    if a < 0 \n        a = -a\n    end\n    i = 1\n    while i < a\n\
    \        i = i+1\n        if i^3 == a\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzk936yl5.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpzk936yl5.jl:40\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzk936yl5.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzk936yl5.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzk936yl5.jl:42\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzk936yl5.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzk936yl5.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    t = a\n    if (a < 0)\n        t =\
    \ -a\n    end\n    return isinteger(t^(1/3))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3vnzq_ty.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp3vnzq_ty.jl:34\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3vnzq_ty.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vnzq_ty.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3vnzq_ty.jl:36\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vnzq_ty.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vnzq_ty.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a2 = abs(a)\n    if a2 == 0 \n   \
    \     return true\n    end\n    # find a largest integer b such that b*b*b <=\
    \ a2\n    # note: in Julia the integer division operator is \"div\"\n    b = trunc(Int64,\
    \ cbrt(a2))\n    b1 = b + 1\n    return b*b*b == a2 || b1*b1*b1 == a2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a == floor(a^(1/3))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpt60xcnra.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpt60xcnra.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpt60xcnra.jl:20\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpt60xcnra.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpt60xcnra.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpt60xcnra.jl:30\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt60xcnra.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt60xcnra.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt60xcnra.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt60xcnra.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt60xcnra.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    for i in 1:abs(a)\n        if (i*i*i) == abs(a)\n            return\
    \ true\n        end\n    end\n    return false\nend\n@testset \"test cubes\" begin\n\
    \    @test iscube(1)\n    @test !iscube(2)\n    @test iscube(-1)\n    @test iscube(64)\n\
    \    @test iscube(0)\n    @test !iscube(180)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmp5ynvwn00.jl:30

    in expression starting at /tmp/tmp5ynvwn00.jl:30

    '
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n  return ((a>=0) ? Int64(floor(Int64,\
    \ (a^(1/3))))^3 == a : false)\nend\n@assert iscube(64) == true\n@assert iscube(0)\
    \ == true\n@assert iscube(1) == true\n@assert iscube(2) == false\n@assert iscube(-1)\
    \ == true\n@assert iscube(180) == false\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: AssertionError: iscube(64) == true\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmphp8ys2nw.jl:22\nin expression starting at /tmp/tmphp8ys2nw.jl:22\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    \"\"\"\n    >>> iscube(1)\n    true\n\
    \    >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\n    for x in 1:a\n        if x^3 == a\n            return true\n       \
    \ end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpink0kzix.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpink0kzix.jl:48\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpink0kzix.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpink0kzix.jl:45\ntest set: Test Failed at /tmp/tmpink0kzix.jl:52\n\
    \  Expression: candidate(0) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpink0kzix.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpink0kzix.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978872
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    i = (round(Int64, Int, a^(1/3)))^3\n\
    \    if i == a\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp4wlcg5cl.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp4wlcg5cl.jl:32\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  MethodError: no method matching round(::Type{Int64},\
    \ ::Type{Int64}, ::Float64)\n  Closest candidates are:\n    round(::Type{T}, !Matched::Missing)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/missing.jl:142\n    round(::Type{T},\
    \ !Matched::Missing, !Matched::RoundingMode) where T at ~/.conda/envs/polyglot/share/julia/base/missing.jl:142\n\
    \    round(::Type{T}, !Matched::Rational{Bool}) where T at ~/.conda/envs/polyglot/share/julia/base/rational.jl:468\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmp4wlcg5cl.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4wlcg5cl.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4wlcg5cl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp4wlcg5cl.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  MethodError: no method matching round(::Type{Int64},\
    \ ::Type{Int64}, ::Float64)\n  Closest candidates are:\n    round(::Type{T}, !Matched::Missing)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/missing.jl:142\n    round(::Type{T},\
    \ !Matched::Missing, !Matched::RoundingMode) where T at ~/.conda/envs/polyglot/share/julia/base/missing.jl:142\n\
    \    round(::Type{T}, !Matched::Rational{Bool}) where T at ~/.conda/envs/polyglot/share/julia/base/rational.jl:468\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmp4wlcg5cl.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4wlcg5cl.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4wlcg5cl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp4wlcg5cl.jl:34\n  Test threw exception\n  Ex"
  timestamp: 1659978874
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a==0 return true end\n    if a>0\
    \ return (round(Int64, a^(1/3))==a^(1/3)) else return false end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwkw0lr_e.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpwkw0lr_e.jl:30\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwkw0lr_e.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwkw0lr_e.jl:27\ntest set: Test Failed at /tmp/tmpwkw0lr_e.jl:31\n\
    \  Expression: candidate(64) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwkw0lr_e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwkw0lr_e.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpwkw0lr_e.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwkw0lr_e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwkw0lr_e.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978872
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a>=0 || return true\n    return (a)\
    \ in [i^3 for i in 1:a^(1/3)+1]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgwq26a2u.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpgwq26a2u.jl:34\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgwq26a2u.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgwq26a2u.jl:27\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978872
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return isinteger(sqrt(abs(a)))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpan4u1r8q.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpan4u1r8q.jl:32\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpan4u1r8q.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpan4u1r8q.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978872
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    cbrt(a) == round(cbrt(a))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978870
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return is_cube(a)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmptojbalmu.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmptojbalmu.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: is_cube not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmptojbalmu.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptojbalmu.jl:27 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptojbalmu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmptojbalmu.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: is_cube not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmptojbalmu.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptojbalmu.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptojbalmu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmptojbalmu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: is_cube not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmptojbalmu.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptojbalmu.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptojbalmu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmptojbalmu.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: is_cube not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmptojbalmu.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptojbalmu.jl:"
  timestamp: 1659978873
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a < 0\n        a = -a\n    end\n    if Int64(floor(a^(1/3))) ==\
    \ a^(1/3)\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1dpdqggt.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp1dpdqggt.jl:40\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1dpdqggt.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1dpdqggt.jl:36\ntest set: Test Failed at /tmp/tmp1dpdqggt.jl:42\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1dpdqggt.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dpdqggt.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978872
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a>=0 && (round(Int64, a^(1/3))==a^(1/3))\n\
    \        return true\n    else \n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquxc3mau.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpquxc3mau.jl:33\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpquxc3mau.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpquxc3mau.jl:30\ntest set: Test Failed at /tmp/tmpquxc3mau.jl:34\n\
    \  Expression: candidate(64) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquxc3mau.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquxc3mau.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpquxc3mau.jl:36\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquxc3mau.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquxc3mau.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978872
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return is_int(cbrt(a))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpo2b93nf7.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpo2b93nf7.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: is_int not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpo2b93nf7.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpo2b93nf7.jl:27 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo2b93nf7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpo2b93nf7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: is_int not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpo2b93nf7.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpo2b93nf7.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo2b93nf7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpo2b93nf7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: is_int not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpo2b93nf7.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpo2b93nf7.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo2b93nf7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpo2b93nf7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: is_int not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpo2b93nf7.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpo2b93nf7.jl:30 ["
  timestamp: 1659978873
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    for x in 1:a\n        y = x^3\n  \
    \      if y == a\n            return true\n        end\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx6y_8wmj.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpx6y_8wmj.jl:35\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx6y_8wmj.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpx6y_8wmj.jl:32\ntest set: Test Failed at /tmp/tmpx6y_8wmj.jl:39\n\
    \  Expression: candidate(0) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6y_8wmj.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6y_8wmj.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978872
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return !isnothing(a^(1/3)) && !isinf(a^(1/3))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpqz9o41mc.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpqz9o41mc.jl:28\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqz9o41mc.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqz9o41mc.jl:26\ntest set: Error During Test\
    \ at /tmp/tmpqz9o41mc.jl:29\n  Test threw exception\n  Expression: candidate(-1)\
    \ == true\n  DomainError with -1.0:\n  Exponentiation yielding a complex result\
    \ requires a complex argument.\n  Replace x^y with (x+0im)^y, Complex(x)^y, or\
    \ similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n     @ Base.Math\
    \ ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3] ^\n     @ ./promotion.jl:413\
    \ [inlined]\n   [4] iscube(a::Int64)\n     @ Main /tmp/tmpqz9o41mc.jl:20\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpqz9o41mc.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpqz9o41mc.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpqz9o41mc.jl:31\n  Expression: candidate(180) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqz9o41mc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqz9o41mc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqz9o41mc.jl:34\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqz9o41mc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polygl"
  timestamp: 1659978874
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n  a == 0 ? true : (a < 0 ? iscube(-a)\
    \ : sqrt(a)%1 == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp05nfge_e.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp05nfge_e.jl:32\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp05nfge_e.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp05nfge_e.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978872
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a==round(a^(1/3))^3 ? true : false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpccob9c6j.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpccob9c6j.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpccob9c6j.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpccob9c6j.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpccob9c6j.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659978873
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n  \"\"\"\n  Returns true if the given\
    \ integer is a cube of some integer number, false otherwise.\n  \"\"\"\n    if\
    \ a >= 0\n        return isqrt(a)^3 == a\n    else\n        return isqrt(-a)^3\
    \ == -a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjs30xkvl.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpjs30xkvl.jl:37\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjs30xkvl.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjs30xkvl.jl:33\ntest set: Test Failed at /tmp/tmpjs30xkvl.jl:39\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjs30xkvl.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjs30xkvl.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978872
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return ( a==0 ? true : (a%3==0 ? true\
    \ : false) ) \nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmq2wwqcl.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpmq2wwqcl.jl:27\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmq2wwqcl.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmq2wwqcl.jl:26\ntest set: Test Failed at /tmp/tmpmq2wwqcl.jl:29\n\
    \  Expression: candidate(-1) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq2wwqcl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq2wwqcl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmq2wwqcl.jl:30\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq2wwqcl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq2wwqcl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmq2wwqcl.jl:31\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq2wwqcl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq2wwqcl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmq2wwqcl.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq2wwqcl.jl:32 [inl"
  timestamp: 1659978872
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 1\n        return true\n \
    \   elseif a == -1\n        return true\n    elseif a == 0\n        return true\n\
    \    elseif a < 0\n        if Int64(round(Int64(a^(1/3))))^3 == a\n          \
    \  return true\n        else\n            return false\n        end\n    elseif\
    \ a > 0\n        if Int64(round(a^(1/3)))^3 == a\n            return true\n  \
    \      else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978870
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        return iscube(-a)\n\
    \    end\n    if a == 0\n        return true\n    end\n    base = 1\n    while\
    \ a > base*base*base\n        base += 1\n    end\n    return base*base*base ==\
    \ a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978870
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # Test every possible cube root\n\
    \    for i in 1:Int64(floor(sqrt(a)))\n        if i^3 == a\n            return\
    \ true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpr3xndy64.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpr3xndy64.jl:35\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  sqrt will only\
    \ return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3]\
    \ sqrt\n     @ ./math.jl:1221 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpr3xndy64.jl:21\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpr3xndy64.jl:35 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpr3xndy64.jl:32\ntest set:\
    \ Test Failed at /tmp/tmpr3xndy64.jl:39\n  Expression: candidate(0) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3xndy64.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3xndy64.jl:32\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    6     1      1      8\n"
  timestamp: 1659978874
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # write your code here\n    b = trunc(Int,round(a^(1/3)))\n\
    \    if b^3 == a\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpj824s20q.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpj824s20q.jl:35\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpj824s20q.jl:21\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpj824s20q.jl:35 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpj824s20q.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659978873
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return floor(cbrt(a))^3 == a\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978870
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # Your code here\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpo886iad_.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpo886iad_.jl:28\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmpo886iad_.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo886iad_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo886iad_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpo886iad_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmpo886iad_.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo886iad_.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo886iad_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpo886iad_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n"
  timestamp: 1659978875
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    return (a % abs(a))^(1/3) == round((a % abs(a))^(1/3))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5x9_koyy.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp5x9_koyy.jl:31\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5x9_koyy.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5x9_koyy.jl:29\ntest set: Test Failed at /tmp/tmp5x9_koyy.jl:34\n\
    \  Expression: candidate(180) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5x9_koyy.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5x9_koyy.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5x9_koyy.jl:37\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5x9_koyy.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5x9_koyy.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978873
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # Your code here\n    # You may find\
    \ the following functions useful\n    # floor\n    # sqrt\n    # ^\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpw4y99qqv.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpw4y99qqv.jl:31\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmpw4y99qqv.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw4y99qqv.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw4y99qqv.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpw4y99qqv.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmpw4y99qqv.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw4y99qqv.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw4y99qqv.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpw4y99qqv.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n"
  timestamp: 1659978875
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if abs(a) == 1\n        return true\n\
    \    end\n    c = 0\n    while c*c*c <= abs(a)\n        if c*c*c == abs(a)\n \
    \           return true\n        end\n        c += 1\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == Int64(round(root(a,3)))^3\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp1rtbovve.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp1rtbovve.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: root not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp1rtbovve.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1rtbovve.jl:27 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1rtbovve.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1rtbovve.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: root not defined\n  Stacktrace:\n  \
    \ [1] iscube(a::Int64)\n     @ Main /tmp/tmp1rtbovve.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1rtbovve.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1rtbovve.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1rtbovve.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: root not defined\n  Stacktrace:\n  \
    \ [1] iscube(a::Int64)\n     @ Main /tmp/tmp1rtbovve.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1rtbovve.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1rtbovve.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1rtbovve.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: root not defined\n  Stacktrace:\n  \
    \ [1] iscube(a::Int64)\n     @ Main /tmp/tmp1rtbovve.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1rtbovve.jl:30 [inlined]"
  timestamp: 1659978875
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a==0 ? true : floor(cbrt(a))\
    \ == cbrt(a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return isequal(a^(1/3), round(a^(1/3)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpccha9635.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpccha9635.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpccha9635.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpccha9635.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpccha9635.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpccha9635.jl:30\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccha9635.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccha9635.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpccha9635.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccha9635.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccha9635.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  timestamp: 1659978875
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        a = -a\n    end\n\
    \    for i in 1:a\n        if i^3 == a\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpay08qg59.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpay08qg59.jl:41\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpay08qg59.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpay08qg59.jl:34\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978874
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a >= 0 ? isqrt(a)^3 == a : isqrt(-a)^3\
    \ == -a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpru4ibyzp.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpru4ibyzp.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpru4ibyzp.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpru4ibyzp.jl:26\ntest set: Test Failed at /tmp/tmpru4ibyzp.jl:32\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpru4ibyzp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru4ibyzp.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978874
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a==0\n        return true\n   \
    \ end\n    if a<0\n        a=-a\n    end\n    for n in 1:a\n        if n^3==a\n\
    \            return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a % a^(1/3) != 0\n        return\
    \ false\n    else\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpeg1fe07p.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpeg1fe07p.jl:33\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpeg1fe07p.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpeg1fe07p.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpeg1fe07p.jl:30\ntest set:\
    \ Test Failed at /tmp/tmpeg1fe07p.jl:34\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeg1fe07p.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeg1fe07p.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpeg1fe07p.jl:36\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeg1fe07p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeg1fe07p.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpeg1fe07p.jl:37\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeg1fe07p.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/s"
  timestamp: 1659978876
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a = abs(a)\n    c = round(Int64, (a^(1/3)))\n\
    \    return (c^3 == a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        return iscube(-a)\n\
    \    end\n    b = floor(Int64, (a + 1)^(1/3))\n    return b^3 == a\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2prt74oz.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp2prt74oz.jl:37\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2prt74oz.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2prt74oz.jl:30\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978874
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n\
    \    end\n    if a == 1 \n        return true\n    end\n    if a == -1 \n    \
    \    return true\n    end\n    if a < 0 \n        return iscube(-a)\n    end\n\
    \    x = floor(Int64, a^(1/3))\n    return x^3 == a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkhu7xrhn.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpkhu7xrhn.jl:43\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkhu7xrhn.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkhu7xrhn.jl:39\ntest set: Test Failed at /tmp/tmpkhu7xrhn.jl:45\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkhu7xrhn.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkhu7xrhn.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978875
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # write here\n    return false\nend\n\
    @assert iscube(1) == true\n@assert iscube(2) == false\n@assert iscube(-1) == true\n\
    @assert iscube(64) == true\n@assert iscube(0) == true\n@assert iscube(180) ==\
    \ false\n \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: AssertionError: iscube(1) == true\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmph2owu9gw.jl:23\nin expression starting at /tmp/tmph2owu9gw.jl:23\n"
  stdout: ''
  timestamp: 1659978874
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a<0\n        a=abs(a)\n    end\n\
    \    flag=false\n    for i=1:a\n        if i^3==a\n            flag=true\n   \
    \         break\n        end\n    end\n    return flag\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwt852sjv.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpwt852sjv.jl:43\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwt852sjv.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwt852sjv.jl:36\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978875
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    x = 0\n    while x*x*x <= a\n    \
    \    if x*x*x == a\n            return true\n        end\n        x += 1\n   \
    \ end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnv9qrwta.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpnv9qrwta.jl:36\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnv9qrwta.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnv9qrwta.jl:33\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978875
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # make the value positive \n    absa\
    \ = abs(a)\n    # check if the number is a multiple of a square number\n    for\
    \ i = 1:absa\n        if i*i*i == absa\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnd4cey69.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpnd4cey69.jl:41\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnd4cey69.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnd4cey69.jl:34\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978875
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    x = floor(a^(1/3))\n    return a ==\
    \ x^3\nend\n#Test cases:\n#@test iscube(1) == true\n#@test iscube(2) == false\n\
    #@test iscube(-1) == true\n#@test iscube(64) == true\n#@test iscube(0) == true\n\
    #@test iscube(180) == false\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpzgx1hh9q.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpzgx1hh9q.jl:37\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpzgx1hh9q.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzgx1hh9q.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzgx1hh9q.jl:34\ntest set:\
    \ Test Failed at /tmp/tmpzgx1hh9q.jl:38\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzgx1hh9q.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzgx1hh9q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzgx1hh9q.jl:40\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzgx1hh9q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzgx1hh9q.jl:34\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  timestamp: 1659978876
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a = abs(a)\n    for i in 1:floor(Int,\
    \ sqrt(a))\n        if i*i*i == a\n            return true\n        end\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxkei6me_.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpxkei6me_.jl:39\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxkei6me_.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxkei6me_.jl:32\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978876
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n  a = abs(a)\n  temp = cbrt(a)\n  if a==temp*temp*temp\n\
    \    return true\n  else\n    return false\n  end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwwoarw18.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpwwoarw18.jl:34\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwwoarw18.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwwoarw18.jl:32\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978875
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if (a==0)\n        return true\n \
    \   end\n    if (a<0)\n        return iscube(-a)\n    end\n    for i=0:100\n \
    \       if (i^3 == a)\n            return true\n        end\n    end\n    return\
    \ false\nend\nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\nprint(iscube(64))\n\
    print(iscube(0))\nprint(iscube(180))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'truefalsetruetruetruefalseTest Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return false\nend\n\"\"\"\n    Write\
    \ a function that takes a vector of integer \n    numbers v and returns true if\
    \ the sum of numbers in v is a square of some integer.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> issquare_sum([1,2,3])\n \
    \   false\n    >>> issquare_sum([3,3,3])\n    true\n    >>> issquare_sum([1,4,4])\n\
    \    true\n    >>> issquare_sum([-1,2,1])\n    true\n    >>> issquare_sum([])\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpvgllcyqj.jl:22\nin expression starting at /tmp/tmpvgllcyqj.jl:22\n"
  stdout: ''
  timestamp: 1659978875
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    i = -abs(a)\n    while i <= abs(a)\n\
    \        if i^3 == a\n            return true\n        end\n        i += 1\n \
    \   end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978874
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 || ((-a)^(1/3)) % 1\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpt52_9bfq.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpt52_9bfq.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpt52_9bfq.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpt52_9bfq.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpt52_9bfq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpt52_9bfq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  DomainError with -2.0:\n  Exponentiation yielding a\
    \ complex result requires a complex argument.\n  Replace x^y with (x+0im)^y, Complex(x)^y,\
    \ or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n     @\
    \ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3] ^\n\
    \     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main /tmp/tmpt52_9bfq.jl:20\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpt52_9bfq.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpt52_9bfq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpt52_9bfq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  DomainError with -64.0:\n  Exponentiation yielding\
    \ a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n "
  timestamp: 1659978877
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    f = false\n    if a == 0\n       \
    \ f = true\n    elseif a > 0\n        if trunc(Int64,a^(1/3)) == a^(1/3)\n   \
    \         f = true\n        end\n    elseif a < 0\n        a = abs(a)\n      \
    \  if trunc(Int64,a^(1/3)) == a^(1/3)\n            f = true\n        end\n   \
    \ end\n    return f\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpidth4t5a.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpidth4t5a.jl:43\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpidth4t5a.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpidth4t5a.jl:39\ntest set: Test Failed at /tmp/tmpidth4t5a.jl:45\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidth4t5a.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidth4t5a.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978876
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    b = isqrt(abs(a))\n    return (b^2\
    \ == abs(a))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbitcyduv.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpbitcyduv.jl:33\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbitcyduv.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbitcyduv.jl:27\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978876
- exit_code: -1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # your code here\nend\nisCube(x::Int64)\
    \ = (Int64(cbrt(x))^3 == x)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpc8jun0c2.jl:28\n  Test threw
    exception\n  Expression: candidate(1) == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    iscube(a::Int64)\n     @ Main /tmp/tmpc8jun0c2.jl:21\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpc8jun0c2.jl:28 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpc8jun0c2.jl:27\ntest set: Error During Test at
    /tmp/tmpc8jun0c2.jl:29\n  Test threw exception\n  Expression: candidate(2) ==
    false\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    iscube(a::Int64)\n     @ Main /tmp/tmpc8jun0c2.jl:21\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpc8jun0c2.jl:29 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpc8jun0c2.jl:27\ntest set: Error During Test at
    /tmp/tmpc8jun0c2.jl:30\n  Test threw exc'
  timestamp: 1659978879
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 return true end\n    if\
    \ a < 0 return iscube(-a) end\n    return int64(ceil(cbrt(a)))^3 == a\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpuyoe7ls8.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpuyoe7ls8.jl:29\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: int64 not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpuyoe7ls8.jl:22\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpuyoe7ls8.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuyoe7ls8.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpuyoe7ls8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: int64 not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmpuyoe7ls8.jl:22\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpuyoe7ls8.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuyoe7ls8.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpuyoe7ls8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: int64 not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmpuyoe7ls8.jl:22\n   [2] iscube(a::Int64)\n\
    \     @ Main /tmp/tmpuyoe7ls8.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuyoe7ls8.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuyoe7ls8.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpuyoe7ls8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: int64 not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmpuyoe7ls8.jl:22\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]"
  timestamp: 1659978877
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    for i in 1:100\n        if i^3 ==\
    \ a\n            return true\n        end\n    end\n    return false\nend\nfor\
    \ i in 0:10\n    @show iscube(i)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqd5s2sp4.jl:32

    '
  stdout: "iscube(i) = false\niscube(i) = true\niscube(i) = false\niscube(i) = false\n\
    iscube(i) = false\niscube(i) = false\niscube(i) = false\niscube(i) = false\niscube(i)\
    \ = true\niscube(i) = false\niscube(i) = false\ntest set: Test Failed at /tmp/tmpqd5s2sp4.jl:37\n\
    \  Expression: candidate(-1) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd5s2sp4.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqd5s2sp4.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpqd5s2sp4.jl:41\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd5s2sp4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqd5s2sp4.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978876
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    n = Int64(floor(abs(a)^(1/3)))\n \
    \   return n*n*n == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp60krvig1.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp60krvig1.jl:30\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp60krvig1.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp60krvig1.jl:27\ntest set: Test Failed at /tmp/tmp60krvig1.jl:31\n\
    \  Expression: candidate(64) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp60krvig1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp60krvig1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp60krvig1.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp60krvig1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp60krvig1.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978877
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n\
    \    end\n    if a > 0 \n        return isapprox(Int64(round(a^(1/3))), a^(1/3))\n\
    \    else\n        return isapprox(Int64(round(a^(1/3))), a^(1/3))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp14_ootpv.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp14_ootpv.jl:36\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmp14_ootpv.jl:26\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp14_ootpv.jl:36 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp14_ootpv.jl:33\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659978878
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a >= 0 \n        if a == 0\n  \
    \          return true\n        else\n            i = 0\n            while i^3\
    \ <= a\n                if i^3 == a\n                    return true\n       \
    \         end\n                i += 1\n            end\n            return false\n\
    \        end\n    else\n        return iscube(-a)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978875
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    return a % abs(round(Int64, cubrt(a))) == 0\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmptzhqgwvo.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmptzhqgwvo.jl:30\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: cubrt not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmptzhqgwvo.jl:23\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptzhqgwvo.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptzhqgwvo.jl:29\ntest set:\
    \ Error During Test at /tmp/tmptzhqgwvo.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: cubrt not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmptzhqgwvo.jl:23\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptzhqgwvo.jl:31 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptzhqgwvo.jl:29\ntest set:\
    \ Error During Test at /tmp/tmptzhqgwvo.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: cubrt not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmptzhqgwvo.jl:23\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptzhqgwvo.jl:32 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptzhqgwvo.jl:29\ntest set:\
    \ Error During Test at /tmp/tmptzhqgwvo.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: cubrt not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmptzhqgwvo.jl:23\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptzhqgwvo.jl:33 [inli"
  timestamp: 1659978878
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    b = abs(a)\n    c = Int64(ceil(Int64,1/3*(b+1)))\n    d = c^3\n \
    \   if a == d\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpulqopnih.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpulqopnih.jl:39\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpulqopnih.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpulqopnih.jl:36\ntest set: Test Failed at /tmp/tmpulqopnih.jl:40\n\
    \  Expression: candidate(64) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpulqopnih.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpulqopnih.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpulqopnih.jl:42\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpulqopnih.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpulqopnih.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978877
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a==abs(a) && (a==0 || floor(cbrt(a))^3==a)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvioqs5t6.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpvioqs5t6.jl:29\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvioqs5t6.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvioqs5t6.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978877
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a==0\n        return true\n   \
    \ end\n    if a<0\n        a=-a\n    end\n    n=round(Int64,nthroot(a,3))\n  \
    \  return n^3==a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpumqadd3h.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpumqadd3h.jl:34\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: nthroot not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpumqadd3h.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpumqadd3h.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpumqadd3h.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpumqadd3h.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: nthroot not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpumqadd3h.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpumqadd3h.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpumqadd3h.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpumqadd3h.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: nthroot not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpumqadd3h.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpumqadd3h.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpumqadd3h.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpumqadd3h.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: nthroot not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpumqadd3h.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpumqadd3h.jl:"
  timestamp: 1659978878
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a >= 0\n        return a == 0 ?\
    \ true : Int64(round(Int, a^(1/3)))^3 == a\n    else\n        return iscube(-a)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978875
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a > 0\n        return isinteger(Int64(round(a^(1/3))))\
    \ \n    elseif a == 0\n        return true\n    else\n        return isinteger(Int64(round(abs(a)^(1/3))))\
    \ \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjup_vv_s.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpjup_vv_s.jl:34\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjup_vv_s.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjup_vv_s.jl:32\ntest set: Test Failed at /tmp/tmpjup_vv_s.jl:37\n\
    \  Expression: candidate(180) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjup_vv_s.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjup_vv_s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjup_vv_s.jl:40\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjup_vv_s.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjup_vv_s.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978877
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return ispowerof(a, 3)\nend\n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp1hc2ad1x.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp1hc2ad1x.jl:29\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: ispowerof not defined\n\
    \  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmp1hc2ad1x.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1hc2ad1x.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1hc2ad1x.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1hc2ad1x.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: ispowerof not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp1hc2ad1x.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1hc2ad1x.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1hc2ad1x.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1hc2ad1x.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: ispowerof not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp1hc2ad1x.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1hc2ad1x.jl:31 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1hc2ad1x.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1hc2ad1x.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: ispowerof not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp1hc2ad1x.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1hc2"
  timestamp: 1659978879
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a<0\n        a = -a\n    end\n\
    \    return isqrt(a)^3 == a \nend\n \n@testset \"Test the function cube of\" begin\n\
    \    @test iscube(64)\n    @test !iscube(2)\n    @test iscube(-27)\n    @test\
    \ iscube(0)\n    @test !iscube(97)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpuzswbavm.jl:26

    in expression starting at /tmp/tmpuzswbavm.jl:26

    '
  stdout: ''
  timestamp: 1659978877
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a^(1/3) % 1 == 0 #if the 1/3\
    \ power of a has no remainder, it is a cube number\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpmrf_1ba1.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpmrf_1ba1.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpmrf_1ba1.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpmrf_1ba1.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpmrf_1ba1.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpmrf_1ba1.jl:30\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrf_1ba1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrf_1ba1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmrf_1ba1.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrf_1ba1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrf_1ba1.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  timestamp: 1659978879
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    for i in 1:a\n        if i*i*i ==\
    \ a\n            return true\n        end\n    end\n    return false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmda_g460.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpmda_g460.jl:34\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmda_g460.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmda_g460.jl:31\ntest set: Test Failed at /tmp/tmpmda_g460.jl:38\n\
    \  Expression: candidate(0) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmda_g460.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmda_g460.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978878
- exit_code: -1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # todo...\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.\nin expression starting at /tmp/tmp8vbqvkfp.jl:24\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmp8vbqvkfp.jl:27\n  Test threw
    exception\n  Expression: candidate(1) == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    iscube(a::Int64)\n     @ Main /tmp/tmp8vbqvkfp.jl:21\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8vbqvkfp.jl:27 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8vbqvkfp.jl:26\ntest set: Error During Test at
    /tmp/tmp8vbqvkfp.jl:28\n  Test threw exception\n  Expression: candidate(2) ==
    false\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    iscube(a::Int64)\n     @ Main /tmp/tmp8vbqvkfp.jl:21\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8vbqvkfp.jl:28 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8vbqvkfp.jl:26\ntest set: Error During Test at
    /tmp/tmp8vbqvkfp.jl:29\n  Test threw exc'
  timestamp: 1659978880
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if isodd(a)\n        return false\n\
    \    end\n    b = a / 2\n    while b > 0\n        if (b * b * b) == a\n      \
    \      return true\n        end\n        b -= 1\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxvod_ubo.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpxvod_ubo.jl:37\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxvod_ubo.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxvod_ubo.jl:36\ntest set: Test Failed at /tmp/tmpxvod_ubo.jl:39\n\
    \  Expression: candidate(-1) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvod_ubo.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvod_ubo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxvod_ubo.jl:43\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvod_ubo.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvod_ubo.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978878
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    \"\"\"\n    Test if a is a cube of\
    \ some integer number.\n    \"\"\"\n    for x in 1:a\n        if x^3 == a\n  \
    \          return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjmowrqry.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpjmowrqry.jl:37\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjmowrqry.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjmowrqry.jl:34\ntest set: Test Failed at /tmp/tmpjmowrqry.jl:41\n\
    \  Expression: candidate(0) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjmowrqry.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjmowrqry.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978878
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        return iscube(-a)\n\
    \    end\n    if a < 2\n        return true\n    end\n    lo = 2\n    hi = a\n\
    \    while lo <= hi\n        mid = (lo + hi) >> 1\n        val = mid^3\n     \
    \   if val == a\n            return true\n        elseif val < a\n           \
    \ lo = mid + 1\n        else\n            hi = mid - 1\n        end\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978876
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    b = sqrt(abs(a))\n    if b % 1 ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb_08frkz.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpb_08frkz.jl:37\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb_08frkz.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpb_08frkz.jl:31\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978878
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    b = int64(floor(pow(abs(a),1/3)));\n\
    \    return (a == b*b*b)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpyhihrfy5.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpyhihrfy5.jl:28\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpyhihrfy5.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpyhihrfy5.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyhihrfy5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyhihrfy5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: pow not defined\n  Stacktrace:\n   [1]\
    \ iscube(a::Int64)\n     @ Main /tmp/tmpyhihrfy5.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpyhihrfy5.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyhihrfy5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyhihrfy5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n   [1]\
    \ iscube(a::Int64)\n     @ Main /tmp/tmpyhihrfy5.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpyhihrfy5.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyhihrfy5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyhihrfy5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: pow not defined\n  Stacktrace:\n   [1]\
    \ iscube(a::Int64)\n     @ Main /tmp/tmpyhihrfy5.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpyhihrfy5.jl:31 [inlined]\n   "
  timestamp: 1659978880
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a<0 \n        a = -a\n    end\n\
    \    if a == 0\n        return true\n    end\n    x = 1\n    while x^3 < a\n \
    \       x = x+1\n    end\n    return x^3 == a\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978877
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if(a==0)\n        return true\n  \
    \  end\n    if(a<0)\n        a=-a\n    end\n    for i=0:a\n        if(i^3==a)\n\
    \            return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978877
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    iscube = false\n    for i in 2:a-1\n\
    \        if i^3 == a\n            iscube = true\n        end\n    end\n    return\
    \ iscube\nend\niscube(64)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzlfigd2p.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzlfigd2p.jl:34\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzlfigd2p.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzlfigd2p.jl:33\ntest set: Test Failed at /tmp/tmpzlfigd2p.jl:36\n\
    \  Expression: candidate(-1) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzlfigd2p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzlfigd2p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpzlfigd2p.jl:40\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzlfigd2p.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzlfigd2p.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978879
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    (a > 0) && (floor(cbrt(a)) == cbrt(a))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0njds64e.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp0njds64e.jl:29\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0njds64e.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0njds64e.jl:26\ntest set: Test Failed at /tmp/tmp0njds64e.jl:33\n\
    \  Expression: candidate(0) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0njds64e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0njds64e.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978879
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a==0\n        return true\n   \
    \ end\n    if a<0\n        a = -a\n    end\n    i = 1\n    while i<=a\n      \
    \  if i*i*i==a\n            return true\n        end\n        i = i+1\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978877
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n\
    \    end\n    # \n    if a < 0 \n        a = -a\n    end\n    # \n    x = a^(1/3)\n\
    \    if x%1 == 0\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzxfnt2s_.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpzxfnt2s_.jl:43\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzxfnt2s_.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzxfnt2s_.jl:39\ntest set: Test Failed at /tmp/tmpzxfnt2s_.jl:45\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzxfnt2s_.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxfnt2s_.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978879
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    cube = Int64(round(a^(1/3)))\n    if cube^3 == a\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpxe76op3u.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpxe76op3u.jl:37\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpxe76op3u.jl:23\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxe76op3u.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxe76op3u.jl:34\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659978880
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return isinteger(a^(1/3))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp5j8icj8q.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp5j8icj8q.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmp5j8icj8q.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5j8icj8q.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5j8icj8q.jl:26\ntest set:\
    \ Test Failed at /tmp/tmp5j8icj8q.jl:30\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5j8icj8q.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5j8icj8q.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5j8icj8q.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5j8icj8q.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5j8icj8q.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  timestamp: 1659978881
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n     a_sqrt = (a)^(1/3)\n     return (a_sqrt\
    \ % 1 == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpjce8ok9d.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpjce8ok9d.jl:30\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpjce8ok9d.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjce8ok9d.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjce8ok9d.jl:27\ntest set:\
    \ Test Failed at /tmp/tmpjce8ok9d.jl:31\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjce8ok9d.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjce8ok9d.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjce8ok9d.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjce8ok9d.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjce8ok9d.jl:27\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  timestamp: 1659978881
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a==0 \n        return true\n  \
    \  elseif a>0\n        m=floor(Int64,round(a^(1/3)))\n        if m^3==a\n    \
    \        return true\n        else\n            return false\n        end\n  \
    \  elseif a<0\n        m=floor(Int64,round(abs(a)^(1/3)))\n        if m^3==abs(a)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    iscube(a) = iszero(round(a^(1/3) -\
    \ Int64(a^(1/3))))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmptwcpii28.jl:27\n  Test threw
    exception\n  Expression: candidate(1) == true\n  MethodError: Cannot `convert`
    an object of type var"#iscube#1" to an object of type Bool\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    iscube(a::Int64)\n     @ Main /tmp/tmptwcpii28.jl:20\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmptwcpii28.jl:27 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmptwcpii28.jl:26\ntest set: Error During Test at
    /tmp/tmptwcpii28.jl:28\n  Test threw exception\n  Expression: candidate(2) ==
    false\n  MethodError: Cannot `convert` an object of type var"#iscube#1" to an
    object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    iscube(a::Int64)\n     @ Main /tmp/tmptwcpii28.jl:20\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmptwcpii28.jl:28 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmptwcpii28.jl:26\ntest set: Error During Test at
    /tmp/tmptwcpii28.jl:29\n  '
  timestamp: 1659978882
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    i = 0\n    while i<a \n        i =\
    \ i+1\n        if i^3 == a\n            return true\n        end\n    end\n  \
    \  return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2bm1iab0.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp2bm1iab0.jl:36\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2bm1iab0.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2bm1iab0.jl:33\ntest set: Test Failed at /tmp/tmp2bm1iab0.jl:40\n\
    \  Expression: candidate(0) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bm1iab0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bm1iab0.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978880
- exit_code: -1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a >= 0 && typeof(Int64) ==\
    \ typeof(Int64) && isinteger(Int64) && Int64 == Int64^3\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpel5g5192.jl:27\n  Test threw
    exception\n  Expression: candidate(1) == true\n  MethodError: no method matching
    isinteger(::Type{Int64})\n  Closest candidates are:\n    isinteger(!Matched::Integer)
    at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)
    at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)
    at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n   [1]
    iscube(a::Int64)\n     @ Main /tmp/tmpel5g5192.jl:20\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpel5g5192.jl:27 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpel5g5192.jl:26\ntest set: Error During Test at
    /tmp/tmpel5g5192.jl:28\n  Test threw exception\n  Expression: candidate(2) ==
    false\n  MethodError: no method matching isinteger(::Type{Int64})\n  Closest candidates
    are:\n    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)
    at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)
    at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n   [1]
    iscube(a::Int64)\n     @ Main /tmp/tmpel5g5192.jl:20\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpel5g5192.jl:28 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpel5g5192.jl:26\ntest set: Test Failed at /tmp/tmpel5g5192.jl:29\n  Expression:
    candidate(-1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2'
  timestamp: 1659978883
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a<0\n        a = -a\n    end\n    b = trunc(Int64, cbrt(a))\n\
    \    return a == b*b*b\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    #your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp44bw4ze_.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp44bw4ze_.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmp44bw4ze_.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44bw4ze_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44bw4ze_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp44bw4ze_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmp44bw4ze_.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44bw4ze_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44bw4ze_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp44bw4ze_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n"
  timestamp: 1659978882
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a==0 return true end\n    if a<0\
    \ a = -a end\n    for i=0:a \n        if i^3 == a return true end\n    end\n \
    \   return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a > 0\n        i = 0\n        j = a\n    else\n        i = a\n\
    \        j = 0\n    end\n    for k in i:j\n        if k^3 == a\n            return\
    \ true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        return iscube(-a)\n\
    \    end\n    num = floor(Int64, cbrt(a))\n    return num^3 == a\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return (sqrt(a)%1)==0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpan5hd61b.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpan5hd61b.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  sqrt will only\
    \ return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3]\
    \ sqrt\n     @ ./math.jl:1221 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpan5hd61b.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpan5hd61b.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpan5hd61b.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpan5hd61b.jl:32\n  Expression: candidate(1000) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpan5hd61b.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpan5hd61b.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    6     1      1      8\n"
  timestamp: 1659978882
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    \"\"\"\n    TODO: docstring\n    \"\
    \"\"\n    if a>0\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0ofk3q4p.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp0ofk3q4p.jl:35\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0ofk3q4p.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0ofk3q4p.jl:33\ntest set: Test Failed at /tmp/tmp0ofk3q4p.jl:36\n\
    \  Expression: candidate(-1) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ofk3q4p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ofk3q4p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0ofk3q4p.jl:38\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ofk3q4p.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ofk3q4p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0ofk3q4p.jl:40\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ofk3q4p.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ofk3q4p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0ofk3q4p.jl:41\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ofk3q4p.jl:41 [in"
  timestamp: 1659978881
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a = abs(a)\n    i = Int64(floor(cbrt(a)))\n\
    \    return a == i^3\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a == floor(a) ? true : false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcq8zprv3.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpcq8zprv3.jl:28\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcq8zprv3.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcq8zprv3.jl:26\ntest set: Test Failed at /tmp/tmpcq8zprv3.jl:31\n\
    \  Expression: candidate(180) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcq8zprv3.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcq8zprv3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcq8zprv3.jl:34\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcq8zprv3.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcq8zprv3.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978881
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return (abs(a)==a^(1/3))&&(floor(a^(1/3))==a^(1/3))\n\
    end\niscube(0)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpnmlk3uvr.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpnmlk3uvr.jl:30\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpnmlk3uvr.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpnmlk3uvr.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpnmlk3uvr.jl:27\ntest set:\
    \ Test Failed at /tmp/tmpnmlk3uvr.jl:31\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnmlk3uvr.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnmlk3uvr.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpnmlk3uvr.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnmlk3uvr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnmlk3uvr.jl:27\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  timestamp: 1659978883
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a == 0 && return true\n    a < 0 &&\
    \ (a = -a)\n    r = Int64(round(Int64, (a^(1/3))))\n    r^3 == a\nend\n# Python\n\
    def iscube(a):\n    if a == 0:\n        return True\n    elif a < 0:\n       \
    \ a = -a\n    r = int(round(a**(1/3)))\n    return r**3 == a\n \nis_cube = iscube\n\
    \ \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n \n\
    \    for i in range(-10, 15):\n        print(\"iscube({}) -> {}\".format(i, iscube(i)))\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"iscube\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp73hksloy.jl:26\nin expression\
    \ starting at /tmp/tmp73hksloy.jl:26\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return (a>=0)&&(floor(cbrt(a))^3==a)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt7cipa39.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpt7cipa39.jl:29\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt7cipa39.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt7cipa39.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978881
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 || a == 1 || a == -1\n \
    \       return true\n    end\n    for i = 2:abs(a)\n        if i^3 == abs(a)\n\
    \            return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    # check if a is a perfect cube\n    a = abs(a)\n    return a == isqrt(a)^3\n\
    end\n# unit test\na = [-1, 0, 1, 2, 8, 27, 64, 69, 72, 77, 125, -1000, -27, 1000]\n\
    for i in a\n    println(iscube(i))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptilzb73n.jl:34

    '
  stdout: "true\ntrue\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n\
    false\nfalse\nfalse\ntest set: Test Failed at /tmp/tmptilzb73n.jl:40\n  Expression:\
    \ candidate(64) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptilzb73n.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptilzb73n.jl:36\ntest set: Test\
    \ Failed at /tmp/tmptilzb73n.jl:42\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptilzb73n.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptilzb73n.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978881
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a > 0\n        for i in 1:a/2+1\n\
    \            if i^3 == a\n                return true\n            end\n     \
    \   end\n        return false\n    else\n        for i in 1:a*-1/2+1\n       \
    \     if i^3 == a\n                return true\n            end\n        end\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2x9eypkr.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp2x9eypkr.jl:43\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2x9eypkr.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2x9eypkr.jl:40\ntest set: Test Failed at /tmp/tmp2x9eypkr.jl:47\n\
    \  Expression: candidate(0) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2x9eypkr.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2x9eypkr.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978882
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    d = sqrt(a)\n    if d^2 != a return\
    \ false end\n    d = round(d)\n    return d^3 == a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp08rmt21k.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp08rmt21k.jl:32\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  sqrt will only\
    \ return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3]\
    \ sqrt\n     @ ./math.jl:1221 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmp08rmt21k.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp08rmt21k.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp08rmt21k.jl:29\ntest set:\
    \ Test Failed at /tmp/tmp08rmt21k.jl:33\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp08rmt21k.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp08rmt21k.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp08rmt21k.jl:35\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp08rmt21k.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp08rmt21k.jl:29\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  timestamp: 1659978883
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    for i in 0:a \n        if i^3 == a\
    \ \n            return true \n        end\n    end\n    return false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgxw3fb2f.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpgxw3fb2f.jl:34\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgxw3fb2f.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgxw3fb2f.jl:31\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978881
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    if a<0\n        a = -a\n    end\n    for i = 1:Int64(floor(a^(1/3))+1)\n\
    \        if i^3 == a\n            return true\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 || (a % 2 == 1 && ispow(a,\
    \ 3))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpfr5iqzy9.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpfr5iqzy9.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: ispow not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpfr5iqzy9.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpfr5iqzy9.jl:27 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfr5iqzy9.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpfr5iqzy9.jl:29\n  Expression: candidate(-1) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfr5iqzy9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfr5iqzy9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfr5iqzy9.jl:30\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfr5iqzy9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfr5iqzy9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfr5iqzy9.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfr5iqzy9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfr5iqzy9.jl:26\ntest set: Error\
    \ During Test at /tmp/tmpfr5iqzy9.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1729) == false\n  UndefVarError: ispow not defined\n  Stacktrace:\n\
    \   [1"
  timestamp: 1659978883
- exit_code: -1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    c = abs(a)\n    while c % 3 == 0\n\
    \        c = c / 3\n    end\n    c == 1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpnu9yl8g8.jl:34\n  Expression: candidate(64)
    == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpnu9yl8g8.jl:34 [inlined]\n [3] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpnu9yl8g8.jl:30\ntest set: Test Failed at /tmp/tmpnu9yl8g8.jl:36\n  Expression:
    candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpnu9yl8g8.jl:36 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpnu9yl8g8.jl:30\n'''
  timestamp: 1659978885
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a>=0 ? Int64(round(Int, a^(1/3)))^3\
    \ == a : a^3 == -1\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    b = round(Int64, a ^ (1/3))\n    if\
    \ a == b ^ 3\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpomy_it4x.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpomy_it4x.jl:34\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpomy_it4x.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpomy_it4x.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpomy_it4x.jl:31\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659978883
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a<0\n        a=-a\n    end\n  \
    \  i=0\n    while a>i*i*i\n        i+=1\n    end\n    return a==i*i*i\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978881
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a < 0 && return true \n    i = 1\n\
    \    while a >= i^3 \n        i += 1\n    end\n    i^3 == a\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpogc9k5sp.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpogc9k5sp.jl:32\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpogc9k5sp.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpogc9k5sp.jl:31\ntest set: Test Failed at /tmp/tmpogc9k5sp.jl:35\n\
    \  Expression: candidate(64) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpogc9k5sp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogc9k5sp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpogc9k5sp.jl:37\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpogc9k5sp.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogc9k5sp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpogc9k5sp.jl:38\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpogc9k5sp.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogc9k5sp.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659978883
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0\n        return true\n \
    \   end\n    return (floor(Int64, (abs(a)^(1/3)))^3) == abs(a)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc7g0gtqk.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpc7g0gtqk.jl:33\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc7g0gtqk.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc7g0gtqk.jl:29\ntest set: Test Failed at /tmp/tmpc7g0gtqk.jl:35\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc7g0gtqk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc7g0gtqk.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978883
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return sqrt(a) % 1 == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpq1k26zlc.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpq1k26zlc.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  sqrt will only\
    \ return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3]\
    \ sqrt\n     @ ./math.jl:1221 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpq1k26zlc.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpq1k26zlc.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpq1k26zlc.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpq1k26zlc.jl:32\n  Expression: candidate(1000) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq1k26zlc.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq1k26zlc.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    6     1      1      8\n"
  timestamp: 1659978884
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    i = 1\n    while i<a\n        if i^3\
    \ == a\n            return true\n        end\n        i+=1\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy8lf3npi.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpy8lf3npi.jl:34\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy8lf3npi.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpy8lf3npi.jl:33\ntest set: Test Failed at /tmp/tmpy8lf3npi.jl:36\n\
    \  Expression: candidate(-1) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8lf3npi.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8lf3npi.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpy8lf3npi.jl:40\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8lf3npi.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8lf3npi.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978883
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    i = 1\n    while i*i*i < a\n     \
    \   i += 1\n    end\n    return i*i*i == a\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpum3hofsg.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpum3hofsg.jl:33\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpum3hofsg.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpum3hofsg.jl:30\ntest set: Test Failed at /tmp/tmpum3hofsg.jl:37\n\
    \  Expression: candidate(0) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpum3hofsg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpum3hofsg.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978883
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return sqrt(a) % 1 == 0 ? true : false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpbwkg1s1y.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpbwkg1s1y.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  sqrt will only\
    \ return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3]\
    \ sqrt\n     @ ./math.jl:1221 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpbwkg1s1y.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpbwkg1s1y.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpbwkg1s1y.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpbwkg1s1y.jl:32\n  Expression: candidate(1000) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbwkg1s1y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbwkg1s1y.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    6     1      1      8\n"
  timestamp: 1659978885
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    t = true\n    if (a > 0)\n       \
    \ if (a % Int(ceil(sqrt(a))) == 0)\n            if (a % Int(ceil(sqrt(a))) ==\
    \ 0)\n                return true\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    else\n\
    \        if (a == 0)\n            return true\n        else\n            if (a\
    \ % Int(ceil(sqrt(a))) == 0)\n                if (a % Int(ceil(sqrt(a))) == 0)\n\
    \                    return true\n                else\n                    return\
    \ false\n                end\n            else\n                return false\n\
    \            end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpdhxa3s_i.jl:49

    '
  stdout: "test set: Test Failed at /tmp/tmpdhxa3s_i.jl:53\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdhxa3s_i.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdhxa3s_i.jl:51\ntest set: Error During Test\
    \ at /tmp/tmpdhxa3s_i.jl:54\n  Test threw exception\n  Expression: candidate(-1)\
    \ == true\n  DomainError with -1.0:\n  sqrt will only return a complex result\
    \ if called with a complex argument. Try sqrt(Complex(x)).\n  Stacktrace:\n  \
    \ [1] throw_complex_domainerror(f::Symbol, x::Float64)\n     @ Base.Math ./math.jl:33\n\
    \   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3] sqrt\n     @ ./math.jl:1221\
    \ [inlined]\n   [4] iscube(a::Int64)\n     @ Main /tmp/tmpdhxa3s_i.jl:35\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpdhxa3s_i.jl:54 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpdhxa3s_i.jl:51\ntest set:\
    \ Test Failed at /tmp/tmpdhxa3s_i.jl:57\n  Expression: candidate(1000) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdhxa3s_i.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdhxa3s_i.jl:51\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  timestamp: 1659978885
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    max_cube = 10\n    arr = [i^3 for\
    \ i in 1:max_cube]\n    return a in arr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxaitcroh.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpxaitcroh.jl:31\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxaitcroh.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxaitcroh.jl:28\ntest set: Test Failed at /tmp/tmpxaitcroh.jl:35\n\
    \  Expression: candidate(0) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxaitcroh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxaitcroh.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978884
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # a must be >= 0\n    cbrt(a) == round(cbrt(a))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978882
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    z = sqrt(abs(a))\n    if z * z * z\
    \ == abs(a)\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq8obn7q5.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpq8obn7q5.jl:35\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq8obn7q5.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq8obn7q5.jl:31\ntest set: Test Failed at /tmp/tmpq8obn7q5.jl:37\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq8obn7q5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq8obn7q5.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978884
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a == 0 ? return true\n    abs(a) ==\
    \ a^3 ? return true\n    false\nend\n# non integer input\niscube(1.0)\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7z_x9h4.jl:21\nin expression starting at\
    \ /tmp/tmpa7z_x9h4.jl:21\n"
  stdout: ''
  timestamp: 1659978883
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a >= 0\n        sqrta = sqrt(a)\n\
    \        if sqrta % 1 == 0\n            return true\n        else \n         \
    \   return false\n        end\n    else \n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7hta3r80.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp7hta3r80.jl:38\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7hta3r80.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7hta3r80.jl:35\ntest set: Test Failed at /tmp/tmp7hta3r80.jl:41\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7hta3r80.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7hta3r80.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978884
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    cub=Int64(floor(a^(1/3)))\n    if\
    \ a==0 \n        return true\n    elseif a>0 \n        if a==cub^3 \n        \
    \    return true\n        else\n            return false\n        end\n    else\
    \ \n        if a==(-cub)^3 \n            return true\n        else\n         \
    \   return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpmpgeah57.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpmpgeah57.jl:44\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpmpgeah57.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpmpgeah57.jl:44 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpmpgeah57.jl:41\ntest set:\
    \ Test Failed at /tmp/tmpmpgeah57.jl:45\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmpgeah57.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmpgeah57.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpmpgeah57.jl:47\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmpgeah57.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmpgeah57.jl:41\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  timestamp: 1659978886
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return issqrt(abs(a))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6fhw2t_m.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp6fhw2t_m.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: issqrt not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp6fhw2t_m.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6fhw2t_m.jl:27 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fhw2t_m.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6fhw2t_m.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: issqrt not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp6fhw2t_m.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6fhw2t_m.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fhw2t_m.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6fhw2t_m.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: issqrt not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp6fhw2t_m.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6fhw2t_m.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fhw2t_m.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6fhw2t_m.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: issqrt not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp6fhw2t_m.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6fhw2t_m.jl:30 ["
  timestamp: 1659978885
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # keep reducing a by 1, by dividing\
    \ it by k, incrementing k\n    # until a is either 0 or 1.\n    k = 1\n    while\
    \ a > 1\n        a -= 1\n        a /= k\n        k += 1\n    end\n    a == 0 ?\
    \ true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1nk40okb.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp1nk40okb.jl:35\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1nk40okb.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1nk40okb.jl:34\ntest set: Test Failed at /tmp/tmp1nk40okb.jl:37\n\
    \  Expression: candidate(-1) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1nk40okb.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1nk40okb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp1nk40okb.jl:38\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1nk40okb.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1nk40okb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp1nk40okb.jl:40\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1nk40okb.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1nk40okb.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659978884
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 ? true : (floor(cbrt(a))^3\
    \ == a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978883
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        a = -a\n    end\n\
    \    i = 0\n    if a == 0\n        return true\n    end\n    while i^3 < a\n \
    \       i += 1\n    end\n    return i^3 == a\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978883
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a >= 0\n        for i in 0:sqrt(a)\n\
    \            if i^3 == a\n                return true\n            end\n     \
    \   end\n        return false\n    else\n        return iscube(-a)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978883
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # YOUR CODE HERE\n    return round(a^(1/3))^3\
    \ == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmppisnlcms.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmppisnlcms.jl:30\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmppisnlcms.jl:21\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmppisnlcms.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmppisnlcms.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659978886
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    a = abs(a)\n    if iscube_using_log(a)\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6lxxh64k.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp6lxxh64k.jl:32\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: iscube_using_log not defined\n\
    \  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmp6lxxh64k.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6lxxh64k.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6lxxh64k.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp6lxxh64k.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: iscube_using_log not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp6lxxh64k.jl:21\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6lxxh64k.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6lxxh64k.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp6lxxh64k.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: iscube_using_log not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp6lxxh64k.jl:21\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6lxxh64k.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6lxxh64k.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp6lxxh64k.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: iscube_using_log not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp6lxxh64k.jl:21\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro e"
  timestamp: 1659978886
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        a = -a\n    end\n\
    \    for x in 1:a\n        if x*x*x == a\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6fekbrov.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp6fekbrov.jl:41\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6fekbrov.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6fekbrov.jl:34\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978885
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 return true end\n    if\
    \ a < 0 return false end\n    return (x->x^3 == a)(round(a^(1/3)))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg3yxgqv4.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpg3yxgqv4.jl:31\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg3yxgqv4.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpg3yxgqv4.jl:28\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978885
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == ceil(Int64, (abs(a))^(1/3))^3\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbbqx8w75.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpbbqx8w75.jl:29\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbbqx8w75.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbbqx8w75.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978885
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    c = round(Int64, (a^(1/3)))\n    cube\
    \ = c^3\n    if cube == a\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw_zyrz4f.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpw_zyrz4f.jl:35\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpw_zyrz4f.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpw_zyrz4f.jl:35 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpw_zyrz4f.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659978886
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # write your code here\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd0htm9mp.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpd0htm9mp.jl:29\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd0htm9mp.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpd0htm9mp.jl:27\ntest set: Test Failed at /tmp/tmpd0htm9mp.jl:32\n\
    \  Expression: candidate(180) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd0htm9mp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd0htm9mp.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpd0htm9mp.jl:35\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd0htm9mp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd0htm9mp.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978886
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    # Your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpl_i6byba.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpl_i6byba.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmpl_i6byba.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_i6byba.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_i6byba.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpl_i6byba.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmpl_i6byba.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_i6byba.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_i6byba.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpl_i6byba.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n"
  timestamp: 1659978888
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    temp = round(Int64, a^(1/3))\n   \
    \ return a == temp^3\nend\niscube(1)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpxpicx717.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpxpicx717.jl:31\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpxpicx717.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxpicx717.jl:31 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxpicx717.jl:28\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659978887
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return (a==0 || (a > 0) && (a == round(a^(1/3))))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_6or4z5i.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp_6or4z5i.jl:29\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_6or4z5i.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_6or4z5i.jl:26\ntest set: Test Failed at /tmp/tmp_6or4z5i.jl:30\n\
    \  Expression: candidate(64) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_6or4z5i.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_6or4z5i.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_6or4z5i.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_6or4z5i.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_6or4z5i.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978886
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    \n    if a < 0\n        a = -a\n \
    \   end\n    \n    x = round(Int64,a^(1/3))\n    \n    if x^3 == a\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978884
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a%8 == 0\n        if a == (a^(1/3))^3\n\
    \            return true\n        else\n            return false\n        end\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0fp0nmhl.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp0fp0nmhl.jl:35\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0fp0nmhl.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0fp0nmhl.jl:34\ntest set: Test Failed at /tmp/tmp0fp0nmhl.jl:37\n\
    \  Expression: candidate(-1) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fp0nmhl.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fp0nmhl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0fp0nmhl.jl:38\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fp0nmhl.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fp0nmhl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0fp0nmhl.jl:40\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fp0nmhl.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fp0nmhl.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659978886
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if (a<0)\n        a=-a\n    end\n\
    \    for i in 1:a \n        if i^3==a\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvkx91r86.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpvkx91r86.jl:41\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvkx91r86.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvkx91r86.jl:34\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978886
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0 \n        a = -a\n    end\n\
    \    cbrta = cbrt(a)\n    cbrta = Int64(cbrta)\n    a == cbrta * cbrta * cbrta\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0y_bv4yd.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp0y_bv4yd.jl:33\n  Test threw exception\n\
    \  Expression: candidate(2) == false\n  InexactError: Int64(1.2599210498948732)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n\
    \     @ Main /tmp/tmp0y_bv4yd.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0y_bv4yd.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0y_bv4yd.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp0y_bv4yd.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(180) == false\n  InexactError: Int64(5.646216173286171)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n    \
    \ @ Main /tmp/tmp0y_bv4yd.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0y_bv4yd.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0y_bv4yd.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp0y_bv4yd.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(1729) == false\n  InexactError: Int64(12.002314368427685)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n    \
    \ @ Main /tmp/tmp0y_bv4yd.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0y_bv4yd.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0y_bv4yd.jl:31\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      3      8\n"
  timestamp: 1659978887
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 return true end\n    if\
    \ a < 0\n        a = -a\n    end\n    b = round(Int64,cbrt(a))\n    return b^3\
    \ == a ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if (a >= 0)\n        return Int64(sqrt(a))^2\
    \ == a #I'm using the fact that sqrt(a) returns a float64\n    else\n        return\
    \ Int64(sqrt(-a))^2 == -a #here, as a is negative, I have to explicity tell sqrt\
    \ to use it.\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpeol1v8vq.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpeol1v8vq.jl:32\n  Test threw exception\n\
    \  Expression: candidate(2) == false\n  InexactError: Int64(1.4142135623730951)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n\
    \     @ Main /tmp/tmpeol1v8vq.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeol1v8vq.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeol1v8vq.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpeol1v8vq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(180) == false\n  InexactError: Int64(13.416407864998739)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n    \
    \ @ Main /tmp/tmpeol1v8vq.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeol1v8vq.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeol1v8vq.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpeol1v8vq.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(1000) == true\n  InexactError: Int64(31.622776601683793)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] iscube(a::Int64)\n    \
    \ @ Main /tmp/tmpeol1v8vq.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeol1v8vq.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeol1v8vq.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpeol1v8vq.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(1729) == false\n  InexactError: Int64(41.58124577258358)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] isc"
  timestamp: 1659978887
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a>=0\n        return (round(Int64,a^(1/3)))^3==a\n\
    \    else \n        return (round(Int64,(-a)^(1/3)))^3==(-a)\n    end\nend\niscube(8)\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    cbrta = cbrt(a)\n    return (cbrta\
    \ - convert(Int64, cbrta) == 0) ? true : false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp26znh8my.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp26znh8my.jl:29\n  Test threw exception\n\
    \  Expression: candidate(2) == false\n  InexactError: Int64(1.2599210498948732)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] iscube(a::Int64)\n     @ Main /tmp/tmp26znh8my.jl:21\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp26znh8my.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp26znh8my.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp26znh8my.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(180) == false\n  InexactError: Int64(5.646216173286171)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] iscube(a::Int64)\n     @ Main /tmp/tmp26znh8my.jl:21\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp26znh8my.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp26znh8my.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp26znh8my.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(1729) == false\n  InexactError: Int64(12.002314368427685)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] iscube(a::Int64)\n     @ Main /tmp/tmp26znh8my.jl:21\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp26znh8my.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp26znh8my.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      3      8\n"
  timestamp: 1659978888
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return floor(Int64, a^(1/3))^3 ==\
    \ a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpv5erm3dl.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpv5erm3dl.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpv5erm3dl.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpv5erm3dl.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpv5erm3dl.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpv5erm3dl.jl:30\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv5erm3dl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv5erm3dl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpv5erm3dl.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv5erm3dl.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv5erm3dl.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  timestamp: 1659978889
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a >= 0\n        return isapprox(round(Float64(a)^(1/3)),Float64(a)^(1/3))\n\
    \    else \n        return isapprox(round(Float64(-a)^(1/3)),Float64(-a)^(1/3))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    sqrta = round(sqrt(a))\n    return\
    \ a % sqrta == 0 ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp5_0zdt5w.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp5_0zdt5w.jl:29\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5_0zdt5w.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5_0zdt5w.jl:27\ntest set: Error During Test\
    \ at /tmp/tmp5_0zdt5w.jl:30\n  Test threw exception\n  Expression: candidate(-1)\
    \ == true\n  DomainError with -1.0:\n  sqrt will only return a complex result\
    \ if called with a complex argument. Try sqrt(Complex(x)).\n  Stacktrace:\n  \
    \ [1] throw_complex_domainerror(f::Symbol, x::Float64)\n     @ Base.Math ./math.jl:33\n\
    \   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3] sqrt\n     @ ./math.jl:1221\
    \ [inlined]\n   [4] iscube(a::Int64)\n     @ Main /tmp/tmp5_0zdt5w.jl:20\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5_0zdt5w.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5_0zdt5w.jl:27\ntest set:\
    \ Test Failed at /tmp/tmp5_0zdt5w.jl:33\n  Expression: candidate(1000) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_0zdt5w.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_0zdt5w.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp5_0zdt5w.jl:34\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_0zdt5w.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/st"
  timestamp: 1659978889
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a >= 0 \n        return isequal(a,\
    \ sqrt(a) ^ 3)\n    else \n        return isequal(a, sqrt(-a) ^ 3)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3d389in_.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp3d389in_.jl:33\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3d389in_.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3d389in_.jl:30\ntest set: Test Failed at /tmp/tmp3d389in_.jl:34\n\
    \  Expression: candidate(64) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3d389in_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3d389in_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3d389in_.jl:36\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3d389in_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3d389in_.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978887
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    test = Int64(round(root(a,3)))\n \
    \   b = test^3\n    return b == a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp09fsob6u.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp09fsob6u.jl:29\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: root not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp09fsob6u.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp09fsob6u.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09fsob6u.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp09fsob6u.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: root not defined\n  Stacktrace:\n  \
    \ [1] iscube(a::Int64)\n     @ Main /tmp/tmp09fsob6u.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp09fsob6u.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09fsob6u.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp09fsob6u.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: root not defined\n  Stacktrace:\n  \
    \ [1] iscube(a::Int64)\n     @ Main /tmp/tmp09fsob6u.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp09fsob6u.jl:31 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09fsob6u.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp09fsob6u.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: root not defined\n  Stacktrace:\n  \
    \ [1] iscube(a::Int64)\n     @ Main /tmp/tmp09fsob6u.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp09fsob6u.jl:32 [inlined]"
  timestamp: 1659978889
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n\
    \    end\n    if a<0\n        return iscube(-a)\n    end\n    if a==1\n      \
    \  return true\n    end\n    @assert a>1\n    low = 1\n    high = a\n    while\
    \ low <= high\n        mid = (low+high)\xF72\n        if mid^3 == a\n        \
    \    return true\n        elseif mid^3 < a\n            low = mid+1\n        else\n\
    \            high = mid-1\n        end\n    end\n    return false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978886
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a >= 0\n        return isint(round(cbrt(a)))\n\
    \    else\n        return isint(round(cbrt(-a)))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_b24739a.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp_b24739a.jl:31\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: isint not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp_b24739a.jl:21\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_b24739a.jl:31 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_b24739a.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp_b24739a.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: isint not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmp_b24739a.jl:21\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_b24739a.jl:32 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_b24739a.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp_b24739a.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: isint not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmp_b24739a.jl:23\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_b24739a.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_b24739a.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp_b24739a.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: isint not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmp_b24739a.jl:21\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_b24739a.jl:34 [inli"
  timestamp: 1659978889
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    for i in 1:abs(a)\n        if a==i^3\n\
    \            return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpye5dizuc.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpye5dizuc.jl:34\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpye5dizuc.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpye5dizuc.jl:31\ntest set: Test Failed at /tmp/tmpye5dizuc.jl:38\n\
    \  Expression: candidate(0) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpye5dizuc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpye5dizuc.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978888
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0 \n        return iscube(-a)\n\
    \    end\n    if a == 0\n        return true\n    end\n    # a is a positive integer,\
    \ now we need to check if it is a cube of any integer\n    r = 1\n    # r is the\
    \ root\n    while r^3 <= a\n        if r^3 == a\n            return true\n   \
    \     end\n        r += 1\n    end\n    return false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978886
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return sqrt(a) % 1 == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpq1k26zlc.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpq1k26zlc.jl:29\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  sqrt will only\
    \ return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3]\
    \ sqrt\n     @ ./math.jl:1221 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpq1k26zlc.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpq1k26zlc.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpq1k26zlc.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpq1k26zlc.jl:32\n  Expression: candidate(1000) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq1k26zlc.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq1k26zlc.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    6     1      1      8\n"
  timestamp: 1659978884
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        b = abs(a)\n   \
    \ else\n        b = a\n    end\n    x = isqrt(b)\n    if x*x*x == b\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphze_lr8g.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmphze_lr8g.jl:40\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphze_lr8g.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphze_lr8g.jl:36\ntest set: Test Failed at /tmp/tmphze_lr8g.jl:42\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphze_lr8g.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphze_lr8g.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978888
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    \n    # In the problem statement,\
    \ the input is always valid\n    # so the following line is sufficient.\n    a>=0\
    \ && (a^(1/3))%1==0 \n    \n    # However, for the sake of being more robust,\
    \ \n    # you might want to return false if a<0, as in the following.\n    #\n\
    \    # if a<0\n    #     return false\n    # else\n    #     return (a^(1/3))%1==0\n\
    \    # end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp92dh7rk4.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp92dh7rk4.jl:41\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp92dh7rk4.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp92dh7rk4.jl:38\ntest set: Test Failed at /tmp/tmp92dh7rk4.jl:42\n\
    \  Expression: candidate(64) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92dh7rk4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92dh7rk4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp92dh7rk4.jl:44\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92dh7rk4.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92dh7rk4.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978888
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a%round(a^(1/3))==0? true:false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90q_llpd.jl:20\nin expression starting at\
    \ /tmp/tmp90q_llpd.jl:20\n"
  stdout: ''
  timestamp: 1659978887
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    i = floor(Int64,cbrt(a))\n    j =\
    \ i^3\n    if j == a\n        return true\n    else\n        return false\n  \
    \  end\nend\n\"\"\"\n    Write a function that takes as input a tuple (a,b) and\
    \ returns \n    if this tuple is a tuple of two square numbers. \n    Note: you\
    \ may assume the input is always valid.\n    Examples:\n    >>> ispairsquare((0,0))\n\
    \    true\n    >>> ispairsquare((1,1))\n    true\n    >>> ispairsquare((4,4))\n\
    \    true\n    >>> ispairsquare((3,4))\n    false\n    >>> ispairsquare((1,4))\n\
    \    false\n    >>> ispairsquare((0,1))\n    false\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpbot33ooh.jl:28\nin expression starting at /tmp/tmpbot33ooh.jl:28\n"
  stdout: ''
  timestamp: 1659978888
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    b = a < 0 ? -a : a\n    if b == 0\
    \ return true end\n    c = trunc(Int64, (b)^(1/3))\n    return c*c*c == b\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprxssnq2o.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmprxssnq2o.jl:33\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprxssnq2o.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprxssnq2o.jl:29\ntest set: Test Failed at /tmp/tmprxssnq2o.jl:35\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprxssnq2o.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprxssnq2o.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978889
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a>=0\n        if sqrt(a)%1 == 0\
    \ \n            return true\n        else\n            return false\n        end\n\
    \    else\n        return false\n    end\nend\niscube(1)\niscube(2)\niscube(-1)\n\
    iscube(64)\niscube(0)\niscube(180)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxbrf2led.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpxbrf2led.jl:43\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxbrf2led.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxbrf2led.jl:40\ntest set: Test Failed at /tmp/tmpxbrf2led.jl:46\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbrf2led.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbrf2led.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978888
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return (a % a % a == 0)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpis6bpxsf.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpis6bpxsf.jl:28\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpis6bpxsf.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpis6bpxsf.jl:26\ntest set: Test Failed at /tmp/tmpis6bpxsf.jl:31\n\
    \  Expression: candidate(180) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpis6bpxsf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpis6bpxsf.jl:26\ntest set: Error\
    \ During Test at /tmp/tmpis6bpxsf.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(0) == true\n  DivideError: integer division error\n  Stacktrace:\n\
    \   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpis6bpxsf.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpis6bpxsf.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpis6bpxsf.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpis6bpxsf.jl:34\n  Expression: candidate(1729) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpis6bpxsf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpis6bpxsf.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    4     3      1      8\n"
  timestamp: 1659978890
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 || a == 1 || a == -1\n \
    \       return true\n    end\n    start = 0\n    finish = a\n    while start <=\
    \ finish\n        mid = (start + finish) / 2\n        if mid^3 > a\n         \
    \   finish = mid - 1\n        elseif mid^3 < a\n            start = mid + 1\n\
    \        else\n            return true\n        end\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppvq5xhfl.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmppvq5xhfl.jl:45\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppvq5xhfl.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppvq5xhfl.jl:41\ntest set: Test Failed at /tmp/tmppvq5xhfl.jl:47\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppvq5xhfl.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppvq5xhfl.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978889
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n\
    \    end\n    if a < 0 \n        a = -a\n    end\n    if a%3 == 0\n        if\
    \ trunc(Int64,a/3) == trunc(Int64,(a/3)^(1/3))\n            return true\n    \
    \    end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp394n110l.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp394n110l.jl:38\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp394n110l.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp394n110l.jl:37\ntest set: Test Failed at /tmp/tmp394n110l.jl:40\n\
    \  Expression: candidate(-1) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp394n110l.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp394n110l.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp394n110l.jl:41\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp394n110l.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp394n110l.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp394n110l.jl:43\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp394n110l.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp394n110l.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  timestamp: 1659978889
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == round(cbrt(a))^3 \nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978887
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        return iscube(-a)\n\
    \    end\n    if a == 0\n        return true\n    end\n    left, right = 0, a\n\
    \    while left <= right\n        mid = (left + right) \xF7 2\n        if mid^3\
    \ > a\n            right = mid - 1\n        elseif mid^3 < a\n            left\
    \ = mid + 1\n        else\n            return true\n        end\n    end\n   \
    \ return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978887
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    iscube = sqrt(a) % 1 == 0\nend\niscube(2)\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpufz0wq2a.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpufz0wq2a.jl:30\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  sqrt will only\
    \ return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3]\
    \ sqrt\n     @ ./math.jl:1221 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpufz0wq2a.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpufz0wq2a.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpufz0wq2a.jl:27\ntest set:\
    \ Test Failed at /tmp/tmpufz0wq2a.jl:33\n  Expression: candidate(1000) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpufz0wq2a.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufz0wq2a.jl:27\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    6     1      1      8\n"
  timestamp: 1659978890
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if sqrt(a).isinteger && (sqrt(a)%2==0\
    \ || sqrt(a)%2==1)\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprfiuw2c8.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmprfiuw2c8.jl:31\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  type Float64 has no field isinteger\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] iscube(a::Int64)\n\
    \     @ Main /tmp/tmprfiuw2c8.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprfiuw2c8.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprfiuw2c8.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprfiuw2c8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  type Float64 has no field isinteger\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] iscube(a::Int64)\n\
    \     @ Main /tmp/tmprfiuw2c8.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprfiuw2c8.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprfiuw2c8.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprfiuw2c8.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  DomainError with -1.0:\n  sqrt will only return a complex\
    \ result if called with a complex argument. Try sqrt(Complex(x)).\n  Stacktrace:\n\
    \   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n     @ Base.Math ./math.jl:33\n\
    \   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3] sqrt\n     @ ./math.jl:1221\
    \ [inlined]\n   [4] iscube(a::Int64)\n     @ Main /tmp/tmprfiuw2c8.jl:20\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprfiuw2c8.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmprfiuw2c8.jl:30\ntest set:\
    \ Error During"
  timestamp: 1659978890
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    \n    a = abs(a)\n    x = 1\n    while\
    \ x*x*x <= a\n        if x*x*x == a\n            return true\n        end\n  \
    \      x += 1\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_d_w8ljh.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp_d_w8ljh.jl:42\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_d_w8ljh.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_d_w8ljh.jl:35\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978889
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a >= 0 && trunc(Int64,a^(1/3))^3\
    \ == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvgtf5lfj.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpvgtf5lfj.jl:29\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvgtf5lfj.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvgtf5lfj.jl:26\ntest set: Test Failed at /tmp/tmpvgtf5lfj.jl:30\n\
    \  Expression: candidate(64) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvgtf5lfj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvgtf5lfj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvgtf5lfj.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvgtf5lfj.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvgtf5lfj.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978889
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if(a < 0)\n        a = -a\n    end\n\
    \    return(a == round(cbrt(a)^3))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxa8p443m.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpxa8p443m.jl:31\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxa8p443m.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxa8p443m.jl:29\ntest set: Test Failed at /tmp/tmpxa8p443m.jl:34\n\
    \  Expression: candidate(180) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxa8p443m.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxa8p443m.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxa8p443m.jl:37\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxa8p443m.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxa8p443m.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659978890
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 return true \n    if a >\
    \ 0 return  sqrt(a) % 1 == 0 \n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0z8u935.jl:1\nin expression starting at /tmp/tmps0z8u935.jl:1\n"
  stdout: ''
  timestamp: 1659978889
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a == 0 \n        return true\n\
    \    end\n    if a > 0\n        x = Int64(round(Int64,a^(1/3)))\n        return\
    \ x^3 == a\n    else\n        x = Int64(round(Int64,a^(1/3)))\n        return\
    \ x^3 == -a\n    end\nend\n \n@testset \"Test Is Cube.\" begin\n    @test iscube(1)\
    \ == true\n    @test iscube(2) == false\n    @test iscube(-1) == true\n    @test\
    \ iscube(64) == true\n    @test iscube(0) == true\n    @test iscube(180) == false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmp_3q0hber.jl:32

    in expression starting at /tmp/tmp_3q0hber.jl:32

    '
  stdout: ''
  timestamp: 1659978889
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    x = round(Int64, a^(1/3))\n    return\
    \ x^3 == a ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpt253p17q.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpt253p17q.jl:30\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpt253p17q.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpt253p17q.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpt253p17q.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659978890
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    i = 0\n    while (i^3) < a\n     \
    \   i += 1\n    end\n    return (i^3) == a\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2dvmi4pn.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp2dvmi4pn.jl:33\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2dvmi4pn.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2dvmi4pn.jl:30\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1659978890
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a < 0\n        a = -a\n    end\n\
    \    if isinteger(a^(1/3))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfro7jgjs.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpfro7jgjs.jl:37\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfro7jgjs.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfro7jgjs.jl:33\ntest set: Test Failed at /tmp/tmpfro7jgjs.jl:39\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfro7jgjs.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfro7jgjs.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978890
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    \n    if a == 0\n        return true\n\
    \    end\n    if a < 0\n        a = abs(a)\n    end\n    root = Int64(floor(a^(1/3)))\n\
    \    #print(root)\n    root3 = root^3\n    #print(root3)\n    if root3 == a\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwe28ohqq.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpwe28ohqq.jl:45\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwe28ohqq.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwe28ohqq.jl:41\ntest set: Test Failed at /tmp/tmpwe28ohqq.jl:47\n\
    \  Expression: candidate(1000) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwe28ohqq.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwe28ohqq.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659978890
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    b = ceil(Int64, a^(1/3))\n    if a\
    \ == b^3\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpcg9q_9wd.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpcg9q_9wd.jl:34\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpcg9q_9wd.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpcg9q_9wd.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpcg9q_9wd.jl:31\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  timestamp: 1659978891
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a > 0 && a != 1\n        return\
    \ (a^(1/3))^3 == a\n    elseif a == 0\n        return true\n    else\n       \
    \ return (a^(1/3))^3 == -a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmprr509p_m.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmprr509p_m.jl:33\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprr509p_m.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprr509p_m.jl:32\ntest set: Test Failed at /tmp/tmprr509p_m.jl:34\n\
    \  Expression: candidate(2) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprr509p_m.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprr509p_m.jl:32\ntest set: Error\
    \ During Test at /tmp/tmprr509p_m.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation yielding a\
    \ complex result requires a complex argument.\n  Replace x^y with (x+0im)^y, Complex(x)^y,\
    \ or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n     @\
    \ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3] ^\n\
    \     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main /tmp/tmprr509p_m.jl:25\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprr509p_m.jl:35 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmprr509p_m.jl:32\ntest set:\
    \ Test Failed at /tmp/tmprr509p_m.jl:36\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprr509p_m.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/sha"
  timestamp: 1659978892
- exit_code: 1
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    return a == 0 || (a % 3 == 0 && a\
    \ != 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpairjoo36.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpairjoo36.jl:27\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpairjoo36.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpairjoo36.jl:26\ntest set: Test Failed at /tmp/tmpairjoo36.jl:29\n\
    \  Expression: candidate(-1) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpairjoo36.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpairjoo36.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpairjoo36.jl:30\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpairjoo36.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpairjoo36.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpairjoo36.jl:31\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpairjoo36.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpairjoo36.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpairjoo36.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpairjoo36.jl:32 [inl"
  timestamp: 1659978891
- exit_code: 0
  program: "\"\"\"\n    Write a function that takes an integer a and returns true\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> iscube(1)\n    true\n   \
    \ >>> iscube(2)\n    false\n    >>> iscube(-1)\n    true\n    >>> iscube(64)\n\
    \    true\n    >>> iscube(0)\n    true\n    >>> iscube(180)\n    false\n    \"\
    \"\"\nfunction iscube(a::Int64)::Bool \n    if a >= 0 \n        a == Integer(round(a^(1/3)))^3\
    \ \n    else a < 0 \n        a == -1*(Integer(round(abs(a)^(1/3)))^3)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659978889
