name: HumanEval_140_fix_spaces
language: jl
prompt: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
  \ \n    and if a string has more than 2 consecutive spaces, \n    then replace all\
  \ consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\
  \n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example\
  \ 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\
  \n    \"\"\"\nfunction fix_spaces(text::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
  Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
  )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
  )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa\
  \ 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
completions: ["    s = text[text.findfirst(c -> !isspace(c)) : end]\n    s = replace(s,\
    \ \" \" => \"_\")\n    s = replace(s, \"___\" => \"-\")\n    s = replace(s, \"\
    __\" => \"_\")\nend", "    n = findnext(text, isspace, 1)\n    p = n\n    result\
    \ = \"\"\n    while n != nothing\n        c = findnext(text, isspace, n + 1)\n\
    \        if c != nothing && c - n < 2\n            p = n\n            n = c\n\
    \        else\n            result *= ifelse(n == 1, \"\", \"_\") * text[p + 1:n]\n\
    \            if c != nothing\n                result *= \"_\"\n            end\n\
    \            p = n\n            n = c\n        end\n    end\n    result *= ifelse(n\
    \ == 1, \"\", \"_\") * text[p + 1:n]\n    return result\nend", "    new_string\
    \ = replace(text, \" \" => \"_\")\n    return replace(new_string, \"__\" => \"\
    -\")\nend", "    # replace spaces at the end of the string \n    if ends_with(text,\
    \ ' ')\n        return replace(text, \" \", \"\")\n    else\n        text\n  \
    \  end\nend", "    replace(text, \" \", \"_\")\nend", "    x = text\n    for i\
    \ in range(length(x)):\n        if x[i] == ' '\n            if i == 1\n      \
    \          x[i] = '_'\n            elseif x[i-1] == ' '\n                x[i]\
    \ = '-'\n            else\n                x[i] = '_'\n            end\n     \
    \   end\n    end\n    return x\nend", "    return replace(text, \" \", \"_\")\n\
    end", "    return replace(replace(replace(text, \"  \", \" \", count=1), \" \"\
    , \"-\"), \" \", \"_\")\nend", "    text = replace(text, \" \" => \"_\")\n   \
    \ text = replace(text, \"__\" => \"-\")\n    text = replace(text, \"__\" => \"\
    -\")\n    return text\nend\n    \n    \n    \n    ", "    return replace(replace(replace(text,\
    \ r\"\\s+\", \"-\"), r\"\\s\", \"_\"), \"^-\", \"_\")\nend", "    \n    new_text\
    \ = \"\"\n    num_spaces = 0\n    for c in text\n        if c == ' '\n       \
    \     num_spaces += 1\n        else\n            if num_spaces == 1\n        \
    \        new_text *= '_'\n            elseif num_spaces > 1\n                new_text\
    \ *= '-'\n            end\n            new_text *= c\n            num_spaces =\
    \ 0\n        end\n    end\n    if num_spaces == 1\n        new_text *= '_'\n \
    \   elseif num_spaces > 1\n        new_text *= '-'\n    end\n    return new_text\n\
    end", "    # Trim the string of leading and trailing spaces first\n    text =\
    \ strip(text)\n    # replace all spaces with underscores\n    text = replace(text,\
    \ \" \" => \"_\")\n    # if a string has more than 2 consecutive spaces, then\
    \ replace all consecutive spaces with -\n    text = replace(text, r\"_{2,}\" =>\
    \ \"-\")\n    return text\nend", "    # TODO: write your code here\n    new_str\
    \ = text\n    while new_str[1] == ' '\n        new_str = replace(new_str, \" \"\
    , \"\")\n    end\n    while new_str[end] == ' '\n        new_str = replace(new_str,\
    \ \" \", \"\")\n    end\n    for i in 1:length(new_str)-1\n        if new_str[i]\
    \ == ' ' && new_str[i+1] == ' '\n            new_str = replace(new_str, \"  \"\
    , \"_\")\n        end\n    end\n    for i in 1:length(new_str)-2\n        if new_str[i]\
    \ == ' ' && new_str[i+1] == ' ' && new_str[i+2] == ' '\n            new_str =\
    \ replace(new_str, \"   \", \"-\")\n        end\n    end\n    return new_str\n\
    end", "    n = 0\n    r = \"\"\n    for c in text\n        if c == ' '\n     \
    \       if n == 0\n                r *= \"_\"\n            elseif n < 2\n    \
    \            r *= \"-\"\n            end\n            n += 1\n        else\n \
    \           r *= c\n            n = 0\n        end\n    end\n    return r\nend",
  "    # Write your code here\n    text = replace(text, \"  \", \"-\")\n    text =\
    \ replace(text, \" \", \"_\")\n    return text\nend\n ", "    text = replace(text,\
    \ ' ' => '_') \n    text = replace(text, r\"_{2,}\" => '-') \n    return text\
    \ \nend", "    text = replace(text, r\"(^\\s+|\\s+$)\", \"\")\n    text = replace(text,\
    \ r\"\\s\", \"_\")\n    text = replace(text, r\"_+\", \"-\")\n    return text\n\
    end", "    return replace(text, \" \" => \"_\")\n    |> replace(r\"\\s{2,}\" =>\
    \ \"-\")\nend", "    text = replace(text, r\"\\s+\", \"_\")\n    text = replace(text,\
    \ r\"_$\", \"\")\n    return text\nend", "    s_text = strip(text)\n    ret =\
    \ replace(s_text, \" \", \"_\")\n    ret = replace(ret, \"__\", \"_\")\n    ret\
    \ = replace(ret, \"___\", \"-\")\n    return ret\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
