name: HumanEval_9_rolling_max
language: jl
prompt: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
  \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4,\
  \ 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
  \ 100, 100])\nend\n"
completions: ["    result = zeros(length(numbers))\n    max = numbers[1]\n    result[1]\
    \ = max\n    for i in 2:length(numbers)\n        current = numbers[i]\n      \
    \  if current > max\n            max = current\n        end\n        result[i]\
    \ = max\n    end\n    return result\nend", "    window_max = zeros(Int64, length(numbers))\n\
    \    window_size = 0\n    for i = 1:length(numbers)\n        while window_size\
    \ > 0 && numbers[window_size] <= numbers[i]\n            window_size -= 1\n  \
    \      end\n        window_size += 1\n        window_max[i] = numbers[window_size]\n\
    \    end\n    return window_max\nend", "    N = length(numbers)\n    result =\
    \ ones(Int64, N)\n    for i in 1:N\n        result[i] = max(numbers[1:i])\n  \
    \  end\n    return result\nend\n ", "    result = zeros(length(numbers))\n   \
    \ current_max = numbers[1]\n    result[1] = current_max\n    for i = 2:length(numbers)\n\
    \        if numbers[i] > current_max\n            current_max = numbers[i]\n \
    \       end\n        result[i] = current_max\n    end\n    return result\nend",
  "    max = numbers[1]\n    result = [max]\n    for i in 2:length(numbers)\n    \
    \    max = max(max, numbers[i])\n        push!(result, max)\n    end\n    return\
    \ result\nend\n ", "    # Initialise the result vector with first element from\
    \ input\n    res = [numbers[1]]\n    # The slice is initialised with two first\
    \ elements: current and previous maximum\n    slice = [numbers[1], numbers[1]]\n\
    \    # For each element in the input vector\n    for num in numbers[2:end]\n \
    \       # If the new number is greater than previous maximum,\n        # update\
    \ the slice with previous maximum and the new number\n        if num > slice[2]\n\
    \            slice = [slice[2], num]\n        # Otherwise the previous maximum\
    \ is enough\n        else\n            slice = [slice[1], slice[2]]\n        end\n\
    \        # Push the previous maximum to the result vector\n        push!(res,\
    \ slice[1])\n    end\n    return res\nend", "    result = Vector{Int64}(undef,\
    \ length(numbers))\n    max_so_far = -1\n    for (i, n) in enumerate(numbers)\n\
    \        max_so_far = max(max_so_far, n)\n        result[i] = max_so_far\n   \
    \ end\n    return result\nend", "    \"\"\" From a given vector of integers, generate\
    \ a vector of rolling maximum element found until given moment\n    in the sequence.\n\
    \    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\
    \"\"\n    roll_max = zeros(length(numbers))\n    roll_max[1] = numbers[1]\n  \
    \  for i in 2:length(numbers)\n        roll_max[i] = max(roll_max[i-1], numbers[i])\n\
    \    end\n    return roll_max\nend", "    # Init the array with the first element\n\
    \    out = [numbers[1]]\n    max = numbers[1]\n    for i = 2:length(numbers)\n\
    \        # We must keep the running max\n        if max < numbers[i]\n       \
    \     max = numbers[i]\n        end\n        # We append it at the end of the\
    \ output\n        push!(out, max)\n    end\n    return out\nend", "    result\
    \ = ones(Int64, length(numbers))\n    max = 0\n    for i = 1:length(numbers)\n\
    \        result[i] = max(max, numbers[i])\n        max = result[i]\n    end\n\
    \    return result\nend", "    result = zeros(Int64, length(numbers))\n    result[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        result[i] = max(result[i-1],\
    \ numbers[i])\n    end\n    return result\nend", "    maximums = Vector{Int64}(undef,\
    \ length(numbers))\n    maximums[1] = numbers[1]\n    for i in 2:length(numbers)\n\
    \        maximums[i] = max(maximums[i-1], numbers[i])\n    end\n    return maximums\n\
    end\n\"\"\" From a given vector of integers, generate a vector of rolling minimum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_min([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 1, 1, 1, 1]\n    \"\"\"", "    # max_so_far\n\
    \    max_so_far = numbers[1]\n    # result = [max_so_far]\n    result = [max_so_far]\n\
    \    # iterate over the rest of the numbers\n    for i in 2:length(numbers)\n\
    \        if numbers[i] > max_so_far\n            max_so_far = numbers[i]\n   \
    \     end\n        push!(result, max_so_far)\n    end\n    # return result\n \
    \   return result\nend", "    result = Vector{Int64}(undef, length(numbers))\n\
    \    result[1] = numbers[1]\n    for idx in 2:length(numbers)\n        result[idx]\
    \ = max(result[idx-1], numbers[idx])\n    end\n    return result\nend", "    result\
    \ = Array{Int64}(undef, length(numbers))\n    result[1] = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n \
    \   end\n    return result\nend", "    result = zeros(Int64, length(numbers))\n\
    \    result[1] = numbers[1]\n    for i = 2:length(numbers)\n        result[i]\
    \ = max(result[i-1], numbers[i])\n    end\n    return result\nend", "    cur_max\
    \ = numbers[1]\n    out = [cur_max]\n    for n in numbers[2:end]\n        if n\
    \ > cur_max\n            cur_max = n\n        end\n        push!(out, cur_max)\n\
    \    end\n    return out\nend", "    n = length(numbers)\n    result = zeros(Int64,\
    \ n)\n    result[1] = numbers[1]\n    for i in 2:n\n        result[i] = max(result[i-1],\
    \ numbers[i])\n    end\n    return result\nend\nrolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])", "    min_found = minimum(numbers)\n    output = zeros(Int64, length(numbers))\n\
    \    for i = 1:length(numbers)\n        if numbers[i] > min_found\n          \
    \  min_found = numbers[i]\n        end\n        output[i] = min_found\n    end\n\
    \    return output\nend", "    n = length(numbers)\n    maximums = Vector{Int64}(undef,\
    \ n)\n    maximums[1] = numbers[1]\n    for i = 2:n\n        maximums[i] = max(maximums[i-1],\
    \ numbers[i])\n    end\n    return maximums\nend\n "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
