name: HumanEval_18_how_many_times
language: jl
prompt: "\"\"\" Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
  \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
  , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
  \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
  cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
completions: ["    idx = start(string)\n    counter = 0\n    while !endof(string)\n\
    \        nidx = nextind(string, idx)\n        if string[idx:nidx] == substring\n\
    \            counter += 1\n        end\n        idx = nidx\n    end\n    return\
    \ counter\nend\n \n \n \n\"\"\" Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3\n    \"\"\"", "    # your code goes here\n    count = 0\n\
    \    for i = 1:length(string)\n        if length(string) >= i + length(substring)\
    \ - 1\n            if string[i:i+length(substring)-1] == substring\n         \
    \       count += 1\n            end\n        end\n    end\n    return count\n\
    end", "    t=0\n    for i in 1:length(string)-length(substring)+1\n        if\
    \ string[i:i+length(substring)-1]==substring\n            t+=1\n        end\n\
    \    end\n    return t\nend", "    count = 0\n    str_len = length(string)\n \
    \   sub_len = length(substring)\n    i = 1\n    while i <= str_len\n        if\
    \ string[i:i+sub_len-1] == substring\n            count += 1\n            i +=\
    \ sub_len\n        else\n            i += 1\n        end\n    end\n    return\
    \ count\nend", "    cnt = 0\n    if length(substring) > length(string)\n     \
    \   return cnt\n    end\n    for i in 1:length(string)\n        if (i+length(substring)\
    \ <= length(string)) && string[i:i+length(substring)] == substring\n         \
    \   cnt += 1\n        end\n    end\n    return cnt\nend", "    n_times = 0\n \
    \   for i in 1:size(string, 1)\n        if string[i:i+size(substring, 1)-1] ==\
    \ substring\n            n_times += 1\n        end\n    end\n    return n_times\n\
    end", "    times = 0\n    for i in 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            times += 1\n        end\n    end\n    return times\n\
    end", "    counter = 0\n    for i = 1:length(string) - length(substring) + 1\n\
    \        if string[i:i+length(substring) - 1] == substring\n            counter\
    \ += 1\n        end\n    end\n    return counter\nend", "    times = 0\n    i\
    \ = 1\n    while i <= length(string) - length(substring) + 1\n        if string[i:i+length(substring)-1]\
    \ == substring\n            times += 1\n            i += length(substring)\n \
    \       else\n            i += 1\n        end\n    end\n    return times\nend",
  "    n = length(string)\n    m = length(substring)\n    j = 1\n    s = 0\n    while\
    \ j <= n\n        if string[j:m] == substring\n            s += 1\n          \
    \  j += m\n        else\n            j += 1\n        end\n    end\n    return\
    \ s\nend\n ", "    i = 1\n    while i <= length(string)\n        if contains(string,\
    \ substring)\n            i += length(substring)\n        else\n            i\
    \ += 1\n        end\n    end\n    return i\nend", "    occurences = 0\n    sub_len\
    \ = length(substring)\n    for i in 1:length(string)\n        if string[i:i+sub_len-1]\
    \ == substring\n            occurences += 1\n        end\n    end\n    return\
    \ occurences\nend", "    count = 0\n    for i in 1:length(string)\n        if\
    \ string[i] == substring[1]\n            if string[i:i+length(substring)-1] ==\
    \ substring\n                count += 1\n            end\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for i in 1:length(string)\n     \
    \   j = 1\n        for k in i:length(string)\n            if string[k] == substring[j]\n\
    \                j += 1\n            else\n                break\n           \
    \ end\n            if j == length(substring) + 1\n                count += 1\n\
    \                break\n            end\n        end\n    end\n    return count\n\
    end\n ", "    if substring == \"\" return 0 end\n    l = length(substring)\n \
    \   c = 0\n    for i = 1:length(string)\n        if string[i:i+l-1] == substring\n\
    \            c += 1\n        end\n    end\n    return c\nend", "    s = length(string)\n\
    \    sub = length(substring)\n    if s == 0 || sub == 0\n        return 0\n  \
    \  end\n    counter = 0\n    for i = 1:s\n        # check if it is possible to\
    \ find substring from the current index\n        if s - i + 1 >= sub\n       \
    \     # there is a potential match\n            potential_match = string[i:i+sub-1]\n\
    \            if potential_match == substring\n                counter += 1\n \
    \           end\n        end\n    end\n    return counter\nend", "    occurences::Int64\
    \ = 0\n    find::Int64 = 1\n    while find != 0\n        find = find(string, substring)\n\
    \        if find != 0\n            occurences = occurences + 1\n            string\
    \ = string[find+1:end]\n        end\n    end\n    return occurences\nend", " \
    \   return Base.count(string, substring)\nend", "    j = 0\n    stringi = collect(string)\n\
    \    substringi = collect(substring)\n    for i in 1:length(string)\n        if\
    \ stringi[i] == substringi[1]\n            if substr(string, i, length(substring))\
    \ == substring\n                j = j + 1\n            end\n        end\n    end\n\
    \    return j\nend", "    last_index = 1\n    count = 0\n    for i in 1:length(substring)\n\
    \        if string[i] == substring[i]\n            last_index = i\n          \
    \  count += 1\n        else \n            last_index = 1\n        end\n    end\n\
    \    return count\nend", "    if length(substring) == 0\n        return 0\n  \
    \  end\n    # Get the first substring position\n    pos = findfirst(string, substring)\n\
    \    count = 0\n    while pos != nothing\n        # Remove last substring from\
    \ string, adding the count.\n        string = string[pos+length(substring):end]\n\
    \        count += 1\n        # Find next substring\n        pos = findfirst(string,\
    \ substring)\n    end\n    return count\nend", "    sum = 0\n    for i in 1:length(string)\n\
    \        if string[i:i+length(substring)-1] == substring\n            sum += 1\n\
    \        end\n    end\n    return sum\nend", "    if length(substring) == 0\n\
    \        return 0\n    end\n    if length(string) == 0\n        return 0\n   \
    \ end\n    if string == substring\n        return 1\n    end\n    if length(string)\
    \ < length(substring)\n        return 0\n    end\n    t = 0\n    for i in 1:length(string)\n\
    \        if string[i:i+length(substring)-1] == substring\n            t += 1\n\
    \        end\n    end\n    return t\nend", "    if substring == \"\"\n       \
    \ return 0\n    end\n    match_length = length(substring)\n    count = 0\n   \
    \ index = 1\n    while index + match_length <= length(string)\n        if string[index:index+match_length-1]\
    \ == substring\n            count += 1\n        end\n        index += 1\n    end\n\
    \    return count\nend", "    count = 0\n    index = findnext(string, substring,\
    \ 1)\n    while !isnothing(index)\n        count += 1\n        index = findnext(string,\
    \ substring, index + 1)\n    end\n    return count\nend", "    if string == \"\
    \" \n        return 0\n    end\n    occurances = 0\n    while length(string) >=\
    \ length(substring)\n        if string[1:length(substring)] == substring\n   \
    \         occurances += 1\n        end\n        string = string[2:end]\n    end\n\
    \    return occurances\nend", "    n = length(string)\n    m = length(substring)\n\
    \    counter = 0\n    for i in 1:n-m+1\n        if string[i:i+m-1] == substring\n\
    \            counter += 1\n        end\n    end\n    return counter\nend", " \
    \   return count(eachmatch(substring, string))\nend", "    if isempty(substring)\n\
    \        return 0\n    end\n    return length(matchall(r\"(?=$substring)\", string))\n\
    end", "    count = 0\n    for i = 1:length(string)\n        substring_in_string\
    \ = string[i:i+length(substring)-1]\n        if substring_in_string == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    #\
    \ Your code goes here\n    return nothing\nend", "    count = 0\n    for i = 1:length(string)\n\
    \        for j = 1:length(substring)\n            if string[i+j-1] != substring[j]\n\
    \                break\n            end\n            if j == length(substring)\n\
    \                count += 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    count = 0\n    n = length(string)\n    m = length(substring)\n\
    \    for i in 1:n-m+1\n        k = findlast(string[i:i+m-1], substring)\n    \
    \    if k == i && length(k) == 1\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    if substring == \"\"\n        return 0\n    end\n\
    \    start_point = 0\n    end_point = length(substring)\n    counter = 0\n   \
    \ while end_point <= length(string)\n        if string[start_point:end_point]\
    \ == substring\n            counter += 1\n        end\n        start_point +=\
    \ 1\n        end_point += 1\n    end\n    return counter\nend", "    N = length(string)\n\
    \    M = length(substring)\n    if M > N\n        return 0\n    end\n    res =\
    \ 0\n    for i = 1:N-M+1\n        if string[i:i+M-1] == substring\n          \
    \  res += 1\n        end\n    end\n    return res\nend", "    ...\nend\n \n \n\
    \ ", "    times = 0\n    l_substring = length(substring)\n    l_string = length(string)\n\
    \    if l_substring > l_string\n        return 0\n    end\n    for i = 1:l_string-l_substring+1\n\
    \        if string[i:i+l_substring-1] == substring\n            times += 1\n \
    \       end\n    end\n    return times\nend", "    n = length(string)\n    m =\
    \ length(substring)\n    if n == 0 || m == 0\n        return 0\n    end\n    count\
    \ = 0\n    for i = 1:n\n        if i + m <= n + 1\n            if string[i:i+m-1]\
    \ == substring\n                count += 1\n            end\n        end\n   \
    \ end\n    return count\nend", "    count::Int64 = 0\n    for i in 1:length(string)\n\
    \        if string[i:i+length(substring)-1] == substring\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    if string==\"\"\n    \
    \    return 0\n    end\n    if substring==\"\"\n        return 0\n    end\n  \
    \  i=0\n    for j in 1:length(string)\n        if string[j:j+length(substring)-1]==substring\n\
    \            i=i+1\n        end\n    end\n    return i\nend", "    counter = 0\n\
    \    for i in 1:length(string)\n        if string[i:i+length(substring)-1] ==\
    \ substring\n            counter += 1\n        end\n    end\n    return counter\n\
    end", "    # YOUR CODE HERE\n    # return 0\n    count = 0\n    p = 1\n    while\
    \ p <= length(string)\n        if string[p:p+length(substring)-1] == substring\n\
    \            count += 1\n        end\n        p += 1\n    end\n    return count\n\
    end", "    first_index = findfirst(string, substring)\n    if first_index == nothing\n\
    \        return 0\n    else\n        return 1 + how_many_times(string[first_index+1:end],\
    \ substring)\n    end\nend\n ", "    total = 0\n    start = 1\n    while true\n\
    \        pos = findfirst(string, substring, start)\n        if pos == nothing\n\
    \            break\n        end\n        total += 1\n        start = pos + 1\n\
    \    end\n    return total\nend", "    if isempty(substring) || isempty(string)\n\
    \        return 0\n    end\n    return length(occurrences(string, substring))\n\
    end", "    \n    count = 0\n    for i in 1:length(string) - length(substring)\
    \ + 1\n        if string[i:i+length(substring)-1] == substring\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    \n    #Initialize counters\n\
    \    string_len = length(string)\n    substring_len = length(substring)\n    count\
    \ = 0 \n    \n    #Loop over string\n    for i in 1:string_len-substring_len+1\n\
    \        if string[i:i+substring_len-1] == substring\n            count += 1\n\
    \        end\n    end", "    if isempty(substring)\n        return 0\n    end\n\
    \    # Initialize a counter to track the number of times the substring is found\
    \ in the string\n    count = 0\n    # Initialize an index variable to track the\
    \ position of the string being traversed\n    index = 1\n    # Iterate through\
    \ the string once\n    while index \u2264 length(string)\n        # If the substring\
    \ is found in the string, increment count and shift the index of the string forward\
    \ to the end of the match\n        if string[index:index+length(substring)-1]\
    \ == substring\n            count += 1\n            index += length(substring)\n\
    \        else\n            # If the substring is not found in the string, increment\
    \ the index of the string by one\n            index += 1\n        end\n    end\n\
    \    return count\nend", "    \n    substring_len = length(substring)\n    string_len\
    \ = length(string)\n    counter = 0", "    if length(substring) == 0\n       \
    \ return 0\n    end\n    if length(string) == 0\n        return 0\n    end\n \
    \   cnt = 0\n    if occursin(substring, string)\n        cnt += 1\n    end\n \
    \   return cnt + how_many_times(string[1:end], substring)\nend", "    \n    count\
    \ = 0\n    for i in range(1, length(string) - length(substring) + 2)\n       \
    \ if string[i:i+length(substring)-1] == substring\n            count += 1\n  \
    \      end\n    end\n    return count\nend", "    matches = matchall(Regex(substring),\
    \ string)\n    return size(matches, 1)\nend", "    \"\"\" Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\n   \
    \ count = 0\n    for i in 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    count = 0\n    for i in 1:length(string)\n        if string[i:end]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    splitted = split(string, substring)\n    return length(splitted) -\
    \ 1\nend", "    if string == \"\" || substring == \"\"\n        return 0\n   \
    \ end\n    if length(substring) > length(string)\n        return 0\n    end\n\
    \    counter = 0\n    i = 1\n    while i <= length(string) - length(substring)\
    \ + 1\n        if string[i:i+length(substring)-1] == substring\n            counter\
    \ += 1\n            i += length(substring)\n        else\n            i += 1\n\
    \        end\n    end\n    return counter\nend", "    L = length(substring)\n\
    \    n = length(string)\n    n_matches = zeros(Int64, n-L+1)\n    for i in 1:n-L+1\n\
    \        if string[i:i+L-1] == substring\n            n_matches[i] = 1\n     \
    \   end\n    end\n    return sum(n_matches)\nend", "    index = 1\n    last =\
    \ length(string) - length(substring) + 1\n    counter = 0\n    while index <=\
    \ last\n        if string[index:index+length(substring)-1] == substring\n    \
    \        counter += 1\n            index += length(substring)\n        else\n\
    \            index += 1\n        end\n    end\n    return counter\nend", "   \
    \ n = length(string)\n    m = length(substring)\n    if m == 0\n        return\
    \ 0\n    end\n    count = 0\n    for i = 1:n\n        if string[i:i+m-1] == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    return\
    \ length(findall(substring, string))\nend\nhow_many_times(\"\", \"a\")", "   \
    \ n = length(string)\n    nsub = length(substring)\n    count = 0\n    for i in\
    \ 1:n-nsub+1\n        if string[i:i+nsub-1] == substring\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    start = 1\n    string_length\
    \ = length(string)\n    substring_length = length(substring)\n    counter = 0\n\
    \    for idx in 1:string_length\n        if start > string_length\n          \
    \  break\n        if string[start:start+substring_length-1] == substring\n   \
    \         counter += 1\n        end\n        start += 1\n    end\n    return counter\n\
    end", "    count = 0\n    while i = findnext(string, substring, lastindex(string,\
    \ substring) + 1)\n        count += 1\n    end\n    return count\nend\n\"\"\"\n\
    \    # Try to avoid using this approach.\n    # This solution is O(nm) where n\
    \ is the length of string and m is the length of substring.\n    len = length(substring)\n\
    \    for i in 1:length(string) - len + 1\n        if string[i:i+len-1] == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend\n\"\"\"",
  "    if string == \"\" || substring == \"\"\n        return 0\n    end\n    string_length\
    \ = length(string)\n    substring_length = length(substring)\n    counter = 0\n\
    \    for i in 1:string_length\n        if i+substring_length-1 <= string_length\
    \ && string[i:i+substring_length-1] == substring\n            counter += 1\n \
    \       end\n    end\n    return counter\nend\nprintln(how_many_times(\"\", \"\
    a\"))\nprintln(how_many_times(\"aaa\", \"a\"))\nprintln(how_many_times(\"aaaa\"\
    , \"aa\"))", "    if string == \"\" || substring == \"\"\n        return 0\n \
    \   end\n    k = 0\n    count = 0\n    while k + length(substring) <= length(string)\n\
    \        if string[k + 1:k + length(substring)] == substring\n            count\
    \ += 1\n        end\n        k += 1\n    end\n    return count\nend", "    times\
    \ = 0\n    for i in 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            times += 1\n        end\n    end\n    return times\n\
    end\n    \n    ", "    count = 0\n    for i in 1:length(string) - length(substring)\
    \ + 1\n        if string[i:i+length(substring)-1] == substring\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    count = 0\n    for\
    \ i in 1:length(string)\n        if string[i:i+length(substring)-1] == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    if\
    \ substring == \"\"\n        return 0\n    end\n    if length(substring) > length(string)\n\
    \        return 0\n    end\n    how_many_times = 0\n    i = 0\n    while i + length(substring)\
    \ <= length(string)\n        if substring == string[i + 1:i + length(substring)\
    \ + 1]\n            how_many_times += 1\n        end\n        i += 1\n    end\n\
    \    return how_many_times\nend", "    return count(eachmatch(substring, string))\n\
    end", "    count = 0\n    for i = 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    index = search(string, substring)\n    return count(string, substring)\n\
    end\nhow_many_times(\"\", \"a\")\nhow_many_times(\"aaa\", \"a\")\nhow_many_times(\"\
    aaaa\", \"aa\")", "    n = length(string)\n    m = length(substring)\n    if m\
    \ > n\n        return 0\n    end\n    count = 0\n    for i in 1:n-m+1\n      \
    \  if string[i:i+m-1] == substring\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    if substring == \"\"\n        return 0\n    end\n\
    \    if string == \"\"\n        return 0\n    end\n    pos = findfirst(string,\
    \ substring)\n    count = 0\n    while length(pos) == 1\n        count += 1\n\
    \        string = string[pos+1:end]\n        pos = findfirst(string, substring)\n\
    \    end\n    return count\nend", "    iters = length(string) - length(substring)\
    \ + 1\n    count = 0\n    if iters > 0\n        for i in 1:iters\n           \
    \ if substring == string[i:i+length(substring)-1]\n                count += 1\n\
    \            end\n        end\n    end\n    return count\nend", "    count = 0\n\
    \    sub_len = length(substring)\n    for i = 1:length(string)\n        if string[i:(i+sub_len-1)]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    counter = 0\n    str_len = length(string)\n    substr_len = length(substring)\n\
    \    for i in 1:str_len-substr_len+1\n        if string[i:i+substr_len-1] == substring\n\
    \            counter += 1\n        end\n    end\n    return counter\nend", " \
    \   count = 0\n    for i in 1:length(string)\n        if i < length(substring)\n\
    \            continue\n        if string[i-length(substring)+1:i] == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    str\
    \ = uppercase(string)\n    substr = uppercase(substring)\n    found = []\n   \
    \ start_pos = 0\n    while true\n        result = findnext(str, substr, start_pos)\n\
    \        if isnothing(result)\n            break\n        else\n            found\
    \ = [found; result]\n            start_pos = result + 1\n        end\n    end\n\
    \    return length(found)\nend", "    i = 0\n    j = 1\n    count = 0\n    while\
    \ i < length(string)\n        if j == length(substring) + 1\n            j = 1\n\
    \            count += 1\n        end\n        if substring[j] == string[i+1]\n\
    \            j += 1\n        else\n            j = 1\n        end\n        i +=\
    \ 1\n    end\n    if j == length(substring) + 1\n        count += 1\n    end\n\
    \    return count\nend", "    count = 0\n    for i in 0:length(string)-length(substring)+1\n\
    \        if string[i:i+length(substring)] == substring\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    if substring == \"\"\n   \
    \     return 0\n    end\n    return length(findall(substring, string))\nend",
  "    if string == \"\" || substring == \"\"\n        return 0\n    end\n    how_many_times_sub(string,\
    \ substring, 0)\nend", "    j = Int64(0)\n    for i in 1:length(string)\n    \
    \    if string[i] == substring[1]\n            j += 1\n        end\n    end\n\
    \    return j\nend", "    if string == \"\"\n        return 0\n    end\n    #\
    \ two things to consider:\n    # 1) if the substring is longer than the original\
    \ string - return 0\n    # 2) if the substring is shorter than the original string\
    \ - loop over the original string and count how many times substring appears\n\
    \    l = length(string)\n    l_sub = length(substring)\n    if l_sub > l\n   \
    \     return 0\n    end\n    count = 0\n    for i = 1:l - l_sub + 1\n        if\
    \ string[i:i+l_sub-1] == substring\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    lastindex = nothing\n    count = 0\n    while lastindex\
    \ != string.length\n        lastindex = search(string, substring; lastindex =\
    \ lastindex)\n        if lastindex == nothing\n            break\n        end\n\
    \        count += 1\n        lastindex += substring.length\n    end\n    return\
    \ count\nend", "    if length(substring) > length(string)\n        return 0\n\
    \    end\n    s = zero(Int64)\n    for i in 1:length(string)\n        if string[i]\
    \ == substring[1]\n            if string[i:i+length(substring)-1] == substring\n\
    \                s += 1\n            end\n        end\n    end\n    return s\n\
    end", "    count = 0\n    for i = 1:length(string)\n        if string[i:end] ==\
    \ substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    n=0\n    i=1\n    while i<=length(string)-length(substring)+1\n   \
    \     if string[i:i+length(substring)-1]==substring\n            n+=1\n      \
    \      i+=length(substring)\n        else\n            i+=1\n        end\n   \
    \ end\n    return n\nend", "    count = 0\n    while true\n        index = findfirst(string,\
    \ substring)\n        if index != nothing\n            count += 1\n          \
    \  string = string[index+length(substring):end]\n        else\n            break\n\
    \        end\n    end\n    return count\nend", "    \n    if string == \"\" \n\
    \        return 0\n    end\n    \n    i = 1\n    j = 1\n    count = 0\n    while\
    \ i <= length(string) - length(substring) + 1\n        while j <= length(substring)\n\
    \            if string[i] == substring[j]\n                j += 1\n          \
    \      i += 1\n            else\n                i -= j - 2\n                j\
    \ = 1\n                break\n            end\n        end\n        if j == length(substring)\
    \ + 1\n            count += 1\n            i -= j - 2\n            j = 1\n   \
    \     end\n    end\n    return count\nend", "    if substring == \"\"\n      \
    \  return 0\n    end\n    i = 0\n    count = 0\n    while i <= length(string)\
    \ - length(substring)\n        j = 1\n        while j <= length(substring)\n \
    \           if substring[j] != string[i+j]\n                break\n          \
    \  end\n            j += 1\n        end\n        if j == length(substring) + 1\n\
    \            count += 1\n        end\n        i += 1\n    end\n    return count\n\
    end", "    n = length(string)\n    l = length(substring)\n    c = 0\n    for i\
    \ in 1:n-l+1\n        if(string[i:i+l-1] == substring)\n            c = c + 1\n\
    \        end\n    end\n    return c\nend", "    counter = 0\n    for i in 1:length(string)\n\
    \        if string[i:i+length(substring)-1] == substring\n            counter\
    \ += 1\n        end\n    end\n    return counter\nend", "    counter = 0\n   \
    \ for i in 1:length(string)\n        if string[i:i+length(substring)-1] == substring\n\
    \            counter += 1\n        end\n    end\n    return counter\nend", " \
    \   if substring == \"\" return 0\n    n = 0\n    for i in 1:length(string) -\
    \ length(substring) + 1\n        n += string[i:i+length(substring)] == substring\n\
    \    end\n    return n\nend", "    return how_many_times_internal(string, substring,\
    \ 0)\nend", "    count = 0\n    for i = 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    return map(x -> contains(x, substring), split(string, \"\"))\n    |>\
    \ sum\nend", "    if substring == \"\"\n        return 0\n    end\n    count =\
    \ 0\n    for i in 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    if substring == \"\"\n        return 0\n    end\n    for i in 1:length(string)\n\
    \        if length(string) < i + length(substring) - 1\n            return 0\n\
    \        end\n        if string[i:i+length(substring)-1] == substring\n      \
    \      return 1 + how_many_times(string[i+1:end], substring)\n        end\n  \
    \  end\n    return 0\nend", "    # Initialize\n    occurances = 0\n    substring_length\
    \ = length(substring)\n    # Loop over string\n    for i in 1:length(string)\n\
    \        # Check if substring matches string\n        if string[i:i+substring_length-1]\
    \ == substring\n            occurances += 1\n        end\n    end\n    # Return\n\
    \    return occurances\nend", "    for n = 1:length(string)\n        println(string[n:end])\n\
    \    end\n    return 0\nend", "    len = length(substring)\n    count = 0\n  \
    \  for i in 1:length(string)\n        if string[i:i+len-1] == substring\n    \
    \        count += 1\n        end\n    end\n    return count\nend", "    if substring\
    \ == \"\"\n        return 0\n    end\n    count = 0\n    for i in 1:length(string)\n\
    \        if isequal(string[i:i+length(substring)-1], substring)\n            count\
    \ += 1\n        end\n    end\n    return count\nend\n \n \n \n \n\"\"\" Use the\
    \ how_many_times function to find the number of times a given symbol is present\
    \ in a string.\n    >>> frequency_of_each_symbol(\"aaaa\")\n    Dict('a'=>4)\n\
    \    >>> frequency_of_each_symbol(\"abcd\")\n    Dict('a'=>1,'b'=>1,'c'=>1,'d'=>1)\n\
    \    >>> frequency_of_each_symbol(\"abbcdddd\")\n    Dict('a'=>1,'b'=>2,'c'=>1,'d'=>4)\n\
    \    \"\"\"", "    # count them manually\n    count = 0\n    substring_length\
    \ = length(substring)\n    string_length = length(string)\n    for i in 1:string_length-substring_length+1\n\
    \        count += isequal(string[i:i+substring_length-1], substring)\n    end\n\
    \    return count\nend", "    count = 0\n    for i in 1:length(string)\n     \
    \   if string[i:i+length(substring)-1] == substring\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    if substring == \"\"\n   \
    \     return 0\n    end\n    j = 1\n    count = 0\n    for i in 1:length(string)\n\
    \        if string[i] == substring[j]\n            j = j + 1\n            if j\
    \ == length(substring) + 1\n                count = count + 1\n              \
    \  j = 1\n            end\n        else\n            j = 1\n        end\n    end\n\
    \    return count\nend", "    if length(substring) > length(string)\n        return\
    \ 0\n    end\n    n = 0\n    for i in 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            n += 1\n        end\n    end\n    return n\nend",
  "    if length(substring) > length(string)\n        return 0\n    end\n    return\
    \ reduce(+ , [1 for i in 1:length(string)-length(substring)+1 if substring ==\
    \ string[i:i+length(substring)-1]])\nend", "    if substring == \"\"\n       \
    \ return 0\n    end\n    substr_len = length(substring)\n    end_index = length(string)\
    \ - substr_len + 1\n    i = 1\n    count = 0\n    while i <= end_index\n     \
    \   if string[i:i+substr_len-1] == substring\n            count += 1\n       \
    \     i += substr_len\n        else\n            i += 1\n        end\n    end\n\
    \    return count\nend", "    contains(string, substring)\nend\n \nprintln(how_many_times(\"\
    \", \"a\"))\nprintln(how_many_times(\"aaa\", \"a\"))\nprintln(how_many_times(\"\
    aaaa\", \"aa\"))\n \n \n ", "    index = 1\n    count = 0\n    while true\n  \
    \      index = search(string, substring, index)\n        if index == nothing\n\
    \            break\n        end\n        count += 1\n        index += 1\n    end\n\
    \    return count\nend", "    times = 0\n    start_index = 1\n    while(start_index\
    \ <= length(string))\n        sub_index = findfirst(string, substring, start_index)\n\
    \        if sub_index != 0\n            times += 1\n            start_index =\
    \ sub_index + 1\n        else\n            return times\n        end\n    end\n\
    \    return times\nend", "    if length(substring) == 0\n        return 0\n  \
    \  end\n    if length(string) == 0\n        return 0\n    end\n    if length(string)\
    \ < length(substring)\n        return 0\n    end\n    count = 0\n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    for i = 1:len_string-len_substring+1\n\
    \        if string[i:i+len_substring-1] == substring\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    if length(substring) > length(string)\
    \ return 0\n    matched = true\n    count = 0\n    for i in 1:length(string)\n\
    \        j = 1\n        matched = true\n        while j <= length(substring) &&\
    \ matched && i + j - 1 <= length(string)\n            if string[i + j - 1] !=\
    \ substring[j]\n                matched = false\n            end\n           \
    \ j += 1\n        end\n        if matched\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    end\n    # let's find all the index of the substrings in\
    \ the string\n    ind = []\n    for i in 1:length(string)\n        # check that\
    \ we don't go out of the string and that the substring match the pattern of the\
    \ string\n        if i + length(substring) - 1 <= length(string) && string[i:i+length(substring)-1]\
    \ == substring[1:end-1]\n            push!(ind, i)\n        end\n    end\n   \
    \ return length(ind)\nend", "    string_index = 1\n    string_length = length(string)\n\
    \    substring_length = length(substring)\n    count = 0\n    while string_index\
    \ < string_length\n        found = string[string_index:string_index+substring_length-1]\
    \ == substring\n        if found\n            count += 1\n            string_index\
    \ += substring_length - 1\n        end\n        string_index += 1\n    end\n \
    \   return count\nend", "    pass\nend", "    n = length(string)\n    k = length(substring)\n\
    \    if n < k\n        return 0\n    end\n    occurrences = 0\n    for i in 1:n-k+1\n\
    \        if string[i:i+k-1] == substring\n            occurrences += 1\n     \
    \   end\n    end\n    return occurrences\nend", "    if (substring == \"\") return\
    \ 0\n    matches = matchall(r\"$substring\", string)\n    return length(matches)\n\
    end\n ", "    counter = 0\n    if substring == \"\"\n        return 0\n    end\n\
    \    if length(substring) > length(string)\n        return 0\n    end\n    for\
    \ i in 1:length(string)\n        if string[i:i+length(substring)-1] == substring\n\
    \            counter += 1\n        end\n    end\n    return counter\nend", " \
    \   if length(substring) == 0 return 0 end\n    counter = 0\n    for i in 1:length(string)\n\
    \        if i + length(substring) <= length(string)\n            if string[i:i+length(substring)-1]\
    \ == substring\n                counter += 1\n            end\n        end\n \
    \   end\n    return counter\nend", "    string = convert(String, string)\n   \
    \ substring = convert(String, substring)\n    if substring == \"\"\n        return\
    \ 0\n    end\n    if substring > string\n        return 0\n    end\n    count\
    \ = 0\n    while true\n        index = search(string, substring)\n        if index\
    \ != nothing\n            count += 1\n            string = string[index + length(substring):end]\n\
    \        else\n            break\n        end\n    end\n    return count\nend",
  "  count = 0\n  while ismatch(r\"(?=(\"*substring*\"))\", string) #Search for the\
    \ substring with overlapping\n    count += 1\n    string = regexreplace(string,r\"\
    (?=(\"*substring*\"))\", \"\") #remove the first occurrence with overlapping\n\
    \  end\n  return count\nend", "    count = 0\n    for i in 1:length(string)\n\
    \        if string[i:end] == substring\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    count = 0\n    index = string.index(substring)\n\
    \    while index != nothing\n        count += 1\n        index = string.index(substring,\
    \ index+1)\n    end\n    return count\nend", "    substring_len = length(substring)\n\
    \    string_len = length(string)\n    counter = 0\n    if substring_len > string_len\n\
    \        return 0\n    end\n    for i in 1:string_len-substring_len+1\n      \
    \  if string[i:i+substring_len-1] == substring\n            counter = counter\
    \ + 1\n        end\n    end\n    return counter\nend", "    if substring == \"\
    \"\n        return 0\n    end\n    i = 1\n    while i <= length(string)\n    \
    \    if string[i:end] == substring\n            return 1 + how_many_times(string[i+1:end],\
    \ substring)\n        end\n        i = i + 1\n    end\n    return 0\nend", " \
    \   if length(substring) > length(string)\n        return 0\n    end\n    n =\
    \ length(string)\n    m = length(substring)\n    count = 0\n    for i in 1:n-m+1\n\
    \        if string[i:i+m-1] == substring\n            count += 1\n        end\n\
    \    end\n    return count\nend\n    \n    \n    \n    \n    \n    \n    ", " \
    \   if substring == \"\"\n        return 0\n    end\n    if string == \"\"\n \
    \       return 0\n    end\n    count = 0\n    for i in 1:length(string)\n    \
    \    if string[i:i+length(substring)-1] == substring\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    return length(matchall(string,\
    \ substring))\nend", "    if string == \"\"\n        return 0\n    end\n    how_many_times(string[2:end],\
    \ substring) + (string[1:2] == substring[1:2] ? 1 : 0)\nend", "    count::Int64\
    \ = 0\n    for i in collect(1:length(string))\n        if string[i:i+length(substring)-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    n = length(string)\n    m = length(substring)\n    k = 0\n    for i\
    \ in 1:n-m+1\n        is_sub = true\n        for j in 1:m\n            if string[i+j-1]\
    \ != substring[j]\n                is_sub = false\n                break\n   \
    \         end\n        end\n        if is_sub\n            k = k + 1\n       \
    \ end\n    end\n    return k\nend", "    if substring in string\n        return\
    \ count(string, substring)\n    else\n        return 0\n    end\nend", "    if\
    \ length(substring) == 0\n        return 0\n    end\n    if length(string) ==\
    \ 0\n        return 0\n    end\n    if length(string) < length(substring)\n  \
    \      return 0\n    end\n    count = 0\n    for i = 1:length(string)\n      \
    \  substr = string[i:i+length(substring)-1]\n        if substr == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    i,\
    \ j, cnt = 1, 1, 0\n    for c in string\n        if c == substring[j]\n      \
    \      j += 1\n            if j == length(substring) + 1\n                cnt\
    \ += 1\n                j = 1\n            end\n        else\n            j =\
    \ 1\n        end\n        i += 1\n    end\n    return cnt\nend", "    if (length(substring)\
    \ > length(string))\n        return 0\n    end\n    matches = 0\n    for i in\
    \ 1:length(string)\n        if string[i:i+length(substring)-1] == substring\n\
    \            matches += 1\n        end\n    end\n    return matches\nend\n ",
  "    count = 0\n    i = 1\n    while i <= length(string) - length(substring) + 1\n\
    \        if string[i:i+length(substring)-1] == substring\n            count +=\
    \ 1\n        end\n        i += 1\n    end\n    return count\nend", "    length_string\
    \ = length(string)\n    length_substring = length(substring)\n    counts = zeros(Int64,length_string-length_substring+1)\n\
    \    for i in 1:length_string-length_substring+1\n        for j in 1:length_substring\n\
    \            if string[i+j-1] != substring[j]\n                break\n       \
    \     end\n            if j == length_substring\n                counts[i] = 1\n\
    \            end\n        end\n    end\n    return sum(counts)\nend", "    times\
    \ = 0\n    for i = 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            times += 1\n        end\n    end\n    return times\n\
    end", "    \"\"\"\n    >>> how_many_times(\"aaaa\", \"\")\n    \"\"\"\n    length\
    \ = length(substring)\n    count = 0\n    for i in 1:length(string)\n        if\
    \ string[i:i+length-1] == substring\n            count += 1\n        end\n   \
    \ end\n    return count\nend", "    total = 0\n    for start in 1:length(string)\
    \ - length(substring) + 1\n        if string[start:start+length(substring)-1]\
    \ == substring\n            total += 1\n        end\n    end\n    return total\n\
    end", "    size_str = length(string)\n    size_substr = length(substring)\n  \
    \  if size_str < size_substr\n        return 0\n    end\n    num_times = 0\n \
    \   for i in 1:size_str-size_substr+1\n        if substring == string[i:i+size_substr-1]\n\
    \            num_times += 1\n        end\n    end\n    return num_times\nend",
  "    if substring == \"\"\n        return 0\n    end\n    if substring == string\n\
    \        return 1\n    end\n    amount = 0\n    for i in 1:length(string)\n  \
    \      if string[i:i+length(substring)-1] == substring\n            amount +=\
    \ 1\n        end\n    end\n    return amount\nend", "    if substring == \"\"\n\
    \        return 0\n    end\n    n = length(string)\n    m = length(substring)\n\
    \    count = 0\n    for i in 1:n-m+1\n        if string[i:i+m-1] == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    if\
    \ substring == \"\"\n        return 0\n    end\n    number_of_overlaps = 0\n \
    \   for i in 1:length(string)\n        if string[i:i+length(substring)-1] == substring\n\
    \            number_of_overlaps += 1\n        end\n    end\n    return number_of_overlaps\n\
    end", "    idx = 1\n    result = 0\n    if substring == \"\"\n        return 0\n\
    \    end\n    @while idx != lastindex(string)\n        if string[idx:idx+lastindex(substring)-1]\
    \ == substring\n            result += 1\n        end\n        idx += 1\n    end\n\
    \    return result\nend", "    how_many_times = 0\n    if length(substring) <=\
    \ length(string)\n        for i in 1:length(string)\n            if substring\
    \ == string[i:i+length(substring)-1]\n                how_many_times += 1\n  \
    \          end\n        end\n    end\n    return how_many_times\nend", "    n\
    \ = length(string)\n    m = length(substring)\n    c = 0\n    for i in 1:n\n \
    \       if string[i:i+m-1] == substring\n            c += 1\n        end\n   \
    \ end\n    return c\nend", "    index = search(string, substring)\n    if index\
    \ == nothing\n        return 0\n    else\n        return 1 + how_many_times(string[index+1:end],\
    \ substring)\n    end\nend", "    i, count = 1, 0\n    while i<=length(string)-length(substring)+1\n\
    \        if string[i:i+length(substring)-1] == substring\n            count +=\
    \ 1\n            i += length(substring)\n        else\n            i += 1\n  \
    \      end\n    end\n    return count\nend", "    \n    if substring in string\n\
    \        n=0\n        for i in 1:length(string)\n            if string[i] == substring[1]\n\
    \                if string[i:i+length(substring)-1] == substring\n           \
    \         n+=1\n                end\n            end\n        end\n        return\
    \ n\n    else\n        return 0\n    end\nend", "    match(r\"($substring)\",\
    \ string)\nend\n</code>\nThis code gives the correct answer on my computer, however\
    \ the autograder says that it failed.\n<code>Test Passed: Submission passed test\
    \ how_many_times_test_0\nTest Passed: Submission passed test how_many_times_test_1\n\
    Test Passed: Submission passed test how_many_times_test_2\nTest Passed: Submission\
    \ passed test how_many_times_test_3\nTest Passed: Submission passed test how_many_times_test_4\n\
    Test Passed: Submission passed test how_many_times_test_5\nTest Passed: Submission\
    \ passed test how_many_times_test_6\nTest Passed: Submission passed test how_many_times_test_7\n\
    Test Passed: Submission passed test how_many_times_test_8\nTest Passed: Submission\
    \ passed test how_many_times_test_9\nTest Passed: Submission passed test how_many_times_test_10\n\
    Test Passed: Submission passed test how_many_times_test_11\nTest Passed: Submission\
    \ passed test how_many_times_test_12\nTest Passed: Submission passed test how_many_times_test_13\n\
    Test Passed: Submission passed test how_many_times_test_14\nTest Passed: Submission\
    \ passed test how_many_times_test_15\nTest Passed: Submission passed test how_many_times_test_16\n\
    Test Passed: Submission passed test how_many_times_test_17\nTest Passed: Submission\
    \ passed test how_many_times_test_18\nTest Passed: Submission passed test how_many_times_test_19\n\
    Test Passed: Submission passed test how_many_times_test_20\nTest Passed: Submission\
    \ passed test how_many_times_test_21\nTest Passed: Submission passed test how_many_times_test_22\n\
    Test Passed: Submission passed test how_many_times_test_23\nTest Passed: Submission\
    \ passed test how_many_times_test_24\nTest Passed: Submission passed test how_many_times_test_25\n\
    Test Passed: Submission passed test how_many_times_test_26\nTest Passed: Submission\
    \ passed test how_many_times_test_27\nTest Passed: Submission passed test how_many_times_test_28\n\
    Test Passed: Submission", "    start = 1\n    index = search(string, substring,\
    \ start)\n    n = 0\n    while index != nothing\n        n += 1\n        start\
    \ = index + 1\n        index = search(string, substring, start)\n    end\n   \
    \ return n\nend", "    if substring == \"\"\n        return 0\n    end\n    n_times\
    \ = 0\n    iter = 1\n    for i in 1:length(string)\n        if substring == string[i:i+length(substring)-1]\n\
    \            n_times += 1\n        end\n    end\n    return n_times\nend", " \
    \   counter = 0\n    for index = 1:length(string)\n        if isequal(string[index:index+length(substring)-1],\
    \ substring)\n            counter += 1\n        end\n    end\n    return counter\n\
    end", "    found_times = 0\n    for i in 1:length(string)\n        if string[i]\
    \ == substring[1] && (i+length(substring)-1) <= length(string) && string[i:i+length(substring)-1]\
    \ == substring[2:end]\n            found_times += 1\n        end\n    end\n  \
    \  return found_times\nend", "    if substring == \"\"\n        return 0\n   \
    \ end\n    matches = 0\n    for i in 1:length(string)\n        for j in 1:length(substring)\n\
    \            if (i+j-1) > length(string)\n                return matches\n   \
    \         end\n            if string[i+j-1] != substring[j]\n                break\n\
    \            end\n            if j == length(substring)\n                matches\
    \ += 1\n            end\n        end\n    end\n    return matches\nend", "   \
    \ str_len = length(string)\n    substr_len = length(substring)\n    count = 0\n\
    \    for i in 0:str_len-substr_len+1\n        if string[i:i+substr_len] == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    how_many_times(string::Vector{Char},\
    \ substring::Vector{Char})::Int64 =\n    count = 0\n    for i = 1:length(string)\n\
    \        if string[i:i+length(substring)-1] == substring\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    if substring == \"\"\n\
    \        return 0\n    end\n    if string == \"\"\n        return 0\n    end\n\
    \    times = 0\n    for i in 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            times += 1\n        end\n    end\n    return times\n\
    end", "    if substring == \"\"\n        return 0\n    end\n    count = 0\n  \
    \  while true\n        index = findfirst(string, substring)\n        if index\
    \ == nothing\n            break\n        end\n        count += 1\n        string\
    \ = string[index+1:end]\n    end\n    return count\nend", "    \n    # Define\
    \ empty vector to store the position at which the substring is found in the original\
    \ string\n    occurences = Vector{Int64}()\n    \n    # Define temporary counters\n\
    \    i::Int64 = 1\n    j::Int64 = 1\n    \n    # Check if substring is not empty\n\
    \    if substring != \"\"\n        \n        # Loop through all the characters\
    \ of the original string\n        while i <= length(string)\n            # Check\
    \ if the character of the original string is the same as the first character of\
    \ the substring\n            if string[i] == substring[j]\n                # If\
    \ true, add the position of the character in the vector of occurences\n      \
    \          push!(occurences, i)\n                # Add 1 to the index of the substring\
    \ and reset the index of the original string\n                j = j + 1\n    \
    \            i = 1\n                # If the substring was fully found, reset\
    \ the indexes and do not add 1 to the index of the original string\n         \
    \       if j > length(substring)\n                    j = 1\n                \
    \    i = i - 1\n                end\n            # If the character of the original\
    \ string is not the same as the first character of the substring, add 1 to the\
    \ index of the original string\n            else\n                i = i + 1\n\
    \            end\n        end\n    end\n    \n    # Return the number of occurences\
    \ of the substring in the original string\n    return length(occurences)\nend",
  "    n = 0\n    for i in 1:length(string)\n        if string[i] == substring[1]\n\
    \            if length(substring)==1\n                n += 1\n            else\n\
    \                next_part = string[i+1:i+length(substring)]\n               \
    \ if next_part == substring[2:end]\n                    n += 1\n             \
    \   end\n            end\n        end\n    end\n    return n\nend", "    found_idx\
    \ = findfirst(string, substring)\n    if isnull(found_idx)\n        return 0\n\
    \    else\n        return 1 + how_many_times(string[found_idx+1:end], substring)\n\
    \    end\nend", "    if substring == \"\"\n        return 0\n    end\n    last_match\
    \ = string.find(substring)\n    count = 0\n    while !isnothing(last_match)\n\
    \        count += 1\n        last_match = string.find(substring, last_match +\
    \ 1)\n    end\n    return count\nend", "    count = 0\n    for i in 1:length(string)\n\
    \        if string[i] == substring[1]\n            if string[i:i+length(substring)-1]\
    \ == substring\n                count += 1\n            end\n        end\n   \
    \ end\n    return count\nend", "    count = 0\n    for i in 1:length(string) -\
    \ length(substring) + 1\n        for j in 1:length(substring)\n            if\
    \ substring[j] != string[i+j-1]\n                break\n            end\n    \
    \        if j == length(substring)\n                count += 1\n            end\n\
    \        end\n    end\n    return count\nend", "    n = length(string)\n    m\
    \ = length(substring)\n    count = 0\n    for i in 1:n-m+1\n        j = 1\n  \
    \      while j<=m && string[i+j-1] == substring[j]\n            j += 1\n     \
    \   end\n        if j>m\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    if isempty(substring)\n        return 0\n    end\n    string_pos\
    \ = 1\n    substring_pos = 1\n    substring_length = length(substring)\n    times\
    \ = 0\n    while (string_pos <= length(string))\n        if (string[string_pos]\
    \ == substring[substring_pos])\n            substring_pos += 1\n            if\
    \ (substring_pos > substring_length)\n                times += 1\n           \
    \     substring_pos = 1\n            end\n        else\n            substring_pos\
    \ = 1\n        end\n        string_pos += 1\n    end\n    return times\nend\n\
    how_many_times(\"\", \"a\")\nhow_many_times(\"aaa\", \"a\")\nhow_many_times(\"\
    aaaa\", \"aa\")", "    string_length = length(string)\n    substring_length =\
    \ length(substring)\n    if substring_length == 0 \n        return 0\n    end\n\
    \    count = 0\n    for i in 1:string_length\n        if string[i:i+substring_length-1]\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end", "    if substring == \"\"\n        return 0\n    end\n    @assert(length(substring)\
    \ <= length(string))\n    String.overlaps(string, substring)\nend", "    start_index\
    \ = 0\n    number_of_substrings = 0\n    substring_length = length(substring)\n\
    \    for character in string\n        if character == substring[1]\n         \
    \   if substring == string[start_index:start_index+substring_length]\n       \
    \         number_of_substrings += 1\n            end\n        end\n        start_index\
    \ += 1\n    end\n    return number_of_substrings\nend", "    length(string) -\
    \ length(replace(string, substring, \"\"))\nend", "    count = 0\n    while in(substring,\
    \ string)\n        count += 1\n        string = replace(string, substring, \"\"\
    )\n    end\n    return count\nend", "    if string == \"\" || substring == \"\"\
    \ \n        return 0\n    end\n    matches = findall(substring, string)\n    if\
    \ matches == Any[]\n        return 0\n    end\n    return length(matches)\nend",
  "    lsub = length(substring)\n    lstring = length(string)\n    n = 0\n    for\
    \ i in 1:lstring-lsub+1\n        if string[i:i+lsub-1] == substring\n        \
    \    n += 1\n        end\n    end\n    return n\nend", "    found = 0\n    for\
    \ i = 1:length(string)\n        found += sum(string[i:i+length(substring)-1] .==\
    \ substring)\n    end\n    return found\nend", "    counter = 0\n    for i in\
    \ 1:length(string)\n        if string[i:i+length(substring)-1] == substring\n\
    \            counter += 1\n        end\n    end\n    return counter\nend", " \
    \   l1 = length(string)\n    l2 = length(substring)\n    c = 0\n    i = 1\n  \
    \  while i <= l1 - l2 + 1\n        if substring == string[i:i+l2-1]\n        \
    \    c += 1\n        end\n        i += 1\n    end\n    return c\nend", "    #\
    \ TODO: how many times does substring appear in string?\n    # count overlapping\
    \ cases, so\n    # e.g. for \"aaa\" and \"aa\" the answer is 3\n    # empty string\
    \ is a substring of any string\n    # e.g. for \"aaa\" and \"\" the answer is\
    \ 4\n    # substring can be longer than string\n    # e.g. for \"aaa\" and \"\
    aaaa\" the answer is 0\n    return 0\nend", "    i = 1\n    count = 0\n    while\
    \ i + length(substring) <= length(string)\n        if string[i:i+length(substring)]\
    \ == substring\n            count += 1\n        end\n        i += 1\n    end\n\
    \    return count\nend", "    \"\"\" calculate the number of time the substring\
    \ is found in the string \"\"\"\n    if substring == \"\" || string == \"\" ||\
    \ string == substring\n        return 0\n    end\n    answer = 0\n    i = 0\n\
    \    while i < length(string) - length(substring) + 1\n        if string[i+1:end]\
    \ == substring || string[i+1:end] == \"\"\n            answer += 1\n        end\n\
    \        i += 1\n    end\n    return answer\nend", "    s = findnext(string, substring)\n\
    \    if s == -1\n        return 0\n    else\n        return 1 + how_many_times(string[s+1:end],\
    \ substring)\n    end\nend\n@test how_many_times(\"\", \"a\") == 0\n@test how_many_times(\"\
    aaa\", \"a\") == 3\n@test how_many_times(\"aaaa\", \"aa\") == 3\n@test how_many_times(\"\
    aabaabaa\", \"ab\") == 3\n;", "    count = 0\n    for i in 1:length(string) -\
    \ length(substring) + 1\n        if string[i:i+length(substring)-1] == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    max_index\
    \ = length(string) - length(substring) + 1\n    found = 0\n    for index in 1:max_index\n\
    \        if string[index:index+length(substring)-1] == substring\n           \
    \ found += 1\n        end\n    end\n    return found\nend", "    n, m = length(string),\
    \ length(substring)\n    if n < m\n        return 0\n    end\n    count = 0\n\
    \    for i in 1:n-m+1\n        if string[i:i+m-1] == substring\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "  if isempty(substring)\
    \ \n    return 0\n  end\n  c = contains(string, substring)\n  count = 0\n  i =\
    \ 1\n  while c\n    count += 1\n    i += 1\n    c = contains(string[i:end], substring)\n\
    \  end\n  return count\nend", "    n = length(string)\n    m = length(substring)\n\
    \    count = 0\n    for i in 1:n-m+1\n        if string[i:i+m-1] == substring\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    how_many_times\
    \ = 0\n    for i = 1:length(string)\n        sub = string[i:i+length(substring)-1]\n\
    \        if sub == substring\n            how_many_times += 1\n        end\n \
    \   end\n    return how_many_times\nend", "    times = 0\n    for i in 1:length(string)\n\
    \        if string[i:i+length(substring)-1] == substring\n            times +=\
    \ 1\n        end\n    end\n    return times\nend", "    n = length(string)\n \
    \   m = length(substring)\n    found = 0\n    for start in 0:n-m+1\n        if\
    \ string[start:start+m] == substring\n            found += 1\n        end\n  \
    \  end\n    return found\nend\n    ", "    substr_len = length(substring)\n  \
    \  string_len = length(string)\n    indices = [i for i in 1:string_len-substr_len+1\
    \ if string[i:i+substr_len-1] == substring]\n    return length(indices)\nend",
  "    (p::Integer) -> Int64 = index(string, substring, p)\n    c = 0\n    p = 1\n\
    \    while (p > 0)\n        p = p()\n        c += 1\n    end\n    return c\nend",
  "  string_length = length(string)\n  substring_length = length(substring)\n  count\
    \ = 0\n  for i in 1:string_length-substring_length+1\n    if(string[i:i+substring_length-1]\
    \ == substring)\n      count += 1\n    end\n  end\n  return count\nend", "   \
    \ ret = 0\n    len_substring = length(substring)\n    for i in 1:length(string)\n\
    \        curr_substring = string[i:i+len_substring-1]\n        if curr_substring\
    \ == substring\n            ret += 1\n        end\n    end\n    return ret\nend",
  "    count = 0 \n    iter = 0\n    while iter <= length(string) - length(substring)\n\
    \        if string[iter+1:iter+length(substring)] == substring\n            count\
    \ += 1\n        end\n        iter += 1\n    end\n    return count\nend", "   \
    \ s = string\n    count = 0\n    while true\n        # print(s)\n        try\n\
    \            i = findfirst(s, substring)\n            count += 1\n           \
    \ s = s[i+1:end]\n        catch \n            break\n        end\n    end\n  \
    \  return count\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
