name: HumanEval_18_how_many_times
language: jl
prompt: "\"\"\" Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
  \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
  , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
  \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
  cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
completions: ["    idx = start(string)\n    counter = 0\n    while !endof(string)\n\
    \        nidx = nextind(string, idx)\n        if string[idx:nidx] == substring\n\
    \            counter += 1\n        end\n        idx = nidx\n    end\n    return\
    \ counter\nend\n \n \n \n\"\"\" Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3\n    \"\"\"", "    # your code goes here\n    count = 0\n\
    \    for i = 1:length(string)\n        if length(string) >= i + length(substring)\
    \ - 1\n            if string[i:i+length(substring)-1] == substring\n         \
    \       count += 1\n            end\n        end\n    end\n    return count\n\
    end", "    t=0\n    for i in 1:length(string)-length(substring)+1\n        if\
    \ string[i:i+length(substring)-1]==substring\n            t+=1\n        end\n\
    \    end\n    return t\nend", "    count = 0\n    str_len = length(string)\n \
    \   sub_len = length(substring)\n    i = 1\n    while i <= str_len\n        if\
    \ string[i:i+sub_len-1] == substring\n            count += 1\n            i +=\
    \ sub_len\n        else\n            i += 1\n        end\n    end\n    return\
    \ count\nend", "    cnt = 0\n    if length(substring) > length(string)\n     \
    \   return cnt\n    end\n    for i in 1:length(string)\n        if (i+length(substring)\
    \ <= length(string)) && string[i:i+length(substring)] == substring\n         \
    \   cnt += 1\n        end\n    end\n    return cnt\nend", "    n_times = 0\n \
    \   for i in 1:size(string, 1)\n        if string[i:i+size(substring, 1)-1] ==\
    \ substring\n            n_times += 1\n        end\n    end\n    return n_times\n\
    end", "    times = 0\n    for i in 1:length(string)\n        if string[i:i+length(substring)-1]\
    \ == substring\n            times += 1\n        end\n    end\n    return times\n\
    end", "    counter = 0\n    for i = 1:length(string) - length(substring) + 1\n\
    \        if string[i:i+length(substring) - 1] == substring\n            counter\
    \ += 1\n        end\n    end\n    return counter\nend", "    times = 0\n    i\
    \ = 1\n    while i <= length(string) - length(substring) + 1\n        if string[i:i+length(substring)-1]\
    \ == substring\n            times += 1\n            i += length(substring)\n \
    \       else\n            i += 1\n        end\n    end\n    return times\nend",
  "    n = length(string)\n    m = length(substring)\n    j = 1\n    s = 0\n    while\
    \ j <= n\n        if string[j:m] == substring\n            s += 1\n          \
    \  j += m\n        else\n            j += 1\n        end\n    end\n    return\
    \ s\nend\n ", "    i = 1\n    while i <= length(string)\n        if contains(string,\
    \ substring)\n            i += length(substring)\n        else\n            i\
    \ += 1\n        end\n    end\n    return i\nend", "    occurences = 0\n    sub_len\
    \ = length(substring)\n    for i in 1:length(string)\n        if string[i:i+sub_len-1]\
    \ == substring\n            occurences += 1\n        end\n    end\n    return\
    \ occurences\nend", "    count = 0\n    for i in 1:length(string)\n        if\
    \ string[i] == substring[1]\n            if string[i:i+length(substring)-1] ==\
    \ substring\n                count += 1\n            end\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for i in 1:length(string)\n     \
    \   j = 1\n        for k in i:length(string)\n            if string[k] == substring[j]\n\
    \                j += 1\n            else\n                break\n           \
    \ end\n            if j == length(substring) + 1\n                count += 1\n\
    \                break\n            end\n        end\n    end\n    return count\n\
    end\n ", "    if substring == \"\" return 0 end\n    l = length(substring)\n \
    \   c = 0\n    for i = 1:length(string)\n        if string[i:i+l-1] == substring\n\
    \            c += 1\n        end\n    end\n    return c\nend", "    s = length(string)\n\
    \    sub = length(substring)\n    if s == 0 || sub == 0\n        return 0\n  \
    \  end\n    counter = 0\n    for i = 1:s\n        # check if it is possible to\
    \ find substring from the current index\n        if s - i + 1 >= sub\n       \
    \     # there is a potential match\n            potential_match = string[i:i+sub-1]\n\
    \            if potential_match == substring\n                counter += 1\n \
    \           end\n        end\n    end\n    return counter\nend", "    occurences::Int64\
    \ = 0\n    find::Int64 = 1\n    while find != 0\n        find = find(string, substring)\n\
    \        if find != 0\n            occurences = occurences + 1\n            string\
    \ = string[find+1:end]\n        end\n    end\n    return occurences\nend", " \
    \   return Base.count(string, substring)\nend", "    j = 0\n    stringi = collect(string)\n\
    \    substringi = collect(substring)\n    for i in 1:length(string)\n        if\
    \ stringi[i] == substringi[1]\n            if substr(string, i, length(substring))\
    \ == substring\n                j = j + 1\n            end\n        end\n    end\n\
    \    return j\nend", "    last_index = 1\n    count = 0\n    for i in 1:length(substring)\n\
    \        if string[i] == substring[i]\n            last_index = i\n          \
    \  count += 1\n        else \n            last_index = 1\n        end\n    end\n\
    \    return count\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
