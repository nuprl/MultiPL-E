name: HumanEval_47_median
language: jl
prompt: "\"\"\"Return median of elements in the vector l.\n    >>> median([3, 1, 2,\
  \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\
  \nfunction median(l::Vector{Int64})::Float64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
  \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
  \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
  \ 7]) == 7)\nend\n"
completions: ["    n = length(l)\n    if n % 2 == 0\n        return (l[div(n, 2)]\
    \ + l[div(n, 2) + 1]) / 2\n    else\n        return l[div(n, 2) + 1]\n    end\n\
    end", "    if length(l)%2 == 0 \n        return (l[Int(length(l)/2)] + l[Int(length(l)/2)\
    \ + 1])/2\n    else \n        return l[Int(round(length(l)/2))]\n    end\nend",
  "    l = sort(l)\n    n = length(l)\n    if mod(n, 2) == 0\n        return (l[n/2]+l[n/2+1])/2\n\
    \    else\n        return l[ceil(n/2)]\n    end\nend", "    lsort = sort(l)\n\
    \    return (lsort[ceil(length(l)/2)] + lsort[floor(length(l)/2)])/2\nend", " \
    \   # sort the list\n    sl = sort(l)\n    # get the length of the list\n    l\
    \ = length(sl)\n    # get the middle index\n    m = l \xF7 2\n    # check if the\
    \ list has an even or odd length\n    if l % 2 == 0\n        # even length, return\
    \ the mean of the two middle elements\n        return (sl[m] + sl[m + 1]) \xF7\
    \ 2\n    else\n        # odd length, return the middle element\n        return\
    \ sl[m]\n    end\nend", "    r = length(l) % 2\n    m = div(length(l), 2)\n  \
    \  if r == 0\n        return (l[m]+l[m+1])/2\n    else\n        return l[m+1]\n\
    \    end\nend", "    length(l) % 2 == 0 && return mean(l[(length(l) >> 1) + 1\
    \ : (length(l) >> 1) + 2])\n    l[(length(l) >> 1) + 1]\nend\n# simple version",
  "    n = length(l)\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n + 1)/2]\n    end\nend", "    n = size(l, 1)\n \
    \   if n%2 == 0\n        return (l[n/2] + l[n/2+1])/2\n    else\n        return\
    \ l[(n+1)/2]\n    end\nend", "    n = length(l)\n    m = n/2\n    s = sort(l)\n\
    \    if n%2 == 0\n        return (s[m]+s[m+1])/2\n    else\n        return s[ceil(m)]\n\
    \    end\nend", "    if (length(l) % 2 == 0)\n        return ((l[(length(l) \xF7\
    \ 2)] + l[(length(l) \xF7 2) + 1]) / 2)\n    else\n        return l[(length(l)\
    \ \xF7 2) + 1]\n    end\nend", "    if length(l)==0\n        println(\"Error,\
    \ empty list\")\n        return\n    end\n    if length(l)%2 == 0\n        half\
    \ = length(l)\xF72\n        l_half = l[half:half+1]\n        med = sum(l_half)/2\n\
    \    else\n        half = floor(length(l)/2)\n        med = l[half]\n    end\n\
    \    return med\nend", "    @assert(length(l) % 2 == 1)\n    n = div(length(l),\
    \ 2) + 1\n    l[n]\nend", "    (n,_)=size(l)\n    if n%2==0\n        return (l[floor(Int64,n/2)]+l[floor(Int64,n/2)+1])/2\n\
    \    else\n        return l[floor(Int64,n/2)+1]\n    end\nend", "    sorted_list\
    \ = sort(l)\n    n = length(sorted_list)\n    if n % 2 == 0\n        (sorted_list[n/2]\
    \ + sorted_list[n/2 + 1])/2\n    else\n        sorted_list[div(n, 2) + 1]\n  \
    \  end\nend\n ", "    return median(convert(Vector{Float64}, l))\nend", "    l\
    \ = sort(l)\n    n = length(l)\n    if mod(n, 2) == 0\n        return (l[n\xF7\
    2] + l[n\xF72 + 1])/2\n    else\n        return l[(n+1)\xF72]\n    end\nend",
  "    n = length(l)\n    if n % 2 == 0\n        return (sort(l)[n/2] + sort(l)[n/2\
    \ + 1])/2\n    else\n        return sort(l)[(n+1)/2]\n    end\nend", "    if length(l)\
    \ % 2 == 0\n        return (l[length(l) // 2] + l[length(l) // 2 + 1]) / 2\n \
    \   else\n        return l[length(l) // 2 + 1]\n    end\nend", "    m = length(l)\
    \ \xF7 2\n    if (length(l) % 2) == 0\n        return (l[m] + l[m + 1]) / 2\n\
    \    else\n        return l[m + 1]\n    end\nend", "    m = length(l)\n    x =\
    \ sort(l)\n    if m % 2 == 0\n        return (x[m/2]+x[m/2+1])/2\n    else\n \
    \       return x[(m+1)/2]\n    end\nend", "    if length(l) % 2 == 0\n       \
    \ a = length(l) / 2\n        return (l[a] + l[a+1]) / 2\n    else\n        return\
    \ l[ceil(length(l) / 2)]\n    end\nend", "    sortedl = sort(l)\n    n = length(l)\n\
    \    if mod(n, 2) == 0\n        return (sortedl[n/2] + sortedl[n/2 + 1])/2\n \
    \   else\n        return sortedl[(n+1)/2]\n    end\nend", "  if length(l)%2 ==\
    \ 0\n    return (sort(l)[floor(Int64,length(l)/2)] + sort(l)[floor(Int64,length(l)/2)+1])/2\n\
    \  else\n    return sort(l)[floor(Int64,length(l)/2)]\n  end\nend", "    # Sort\
    \ the vector in increasing order and return the median.\n    l = sort(l)\n   \
    \ n = length(l)\n    if n % 2 == 0 \n        # n is even\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        # n is odd\n        return l[(n+1)/2]\n \
    \   end\nend", "    #sort the vector\n    sorted = sort(l) \n    if mod(length(sorted),2)\
    \ == 0\n        #if vector is even length, compute average of middle two elements\n\
    \        return (sorted[div(length(sorted),2)] + sorted[div(length(sorted),2)\
    \ + 1])/2\n    else\n        #else just compute the middle element\n        return\
    \ sorted[div(length(sorted),2)]\n    end\nend\n    \n    \n```", "    length =\
    \ size(l)[1]\n    if length == 0\n        error(\"The vector has zero elements.\
    \ Cannot find the median.\")\n    end\n    if length % 2 == 0\n        return\
    \ (l[length/2] + l[length/2 + 1])/2\n    else\n        return l[(length + 1)/2]\n\
    \    end\nend", "    l = sort(l)\n    n = length(l)\n    if n % 2 == 0 \n    \
    \    return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[div(n, 2) + 1]\n\
    \    end\nend", "    vec_len = length(l)\n    # sort vector \n    sl = sort(l)\n\
    \    # check if even or odd and return median\n    if (vec_len % 2 == 0)\n   \
    \     return (sl[floor(Int64,vec_len/2)] + sl[floor(Int64,vec_len/2)+1])/2\n \
    \   else\n        return sl[floor(Int64,vec_len/2)+1]\n    end\nend", "    return\
    \ median(Float64, l)\nend", "    m = l[Int64(length(l)/2)]\n    return m\nend",
  "    return (sum(l) - minimum(l) - maximum(l)) / (length(l) - 2)\nend", "    sort!(l)\n\
    \    if mod(length(l), 2) == 0\n        return (l[div(length(l), 2)] + l[div(length(l),\
    \ 2) + 1]) / 2\n    else\n        return l[ceil(length(l) / 2)]\n    end\nend",
  "    return sort(l)[length(l) \xF7 2]\nend", "    # add your code here\n    l2 =\
    \ sort(l)\n    if iseven(length(l2))\n        return (l2[div(length(l2),2)] +\
    \ l2[div(length(l2),2)+1])/2\n    else\n        return l2[div(length(l2),2)+1]\n\
    \    end\nend", "    if iseven(length(l))\n        return (l[div(length(l),2)]\
    \ + l[div(length(l),2)+1])/2\n    else\n        return l[div(length(l),2)+1]\n\
    \    end\nend", "    n = length(l)\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2+1])/2\n    else\n        return l[Int(n/2)]\n    end\nend", "    if\
    \ length(l) % 2 == 0 \n        m = 0.5 * (l[Int(length(l)/2)] + l[Int(length(l)/2)\
    \ + 1])\n    else \n        m = l[Int(length(l)/2)]\n    end\n    return m\nend\n\
    median([3, 1, 2, 4, 5])", "    if length(l) == 0\n        return 0\n    end\n\
    \    if length(l) % 2 == 0\n        return (l[length(l) / 2] + l[length(l) / 2\
    \ + 1]) / 2\n    else\n        return l[length(l) / 2 + 1]\n    end\nend", " \
    \   l_sort = sort(l)\n    midpt = div(length(l_sort), 2)\n    if iseven(length(l_sort))\n\
    \        return (l_sort[midpt] + l_sort[midpt + 1]) / 2\n    else\n        return\
    \ l_sort[midpt]\n    end\nend", "    return -1\nend\n ", "    m = sort(l)\n  \
    \  return (m[div(length(m),2)] + m[div(length(m)+1,2)])/2\nend", "    return median(convert(Vector{Float64},\
    \ l))\nend", "    # Sort the vector\n    sorting!(l)\n    # Median of vector with\
    \ even number of elements is the average of middle two elements\n    if mod(length(l),\
    \ 2) == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n\
    \    # Median of vector with odd number of elements is the middle element\n  \
    \  else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    sort!(l)\n\
    \    m = div(length(l), 2)\n    if (m == 0)\n        return l[1]\n    elseif (m\
    \ % 2 == 0)\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\n\
    \    end\nend", "    l = sort(l)\n    n = length(l)\n    if (mod(n, 2) == 0)\n\
    \        return ((l[(n/2)] + l[(n/2) + 1])/2)\n    else\n        return l[Int(ceil(n/2))]\n\
    \    end\nend", "    length = size(l)[1]\n    if length % 2 == 0\n        return\
    \ (l[length \xF7 2] + l[length \xF7 2 + 1]) / 2\n    else\n        return l[(length\
    \ + 1) \xF7 2]\n    end\nend", "    l = sort(l)\n    if length(l) % 2 == 0\n \
    \       return (l[div(length(l), 2)] + l[div(length(l), 2) + 1]) / 2\n    else\n\
    \        return l[ceil(length(l) / 2)]\n    end\nend", "    return median(convert(Vector{Float64},\
    \ l))\nend", "    sort!(l)\n    median=l[round(Int64,length(l)/2)]\n    return\
    \ median\nend", "    #when odd number of elements\n    if length(l) % 2 == 1\n\
    \        return l[div(length(l), 2)+1]\n    else #even number of elements\n  \
    \      a = l[div(length(l), 2)]\n        b = l[div(length(l), 2)+1]\n        return\
    \ (a+b)/2\n    end\nend", "    \"\"\" Return median of integers.\n    \"\"\"\n\
    \    n = length(l)\n    if n < 1 \n        return -1.0\n    end\n    s = sort(l)\n\
    \    mid = div(n, 2)\n    if n % 2 == 1 \n        return s[mid]\n    else \n \
    \       return (s[mid] + s[mid+1]) / 2.0\n    end\nend", "    n = length(l)\n\
    \    sort!(l)\n    if n % 2 == 0 \n        return (l[n/2] + l[n/2+1])/2.0\n  \
    \  else\n        return l[div(n,2)+1]\n    end\nend", "    return median(l, similar(l[1]))\n\
    end", "    l = sort(l)\n    l_len = length(l)\n    if mod(l_len, 2) == 0\n   \
    \     return (l[l_len/2] + l[l_len/2 + 1])/2\n    else\n        return l[ceil(l_len/2)]\n\
    \    end\nend", "    return l[div(length(l), 2)]\nend", "    n = length(l)\n \
    \   i = ceil(Int64, n/2)\n    if mod(n, 2) == 0\n        return (l[i] + l[i-1])/2\n\
    \    else\n        return l[i]\n    end\nend", "    sort!(l)\n    if iseven(length(l))\n\
    \        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n\
    \        return l[length(l) \xF7 2 + 1]\n    end\nend", "    return median(map(x->Float64(x),\
    \ l))\nend", "    sorted = sort(l)\n    length = size(sorted)[1]\n    if length\
    \ % 2 == 0\n        return (sorted[length/2] + sorted[length/2 + 1])/2\n    else\n\
    \        return sorted[(length + 1)/2]\n    end\nend", "  q = sort(l)\n  n = length(q)\n\
    \  if n % 2 == 0\n    return (q[n/2]+q[n/2-1])/2\n  else\n    return q[ceil(n/2)]\n\
    \  end\nend", "    if length(l) % 2 == 0\n        return (maximum(l) + minimum(l))\
    \ / 2\n    else\n        return l[ceil(length(l)/2)]\n    end\nend", "    sorted_l\
    \ = sort(l)\n    if length(l) % 2 == 0 \n        return (sorted_l[div(length(l),\
    \ 2)] + sorted_l[div(length(l), 2) + 1]) / 2\n    else \n        return sorted_l[div(length(l),\
    \ 2) + 1]\n    end\nend\nmedian([3, 1, 2, 4, 5])", "    half = length(l) \xF7\
    \ 2\n    l = sort(l)\n    if half*2 == length(l)\n        return (l[half] + l[half+1])/2\n\
    \    else\n        return l[half+1]\n    end\nend", "    if length(l) % 2 == 0\n\
    \        median = (sort(l)[(length(l) / 2)] + sort(l)[(length(l) / 2) + 1]) /\
    \ 2\n    else\n        median = sort(l)[(length(l) + 1) / 2]\n    end\n    return\
    \ median\nend", "    l_sorted = sort(l)\n    n = length(l_sorted)\n    if n %\
    \ 2 == 0\n        x = l_sorted[n/2]\n        y = l_sorted[n/2 + 1]\n        return\
    \ (x + y)/2\n    else\n        return l_sorted[n/2 + 1]\n    end\nend", "    l\
    \ = sort(l)\n    if iseven(length(l))\n        return sum(l[div(length(l),2)-1:div(length(l),2)+1])/2\n\
    \    else\n        return l[div(length(l),2)]\n    end\nend\n \n ", "    sorted!(l)\n\
    \    n = length(l)\n    if n % 2 == 1\n        return l[div(n, 2) + 1]\n    else\n\
    \        return (l[div(n, 2)] + l[div(n, 2) + 1]) / 2\n    end\nend\n    \n  \
    \  ", "    n = length(l)\n    if n % 2 == 0\n        return (l[n/2] + l[n/2+1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend\nmedian([3, 1, 2, 4, 5])\n\
    median([-10, 4, 6, 1000, 10, 20])", "    n = length(l)\n    # handle special cases\n\
    \    if n == 0\n        return nothing\n    elseif n == 1\n        return l[1]\n\
    \    elseif n == 2\n        return (l[1] + l[2]) / 2\n    end\n    # sort and\
    \ return middle element\n    sl = sort(l)\n    return (sl[n\xF72] + sl[(n\xF7\
    2)+1]) / 2.0\nend", "    sort!(l)\n    if (length(l) % 2 == 0)\n        return\
    \ (l[(length(l) \xF7 2)] + l[(length(l) \xF7 2) + 1]) \xF7 2\n    else\n     \
    \   return l[((length(l) + 1) \xF7 2)]\n    end\nend", "    half = round(Int64,\
    \ length(l)/2)\n    if length(l) % 2 == 0\n        return (l[half] + l[half+1])/2\n\
    \    else\n        return l[half]\n    end\nend", "    if length(l) % 2 == 0\n\
    \        m = (l[length(l)\xF72] + l[length(l)\xF72 + 1])/2\n    else\n       \
    \ m = l[(length(l) + 1)\xF72]\n    end\n    return m\nend", "    if length(l)%2\
    \ == 0\n        index = div(length(l),2)\n        return (l[index]+l[index+1])/2\n\
    \    else\n        index = ceil(div(length(l),2))\n        return l[index]\n \
    \   end\nend", "    sorted_l = sort(l)\n    n = length(l)\n    if n % 2 == 0\n\
    \        return (sorted_l[n\xF72] + sorted_l[n\xF72+1]) / 2\n    else\n      \
    \  return sorted_l[ceil(Int64, n\xF72)]\n    end\nend", "    l = sort(l)\n   \
    \ if length(l) % 2 == 0\n        return (l[(length(l) / 2)] + l[(length(l) / 2\
    \ + 1)]) / 2\n    else\n        return l[(length(l) / 2)]\n    end\nend", "  \
    \  @show l\n    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l)\
    \ \xF7 2 + 1]) \xF7 2\n    else\n        return l[div(length(l), 2) + 1]\n   \
    \ end\nend", "    l = sort(l)\n    n = length(l)\n    if iseven(n)\n        return\
    \ (l[div(n,2)] + l[div(n,2)+1])/2\n    else\n        return l[div(n,2)]\n    end\n\
    end\n        ", "    \"\"\"Return median of elements in the vector l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \"\"\"", "    if iseven(length(l))\n        return (sort(l)[div(length(l),2)]\
    \ + sort(l)[div(length(l),2)+1])/2\n    else\n        return sort(l)[div(length(l),2)]\n\
    \    end\nend\n \n ", "    if length(l) % 2 == 0\n        return 0.5*(l[div(length(l),2)]\
    \ + l[div(length(l),2)+1])\n    else\n        return l[div(length(l),2)+1]\n \
    \   end\nend", "    return median(convert(Vector{Float64}, l))\nend", "    if\
    \ length(l) % 2 == 0\n        return (l[div(length(l), 2)] + l[div(length(l),\
    \ 2) + 1]) / 2.0\n    else\n        return l[div(length(l), 2) + 1]\n    end\n\
    end", "  n = length(l)\n  s = sort(l)\n  return (s[div(n,2)] + s[div(n+1,2)])/2\n\
    end", "   sorted_l = sort(l)\n   if 2 * floor(length(l)/2) == length(l)\n    \
    \  median = (sorted_l[length(l)/2] + sorted_l[length(l)/2 + 1])/2\n   else\n \
    \     median = sorted_l[ceil(length(l)/2)]\n   end\n   return median\nend", " \
    \   n = length(l)\n    if mod(n, 2) == 0\n        return (l[div(n, 2) - 1] + l[div(n,\
    \ 2)]) / 2\n    else\n        return l[div(n, 2)]\n    end\nend", "    sorted\
    \ = sort(l)\n    mid = Int(floor(length(l)/2))\n    if iseven(length(l))\n   \
    \     return (sorted[mid] + sorted[mid+1])/2\n    else\n        return sorted[mid]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n % 2 == 0 \n        sorted = sort(l)\n        k = n / 2\n        k1 =\
    \ Int(k)\n        k2 = k1 + 1\n        return (sorted[k1] + sorted[k2]) / 2\n\
    \    else\n        sorted = sort(l)\n        k = (n + 1) / 2\n        k1 = Int(k)\n\
    \        return sorted[k1]\n    end\nend", "    n = length(l)\n    m = n//2\n\
    \    if n % 2 == 0\n        return (l[m] + l[m+1])/2\n    else\n        return\
    \ l[m]\n    end\nend", "    sort!(l)\n    if mod(length(l), 2) == 0 \n       \
    \ return (l[div(length(l), 2)] + l[div(length(l), 2) + 1]) / 2\n    else\n   \
    \     return l[div(length(l), 2) + 1]\n    end\nend", "    if length(l)%2==0\n\
    \        return (l[floor(length(l)/2)]+l[floor(length(l)/2)+1])/2\n    else\n\
    \        return l[floor(length(l)/2)+1]\n    end\nend", "    n = length(l)\n \
    \   m = n \xF7 2\n    # if n is odd, return the middle element\n    if n % 2 ==\
    \ 1\n        return l[m+1]\n    # else return the average of the two middle elements\n\
    \    else\n        return 0.5*(l[m] + l[m+1])\n    end\nend", "    n = length(l)\n\
    \    if (n % 2 == 0) \n        return (l[n/2] + l[n/2+1])/2\n    else\n      \
    \  return l[div(n,2)+1]\n    end\nend", "    ls = sort(l)\n    n = length(ls)\n\
    \    if mod(n, 2) == 0\n        return (ls[floor(Int64, n/2)] + ls[floor(Int64,\
    \ n/2) + 1])/2\n    else\n        return ls[floor(Int64, n/2)]\n    end\nend",
  "    if length(l) % 2 == 0\n        (l[Int(floor(length(l)/2))] + l[Int(ceil(length(l)/2))])/2\n\
    \    else\n        l[Int(floor(length(l)/2))]\n    end\nend", "    if length(l)\
    \ % 2 == 0\n        return(sum(sort(l)[(length(l)//2),(length(l)//2)+1])/2)\n\
    \    else\n        return(sort(l)[length(l)//2])\n    end\nend", "    i = 0\n\
    \    j = 0\n    if length(l) % 2 == 0\n        for k in 1:length(l)\n        \
    \    if k == length(l)/2.0\n                i = l[k]\n            end\n      \
    \      if k == length(l)/2.0 + 1\n                j = l[k]\n            end\n\
    \        end\n        return (i + j)/2.0\n    else\n        for k in 1:length(l)\n\
    \            if k == ceil(length(l)/2.0)\n                i = l[k]\n         \
    \   end\n        end\n        return i\n    end\nend", "    if l == []\n     \
    \   return nothing\n    end\n    l_sorted = sort(l)\n    if l_sorted == []\n \
    \       return nothing\n    end\n    if length(l_sorted) % 2 == 0\n        return\
    \ (l_sorted[length(l_sorted) / 2] + l_sorted[length(l_sorted) / 2 + 1]) / 2\n\
    \    else\n        return l_sorted[floor(length(l_sorted) / 2) + 1]\n    end\n\
    end", "    len = length(l)\n    if len % 2 == 0\n        return (l[len/2] + l[len/2+1])/2\n\
    \    else\n        return l[ceil(len/2)]\n    end\nend", "    halfsize = round(Int64,\
    \ length(l)/2)\n    if length(l)%2==0\n        return (l[halfsize] + l[halfsize+1])/2\n\
    \    else\n        return l[halfsize]\n    end\nend", "    sorted = sort(l)\n\
    \    n = length(sorted)\n    if n%2 == 0\n        return (sorted[Int(n/2)] + sorted[Int(n/2)\
    \ + 1])/2\n    else\n        return sorted[Int(n/2)]\n    end\nend", "    return\
    \ mymedian(l)\nend", "    if length(l) % 2 == 0\n        return (l[length(l)\xF7\
    2] + l[length(l)\xF72+1])/2.0\n    else\n        return l[(length(l)+1)\xF72]\n\
    \    end\nend", "    if mod(length(l), 2) == 0\n        m = (l[length(l) / 2]\
    \ + l[length(l) / 2 + 1]) / 2\n    else\n        m = l[length(l) / 2 + 1]\n  \
    \  end\n    return m\nend", "    sorted_l = sort(l)\n    n = length(l)\n    if\
    \ n % 2 == 0\n        return (sorted_l[n/2] + sorted_l[n/2 + 1])/2\n    else\n\
    \        return sorted_l[(n + 1)/2]\n    end\nend", "    half = div(length(l),\
    \ 2)\n    sorted_l = sort(l)\n    if length(l) % 2 == 0\n        m = (sorted_l[half]\
    \ + sorted_l[half+1]) / 2\n    else\n        m = sorted_l[half+1]\n    end\n \
    \   return m\nend", "    @assert length(l) > 0 \n    s = sort(l)\n    m = length(s)\
    \ % 2 == 0 ? (s[Int(length(s)/2)] + s[Int(length(s)/2 + 1)])/2 : s[Int(length(s)/2)]\n\
    \    return m\nend", "    N = length(l)\n    return (l[ceil(Int64,N/2)] + l[floor(Int64,N/2)])/2\n\
    end", "    n = length(l)\n    if mod(n, 2) == 0\n        m = (l[div(n, 2)] + l[div(n,\
    \ 2) + 1]) / 2\n    else\n        m = l[div(n, 2) + 1]\n    end\n    return m\n\
    end", "    srtd = sort(l)\n    return (srtd[(end + 1) \xF7 2] + srtd[(end + 1)\
    \ \xF7 2 + 1]) / 2.0\nend", "    @assert length(l) > 0 \"empty vector\"\n    m\
    \ = sum(l) / length(l)\n    for x in l\n        m = m + (x - m) / length(l)\n\
    \    end\n    return m\nend", "    if length(l)%2==0 \n        return (l[div(length(l),2)]+l[div(length(l),2)+1])/2\n\
    \    else \n        return l[div(length(l),2)+1]\n    end\nend", "    # Your code\
    \ here\nend", "    return median(map(Float64, l))\nend", "    n = length(l)\n\
    \    if n%2 == 0\n        return (l[Int(n/2)] + l[Int(n/2) + 1])/2\n    else\n\
    \        return l[Int(n/2)]\n    end\nend", "    sorted = sort(l)\n    n = length(sorted)\n\
    \    if n%2 == 0\n        return (sorted[n/2] + sorted[n/2 + 1])/2\n    else\n\
    \        return sorted[(n+1)/2]\n    end\nend", "    if iseven(length(l))\n  \
    \      return (sort(l)[div(length(l),2)] + sort(l)[div(length(l),2)+1])/2.0\n\
    \    else\n        return sort(l)[div(length(l),2)+1]\n    end\nend", "    \"\"\
    \"\n    This function is able to compute the median of a vector of integer numbers.\n\
    \    The input vector must be of type int.\n    \"\"\"\n    # Check if the vector\
    \ is even or odd\n    n = length(l)\n    if mod(n,2) == 0\n        # if the vector\
    \ is even, return the mean of the 2 mid terms\n        return 0.5*(l[div(n,2)]\
    \ + l[div(n,2)+1])\n    else\n        # if the vector is odd, return the middle\
    \ term\n        return l[div(n,2)+1]\n    end\nend", "    x = copy(l)\n    sort!(x)\n\
    \    x = sort(x)\n    if length(x) % 2 == 0\n        (x[floor(Int64, length(x)/2)]\
    \ + x[floor(Int64, length(x)/2) + 1])/2\n    else\n        x[ceil(Int64, length(x)/2)]\n\
    \    end\nend", "    sort!(l)\n    if mod(length(l), 2) == 0\n        idx = (length(l)\
    \ + 1) / 2\n        return (l[idx - 1] + l[idx]) / 2\n    else\n        idx =\
    \ (length(l) + 1) / 2\n        return l[idx]\n    end\nend", "    if length(l)\
    \ % 2 == 0 \n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) /\
    \ 2\n    else \n        return l[(length(l) + 1) \xF7 2]\n    end\nend", "   \
    \ n = length(l)\n    if n % 2 == 0\n        return (l[(n+1)/2] + l[(n+1)/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    temp\
    \ = sort(l)\n    if (n % 2 == 0)\n        i = n \xF7 2\n        return (temp[i]\
    \ + temp[i + 1]) \xF7 2\n    else\n        return temp[div(n, 2) + 1]\n    end\n\
    end", "    N = length(l)\n    if N % 2 == 0\n        return (l[N/2] + l[N/2+1])/2\n\
    \    else\n        return l[N/2]\n    end\nend", "    if length(l) % 2 == 0\n\
    \        (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n  \
    \      l[(length(l) + 1) \xF7 2]\n    end\nend", "    if iseven(length(l))\n \
    \       return (median(l[1:end\xF72]) + median(l[end\xF72+1:end])) / 2.0\n   \
    \ else\n        return l[end\xF72+1]\n    end\nend", "    n = length(l)\n    if\
    \ n == 0\n        return -1\n    end\n    l = sort(l)\n    if n % 2 == 0\n   \
    \     return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[ceil(n/2)]\n\
    \    end\nend", "  n = size(l, 1)\n  if n % 2 == 0\n    return (l[n/2]+l[n/2+1])/2\n\
    \  else\n    return l[(n+1)/2]\n  end\nend", "    if (length(l) % 2 == 0)\n  \
    \      return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n    else\n\
    \        return l[(length(l) + 1) \xF7 2]\n    end\nend", "   m = length(l) //\
    \ 2 \n   sorted = sort(l) \n   if m*2 == length(l) \n       return (sorted[m]\
    \ + sorted[m+1])/2 \n   else \n       return sorted[m+1] \n   end \nend \n# end\
    \ of median()", "    return l[div(length(l), 2)]\nend", "    n = length(l)\n \
    \   mid = Int(n/2)\n    if n % 2 == 0\n        l[mid] + l[mid+1] / 2\n    else\n\
    \        l[mid]\n    end\nend", "    n = length(l)\n    if n % 2 == 0\n      \
    \  return (l[n/2] + l[n/2+1])/2\n    else\n        return l[(n+1)/2]\n    end\n\
    end", "    l = sort(l)\n    middle_element = l[div(length(l), 2)] \n    if length(l)\
    \ % 2 == 0 \n        return (middle_element + l[div(length(l), 2) + 1]) / 2\n\
    \    else \n        return middle_element\n    end\nend", "    n = length(l)\n\
    \    sortedl = sort(l)\n    if n % 2 == 1\n        return sortedl[div(n, 2) +\
    \ 1]\n    else\n        return (sortedl[div(n, 2)] + sortedl[div(n, 2) + 1]) /\
    \ 2\n    end\nend", "    \n    sz = length(l)\n    if sz % 2 == 0 # even number\
    \ of elements\n        ret = (l[sz \xF7 2] + l[sz \xF7 2 + 1]) / 2.0\n    else\
    \ # odd number of elements\n        ret = l[(sz + 1) \xF7 2]\n    end\n    return\
    \ ret\nend", "    sort!(l)\n    if iseven(length(l))\n        return (l[div(length(l),2)]\
    \ + l[div(length(l),2)+1])/2.0\n    else\n        return l[div(length(l),2)]\n\
    \    end\nend\n    \n# Task 1b: Pythagorean theorem and median\n# Implement a\
    \ function hypot(l) that returns the hypotenuse of the right-angled triangle defined\
    \ by the points l[1], l[2] and l[3]. The hypotenuse is the longest side of the\
    \ triangle. Note: the hypotenuse of (0,0), (3,4) and (0,0) is 5.", "    n = length(l)\n\
    \    isodd(n) && return medianodd(l)\n    medianeven(l)\nend", "    n = length(l)\n\
    \    if n == 0 \n        println(\"Vecteur vide\")\n        return 0.0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    s = sort(l)\n    if n % 2 ==\
    \ 0\n        m1 = s[n/2]\n        m2 = s[n/2 + 1]\n        return (m1 + m2)/2\n\
    \    else\n        return s[n/2 + 1]\n    end\nend", "    return sum(l)/length(l)\n\
    end\n ", "    n = length(l)\n    @assert n > 0\n    @assert length(unique(l))\
    \ == n\n    isort!(l)\n    if n % 2 == 1\n        return l[(n+1)/2]\n    else\n\
    \        return (l[n/2] + l[n/2+1])/2\n    end\nend\nmedian([3, 1, 2, 4, 5])\n\
    median([-10, 4, 6, 1000, 10, 20])", "    sorted = sort(l)\n    n = length(sorted)\n\
    \    if n % 2 == 0\n        return (sorted[n/2] + sorted[n/2 + 1])/2\n    else\n\
    \        return sorted[ceil(n/2)]\n    end\nend", "    median = l[Int(ceil(length(l)/2))]\n\
    \    if length(l) % 2 == 0\n        median = (median + l[Int(ceil(length(l)/2)-1)])/2\n\
    \    end\n    return median\nend", "    n = length(l)\n    if n % 2 == 0\n   \
    \     return (l[div(n, 2)] + l[div(n, 2) + 1]) / 2\n    else\n        return l[div(n\
    \ + 1, 2)]\n    end\nend", "    \n    n = length(l)\n    neven = div(n,2)\n  \
    \  if n % 2 == 0 \n        (l[neven] + l[neven+1])/2\n    else\n        l[div(n,2)+1]\n\
    \    end\nend", "    return median(map(Float64, l))\nend\nmedian(l::Vector{Float64})::Float64\
    \ = median(sort(l))", "    if length(l) == 0\n        return 0\n    end\n    if\
    \ length(l) % 2 == 0\n        return (l[(length(l) + 1) / 2] + l[(length(l) +\
    \ 1) / 2 + 1]) / 2\n    else\n        return l[(length(l) + 1) / 2]\n    end\n\
    end", "    l = sort(l)\n    l_s = length(l)\n    if l_s%2==0\n        l_s = l_s/2\n\
    \        return (l[l_s]+l[l_s+1])/2\n    else\n        l_s = l_s/2\n        return\
    \ l[l_s+1]\n    end\nend", "    l_sort = sort(l)\n    return l_sort[length(l)/2]\n\
    end", "    return (l[(length(l) + 1) div 2] + l[(length(l) + 2) div 2]) / 2.0\n\
    end\n \nmedian([3, 1, 2, 4, 5])", "    sorted_l = sort(l)\n    len_l = length(l)\n\
    \    if len_l % 2 == 0\n        return (sorted_l[div(len_l, 2)] + sorted_l[div(len_l,\
    \ 2) + 1]) / 2\n    else\n        return sorted_l[div(len_l, 2) + 1]\n    end\n\
    end", "    if isodd(length(l))\n        return l[ceil(length(l)/2)]\n    else\n\
    \        mid = length(l)/2\n        return (l[mid] + l[mid+1])/2\n    end\nend",
  "    n = length(l)\n    if n == 0\n        error(\"median: l should not be empty\"\
    )\n    end\n    if mod(n, 2) == 0\n        return (l[n/2] + l[n/2 + 1])/2\n  \
    \  else\n        return l[(n+1)/2]\n    end\nend", "    middle = div(length(l),\
    \ 2)\n    return (l[middle] + l[middle + 1]) / 2\nend", "    if(length(l)%2==0)\n\
    \        return (l[Int(length(l)/2)]+l[Int(length(l)/2)+1])/2\n    else\n    \
    \    return l[Int(length(l)/2)+1]\n    end\nend", "    if length(l) % 2 == 0\n\
    \        l_median = (sort(l)[length(l) \xF7 2] + sort(l)[length(l) \xF7 2 + 1])\
    \ / 2\n    else\n        l_median = sort(l)[(length(l) + 1) \xF7 2]\n    end\n\
    \    return l_median\nend", "    if iseven(length(l))\n        (l[Int(length(l)/2)]\
    \ + l[Int(length(l)/2)+1])/2\n    else\n        l[Int(length(l)/2)]\n    end\n\
    end", "    n = length(l)\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 +\
    \ 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    num = 0\n  \
    \  for i in 1:length(l)\n        num += l[i]\n    end\n    m = num/length(l)\n\
    \    return m\nend", "    \"\"\"Return median of elements in the vector l.\n \
    \   >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \"\"\"\n    n = length(l)\n    if n % 2 == 1\n        return l[(n+1)/2]\n\
    \    else\n        return (l[n/2] + l[n/2+1])/2\n    end\nend", "    return(median(Vector{Float64}(l)))\n\
    end", "    @assert length(l) > 0\n    l2 = sort(l)\n    if mod(length(l2), 2)\
    \ == 0\n        ind = div(length(l2), 2)\n        return (l2[ind] + l2[ind+1])/2\n\
    \    else\n        ind = div(length(l2)+1, 2)\n        return l2[ind]\n    end\n\
    end", "    # we assume l is sorted\n    m = length(l)\n    if m%2==0\n       \
    \ return (l[m/2] + l[m/2 + 1])/2\n    else\n        return l[(m+1)/2]\n    end\n\
    end\n\"\"\"Return the 3rd quartile of the elements in the vector l.\n    >>> q3([3,\
    \ 1, 2, 4, 5])\n    4\n    >>> q3([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"", "    return median(convert(Vector{Float64}, l))\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    if\
    \ iseven(length(l))\n        return (l[div(length(l),2)] + l[div(length(l),2)+1])/2\n\
    \    else\n        return l[div(length(l),2)]\n    end\nend", "    l = sort(l)\n\
    \    n = length(l)\n    return (l[div(n,2)] + l[div(n+1,2)])/2\nend", "    n =\
    \ length(l)\n    s = sort(l)\n    if n % 2 == 0\n        return (s[n \xF7 2] +\
    \ s[n \xF7 2 + 1]) / 2\n    else\n        return s[(n + 1) \xF7 2]\n    end\n\
    end", "    n = length(l)\n    if n % 2 == 0\n        return (sort(l)[n/2] + sort(l)[n/2+1])/2\n\
    \    else\n        return sort(l)[(n+1)/2]\n    end\nend", "    return l[length(l)\
    \ div 2]\nend", "    if (length(l)%2==0)\n        return (l[length(l)/2]+l[length(l)/2+1])/2\n\
    \    else\n        return l[(length(l)+1)/2]\n    end\nend", "    l[:] = sort(l)\n\
    \    if length(l) % 2 == 0\n        (l[length(l)//2]+l[length(l)//2+1])/2\n  \
    \  else\n        l[length(l)//2]\n    end\nend", "    qsort!(l)\n    if length(l)\
    \ % 2 == 0\n        (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7 2\n \
    \   else\n        l[(length(l) + 1) \xF7 2]\n    end\nend\n \n \n \n ", "    med\
    \ = 0\n    n = length(l)\n    if n%2 == 0\n        med = (l[Int(ceil(n/2))] +\
    \ l[Int(floor(n/2))])/2\n    else \n        med = l[Int(ceil(n/2))]\n    end\n\
    \    return med\nend", "  l = sort(l)\n  if length(l)%2 == 0\n    return (l[length(l)/2]\
    \ + l[length(l)/2 + 1])/2\n  else\n    return l[(length(l) + 1)/2]\n  end\nend",
  "    n = length(l)\n    if n == 0\n        error(\"median: empty vector\")\n   \
    \ end\n    if n == 1\n        return l[1]\n    end\n    sl = sort(l)\n    if n\
    \ % 2 == 0\n        return (sl[n/2] + sl[n/2 + 1])/2\n    else\n        return\
    \ sl[(n+1)/2]\n    end\nend", "    if (l == [])\n        return 0\n    end\n \
    \   if (length(l) % 2 == 0)\n        return (sort(l)[div(length(l), 2) + 1] +\
    \ sort(l)[div(length(l), 2)]) / 2\n    else\n        return sort(l)[div(length(l),\
    \ 2) + 1]\n    end\nend", "    if length(l)%2 == 0\n        l[length(l)/2]*0.5\
    \ + l[length(l)/2+1]*0.5\n    else\n        l[length(l)/2+1]\n    end\nend", " \
    \   n = length(l)\n    if n % 2 == 0\n        return (l[div(n, 2)] + l[div(n,\
    \ 2) + 1]) / 2\n    else\n        return l[div(n, 2) + 1]\n    end\nend", "  \
    \  n = length(l)\n    if mod(n, 2) == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[ceil(n/2)]\n    end\nend", "    if length(l) % 2 ==\
    \ 0 \n        return (sort(l)[length(l)\xF72] + sort(l)[length(l)\xF72 + 1])\xF7\
    2\n    else \n        return sort(l)[ceil(length(l)\xF72)]\n    end\nend", " \
    \   len = length(l)\n    len % 2 == 0 ? (sort(l)[len\xF72-1] + sort(l)[len\xF7\
    2])/2 : sort(l)[len\xF72]\nend\nmedian([3, 1, 2, 4, 5])", "    sorted_l = sort(l)\n\
    \    l_len = length(l)\n    if iseven(l_len)\n        return (sorted_l[div(l_len,\
    \ 2)] + sorted_l[div(l_len, 2) + 1]) / 2\n    else\n        return sorted_l[ceil(div(l_len,\
    \ 2))]\n    end\nend", "    return median_int(l)\nend", "    temp = sort(l)\n\
    \    if floor(length(temp)/2) == 0.0\n        # even number of elements in list\n\
    \        return (temp[div(length(temp),2)] + temp[div(length(temp),2) + 1])/2\n\
    \    else\n        # odd number of elements in list\n        return temp[ceil(length(temp)/2)]\n\
    \    end\nend", "    if length(l)%2==0\n        return (l[Int(length(l)/2)]+l[Int(length(l)/2)+1])/2\n\
    \    else\n        return l[Int(length(l)/2)]\n    end\nend", "    l1 = sort(l)\n\
    \    if length(l1)%2 == 0\n        median = (l1[div(length(l1),2)] + l1[div(length(l1),2)+1])/2\n\
    \    else\n        median = l1[div(length(l1),2)]\n    end\n    return median\n\
    end", "    n = length(l)\n    if n % 2 == 0\n        return (l[n/2] + l[n/2+1])/2\n\
    \    else\n        return l[ceil(n/2)]\n    end\nend", "    N = length(l)\n  \
    \  mid = (N+1)/2\n    if N % 2 == 0 \n        return (l[mid-1] + l[mid])/2\n \
    \   else\n        return l[mid]\n    end\nend", "    sorted = sort(l)\n    n =\
    \ length(sorted)\n    if(mod(n,2) == 0)\n        return ((sorted[Int(n/2)] + sorted[Int(n/2\
    \ + 1)])/2)\n    else\n        return sorted[Int(ceil(n/2))]\n    end\nend", " \
    \   sort!(l)\n    return (l[Int(ceil(length(l)/2))] + l[Int(floor(length(l)/2))])/2\n\
    end", "    l_sorted = sort(l)\n    n = length(l_sorted)\n    if n % 2 == 0\n \
    \       return (l_sorted[n/2] + l_sorted[n/2+1])/2\n    else\n        return l_sorted[div(n,2)+1]\n\
    \    end\nend", "    ll = length(l)\n    sort!(l)\n    if ll % 2 == 0\n      \
    \  m = l[(ll/2) + 1]\n        m += l[(ll/2)]\n        return m/2\n    else\n \
    \       return l[(ll/2) + 1]\n    end\nend", "    return sum(l)/length(l)\nend",
  "    sorted_l = sort(l)\n    middle = round(Int64, floor(length(l)/2))\n    if length(l)\
    \ % 2 == 0\n        return (sorted_l[middle] + sorted_l[middle + 1])/2\n    else\n\
    \        return sorted_l[middle]\n    end\nend", "    sorted = sort(l)\n    if\
    \ length(sorted) % 2 == 0\n        return (sorted[length(sorted) \xF7 2] + sorted[length(sorted)\
    \ \xF7 2 + 1]) \xF7 2\n    else\n        return sorted[length(sorted) \xF7 2 +\
    \ 1]\n    end\nend", "    n = length(l)\n    n_even = n % 2 == 0\n    n_odd =\
    \ n % 2 == 1\n    if n_even == true\n        m = Int(n/2)\n        return (l[m]\
    \ + l[m+1])/2\n    elseif n_odd == true\n        m = Int(n/2)\n        return\
    \ l[m]\n    end\nend", "    n = length(l)\n    sorted = sort(l)\n    if (n % 2\
    \ == 1) \n        m = sorted[div(n+1,2)]\n    else \n        m = (sorted[div(n,2)]\
    \ + sorted[div(n,2)+1])/2\n    end\n    return m\nend", "    s = sort(l)\n   \
    \ n = length(s)\n    if n % 2 == 0\n        # even\n        return (s[n\xF72]\
    \ + s[n\xF72+1])/2\n    else\n        # odd\n        return s[(n+1)\xF72]\n  \
    \  end\nend", "    sorted_l = sort(l)\n    half_i = floor(Int64,length(l)/2)\n\
    \    if mod(length(l),2) == 0\n        return (sorted_l[half_i] + sorted_l[half_i+1])/2\n\
    \    else\n        return sorted_l[half_i+1]\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
