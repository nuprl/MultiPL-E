name: HumanEval_42_incr_list
language: jl
prompt: "\"\"\"Return vector with elements incremented by 1.\n    >>> incr_list([1,\
  \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6,\
  \ 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
completions: ["    l + 1\nend", "    return map(x -> x + 1, l)\nend\nincr_list([1,\
    \ 2, 3])", "    inc_l = [i+1 for i in l]\n    return inc_l\nend", "    return\
    \ l .+ 1\nend", "    l .+ 1\nend", "    return l + 1\nend", "    incr_list(l)\
    \ = l .+ 1\nend", "    new_l = zeros(Int64, length(l))\n    for i in 1:length(l)\n\
    \        new_l[i] = l[i] + 1\n    end\n    return new_l\nend", "    return map(increment,\
    \ l)\nend", "    res = Int64[]\n    for i in l\n        push!(res, i+1)\n    end\n\
    \    return res\nend", "    for i = 1:length(l)\n        l[i] += 1\n    end\n\
    \    return l\nend", "    i = 1\n    while i <= length(l)\n        l[i] += 1\n\
    \        i += 1\n    end\n    return l\nend\nincr_list([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])", "    return l.+1\nend", "    return map(i -> i + 1, l)\nend", "    incr_list\
    \ = Vector{Int64}() \n    for i = 1:length(l)\n        push!(incr_list, l[i] +\
    \ 1)\n    end\n    return incr_list\nend", "    n = length(l)\n    m = zeros(Int64,\
    \ n)\n    for i in 1:n\n        m[i] = l[i] + 1\n    end\n    return m\nend",
  "    y = zeros(Int64,size(l,1))\n    for i in 1:size(l,1)\n        y[i] = l[i] +\
    \ 1\n    end\n    return y\nend", "    return l.+1\nend", "    return map(x ->\
    \ x + 1, l)\nend", "    return l.+1\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
