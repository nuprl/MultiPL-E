name: HumanEval_19_sort_numbers
language: jl
prompt: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to\
  \ largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n  \
  \  \"\"\"\nfunction sort_numbers(numbers::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
  \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
  \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six\
  \ five four three two one zero\") == \"zero one two three four five six\")\nend\n"
completions: ["    num_dict = Dict(\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\"\
    \ => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\"\
    \ => 8, \"nine\" => 9)\n    nums = numbers.split()\n    sort(nums, by=num_dict)\n\
    \    return \" \".join(nums)\nend", "    nums = []\n    for i in split(numbers)\n\
    \        if i == \"zero\"\n            push!(nums, 0)\n        elseif i == \"\
    one\"\n            push!(nums, 1)\n        elseif i == \"two\"\n            push!(nums,\
    \ 2)\n        elseif i == \"three\"\n            push!(nums, 3)\n        elseif\
    \ i == \"four\"\n            push!(nums, 4)\n        elseif i == \"five\"\n  \
    \          push!(nums, 5)\n        elseif i == \"six\"\n            push!(nums,\
    \ 6)\n        elseif i == \"seven\"\n            push!(nums, 7)\n        elseif\
    \ i == \"eight\"\n            push!(nums, 8)\n        elseif i == \"nine\"\n \
    \           push!(nums, 9)\n        end\n    end\n    ret = \"\"\n    for i in\
    \ sort(nums)\n        if i == 0\n            ret = ret * \"zero \"\n        elseif\
    \ i == 1\n            ret = ret * \"one \"\n        elseif i == 2\n          \
    \  ret = ret * \"two \"\n        elseif i == 3\n            ret = ret * \"three\
    \ \"\n        elseif i == 4\n            ret = ret * \"four \"\n        elseif\
    \ i == 5\n            ret = ret * \"five \"\n        elseif i == 6\n         \
    \   ret = ret * \"six \"\n        elseif i == 7\n            ret = ret * \"seven\
    \ \"\n        elseif i == 8\n            ret = ret * \"eight \"\n        elseif\
    \ i == 9\n            ret = ret * \"nine \"\n        end\n    end\n    return\
    \ ret\nend", "    \n    num_to_int = Dict(\"zero\" => 0, \"one\" => 1, \"two\"\
    \ => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\"\
    \ => 7, \"eight\" => 8, \"nine\" => 9)\n    numbers_split = split(numbers, \"\
    \ \")\n    numbers_int = [num_to_int[i] for i in numbers_split]\n    sorted_int\
    \ = sort(numbers_int)\n    int_to_num = Dict(v => k for k, v in num_to_int)\n\
    \    sorted_num = [int_to_num[i] for i in sorted_int]\n    return join(sorted_num,\
    \ \" \")\nend", "    var by_numeral = Dict{String,Int}()\n    by_numeral[\"zero\"\
    ] = 0\n    by_numeral[\"one\"] = 1\n    by_numeral[\"two\"] = 2\n    by_numeral[\"\
    three\"] = 3\n    by_numeral[\"four\"] = 4\n    by_numeral[\"five\"] = 5\n   \
    \ by_numeral[\"six\"] = 6\n    by_numeral[\"seven\"] = 7\n    by_numeral[\"eight\"\
    ] = 8\n    by_numeral[\"nine\"] = 9\n    var nums = [number for number in numbers.split(\"\
    \ \")]\n    sort!(nums, by_numeral)\n    return join(nums, \" \")\nend", "   \
    \ words = split(numbers, \" \")\n    numbers = []\n    for word in words\n   \
    \     number = word_to_number(word)\n        push!(numbers, number)\n    end\n\
    \    sort!(numbers)\n    results = []\n    for number in numbers\n        word\
    \ = number_to_word(number)\n        push!(results, word)\n    end\n    results\
    \ = join(results, \" \")\n    return results\nend", "    # split string into words\n\
    \    all_numbers = split(numbers, \" \")\n    # preallocate space for the output\
    \ array\n    output = String[]\n    # map the input string to numbers\n    for\
    \ i in all_numbers\n        push!(output, map_to_num(i))\n    end\n    return\
    \ join(sort(output), \" \")\nend", "    # split the string\n    splitted = split(numbers)\n\
    \    # check number of elements\n    n = length(splitted)\n    # check if n is\
    \ positive integer\n    if (n > 0) && (n < 10)\n        # if n is positive integer,\
    \ process the strings\n        # create an empty vector\n        x = Vector{Int64}()\n\
    \        # create an empty vector of strings\n        y = Vector{String}()\n \
    \       # create an empty string\n        z = \"\"\n        # populate the vectors\n\
    \        for i in splitted\n            push!(x, parse(Int64, i))\n          \
    \  push!(y, string(i))\n        end\n        # sort the vectors\n        sort!(x)\n\
    \        sort!(y)\n        # create the string\n        for j in y\n         \
    \   z = string(z, j, \" \")\n        end\n        # return the string\n      \
    \  return(z)\n    else\n        # if n is not positive integer, return the string\
    \ 'Invalid Input'\n        return(\"Invalid Input\")\n    end\nend", "    return\
    \ sort(split(numbers)).join(\" \")\nend", "    n = split(numbers)\n    d = Dict{String,\
    \ Int}()\n    for i = 1:length(n)\n        d[n[i]] = i\n    end\n    sorted_keys\
    \ = sort(collect(keys(d)))\n    return join(sorted_keys, \" \")\nend", "    #\
    \ tokenize string into list of numberals\n    numberals = split(numbers)\n   \
    \ # convert numberals to numbers\n    # sort numbers\n    # convert numbers to\
    \ numberals\n    # join numberals with spaces and return\n    sorted_numbers =\
    \ join(numberals, \" \")\n    return sorted_numbers\nend", "    num_dict = Dict(\n\
    \        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n      \
    \  \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"\
    six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\"\
    \ => 9,\n    )\n    num_list = []\n    for i in split(numbers)\n        push!(num_list,\
    \ num_dict[i])\n    end\n    num_list = sort(num_list)\n    output = []\n    for\
    \ i in num_list\n        for (key, value) in num_dict\n            if value ==\
    \ i\n                push!(output, key)\n            end\n        end\n    end\n\
    \    output = join(output, \" \")\n    return output\nend", "    sorted_numbers\
    \ = sort(split(numbers))\n    return join(sorted_numbers, \" \")\nend", "    numberals\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    sorted_numbers = []\n    for (i, x) in enumerate(numbers)\n\
    \        number = split(numbers, \" \")[i]\n        if number in numberals\n \
    \           push!(sorted_numbers, number)\n        end\n    end\n    sorted_numbers\
    \ = sort(sorted_numbers)\n    sorted_numbers = join(sorted_numbers, \" \")\n \
    \   return sorted_numbers\nend", "    # split string into words and parse to int\n\
    \    parsed_numbers = [parse(Int, word) for word in split(numbers, \" \")]\n \
    \   # sort and convert back to string\n    sorted_numbers = map(string, sort(parsed_numbers))\n\
    \    # join into sentence and return\n    return join(sorted_numbers, \" \")\n\
    end", "    # split on spaces, sort, join on spaces\n    return join(sort(split(numbers)),\
    \ \" \")\nend", "    return join(sort(split(numbers)), \" \")\nend", "    s =\
    \ split(numbers, ' ')\n    return join(sort(s), ' ')\nend", "    return [\" \"\
    .join(number.sort()) for number in numbers.split()]\nend", "    \n    # variable\
    \ to hold the sorted string\n    sorted_numbers = \"\"\n    \n    # create a dictionary\
    \ of numberals and their numeric counterparts\n    numberals = Dict{String,Int}()\n\
    \    numberals[\"zero\"] = 0\n    numberals[\"one\"] = 1\n    numberals[\"two\"\
    ] = 2\n    numberals[\"three\"] = 3\n    numberals[\"four\"] = 4\n    numberals[\"\
    five\"] = 5\n    numberals[\"six\"] = 6\n    numberals[\"seven\"] = 7\n    numberals[\"\
    eight\"] = 8\n    numberals[\"nine\"] = 9\n    \n    # create a list of the numbers\
    \ in their numeric counterparts\n    numbers_list = [numberals[number] for number\
    \ in split(numbers)]\n    \n    # sort the list of numbers and convert to string\n\
    \    sorted_numbers = join(string.(sort(numbers_list)))\n    \n    return sorted_numbers\n\
    end", "    # map the numbers to integers for sorting\n    int_numbers = map(numbers)\
    \ do x\n        Dict(\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9\n      \
    \  )[x]\n    end\n    # sort the integers\n    sorted_int_numbers = sort(int_numbers)\n\
    \    # map back to strings\n    sorted_strings = map(sorted_int_numbers) do x\n\
    \        Dict(\n            0 => \"zero\",\n            1 => \"one\",\n      \
    \      2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\"\n        )[x]\n    end\n\
    \    # return the string\n    join(sorted_strings, \" \")\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
