name: HumanEval_12_longest
language: jl
prompt: "\"\"\" Out of vector of strings, return the longest one. Return the first\
  \ one in case of multiple\n    strings of the same length. Return nothing in case\
  \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
  a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"\
  ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String, Nothing}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
  \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
completions: ["    idx = argmax(length, strings)\n    if isempty(idx)\n        return\
    \ nothing\n    else\n        return strings[idx]\n    end\nend", "    if isempty(strings)\n\
    \        return nothing\n    end\n    res = strings[1]\n    for i = 2:length(strings)\n\
    \        if length(strings[i]) > length(res)\n            res = strings[i]\n \
    \       end\n    end\n    return res\nend", "    if isempty(strings)\n       \
    \ return nothing\n    end\n    return reduce(max, strings, lt=length)\nend\nlongest([\"\
    a\", \"bb\", \"ccc\"])", "    if length(strings) == 0\n        return nothing\n\
    \    end\n    mx = \"\"\n    for i in strings\n        if length(i) > length(mx)\n\
    \            mx = i\n        end\n    end\n    return mx\nend", "    return strings[argmax(length.(strings))]\n\
    end", "    if isempty(strings)\n        return nothing\n    end\n    longest =\
    \ strings[1]\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    \ \n ", "    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend", "  \
    \  if isempty(strings)\n        return nothing\n    end\n    s = strings[1]\n\
    \    for x in strings\n        if length(x) > length(s)\n            s = x\n \
    \       end\n    end\n    return s\nend", "    length = 0\n    for i in strings\n\
    \        if length(i) > length\n            length = length(i)\n            longest\
    \ = i\n        end\n    end\n    return longest\nend", "    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = maximum(length.(strings))\n\
    \    return strings[first(x -> length(x) == max_length, strings)]\nend", "   \
    \ max_length = length(strings) > 0 ? length(strings[1]) : 0 \n    max_idx = 1\
    \ \n    for i in 2:length(strings) \n        if length(strings[i]) > max_length\
    \ \n            max_length = length(strings[i]) \n            max_idx = i \n \
    \       end \n    end \n    length(strings) > 0 ? strings[max_idx] : nothing \n\
    end \n ", "    if isempty(strings)\n        return nothing\n    end\n    string\
    \ = strings[1]\n    for i = 2:length(strings)\n        string = (strings[i] >\
    \ string) ? strings[i] : string\n    end\n    return string\nend", "    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for i in\
    \ 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end", "    if isempty(strings) \n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings[2:end]\n        if length(string) >\
    \ length(longest)\n            longest = string\n        end\n    end\n    return\
    \ longest\nend", "    if length(strings) == 0\n        return nothing\n    end\n\
    \    return reduce(x -> x, strings) do x, y\n        if length(x) > length(y)\n\
    \            x\n        else\n            y\n        end\n    end\nend", "   \
    \ if isempty(strings)\n        return nothing\n    end\n    longest_string = strings[1]\n\
    \    for s in strings\n        if length(s) > length(longest_string)\n       \
    \     longest_string = s\n        end\n    end\n    return longest_string\nend",
  "    if isempty(strings)\n        return nothing\n    end\n    if length(strings)\
    \ == 1\n        return strings[1]\n    end\n    lenmax = length(strings[1])\n\
    \    ind = 1\n    for i = 2:length(strings)\n        if length(strings[i]) > lenmax\n\
    \            lenmax = length(strings[i])\n            ind = i\n        end\n \
    \   end\n    return strings[ind]\nend\nlongest([\"a\", \"bb\", \"ccc\"])", " \
    \   isempty(strings) && return nothing\n    return strings[argmax(length.(strings))]\n\
    end", "  longest = strings[1]\n  for s in strings\n    if length(s) > length(longest)\n\
    \      longest = s\n    end\n  end\n  return longest\nend", "    if strings ==\
    \ String[]\n        return nothing\n    elseif strings == String[\"\"]\n     \
    \   return \"\"\n    else\n        max_length = 0\n        for s in strings\n\
    \            if length(s) > max_length\n                max_length = length(s)\n\
    \            end\n        end\n        for s in strings\n            if length(s)\
    \ == max_length\n                return s\n            end\n        end\n    end\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
