name: HumanEval_81_numerical_letter_grade
language: jl
results:
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\"\
    , \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    rating = [4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]\n    grade_indices = zeros(Int,length(grades))\n\
    \    for i in eachindex(grades)\n        for j in eachindex(rating)\n        \
    \    if grades[i] >= rating[j]\n                grade_indices[i] = j\n       \
    \         break\n            end\n        end\n    end\n    return letter_grades[grade_indices]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpamthzrte.jl:45\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpamthzrte.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpamthzrte.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpamthzrte.jl:48\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpamthzrte.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpamthzrte.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpamthzrte.jl:49\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpamthzrte.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpamthzrte.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpamthzrte.jl:50\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpamthzrte.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpamthzrte.jl:44\nTest Summary:\
    \ | Pass  Fa"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpamthzrte.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = fill(\"\", length(grades))\n    for i in eachindex(grades)\n\
    \        numerical_grade = grades[i]\n        if numerical_grade > 4.0\n     \
    \       letter_grades[i] = \"A+\"\n        elseif numerical_grade > 3.7\n    \
    \        letter_grades[i] = \"A\"\n        elseif numerical_grade > 3.3\n    \
    \        letter_grades[i] = \"A-\"\n        elseif numerical_grade > 3.0\n   \
    \         letter_grades[i] = \"B+\"\n        elseif numerical_grade > 2.7\n  \
    \          letter_grades[i] = \"B\"\n        elseif numerical_grade > 2.3\n  \
    \          letter_grades[i] = \"B-\"\n        elseif numerical_grade > 2.0\n \
    \           letter_grades[i] = \"C+\"\n        elseif numerical_grade > 1.7\n\
    \            letter_grades[i] = \"C\"\n        elseif numerical_grade > 1.3\n\
    \            letter_grades[i] = \"C-\"\n        elseif numerical_grade > 1.0\n\
    \            letter_grades[i] = \"D+\"\n        elseif numerical_grade > 0.7\n\
    \            letter_grades[i] = \"D\"\n        elseif numerical_grade > 0.0\n\
    \            letter_grades[i] = \"D-\"\n        else\n            letter_grades[i]\
    \ = \"E\"\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp5l4j_3qn.jl:65\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A\", \"B\", \"C-\", \"C\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5l4j_3qn.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5l4j_3qn.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5l4j_3qn.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n        letter_grade_table = [\n        (4.0, \"A+\"), \n        (3.7, \"\
    A\"), \n        (3.3, \"A-\"), \n        (3.0, \"B+\"), \n        (2.7, \"B\"\
    ), \n        (2.3, \"B-\"), \n        (2.0, \"C+\"), \n        (1.7, \"C\"), \n\
    \        (1.3, \"C-\"), \n        (1.0, \"D+\"), \n        (0.7, \"D\"), \n  \
    \      (0.0, \"D-\"), \n        (0.0, \"E\")]\n    letter_grades = []\n    for\
    \ i in 1:length(grades)\n        for j in 1:length(letter_grade_table)\n     \
    \       if grades[i] >= letter_grade_table[j][1]\n                push!(letter_grades,\
    \ letter_grade_table[j][2])\n                break\n            end\n        end\n\
    \    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgo1wj2n1.jl:57\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgo1wj2n1.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgo1wj2n1.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpgo1wj2n1.jl:60\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgo1wj2n1.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgo1wj2n1.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpgo1wj2n1.jl:61\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgo1wj2n1.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgo1wj2n1.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpgo1wj2n1.jl:62\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgo1wj2n1.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgo1wj2n1.jl:56\nTest Summary:\
    \ | Pass  Fa"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgo1wj2n1.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    #if length(grades) == 0 # check if the vector is empty\n       \
    \ #return error(\"Empty Vector\")\n    #end\n    answer = []\n    for i in grades\
    \ \n        if i > 4.0 \n            append!(answer, \"A+\")\n        elseif 3.7\
    \ < i <= 4.0\n            append!(answer, \"A\")\n        elseif 3.3 < i <= 3.7\n\
    \            append!(answer, \"A-\")\n        elseif 3.0 < i <= 3.3\n        \
    \    append!(answer, \"B+\")\n        elseif 2.7 < i <= 3.0\n            append!(answer,\
    \ \"B\")\n        elseif 2.3 < i <= 2.7\n            append!(answer, \"B-\")\n\
    \        elseif 2.0 < i <= 2.3\n            append!(answer, \"C+\")\n        elseif\
    \ 1.7 < i <= 2.0\n            append!(answer, \"C\")\n        elseif 1.3 < i <=\
    \ 1.7\n            append!(answer, \"C-\")\n        elseif 1.0 < i <= 1.3\n  \
    \          append!(answer, \"D+\")\n        elseif 0.7 < i <= 1.0\n          \
    \  append!(answer, \"D\")\n        elseif 0.0 < i <= 0.7\n            append!(answer,\
    \ \"D-\")\n        else 0.0 == i\n            append!(answer, \"E\")\n       \
    \ end\n    end\n    return answer\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2nqc36gu.jl:68\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Char to an object\
    \ of type String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] numerical_letter_grade(grades::Vector{Float64})\n      @ Main /tmp/tmp2nqc36gu.jl:61\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp2nqc36gu.jl:68 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp2nqc36gu.jl:67\ntest set:\
    \ Error During Test at /tmp/tmp2nqc36gu.jl:69\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nqc36gu.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    num_letter_vec = Vector{String}(length(grades))\n    for i = 1:length(grades)\n\
    \        gpa = grades[i]\n        if gpa >= 4.0\n            num_letter_vec[i]\
    \ = \"A+\"\n        elseif gpa >= 3.7 && gpa < 4.0\n            num_letter_vec[i]\
    \ = \"A\"\n        elseif gpa >= 3.3 && gpa < 3.7\n            num_letter_vec[i]\
    \ = \"A-\"\n        elseif gpa >= 3.0 && gpa < 3.3\n            num_letter_vec[i]\
    \ = \"B+\"\n        elseif gpa >= 2.7 && gpa < 3.0\n            num_letter_vec[i]\
    \ = \"B\"\n        elseif gpa >= 2.3 && gpa < 2.7\n            num_letter_vec[i]\
    \ = \"B-\"\n        elseif gpa >= 2.0 && gpa < 2.3\n            num_letter_vec[i]\
    \ = \"C+\"\n        elseif gpa >= 1.7 && gpa < 2.0\n            num_letter_vec[i]\
    \ = \"C\"\n        elseif gpa >= 1.3 && gpa < 1.7\n            num_letter_vec[i]\
    \ = \"C-\"\n        elseif gpa >= 1.0 && gpa < 1.3\n            num_letter_vec[i]\
    \ = \"D+\"\n        elseif gpa >= 0.7 && gpa < 1.0\n            num_letter_vec[i]\
    \ = \"D\"\n        elseif gpa >= 0.0 && gpa < 0.7\n            num_letter_vec[i]\
    \ = \"D-\"\n        elseif gpa == 0.0\n            num_letter_vec[i] = \"E\"\n\
    \        end\n    end\n    return num_letter_vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpxwh9_ae_.jl:65\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest\
    \ candidates are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpxwh9_ae_.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxwh9_ae_.jl:65 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxwh9_ae_.jl:64\ntest set:\
    \ Error During Test at /tmp/tmpxwh9_ae_.jl:66\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: no method matching Vector{String}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpxwh9_ae_.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxwh9_ae_.jl:66 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxwh9_ae_.jl:64\ntest set:\
    \ Error During Test at /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxwh9_ae_.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    for i in 1:length(grades)\n        if grades[i] >= 4.0\n            grades[i]\
    \ = \"A+\"\n        elseif grades[i] > 3.7\n            grades[i] = \"A\"\n  \
    \      elseif grades[i] > 3.3\n            grades[i] = \"A-\"\n        elseif\
    \ grades[i] > 3.0\n            grades[i] = \"B+\"\n        elseif grades[i] >\
    \ 2.7\n            grades[i] = \"B\"\n        elseif grades[i] > 2.3\n       \
    \     grades[i] = \"B-\"\n        elseif grades[i] > 2.0\n            grades[i]\
    \ = \"C+\"\n        elseif grades[i] > 1.7\n            grades[i] = \"C\"\n  \
    \      elseif grades[i] > 1.3\n            grades[i] = \"C-\"\n        elseif\
    \ grades[i] > 1.0\n            grades[i] = \"D+\"\n        elseif grades[i] >\
    \ 0.7\n            grades[i] = \"D\"\n        elseif grades[i] > 0.0\n       \
    \     grades[i] = \"D-\"\n        elseif grades[i] == 0.0\n            grades[i]\
    \ = \"E\"\n        end\n    end\n    return grades\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2tck9ysm.jl:63\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type String to an object\
    \ of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Float64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp2tck9ysm.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2tck9ysm.jl:63 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2tck9ysm.jl:62\ntest set:\
    \ Error During Test at /tmp/tmp2tck9ysm.jl:64\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ String to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Float64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp2tck9ysm.jl:47\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2tck9ysm.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgv5nhypr.jl:1\nin expression starting at /tmp/tmpgv5nhypr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Given a vector of GPAs, it returns a vector of letter grades.\n\
    \    \"\"\"\n    letter_grades = []\n    for i in grades\n        if i == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif i > 3.7\n          \
    \  push!(letter_grades, \"A\")\n        elseif i > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif i > 3.0\n            push!(letter_grades, \"B+\")\n\
    \        elseif i > 2.7\n            push!(letter_grades, \"B\")\n        elseif\
    \ i > 2.3\n            push!(letter_grades, \"B-\")\n        elseif i > 2.0\n\
    \            push!(letter_grades, \"C+\")\n        elseif i > 1.7\n          \
    \  push!(letter_grades, \"C\")\n        elseif i > 1.3\n            push!(letter_grades,\
    \ \"C-\")\n        elseif i > 1.0\n            push!(letter_grades, \"D+\")\n\
    \        elseif i > 0.7\n            push!(letter_grades, \"D\")\n        elseif\
    \ i > 0.0\n            push!(letter_grades, \"D-\")\n        elseif i == 0.0\n\
    \            push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Translates the numerical grades in a vector to letter grades\
    \ and outputs a\n    vector of letter grades.\n    \"\"\"\n    letters = []\n\
    \    for i in 1:length(grades)\n        if grades[i] >= 4.0\n            push!(letters,\
    \ \"A+\")\n        elseif grades[i] >= 3.7\n            push!(letters, \"A\")\n\
    \        elseif grades[i] >= 3.3\n            push!(letters, \"A-\")\n       \
    \ elseif grades[i] >= 3.0\n            push!(letters, \"B+\")\n        elseif\
    \ grades[i] >= 2.7\n            push!(letters, \"B\")\n        elseif grades[i]\
    \ >= 2.3\n            push!(letters, \"B-\")\n        elseif grades[i] >= 2.0\n\
    \            push!(letters, \"C+\")\n        elseif grades[i] >= 1.7\n       \
    \     push!(letters, \"C\")\n        elseif grades[i] >= 1.3\n            push!(letters,\
    \ \"C-\")\n        elseif grades[i] >= 1.0\n            push!(letters, \"D+\"\
    )\n        elseif grades[i] >= 0.7\n            push!(letters, \"D\")\n      \
    \  elseif grades[i] >= 0.0\n            push!(letters, \"D-\")\n        else\n\
    \            push!(letters, \"E\")\n        end\n    end\n    return letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7c0129z1.jl:68\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7c0129z1.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7c0129z1.jl:67\ntest set: Test\
    \ Failed at /tmp/tmp7c0129z1.jl:71\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7c0129z1.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7c0129z1.jl:67\ntest set: Test\
    \ Failed at /tmp/tmp7c0129z1.jl:72\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7c0129z1.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7c0129z1.jl:67\ntest set: Test\
    \ Failed at /tmp/tmp7c0129z1.jl:73\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7c0129z1.jl:73 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7c0129z1.jl:67\nTest Summary:\
    \ | Pass  Fa"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7c0129z1.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = [\"E\" for i in 1:length(grades)]\n    for i in 1:length(grades)\n\
    \        if grades[i] == 4.0\n            grades_letter[i] = \"A+\"\n        elseif\
    \ 3.7 <= grades[i] < 4.0\n            grades_letter[i] = \"A\"\n        elseif\
    \ 3.3 <= grades[i] < 3.7\n            grades_letter[i] = \"A-\"\n        elseif\
    \ 3.0 <= grades[i] < 3.3\n            grades_letter[i] = \"B+\"\n        elseif\
    \ 2.7 <= grades[i] < 3.0\n            grades_letter[i] = \"B\"\n        elseif\
    \ 2.3 <= grades[i] < 2.7\n            grades_letter[i] = \"B-\"\n        elseif\
    \ 2.0 <= grades[i] < 2.3\n            grades_letter[i] = \"C+\"\n        elseif\
    \ 1.7 <= grades[i] < 2.0\n            grades_letter[i] = \"C\"\n        elseif\
    \ 1.3 <= grades[i] < 1.7\n            grades_letter[i] = \"C-\"\n        elseif\
    \ 1.0 <= grades[i] < 1.3\n            grades_letter[i] = \"D+\"\n        elseif\
    \ 0.7 <= grades[i] < 1.0\n            grades_letter[i] = \"D\"\n        elseif\
    \ 0.0 <= grades[i] < 0.7\n            grades_letter[i] = \"D-\"\n        else\n\
    \            grades_letter[i] = \"E\"\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmppmed1pqq.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppmed1pqq.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmed1pqq.jl:63\ntest set: Test\
    \ Failed at /tmp/tmppmed1pqq.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppmed1pqq.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmed1pqq.jl:63\ntest set: Test\
    \ Failed at /tmp/tmppmed1pqq.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppmed1pqq.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmed1pqq.jl:63\ntest set: Test\
    \ Failed at /tmp/tmppmed1pqq.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppmed1pqq.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppmed1pqq.jl:63\nTest Summary:\
    \ | Pass  Fa"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppmed1pqq.jl:61\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"The function numerical_letter_grade takes in a vector of float \n\
    \    grades, converts them to letter grades and returns a vector of \n    letter\
    \ grades\"\"\"\n    letter_grades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"\
    B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    output = []\n\
    \    for i in grades\n        if i > 4.0\n            push!(output, \"A+\")\n\
    \        elseif i > 3.7\n            push!(output, \"A\")\n        elseif i >\
    \ 3.3\n            push!(output, \"A-\")\n        elseif i > 3.0\n           \
    \ push!(output, \"B+\")\n        elseif i > 2.7\n            push!(output, \"\
    B\")\n        elseif i > 2.3\n            push!(output, \"B-\")\n        elseif\
    \ i > 2.0\n            push!(output, \"C+\")\n        elseif i > 1.7\n       \
    \     push!(output, \"C\")\n        elseif i > 1.3\n            push!(output,\
    \ \"C-\")\n        elseif i > 1.0\n            push!(output, \"D+\")\n       \
    \ elseif i > 0.7\n            push!(output, \"D\")\n        elseif i > 0.0\n \
    \           push!(output, \"D-\")\n        else\n            push!(output, \"\
    E\")\n        end\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc1pj63ua.jl:68\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A\", \"B\", \"C-\", \"C\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc1pj63ua.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc1pj63ua.jl:67\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc1pj63ua.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Initialize an empty vector to store grades \n    lettered_grades = String[]\n\
    \    # Loop through grades\n    for i = 1:length(grades)\n        # Check what\
    \ grade a student earned\n        if grades[i] >= 4.0\n            # If a student\
    \ earned an A+, append to vector\n            push!(lettered_grades, \"A+\")\n\
    \        elseif grades[i] >= 3.7\n            # If a student earned an A, append\
    \ to vector\n            push!(lettered_grades, \"A\")\n        elseif grades[i]\
    \ >= 3.3\n            # If a student earned an A-, append to vector\n        \
    \    push!(lettered_grades, \"A-\")\n        elseif grades[i] >= 3.0\n       \
    \     # If a student earned an B+, append to vector\n            push!(lettered_grades,\
    \ \"B+\")\n        elseif grades[i] >= 2.7\n            # If a student earned\
    \ an B, append to vector\n            push!(lettered_grades, \"B\")\n        elseif\
    \ grades[i] >= 2.3\n            # If a student earned an B-, append to vector\n\
    \            push!(lettered_grades, \"B-\")\n        elseif grades[i] >= 2.0\n\
    \            # If a student earned an C+, append to vector\n            push!(lettered_grades,\
    \ \"C+\")\n        elseif grades[i] >= 1.7\n            # If a student earned\
    \ an C, append to vector\n            push!(lettered_grades, \"C\")\n        elseif\
    \ grades[i] >= 1.3\n            # If a student earned an C-, append to vector\n\
    \            push!(lettered_grades, \"C-\")\n        elseif grades[i] >= 1.0\n\
    \            # If a student earned an D+, append to vector\n            push!(lettered_grades,\
    \ \"D+\")\n        elseif grades[i] >= 0.7\n            # If a student earned\
    \ an D, append to vector\n            push!(lettered_grades, \"D\")\n        elseif\
    \ grades[i] >= 0.0\n            # If a student earned an D-, append to vector\n\
    \            push!(lettered_grades, \"D-\")\n       \nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbe7bjstr.jl:1\nin expression starting at /tmp/tmpbe7bjstr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\",\
    \ \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    grade_limits = [4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]\n    grades_compare = repeat(grade_limits,\
    \ outer=length(grades))\n    grades_transpose = repeat(grades, length(grade_limits))\n\
    \    final_grade = map(x->x>y ? x : y, grades_compare, grades_transpose)\n   \
    \ return grade[sum(final_grade, dims=1)[2,:]]\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmporylnir6.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmporylnir6.jl:1\n\
    in expression starting at /tmp/tmporylnir6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade = []\n    for x in grades\n        if x >= 4.0\n            push!(grade,\
    \ \"A+\")\n        elseif x >= 3.7\n            push!(grade, \"A\")\n        elseif\
    \ x >= 3.3\n            push!(grade, \"A-\")\n        elseif x >= 3.0\n      \
    \      push!(grade, \"B+\")\n        elseif x >= 2.7\n            push!(grade,\
    \ \"B\")\n        elseif x >= 2.3\n            push!(grade, \"B-\")\n        elseif\
    \ x >= 2.0\n            push!(grade, \"C+\")\n        elseif x >= 1.7\n      \
    \      push!(grade, \"C\")\n        elseif x >= 1.3\n            push!(grade,\
    \ \"C-\")\n        elseif x >= 1.0\n            push!(grade, \"D+\")\n       \
    \ elseif x >= 0.7\n            push!(grade, \"D\")\n        elseif x >= 0.0\n\
    \            push!(grade, \"D-\")\n        else\n            push!(grade, \"E\"\
    )\n        end\n    end\n    return grade\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd04tw5bw.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd04tw5bw.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd04tw5bw.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpd04tw5bw.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd04tw5bw.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd04tw5bw.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpd04tw5bw.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd04tw5bw.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd04tw5bw.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpd04tw5bw.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd04tw5bw.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd04tw5bw.jl:63\nTest Summary:\
    \ | Pass  Fa"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd04tw5bw.jl:61\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    # create a vector of letters\n    letters = String[]\n    \n   \
    \ # iterate through the grades vector\n    for grade in grades\n        # push\
    \ a letter onto the end of the letters vector based on the \n        # corresponding\
    \ grade\n        if grade == 4.0\n            push!(letters, \"A+\")\n       \
    \ elseif grade > 3.7\n            push!(letters, \"A\")\n        elseif grade\
    \ > 3.3\n            push!(letters, \"A-\")\n        elseif grade > 3.0\n    \
    \        push!(letters, \"B+\")\n        elseif grade > 2.7\n            push!(letters,\
    \ \"B\")\n        elseif grade > 2.3\n            push!(letters, \"B-\")\n   \
    \     elseif grade > 2.0\n            push!(letters, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letters, \"C\")\n        elseif grade > 1.3\n     \
    \       push!(letters, \"C-\")\n        elseif grade > 1.0\n            push!(letters,\
    \ \"D+\")\n        elseif grade > 0.7\n            push!(letters, \"D\")\n   \
    \     elseif grade > 0.0\n            push!(letters, \"D-\")\n        else\n \
    \           push!(letters, \"E\")\n        end\n    end\n    return letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # p.s. there are better ways to implement this like \n    #       numerical_letter_grade(grades)\
    \ = map(grade -> get(grades_to_letter, grade, \"E\"), grades)\n    #       but\
    \ I tried to keep it simple for this problem\n    grades_to_letter = Dict(4.0\
    \ => \"A+\", 3.7 => \"A\", 3.3 => \"A-\", 3.0 => \"B+\", 2.7 => \"B\", 2.3 =>\
    \ \"B-\", 2.0 => \"C+\", 1.7 => \"C\", 1.3 => \"C-\", 1.0 => \"D+\", 0.7 => \"\
    D\", 0.0 => \"D-\")\n    letter_grades = Vector{String}(undef, length(grades))\n\
    \    for (i, grade) in enumerate(grades)\n        letter_grades[i] = grades_to_letter[floor(grade*10)/10]\
    \ == nothing ? \"E\" : grades_to_letter[floor(grade*10)/10]\n    end\n    return\
    \ letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7orxxrsc.jl:42\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  KeyError: key 3.5 not found\n  Stacktrace:\n   [1] getindex(h::Dict{Float64,\
    \ String}, key::Float64)\n     @ Base ./dict.jl:481\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp7orxxrsc.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7orxxrsc.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7orxxrsc.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp7orxxrsc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  KeyError: key 1.2 not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{Float64, String}, key::Float64)\n     @ Base ./dict.jl:481\n\
    \   [2] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmp7orxxrsc.jl:33\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7orxxrsc.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7orxxrsc.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp7orxxrsc.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  KeyError: key 0.5 not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{Float64, String}, key::Float64)\n     @ Base ./dict.jl:481\n\
    \   [2] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmp7orxxrsc.jl:33\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7orxxrsc.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7orxxrsc.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = [0 for x in 1:length(grades)]\n    for x in 1:length(grades)\n\
    \        if grades[x] >= 4.0\n            letter_grades[x] = \"A+\"\n        elseif\
    \ grades[x] >= 3.7\n            letter_grades[x] = \"A\"\n        elseif grades[x]\
    \ >= 3.3\n            letter_grades[x] = \"A-\"\n        elseif grades[x] >= 3.0\n\
    \            letter_grades[x] = \"B+\"\n        elseif grades[x] >= 2.7\n    \
    \        letter_grades[x] = \"B\"\n        elseif grades[x] >= 2.3\n         \
    \   letter_grades[x] = \"B-\"\n        elseif grades[x] >= 2.0\n            letter_grades[x]\
    \ = \"C+\"\n        elseif grades[x] >= 1.7\n            letter_grades[x] = \"\
    C\"\n        elseif grades[x] >= 1.3\n            letter_grades[x] = \"C-\"\n\
    \        elseif grades[x] >= 1.0\n            letter_grades[x] = \"D+\"\n    \
    \    elseif grades[x] >= 0.7\n            letter_grades[x] = \"D\"\n        elseif\
    \ grades[x] >= 0.0\n            letter_grades[x] = \"D-\"\n        elseif grades[x]\
    \ >= 0.0\n            letter_grades[x] = \"E\"\n        end\n    end\n    \n \
    \   return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_i0hf4fr.jl:65\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type String to an object\
    \ of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp_i0hf4fr.jl:30\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_i0hf4fr.jl:65 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_i0hf4fr.jl:64\ntest set:\
    \ Error During Test at /tmp/tmp_i0hf4fr.jl:66\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp_i0hf4fr.jl:48\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_i0hf4fr.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade_array = []\n    for gpas in grades\n        if gpas >= 4.0\n   \
    \         push!(grade_array, \"A+\")\n        elseif gpas >= 3.7\n           \
    \ push!(grade_array, \"A\")\n        elseif gpas >= 3.3\n            push!(grade_array,\
    \ \"A-\")\n        elseif gpas >= 3.0\n            push!(grade_array, \"B+\")\n\
    \        elseif gpas >= 2.7\n            push!(grade_array, \"B\")\n        elseif\
    \ gpas >= 2.3\n            push!(grade_array, \"B-\")\n        elseif gpas >=\
    \ 2.0\n            push!(grade_array, \"C+\")\n        elseif gpas >= 1.7\n  \
    \          push!(grade_array, \"C\")\n        elseif gpas >= 1.3\n           \
    \ push!(grade_array, \"C-\")\n        elseif gpas >= 1.0\n            push!(grade_array,\
    \ \"D+\")\n        elseif gpas >= 0.7\n            push!(grade_array, \"D\")\n\
    \        elseif gpas >= 0.0\n            push!(grade_array, \"D-\")\n        elseif\
    \ gpas == 0.0\n            push!(grade_array, \"E\")\n        end\n    end\n \
    \   return grade_array\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj3zd_ttk.jl:64\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj3zd_ttk.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj3zd_ttk.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpj3zd_ttk.jl:67\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj3zd_ttk.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj3zd_ttk.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpj3zd_ttk.jl:68\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj3zd_ttk.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj3zd_ttk.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpj3zd_ttk.jl:69\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj3zd_ttk.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj3zd_ttk.jl:63\nTest Summary:\
    \ | Pass  Fa"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj3zd_ttk.jl:61\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\"\
    , \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"] \n    numerical_grades = [4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]\n    letter_grades_return\
    \ = []\n    n = length(grades)\n    k = length(numerical_grades)\n    for i in\
    \ 1:n\n        for j in 1:k \n            if grades[i] >= numerical_grades[j]\n\
    \                push!(letter_grades_return, letter_grades[j])\n             \
    \   break\n            end\n        end\n    end\n    return letter_grades_return\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp71mywld3.jl:47\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71mywld3.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71mywld3.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp71mywld3.jl:50\n  Expression: candidate([0.0]) == [\"E\"]\n\
    \   Evaluated: [\"D-\"] == [\"E\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71mywld3.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71mywld3.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp71mywld3.jl:51\n  Expression: candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\"\
    , \"C-\", \"B\", \"A-\"] == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71mywld3.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71mywld3.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp71mywld3.jl:52\n  Expression: candidate([0.0, 0.7]) == [\"\
    E\", \"D-\"]\n   Evaluated: [\"D-\", \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71mywld3.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71mywld3.jl:46\nTest Summary:\
    \ | Pass  Fa"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp71mywld3.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Define variables\n    new_grades = []\n    letter_grades = [\"A+\",\
    \ \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\",\
    \ \"D-\", \"E\"]\n    grade_ranges = [(4.0,3.7), (3.7,3.3), (3.3,3.0), (3.0,2.7),\
    \ (2.7,2.3), (2.3,2.0), (2.0,1.7), (1.7,1.3), (1.3,1.0), (1.0,0.7), (0.7,0.0),\
    \ (0.0,0.0)]\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvua2pixl.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvua2pixl.jl:1\n\
    in expression starting at /tmp/tmpvua2pixl.jl:1\n"
  exit_code: 1
  status: SyntaxError
