name: HumanEval_55_fib
language: jl
prompt: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n\
  \    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) ==\
  \ 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
  \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
completions: ["    k, a, b = 0, 0, 1 \n    while k < n\n        a, b = b, a + b\n\
    \        k = k + 1\n    end\n    return a\nend\nusing Base.Test\n@testset \"fibonacci\
    \ test\" begin\n@test fib(1) == 1\n@test fib(2) == 1\n@test fib(3) == 2\n@test\
    \ fib(4) == 3\n@test fib(5) == 5\n@test fib(6) == 8\n@test fib(7) == 13\n@test\
    \ fib(8) == 21\n@test fib(9) == 34\n@test fib(10) == 55\nend", "    x::Int64 =\
    \ 1\n    y::Int64 = 1\n    for i in 1:n\n        y += x\n        x = y - x\n \
    \   end\n    return x\nend", "    if n<=2\n        return 1\n    else\n      \
    \  return fib(n-1)+fib(n-2)\n    end\nend;\nfib(10)", "    if n == 1 || n == 2\n\
    \        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend",
  "    n < 3 && return 1 \n    a, b = 1, 1 \n    for i in 2:n-1 \n        a, b = b,\
    \ a + b \n    end \n    return b \nend \n```", "    a = 0\n    b = 1\n    for\
    \ i in 1:n-1\n        c = a + b\n        a = b\n        b = c\n    end\n    return\
    \ b\nend", "    a = 0\n    b = 1\n    for i in 1:n-1\n        a, b = b, a + b\n\
    \    end\n    return b\nend", "    if n == 1\n        1\n    elseif n == 2\n \
    \       1\n    else\n        fib(n-1) + fib(n-2)\n    end\nend", "    if n < 2\n\
    \        return n\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend",
  "    if n == 1\n        return 1\n    elseif n == 2\n        return 1\n    else\n\
    \        return fib(n-1) + fib(n-2)\n    end\nend", "    a::Int64 = 0\n    b::Int64\
    \ = 1\n    for i in 1:n\n        # temp = a\n        # a = b\n        # b = temp\
    \ + b\n        a, b = b, a + b\n    end\n    return a\nend", "    n > 1 || return\
    \ n\n    n == 1 || return 1\n    return fib(n-1) + fib(n-2)\nend", "    if n <=\
    \ 1 \n        return n\n    else\n        return fib(n-1) + fib(n-2)\n    end\n\
    end", "    a = 0\n    b = 1\n    for i in 1:n\n        c = a + b\n        a =\
    \ b\n        b = c\n    end\n    return a\nend\n    \nfib(10)", "    # check the\
    \ type of input\n    if n < 0\n        error(\"ERROR: Input must be positive.\\\
    n\")\n    end\n    # check the value of input\n    if n == 0\n        return 0\n\
    \    elseif n == 1\n        return 1\n    else\n        # computing by recursion\n\
    \        return fib(n-1) + fib(n-2)\n    end\nend", "    if n <= 1\n        return\
    \ n\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend", "    if n <\
    \ 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\nend", "    if\
    \ n == 1 || n == 2\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n\
    \    end\nend", "    if n == 1 || n == 2\n        return 1\n    else\n       \
    \ return fib(n-1) + fib(n-2)\n    end\nend\nprintln(fib(10))\nprintln(fib(1))\n\
    println(fib(8))", "   if n < 2\n       return n\n   else\n       return fib(n-1)\
    \ + fib(n-2)\n   end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
