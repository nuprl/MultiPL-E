name: HumanEval_49_modp
language: jl
results:
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    while n > 0\n        r = r*2\n        if r\
    \ >= p\n            r = r % p\n        end\n        n = n - 1\n    end\n    return\
    \ r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        a = modp(n\
    \ \xF7 2, p)\n        a = mod(a * a, p)\n        if n % 2 == 1\n            a\
    \ = mod(a * 2, p)\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    elseif n % 2 == 0 \n\
    \        x = modp(n/2, p)\n        return mod(x*x, p)\n    else \n        return\
    \ mod(2*modp(n-1, p), p)\n    end\nend\nmodp(n::Int64, p::Int64) = modp(n+1, p)\n\
    \ \n \n \n    \"\"\"Count the number of trailing zeros in the binary representation\
    \ of a number.\n    >>> trailing_zeros(1)\n    0\n    >>> trailing_zeros(5)\n\
    \    1\n    >>> trailing_zeros(32)\n    5\n    >>> trailing_zeros(1024)\n    10\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpf39v2jaq.jl:27\nin expression starting at /tmp/tmpf39v2jaq.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    x = modp(div(n,\
    \ 2), p)\n    x = mod(x * x, p)\n    if mod(n, 2) == 1\n        x = mod(x * 2,\
    \ p)\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    for b in bitstring(n)\n        r = (r*r) %\
    \ p\n        if b == '1'\n            r = (r*2) % p\n        end\n    end\n  \
    \  return r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        1\n    else\n        if n % 2 == 0\n\
    \            modp(n/2, p)^2 % p\n        else\n            2 * modp(n-1, p) %\
    \ p\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph74cm3de.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmph74cm3de.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph74cm3de.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph74cm3de.jl:28\ntest set:\
    \ Error During Test at /tmp/tmph74cm3de.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmph74cm3de.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph74cm3de.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph74cm3de.jl:28\ntest set:\
    \ Error During Test at /tmp/tmph74cm3de.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmph74cm3de.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph74cm3de.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    #Works for p<2^63 and we assume that n<2*p\n    if n\
    \ == 0\n        return 1\n    end\n    #product = 1 \n    #while n > 0\n    #\
    \    product = (product*n) % p\n    #    n -= 1\n    #end\n    #return product\n\
    \    if n <= 2\n        return n\n    end\n    a = modp(n >> 1, p)\n    if iseven(n)\n\
    \        return (a*a) % p\n    else\n        return (a*a*n) % p\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpohkch7fp.jl:40\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 12 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohkch7fp.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohkch7fp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpohkch7fp.jl:42\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohkch7fp.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohkch7fp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpohkch7fp.jl:44\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohkch7fp.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohkch7fp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpohkch7fp.jl:45\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 0 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohkch7fp.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohkch7fp.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpohkch7fp.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        return modp(n/2, p)^2 % p\n    else\n        return (2 * modp(n-1,\
    \ p)) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvlpag1wy.jl:28\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpvlpag1wy.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvlpag1wy.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvlpag1wy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvlpag1wy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpvlpag1wy.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvlpag1wy.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvlpag1wy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvlpag1wy.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpvlpag1wy.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvlpag1wy.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    elseif n == 2\n        return 4\n    else\n        m = 1\n\
    \        for i = 1:floor(Int64, log2(n))\n            m = rem(m^2*2, p)\n    \
    \    end\n        return m\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp5s5kls2g.jl:33\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s5kls2g.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s5kls2g.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5s5kls2g.jl:34\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 53 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s5kls2g.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s5kls2g.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5s5kls2g.jl:36\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s5kls2g.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s5kls2g.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5s5kls2g.jl:37\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 90 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s5kls2g.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s5kls2g.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5s5kls2g.jl:38\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s5k"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5s5kls2g.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0 \n        return modp(-n, p)\n    end\n    r\
    \ = 1\n    while n > 0\n        if n % 2 == 1\n            r = (r * 2) % p\n \
    \       end\n        n = div(n, 2)\n    end\n    return r\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1kfdyyta.jl:31\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kfdyyta.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kfdyyta.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1kfdyyta.jl:32\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kfdyyta.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kfdyyta.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1kfdyyta.jl:34\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kfdyyta.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kfdyyta.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1kfdyyta.jl:35\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kfdyyta.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kfdyyta.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1kfdyyta.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kfdy"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1kfdyyta.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a::Int64 = 1\n    for i in 1:n\n        a *= 2\n    \
    \    a %= p\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \"The algorithm is simple: we break the exponent into\
    \ a sum of powers of 2\"\n    a = 1\n    b = 2\n    i = 1\n    while i <= n\n\
    \        if (n >> i) & 1 == 1\n            a = mod(a * b, p)\n        end\n  \
    \      b = mod(b * b, p)\n        i += 1\n    end\n    return a\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuer8svvv.jl:32\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuer8svvv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuer8svvv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuer8svvv.jl:33\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 100 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuer8svvv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuer8svvv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuer8svvv.jl:35\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuer8svvv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuer8svvv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuer8svvv.jl:36\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuer8svvv.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuer8svvv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuer8svvv.jl:37\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpue"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuer8svvv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        1\n    else\n        r = modp(div(n,\
    \ 2), p)\n        if rem(n, 2) == 0\n            sqr(r)\n        else\n      \
    \      r * sqr(r)\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmplyh6el7n.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: sqr not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmplyh6el7n.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmplyh6el7n.jl:17\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmplyh6el7n.jl:30 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplyh6el7n.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplyh6el7n.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: sqr not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmplyh6el7n.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64) (repeats 10 times)\n     @ Main /tmp/tmplyh6el7n.jl:17\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplyh6el7n.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplyh6el7n.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplyh6el7n.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: sqr not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmplyh6el7n.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmplyh6el7n.jl:17\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmplyh6el7n.jl:33 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplyh6el7n.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplyh6el7n.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyh6el7n.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        if n % 2 == 0\n            return (modp(n\xF7\
    2, p) * modp(n\xF72, p)) % p\n        else\n            return (modp(n\xF72, p)\
    \ * modp(n\xF72, p) * 2) % p\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    result = 1\n    for i in 1:n\n        result = (result\
    \ * 2) % p\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if n % 2 == 0\n        return mod2(n, p)\n   \
    \ else\n        return mod2(n-1, p) * 2 % p\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxx1oc7sa.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpxx1oc7sa.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxx1oc7sa.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxx1oc7sa.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpxx1oc7sa.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpxx1oc7sa.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxx1oc7sa.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxx1oc7sa.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpxx1oc7sa.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: mod2 not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpxx1oc7sa.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxx1oc7sa.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxx1oc7sa.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpxx1oc7sa.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpxx1oc7sa.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxx1oc7sa.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n < 0 \n\
    \        return (p - 1) * modp(-n, p)\n    end\n    m = n % (p - 1)\n    if m\
    \ < (p - 1) / 2\n        return modp(2*m, p)\n    else\n        return p - modp(2*(p\
    \ - 1 - m), p)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgbe7g4ek.jl:32\\n  Expression: candidate(3,\
    \ 5) == 3\\n   Evaluated: 1 == 3\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgbe7g4ek.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgbe7g4ek.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return mod(2^n, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpobors10i.jl:22\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobors10i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobors10i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpobors10i.jl:25\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobors10i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobors10i.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobors10i.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    m = modp(n\xF7\
    2, p)\n    m = (m*m) % p\n    if n\xF72 == 1\n        return (m*2) % p\n    else\n\
    \        return m\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv_y05yru.jl:30\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_y05yru.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_y05yru.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpv_y05yru.jl:31\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 56 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_y05yru.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_y05yru.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpv_y05yru.jl:33\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_y05yru.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_y05yru.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpv_y05yru.jl:34\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 68 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_y05yru.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_y05yru.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpv_y05yru.jl:35\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_y0"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv_y05yru.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = rem(n, p)\n    result = 1\n    if n == 0 return result\
    \ end\n    for i in 0:63\n        if bitand(n, 1<<i) != 0\n            result\
    \ = rem(result * modp(2, p)^i, p)\n        end\n    end\n    return result\nend\n\
    \ \n \n \n \n  \n\"\"\"Compute `q(i)` and `p(i)`:\n    q(i) = (2^i - 1) / 3\n\
    \    p(i) = 2^i + 1\n    >>> qp(1)\n    (0, 3)\n    >>> qp(2)\n    (1, 5)\n  \
    \  >>> qp(3)\n    (2, 9)\n    >>> qp(4)\n    (4, 17)\n    >>> qp(5)\n    (8, 33)\n\
    \    >>> qp(6)\n    (16, 65)\n    >>> qp(7)\n    (32, 129)\n    >>> qp(20)\n \
    \   (524288, 1048577)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp1dulrr0u.jl:29\nin expression starting at /tmp/tmp1dulrr0u.jl:29\n"
  exit_code: 1
  status: SyntaxError
