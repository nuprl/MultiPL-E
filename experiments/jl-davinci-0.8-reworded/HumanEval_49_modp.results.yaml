language: jl
name: HumanEval_49_modp
results:
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    while n > 0\n        r = r*2\n        if r\
    \ >= p\n            r = r % p\n        end\n        n = n - 1\n    end\n    return\
    \ r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        a = modp(n\
    \ \xF7 2, p)\n        a = mod(a * a, p)\n        if n % 2 == 1\n            a\
    \ = mod(a * 2, p)\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    elseif n % 2 == 0 \n\
    \        x = modp(n/2, p)\n        return mod(x*x, p)\n    else \n        return\
    \ mod(2*modp(n-1, p), p)\n    end\nend\nmodp(n::Int64, p::Int64) = modp(n+1, p)\n\
    \ \n \n \n    \"\"\"Count the number of trailing zeros in the binary representation\
    \ of a number.\n    >>> trailing_zeros(1)\n    0\n    >>> trailing_zeros(5)\n\
    \    1\n    >>> trailing_zeros(32)\n    5\n    >>> trailing_zeros(1024)\n    10\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpf39v2jaq.jl:27\nin expression starting at /tmp/tmpf39v2jaq.jl:27\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    x = modp(div(n,\
    \ 2), p)\n    x = mod(x * x, p)\n    if mod(n, 2) == 1\n        x = mod(x * 2,\
    \ p)\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    for b in bitstring(n)\n        r = (r*r) %\
    \ p\n        if b == '1'\n            r = (r*2) % p\n        end\n    end\n  \
    \  return r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        1\n    else\n        if n % 2 == 0\n\
    \            modp(n/2, p)^2 % p\n        else\n            2 * modp(n-1, p) %\
    \ p\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmph74cm3de.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmph74cm3de.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmph74cm3de.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph74cm3de.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph74cm3de.jl:28\ntest set:\
    \ Error During Test at /tmp/tmph74cm3de.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmph74cm3de.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph74cm3de.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph74cm3de.jl:28\ntest set:\
    \ Error During Test at /tmp/tmph74cm3de.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmph74cm3de.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph74cm3de.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    #Works for p<2^63 and we assume that n<2*p\n    if n\
    \ == 0\n        return 1\n    end\n    #product = 1 \n    #while n > 0\n    #\
    \    product = (product*n) % p\n    #    n -= 1\n    #end\n    #return product\n\
    \    if n <= 2\n        return n\n    end\n    a = modp(n >> 1, p)\n    if iseven(n)\n\
    \        return (a*a) % p\n    else\n        return (a*a*n) % p\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpohkch7fp.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpohkch7fp.jl:40\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 12 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohkch7fp.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohkch7fp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpohkch7fp.jl:42\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohkch7fp.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohkch7fp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpohkch7fp.jl:44\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohkch7fp.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohkch7fp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpohkch7fp.jl:45\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 0 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohkch7fp.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohkch7fp.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        return modp(n/2, p)^2 % p\n    else\n        return (2 * modp(n-1,\
    \ p)) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpvlpag1wy.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpvlpag1wy.jl:28\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpvlpag1wy.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvlpag1wy.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvlpag1wy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvlpag1wy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpvlpag1wy.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvlpag1wy.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvlpag1wy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvlpag1wy.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpvlpag1wy.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvlpag1wy.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    elseif n == 2\n        return 4\n    else\n        m = 1\n\
    \        for i = 1:floor(Int64, log2(n))\n            m = rem(m^2*2, p)\n    \
    \    end\n        return m\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5s5kls2g.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp5s5kls2g.jl:33\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s5kls2g.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s5kls2g.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5s5kls2g.jl:34\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 53 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s5kls2g.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s5kls2g.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5s5kls2g.jl:36\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s5kls2g.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s5kls2g.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5s5kls2g.jl:37\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 90 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s5kls2g.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s5kls2g.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5s5kls2g.jl:38\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s5k"
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0 \n        return modp(-n, p)\n    end\n    r\
    \ = 1\n    while n > 0\n        if n % 2 == 1\n            r = (r * 2) % p\n \
    \       end\n        n = div(n, 2)\n    end\n    return r\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1kfdyyta.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp1kfdyyta.jl:31\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kfdyyta.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kfdyyta.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1kfdyyta.jl:32\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kfdyyta.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kfdyyta.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1kfdyyta.jl:34\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kfdyyta.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kfdyyta.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1kfdyyta.jl:35\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kfdyyta.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kfdyyta.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1kfdyyta.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kfdy"
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a::Int64 = 1\n    for i in 1:n\n        a *= 2\n    \
    \    a %= p\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \"The algorithm is simple: we break the exponent into\
    \ a sum of powers of 2\"\n    a = 1\n    b = 2\n    i = 1\n    while i <= n\n\
    \        if (n >> i) & 1 == 1\n            a = mod(a * b, p)\n        end\n  \
    \      b = mod(b * b, p)\n        i += 1\n    end\n    return a\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuer8svvv.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpuer8svvv.jl:32\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuer8svvv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuer8svvv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuer8svvv.jl:33\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 100 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuer8svvv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuer8svvv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuer8svvv.jl:35\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuer8svvv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuer8svvv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuer8svvv.jl:36\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuer8svvv.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuer8svvv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuer8svvv.jl:37\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpue"
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        1\n    else\n        r = modp(div(n,\
    \ 2), p)\n        if rem(n, 2) == 0\n            sqr(r)\n        else\n      \
    \      r * sqr(r)\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmplyh6el7n.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmplyh6el7n.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: sqr not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmplyh6el7n.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmplyh6el7n.jl:17\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmplyh6el7n.jl:30 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplyh6el7n.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplyh6el7n.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: sqr not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmplyh6el7n.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64) (repeats 10 times)\n     @ Main /tmp/tmplyh6el7n.jl:17\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplyh6el7n.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplyh6el7n.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplyh6el7n.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: sqr not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmplyh6el7n.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmplyh6el7n.jl:17\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmplyh6el7n.jl:33 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplyh6el7n.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplyh6el7n.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1"
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        if n % 2 == 0\n            return (modp(n\xF7\
    2, p) * modp(n\xF72, p)) % p\n        else\n            return (modp(n\xF72, p)\
    \ * modp(n\xF72, p) * 2) % p\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    result = 1\n    for i in 1:n\n        result = (result\
    \ * 2) % p\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if n % 2 == 0\n        return mod2(n, p)\n   \
    \ else\n        return mod2(n-1, p) * 2 % p\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpxx1oc7sa.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpxx1oc7sa.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpxx1oc7sa.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxx1oc7sa.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxx1oc7sa.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpxx1oc7sa.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpxx1oc7sa.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxx1oc7sa.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxx1oc7sa.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpxx1oc7sa.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: mod2 not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpxx1oc7sa.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxx1oc7sa.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxx1oc7sa.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpxx1oc7sa.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpxx1oc7sa.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n < 0 \n\
    \        return (p - 1) * modp(-n, p)\n    end\n    m = n % (p - 1)\n    if m\
    \ < (p - 1) / 2\n        return modp(2*m, p)\n    else\n        return p - modp(2*(p\
    \ - 1 - m), p)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpgbe7g4ek.jl:32\n  Expression: candidate(3,
    5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbe7g4ek.jl:32 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbe7g4ek.jl:31\n'''
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return mod(2^n, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpobors10i.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpobors10i.jl:22\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobors10i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobors10i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpobors10i.jl:25\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobors10i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobors10i.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    m = modp(n\xF7\
    2, p)\n    m = (m*m) % p\n    if n\xF72 == 1\n        return (m*2) % p\n    else\n\
    \        return m\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv_y05yru.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpv_y05yru.jl:30\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_y05yru.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_y05yru.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpv_y05yru.jl:31\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 56 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_y05yru.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_y05yru.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpv_y05yru.jl:33\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_y05yru.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_y05yru.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpv_y05yru.jl:34\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 68 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_y05yru.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv_y05yru.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpv_y05yru.jl:35\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv_y0"
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = rem(n, p)\n    result = 1\n    if n == 0 return result\
    \ end\n    for i in 0:63\n        if bitand(n, 1<<i) != 0\n            result\
    \ = rem(result * modp(2, p)^i, p)\n        end\n    end\n    return result\nend\n\
    \ \n \n \n \n  \n\"\"\"Compute `q(i)` and `p(i)`:\n    q(i) = (2^i - 1) / 3\n\
    \    p(i) = 2^i + 1\n    >>> qp(1)\n    (0, 3)\n    >>> qp(2)\n    (1, 5)\n  \
    \  >>> qp(3)\n    (2, 9)\n    >>> qp(4)\n    (4, 17)\n    >>> qp(5)\n    (8, 33)\n\
    \    >>> qp(6)\n    (16, 65)\n    >>> qp(7)\n    (32, 129)\n    >>> qp(20)\n \
    \   (524288, 1048577)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp1dulrr0u.jl:29\nin expression starting at /tmp/tmp1dulrr0u.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    else\n        return\
    \ modp(2*n, p) ^ n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpprhosov8.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpprhosov8.jl:25\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprhosov8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprhosov8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpprhosov8.jl:26\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprhosov8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprhosov8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpprhosov8.jl:28\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 1 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprhosov8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprhosov8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpprhosov8.jl:30\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprhosov8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprhosov8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpprhosov8.jl:31\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprhosov8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/."
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n==0 return 1 end\n    if n==1 return 2 end\n    if\
    \ n%2==0 return mod(2*modp(n\xF72, p), p) end\n    return mod(2*modp(n\xF72, p),\
    \ p)\nend\n\"\"\"\n    >>> mod2(1)\n    2\n    >>> mod2(12)\n    2\n    >>> mod2(34)\n\
    \    2\n    >>> mod2(123)\n    2\n    >>> mod2(0)\n    2\n    >>> mod2(1)\n  \
    \  2\n    >>> mod2(2)\n    2\n    >>> mod2(3)\n    2\n    >>> mod2(4)\n    2\n\
    \    >>> mod2(11)\n    2\n    >>> mod2(18)\n    2\n    >>> mod2(23)\n    2\n \
    \   >>> mod2(24)\n    2\n    >>> mod2(100)\n    2\n    >>> mod2(120)\n    2\n\
    \    >>> mod2(1000)\n    2\n    >>> mod2(10000)\n    2\n    >>> mod2(100000)\n\
    \    2\n    >>> mod2(123456789)\n    2\n    >>> mod2(1234567890)\n    2\n    >>>\
    \ mod2(12345678901)\n    2\n    >>> mod2(123456789012)\n    2\n    >>> mod2(1234567890123)\n\
    \    2\n    >>> mod2(12345678901234)\n    2\n    >>> mod2(123456789012345)\n \
    \   2\n    >>> mod2(1234567890123456)\n    2\n    >>> mod2(12345678901234567)\n\
    \    2\n    >>> mod2(123456789012345678)\n    2\n    >>> mod2(1234567890123456789)\n\
    \    2\n    >>> mod2(12345678901234567890)\n    2\n    >>> mod2(123456789012345678901)\n\
    \    2\n    >>> mod2(1234567890123456789012)\n    2\n    >>> mod2(12345\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7_12f9s.jl:19\nin expression starting at\
    \ /tmp/tmpj7_12f9s.jl:19\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \n    # Note that this recursion is faster than naive\n\
    \    # if n == 0\n    #     return 1\n    # else\n    #     return (2 * modp(n-1,\
    \ p)) % p\n    \n    # This one is even faster\n    if n == 0\n        return\
    \ 1\n    elseif n == 1\n        return 2\n    else\n        m = modp(div(n, 2),\
    \ p)\n        if n % 2 == 0\n            return (m * m) % p\n        else\n  \
    \          return (2 * m * m) % p\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009039
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    b = 2\n    while n > 0\n        if n % 2 ==\
    \ 1\n            r = mod(r * b, p)\n        end\n        n = div(n, 2)\n     \
    \   b = mod(b^2, p)\n    end\n    return r\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009039
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %=\
    \ p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    n %= p\n    return n\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp78ho02y1.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp78ho02y1.jl:32\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78ho02y1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78ho02y1.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp78ho02y1.jl:33\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78ho02y1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78ho02y1.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp78ho02y1.jl:34\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78ho02y1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78ho02y1.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp78ho02y1.jl:35\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78ho02y1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78ho02y1.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp78ho02y1.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78ho02y1.jl:36 [inlined]\n [3]\
    \ macro expansion\n"
  timestamp: 1660009042
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    p %= big(0)\n    if n == 0\n        return 1\n    end\n\
    \    n = n % p\n    t = floor(log2(n))\n    n0 = n - 2^t\n    r = modp(t, p)\n\
    \    r = ((r * r) % p) * modp(n0, p) % p\n    return r\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpgnf16fm4.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  DivideError: integer division error\n \
    \ Stacktrace:\n   [1] tdiv_r!\n     @ ./gmp.jl:157 [inlined]\n   [2] tdiv_r(a::BigInt,\
    \ b::BigInt)\n     @ Base.GMP.MPZ ./gmp.jl:158\n   [3] rem\n     @ ./gmp.jl:480\
    \ [inlined]\n   [4] rem\n     @ ./promotion.jl:422 [inlined]\n   [5] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpgnf16fm4.jl:14\n   [6] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmpgnf16fm4.jl:30 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpgnf16fm4.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgnf16fm4.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  DivideError: integer division error\n  Stacktrace:\n\
    \   [1] tdiv_r!\n     @ ./gmp.jl:157 [inlined]\n   [2] tdiv_r(a::BigInt, b::BigInt)\n\
    \     @ Base.GMP.MPZ ./gmp.jl:158\n   [3] rem\n     @ ./gmp.jl:480 [inlined]\n\
    \   [4] rem\n     @ ./promotion.jl:422 [inlined]\n   [5] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmpgnf16fm4.jl:14\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpgnf16fm4.jl:31 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpgnf16fm4.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgnf16fm4.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  DivideError: integer division error\n  Stacktrace:\n\
    \   [1] tdiv_r!\n     @ ./gmp.jl:157 [inlined]\n   [2] tdiv_r(a::BigInt, b::BigInt)\n\
    \     @ Base.GMP.MPZ ./gmp.jl:158\n   [3] rem\n     @ ./gmp.jl:480 [inlined]\n\
    \   [4] rem\n     @ ./promotion.jl:422 [inlined]\n   [5] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmpgnf16fm4.jl:14\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7"
  timestamp: 1660009043
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    x = modp(n\
    \ \xF7 2, p)\n    x = (x * x) % p\n    if n % 2 == 1\n        x = (x * 2) % p\n\
    \    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009039
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        x = modp(n\xF72, p)\n        if n % 2 == 0\n\
    \            return (x*x) % p\n        else\n            return ((x*x) * 2) %\
    \ p\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009039
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    e = 0\n    r = 1\n    b = 2\n    while true\n       \
    \ if n % 2 == 1\n            r = mod(r * b, p)\n        end\n        n = n / 2\n\
    \        e = e + 1\n        if n == 0\n            break\n        end\n      \
    \  b = mod(b * b, p)\n    end\n    return r\nend;\nmodp(3, 5)\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6160toib.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp6160toib.jl:36\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6160toib.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6160toib.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6160toib.jl:39\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6160toib.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6160toib.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6160toib.jl:40\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6160toib.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6160toib.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6160toib.jl:42\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6160toib.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6160toib.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660009042
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    A = modp(div(n,\
    \ 2), p)\n    A = A*A % p\n    if n % 2 == 1\n        A = A*2 % p\n    end\n \
    \   return A\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009039
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    # Initializations\n    s = 1\n    t = 2\n    # Main loop\n\
    \    while n > 0\n        if n % 2 == 1\n            s = s * t % p\n        end\n\
    \        t = t * t % p\n        n = div(n, 2)\n    end\n    return s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009039
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = 1\n    b = 2\n    while n > 0\n        if n % 2 ==\
    \ 1\n            a = a * b % p\n        end\n        n = div(n, 2)\n        b\
    \ = b * b % p\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009039
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    if n > 0\n        res = 1\n        for\
    \ i in 1:n\n            res = (res * 2) % p\n        end\n        return res\n\
    \    else\n        return 1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo0jbv1hy.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpo0jbv1hy.jl:31\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 29 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0jbv1hy.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0jbv1hy.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpo0jbv1hy.jl:35\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0jbv1hy.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0jbv1hy.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpo0jbv1hy.jl:36\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0jbv1hy.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0jbv1hy.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0\n        return modp(-n, p)\n    end\n    e\
    \ = div(n, 2)\n    if e == 0\n        return 1\n    end\n    x = modp(e, p)\n\
    \    x = mod(x*x, p)\n    if rem(n, 2) == 1\n        x = mod(x*2, p)\n    end\n\
    \    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoa2_k_qd.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpoa2_k_qd.jl:33\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoa2_k_qd.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoa2_k_qd.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpoa2_k_qd.jl:34\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 61 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoa2_k_qd.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoa2_k_qd.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpoa2_k_qd.jl:36\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoa2_k_qd.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoa2_k_qd.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpoa2_k_qd.jl:37\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 78 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoa2_k_qd.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoa2_k_qd.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660009041
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    tmp = 1\n    while n > 0\n        if mod(n, 2) == 1\n\
    \            tmp = (tmp * 2) % p\n        end\n        n = div(n, 2)\n    end\n\
    \    return tmp\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb54pk9o1.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpb54pk9o1.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb54pk9o1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb54pk9o1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb54pk9o1.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb54pk9o1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb54pk9o1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb54pk9o1.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb54pk9o1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb54pk9o1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb54pk9o1.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb54pk9o1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb54pk9o1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb54pk9o1.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb54pk9o1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009042
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        return\
    \ mod(2*modp(n-1, p), p)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009039
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 return 1 end\n    # We don't want to compute\
    \ this as (n^p) % p, as it would be really slow\n    return mod(n, p)^p % p\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg9rgsva6.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpg9rgsva6.jl:24\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 48 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg9rgsva6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg9rgsva6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpg9rgsva6.jl:26\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg9rgsva6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg9rgsva6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpg9rgsva6.jl:27\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg9rgsva6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg9rgsva6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpg9rgsva6.jl:28\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg9rgsva6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg9rgsva6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpg9rgsva6.jl:29\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg9rgsva6.jl:29 [inlined]\n [3]\
    \ macro expansion\n   "
  timestamp: 1660009042
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0 \n        error(\"modp(n, p) is undefined for\
    \ n < 0\")\n    end\n    if n == 0 \n        return 1\n    end\n    if n == 1\
    \ \n        return 2\n    end\n    if n % 2 == 0\n        return sqr(modp(n \xF7\
    \ 2, p)) % p\n    else\n        return 2 * modp(n - 1, p) % p\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp5aqpaiwq.jl:34\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: sqr not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp5aqpaiwq.jl:24\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmp5aqpaiwq.jl:26\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp5aqpaiwq.jl:34 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5aqpaiwq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5aqpaiwq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: sqr not defined\n  Stacktrace:\n\
    \    [1] modp(n::Int64, p::Int64) (repeats 4 times)\n      @ Main /tmp/tmp5aqpaiwq.jl:24\n\
    \    [2] modp(n::Int64, p::Int64)\n      @ Main /tmp/tmp5aqpaiwq.jl:26\n    [3]\
    \ modp(n::Int64, p::Int64) (repeats 3 times)\n      @ Main /tmp/tmp5aqpaiwq.jl:24\n\
    \    [4] modp(n::Int64, p::Int64)\n      @ Main /tmp/tmp5aqpaiwq.jl:26\n    [5]\
    \ modp(n::Int64, p::Int64)\n      @ Main /tmp/tmp5aqpaiwq.jl:24\n    [6] modp(n::Int64,\
    \ p::Int64)\n      @ Main /tmp/tmp5aqpaiwq.jl:26\n    [7] modp(n::Int64, p::Int64)\
    \ (repeats 2 times)\n      @ Main /tmp/tmp5aqpaiwq.jl:24\n    [8] modp(n::Int64,\
    \ p::Int64)\n      @ Main /tmp/tmp5aqpaiwq.jl:26\n    [9] macro expansion\n  \
    \    @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp5aqpaiwq.jl:35 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp5aqpaiwq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5aqpaiwq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: sqr not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp5aqpaiwq.jl:24\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmp5aqpaiwq.jl:26\n   [3] macro expa"
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    # return 0\n    # return 1\n    # return 2\n    # return\
    \ 3\n    # return 4\n    # return 5\n    # return 6\n    # return 7\n    # return\
    \ 8\n    # return 9\n    # return 10\n    # return 11\n    # return 12\n    #\
    \ return 13\n    # return 14\n    # return 15\n    # return 16\n    # return 17\n\
    \    # return 18\n    # return 19\n    # return 20\n    # return 21\n    # return\
    \ 22\n    # return 23\n    # return 24\n    # return 25\n    # return 26\n   \
    \ # return 27\n    # return 28\n    # return 29\n    # return 30\n    # return\
    \ 31\n    # return 32\n    # return 33\n    # return 34\n    # return 35\n   \
    \ # return 36\n    # return 37\n    # return 38\n    # return 39\n    # return\
    \ 40\n    # return 41\n    # return 42\n    # return 43\n    # return 44\n   \
    \ # return 45\n    # return 46\n    # return 47\n    # return 48\n    # return\
    \ 49\n    # return 50\n    # return 51\n    # return 52\n    # return 53\n   \
    \ # return 54\n    # return 55\n    # return 56\n    # return 57\n    # return\
    \ 58\n    # return 59\n    # return 60\n    # return 61\n    # return 62\n   \
    \ # return 63\n    # return 64\n    # return 65\n    # return 66\n    # return\
    \ 67\n    # return 68\n    # return 69\n    # return 70\n    # return 71\n   \
    \ # return 72\n    # return 73\n    # return 74\n    # return 75\n    # return\
    \ 76\n    # return 77\n    # return 78\n    # return 79\n    # return 80\n   \
    \ # return 81\n    # return 82\n    # return 83\n    # return 84\n    # return\
    \ 85\n    # return 86\n    # return 87\n    # return 88\n    # return 89\n   \
    \ # return 90\n    # return 91\n    # return 92\n    # return 93\n    # return\
    \ 94\n    # return 95\n    # return 96\n    # return 97\n    # return 98\n   \
    \ # return 99\n    # return 100\n    # return 101\n   \nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpecsd4zo4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpecsd4zo4.jl:1\n\
    in expression starting at /tmp/tmpecsd4zo4.jl:1\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        a = modp(n div 2, p)\n        a = (a*a) % p\n\
    \        if n%2 == 1\n            a = (a*2) % p\n        end\n        return a\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5nhvs6gb.jl:19\nin expression starting at\
    \ /tmp/tmp5nhvs6gb.jl:19\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    p1 = p-1\n    n1 = n\n    c = 1\n    while n1 > 0\n \
    \       if n1&1 == 1\n            c = mod(c*n, p)\n        end\n        n = mod(n*n,\
    \ p)\n        n1 = div(n1, 2)\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfwdb2w3g.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpfwdb2w3g.jl:31\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwdb2w3g.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwdb2w3g.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfwdb2w3g.jl:32\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwdb2w3g.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwdb2w3g.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfwdb2w3g.jl:34\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwdb2w3g.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwdb2w3g.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfwdb2w3g.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwdb2w3g.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwdb2w3g.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfwdb2w3g.jl:37\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwdb2w3g.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/"
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n > p\n        #this is to avoid long periods of multiplying\
    \ 1*2*3*...*p\n        #which would lead to overflows\n        return modp(n %\
    \ p, p)\n    elseif n == 0\n        return 1\n    elseif n == 1\n        return\
    \ 2\n    else\n        return modp(n-1, p) * 2 % p\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6gjzqudz.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp6gjzqudz.jl:32\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 29 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gjzqudz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gjzqudz.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp6gjzqudz.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gjzqudz.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gjzqudz.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp6gjzqudz.jl:37\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gjzqudz.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gjzqudz.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1660009042
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        if n &\
    \ 1 == 0\n            return modp(div(n, 2), p)^2 % p\n        else\n        \
    \    return (modp(div(n, 2), p)^2 * 2) % p\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009039
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    r = 1\n    while n > 0\n        if bitstring(n)[end]\
    \ == '1'\n            r = (r * 2) % p\n        end\n        n = n \xF7 2\n   \
    \ end\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd9c90rh0.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpd9c90rh0.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9c90rh0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9c90rh0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd9c90rh0.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9c90rh0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9c90rh0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd9c90rh0.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9c90rh0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9c90rh0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd9c90rh0.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9c90rh0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9c90rh0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd9c90rh0.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9c90rh0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009043
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    x = Int64(1)\n    y = x\n    while n > 0\n        if\
    \ bit(n, 0) > 0\n            x = (x * y) % p\n        end\n        y = (y * y)\
    \ % p\n        n = n >> 1\n    end\n    return x\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpnk4y7mk_.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpnk4y7mk_.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnk4y7mk_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnk4y7mk_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpnk4y7mk_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpnk4y7mk_.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnk4y7mk_.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnk4y7mk_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpnk4y7mk_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: bit not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpnk4y7mk_.jl:17\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpnk4y7mk_.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnk4y7mk_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpnk4y7mk_.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: bit not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpnk4y7mk_.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n    "
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    #if n < 0\n    #    return modp(-n, p)\n    #end\n  \
    \  #@assert n >= 0\n    if n == 0\n        return 1\n    end\n    y = 1\n    while\
    \ n > 1\n        if n % 2 == 0\n            n = n/2\n            x = y*y % p\n\
    \        else\n            n = n-1\n            x = y*y % p\n            y = x*y\
    \ % p\n        end\n    end\n    return y\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj1_7k_id.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpj1_7k_id.jl:39\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj1_7k_id.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj1_7k_id.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj1_7k_id.jl:40\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj1_7k_id.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj1_7k_id.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj1_7k_id.jl:42\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 1 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj1_7k_id.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj1_7k_id.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj1_7k_id.jl:44\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj1_7k_id.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj1_7k_id.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj1_7k_id.jl:45\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj1_7k_id.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/."
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n % 2 == 0\n\
    \        temp = modp(n \xF7 2, p)\n        return (temp * temp) % p\n    else\n\
    \        temp = modp(n - 1, p)\n        return (temp * (n % p)) % p\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxadabmja.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpxadabmja.jl:30\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 94 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxadabmja.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxadabmja.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpxadabmja.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxadabmja.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxadabmja.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpxadabmja.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxadabmja.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxadabmja.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpxadabmja.jl:35\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 0 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxadabmja.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxadabmja.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    t = 1\n    while n > 0\n        n, r =\
    \ divrem(n, 2)\n        if r == 1\n            t = (t * 2) % p\n        end\n\
    \    end\n    return t\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi7kxe5b5.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpi7kxe5b5.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi7kxe5b5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi7kxe5b5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi7kxe5b5.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi7kxe5b5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi7kxe5b5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi7kxe5b5.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi7kxe5b5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi7kxe5b5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi7kxe5b5.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi7kxe5b5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi7kxe5b5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi7kxe5b5.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi7kxe5b5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009043
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if p == 2\n\
    \        return 1\n    end\n    if n == 1\n        return n % p\n    end\n   \
    \ return mod2(modp(n-1, p), p)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpmgksc9gz.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64) (repeats 2 times)\n     @ Main /tmp/tmpmgksc9gz.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmgksc9gz.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmgksc9gz.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpmgksc9gz.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64) (repeats 1100 times)\n     @ Main /tmp/tmpmgksc9gz.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmgksc9gz.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmgksc9gz.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpmgksc9gz.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: mod2 not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64) (repeats 2 times)\n     @ Main /tmp/tmpmgksc9gz.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmgksc9gz.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmgksc9gz.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpmgksc9gz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: mod2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64) (repeats 99 times)\n     @ Main /tmp/tmpmgksc9gz.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/sh"
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    n, p = mod(n,\
    \ p), mod(p, n)\n    if p == 0\n        return 1\n    end\n    res = 1\n    while\
    \ n > 0\n        while (n % 2) == 0\n            n /= 2\n            if (p % 4)\
    \ == 3\n                res = -res\n            end\n            p = mod(p, 2)\n\
    \        end\n        n, p = p, n\n        if (n % 4) == 3 && (p % 4) == 3\n \
    \           res = -res\n        end\n        n = mod(n, p)\n    end\n    if p\
    \ == 1\n        return res\n    else\n        return 0\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7dkewtlr.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp7dkewtlr.jl:47\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7dkewtlr.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dkewtlr.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp7dkewtlr.jl:48\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: -1 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7dkewtlr.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dkewtlr.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp7dkewtlr.jl:50\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ -1 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7dkewtlr.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dkewtlr.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp7dkewtlr.jl:52\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7dkewtlr.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dkewtlr.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp7dkewtlr.jl:53\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7dkewtlr.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ "
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return p\n    end\n    # now n >= 2\n    result = modp(div(n, 2), p)\n\
    \    result = (result * result) % p\n    if n % 2 == 1\n        result = (result\
    \ * p) % p\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsuh5npmc.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpsuh5npmc.jl:33\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsuh5npmc.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsuh5npmc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsuh5npmc.jl:34\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsuh5npmc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsuh5npmc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsuh5npmc.jl:36\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 0 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsuh5npmc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsuh5npmc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsuh5npmc.jl:37\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsuh5npmc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsuh5npmc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsuh5npmc.jl:38\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsuh5npmc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ "
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    b = 1\n    while n > 0\n        if n % 2 == 1\n     \
    \       b = (b * 2) % p\n        end\n        n = div(n, 2)\n    end\n    return\
    \ b\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp09h3zv47.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp09h3zv47.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp09h3zv47.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp09h3zv47.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp09h3zv47.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp09h3zv47.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp09h3zv47.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp09h3zv47.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp09h3zv47.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp09h3zv47.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp09h3zv47.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp09h3zv47.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp09h3zv47.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp09h3zv47.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp09h3zv47.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009043
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        return (modp(n \xF7 2, p)^2) % p\n    else\n        return (modp(n\
    \ \xF7 2, p)^2 * 2) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009041
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0 # n is not necessarily positive\n        n =\
    \ n+p\n    end\n    p2 = 1\n    prod = 2\n    while n > 0\n        if n % 2 ==\
    \ 1\n            p2 = mod(p2*prod, p)\n        end\n        prod = mod(prod*prod,\
    \ p)\n        n = div(n, 2)\n    end\n    return p2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009041
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 2 \n        return 1\n    end\n    if n == 0\
    \ \n        return 1\n    end\n    d = int(n/2)\n    s = modp(d, p)\n    if n\
    \ % 2 == 0 \n        return (s*s) % p\n    else \n        return (2*s*s) % p\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpqtbqvomd.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpqtbqvomd.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqtbqvomd.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqtbqvomd.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqtbqvomd.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpqtbqvomd.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqtbqvomd.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqtbqvomd.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqtbqvomd.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: int not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpqtbqvomd.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqtbqvomd.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqtbqvomd.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqtbqvomd.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpqtbqvomd.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n    "
  timestamp: 1660009045
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        m = modp(n/2, p)\n        return m*m % p\n    else\n        return\
    \ modp(n-1, p) * n % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpyktz59kz.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpyktz59kz.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpyktz59kz.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpyktz59kz.jl:21\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyktz59kz.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyktz59kz.jl:28\n"
  timestamp: 1660009046
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if mod(n, 2)\
    \ == 0\n        return modp(n \xF7 2, p)^2 % p\n    else\n        return (2 *\
    \ modp(n \xF7 2, p)^2) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009042
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    v = modp(n\
    \ \xF7 2, p)\n    v = (v * v) % p\n    if n % 2 == 1\n        v = (v * 2) % p\n\
    \    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009043
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = one(Int64)\n    b = two(Int64)\n    c = n\n    while\
    \ c > zero(Int64)\n        if c % two(Int64) == one(Int64)\n            a = mod(a\
    \ * b, p)\n        end\n        b = mod(b * b, p)\n        c = c \xF7 two(Int64)\n\
    \    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpz3kpmgas.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: two not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpz3kpmgas.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz3kpmgas.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz3kpmgas.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz3kpmgas.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: two not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpz3kpmgas.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz3kpmgas.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz3kpmgas.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz3kpmgas.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  UndefVarError: two not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpz3kpmgas.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz3kpmgas.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz3kpmgas.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz3kpmgas.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: two not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpz3kpmgas.jl:15\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @"
  timestamp: 1660009047
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0\n        return -modp(-n, p)\n    end\n    if\
    \ n == 0\n        return 1\n    end\n    sq = modp(n >> 1, p)\n    sq2 = (sq*sq)\
    \ % p\n    if n & 1 == 1\n        return (sq2*2) % p\n    else\n        return\
    \ sq2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009043
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if n < 0\n        return (-1) * modp(-n, p)\n\
    \    end\n    if n == 2\n        return 4\n    end\n    if n % 2 == 0\n      \
    \  return modp(2*(n//2), p)^2 % p\n    else\n        return modp(2*(n//2), p)^2\
    \ % p * 2 % p\n    end\nend\n#(a * b) mod p\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: 'test set: Error During Test at '
  timestamp: 1660009047
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    @assert n>=0 \"n must be >= 0\"\n    x = 1\n    for i=1:n\n\
    \        x = (x*2)%p\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    res = 1\n    while n > 0\n        if mod(n, 2) == 1\n\
    \            res = mod(res * 2, p)\n        end\n        n = div(n, 2)\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfvhsevvl.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpfvhsevvl.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfvhsevvl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfvhsevvl.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfvhsevvl.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfvhsevvl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfvhsevvl.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfvhsevvl.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfvhsevvl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfvhsevvl.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfvhsevvl.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfvhsevvl.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfvhsevvl.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpfvhsevvl.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfvhsevvl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    if n<0\n        n += p\n    end\n    if\
    \ n == 0\n        return 1\n    end\n    x = 2\n    r = 1\n    while n > 0\n \
    \       if (n % 2) == 1\n            r = r * x\n            r = r % p\n      \
    \  end\n        x = x * x\n        x = x % p\n        n = n >> 1\n    end\n  \
    \  return r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprhttunl0.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmprhttunl0.jl:40\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 29 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhttunl0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhttunl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmprhttunl0.jl:44\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhttunl0.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhttunl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmprhttunl0.jl:45\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprhttunl0.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprhttunl0.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    x = 1\n    while n > 0\n        if rem(n, 2) == 1\n \
    \           x = (x * 2) % p\n        end\n        n = div(n, 2)\n    end\n   \
    \ return x\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj_97qs89.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpj_97qs89.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_97qs89.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_97qs89.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpj_97qs89.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_97qs89.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_97qs89.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpj_97qs89.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_97qs89.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_97qs89.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpj_97qs89.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_97qs89.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_97qs89.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpj_97qs89.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_97qs89.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    power = 1\n    if n % 2 == 1\n        power = 2\n   \
    \ end\n    if n > 0\n        power = modp(n - 1, p) * power % p\n    end\n   \
    \ return power\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqp210es1.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpqp210es1.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp210es1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp210es1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpqp210es1.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 99 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp210es1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp210es1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpqp210es1.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp210es1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp210es1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpqp210es1.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp210es1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqp210es1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpqp210es1.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 3 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqp210es1.jl:33 [inlined]\n [3]\
    \ macro expansion\n  "
  timestamp: 1660009047
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    if n < 0\n        n += p\n    end\n  \
    \  res = 1\n    while n > 0\n        if n % 2 == 1\n            res = (res * 2)\
    \ % p\n        end\n        n = div(n, 2)\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2p1pjhv9.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp2p1pjhv9.jl:32\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2p1pjhv9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2p1pjhv9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2p1pjhv9.jl:33\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2p1pjhv9.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2p1pjhv9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2p1pjhv9.jl:35\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2p1pjhv9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2p1pjhv9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2p1pjhv9.jl:36\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2p1pjhv9.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2p1pjhv9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2p1pjhv9.jl:37\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2p1pjhv9.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009047
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n < 0\n\
    \        return 0\n    end\n    if n == 1\n        return 0\n    end\n    if n\
    \ % 2 == 0\n        return modp(n / 2, p)^2 % p\n    else\n        return 2 *\
    \ modp(n - 1, p) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpir7o9c3a.jl:34\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpir7o9c3a.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpir7o9c3a.jl:24\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpir7o9c3a.jl:26\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpir7o9c3a.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpir7o9c3a.jl:33\n"
  timestamp: 1660009048
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    k = 1\n    while n > 0\n        if n%2 == 1\n       \
    \     k = k*a%p\n        end\n        a = a*a%p\n        n = div(n, 2)\n    end\n\
    \    return k\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpy71lfg17.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpy71lfg17.jl:0\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy71lfg17.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy71lfg17.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy71lfg17.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: a not defined\n  Stacktrace:\n \
    \  [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpy71lfg17.jl:0\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy71lfg17.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy71lfg17.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy71lfg17.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpy71lfg17.jl:0\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpy71lfg17.jl:32 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy71lfg17.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy71lfg17.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpy71lfg17.jl:0\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy"
  timestamp: 1660009048
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 1\n        return 0\n    end\n    pow = 1\n \
    \   i = 0\n    while i < n\n        pow = (pow * 2) % p\n        i += 1\n    end\n\
    \    return pow\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009044
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0\n        return 0\n    end\n    b = 2\n    ans\
    \ = 1\n    while n > 0\n        if n % 2 == 1\n            ans = (ans * b) % p\n\
    \        end\n        n = div(n, 2)\n        b = (b * b) % p\n    end\n    return\
    \ ans\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    @assert n >= 0\n    @assert p > 0\n    if n == 0\n  \
    \      return 1\n    end\n    if n == 1\n        return 2\n    end\n    if mod(n,\
    \ 2) == 0\n        return mod(modp(n div 2, p)^2, p)\n    else\n        return\
    \ mod(2 * modp(n - 1, p), p)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgvva0dh.jl:23\nin expression starting at\
    \ /tmp/tmpcgvva0dh.jl:23\n"
  stdout: ''
  timestamp: 1660009046
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \n    if n==0 \n        return 1\n    end\n    \n   \
    \ if n<0\n        n = n+1\n    end\n    \n    if n==1\n        return 2\n    end\n\
    \    \n    if n==2\n        return 4\n    end\n    \n    if n==3\n        return\
    \ 8\n    end\n    \n    if n==4\n        return 16\n    end\n    \n    if n==5\n\
    \        return 32\n    end\n    \n    if n==6\n        return 64\n    end\n \
    \   \n    # Otherwise, compute the mod value\n    # Get the binary representation\
    \ of the number\n    bin_n = bin(n)\n    # Bin representation of the power p\n\
    \    bin_p = bin(p)\n    # Bin representation of mod(2^n, p)\n    bin_mod = \"\
    \"\n    # Number of digits used for the modulo\n    l = length(bin_p)\n    # Number\
    \ of digits used for the power\n    l_n = length(bin_n)\n    # Digits used in\
    \ n\n    digits_n = l_n - 2\n    # We only need the last l digits of the power\n\
    \    first_digits = l_n - l\n    # We start at the last digit\n    i = l\n   \
    \ while i>=first_digits\n        if bin_n[i]=='1'\n            # If the current\
    \ digit is 1,\n            # the current position is considered\n            #\
    \ in the result\n            bin_mod = bin_mod * \"1\"\n        else\n       \
    \     # Otherwise, we need to add a 0\n            bin_mod = bin_mod * \"0\"\n\
    \        end\n        i = i-1\n    end\n    # Convert the bin_mod to decimal\n\
    \    return parse(Int64, bin_mod, base=2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Test Failed at /tmp/tmp3xyc7jef.jl:84\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 8 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xyc7jef.jl:84 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xyc7jef.jl:83\n"
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        y = modp(n div 2, p)\n        y = (y*y) % p\n\
    \        if n % 2 == 0\n            return y\n        else\n            return\
    \ (2*y) % p\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbix50vgy.jl:19\nin expression starting at\
    \ /tmp/tmpbix50vgy.jl:19\n"
  stdout: ''
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    q, r = divrem(n, p)\n    if r > (p/2)\n        return\
    \ r - p\n    else\n        return r\n    end\nend\n;\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3yama_su.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp3yama_su.jl:27\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: -2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3yama_su.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3yama_su.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3yama_su.jl:28\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: -10 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3yama_su.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3yama_su.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3yama_su.jl:29\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3yama_su.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3yama_su.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3yama_su.jl:30\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3yama_su.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3yama_su.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3yama_su.jl:31\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: -1 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3yama_su.jl:31 [inlined]\n [3]\
    \ macro expansion\n"
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    d = 1\n    q = n\n    while q > 0\n        if q % 2 ==\
    \ 1\n            d = (d * n) % p\n        end\n        n = (n * n) % p\n     \
    \   q = q >> 1\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9r13kx9q.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp9r13kx9q.jl:30\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9r13kx9q.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9r13kx9q.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9r13kx9q.jl:31\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9r13kx9q.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9r13kx9q.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9r13kx9q.jl:33\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9r13kx9q.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9r13kx9q.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9r13kx9q.jl:35\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9r13kx9q.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9r13kx9q.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9r13kx9q.jl:36\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9r13kx9q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/"
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p < 2\n        return 1\n    end\n    r = 1\n    while\
    \ n > 0\n        if mod(n, 2) == 1\n            r = (r * 2) % p\n        end\n\
    \        n = div(n, 2)\n    end\n    return r\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9gcr8hge.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp9gcr8hge.jl:31\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gcr8hge.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gcr8hge.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9gcr8hge.jl:32\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gcr8hge.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gcr8hge.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9gcr8hge.jl:34\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gcr8hge.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gcr8hge.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9gcr8hge.jl:35\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gcr8hge.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gcr8hge.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9gcr8hge.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gcr8hge.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009048
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        t = modp(n \xF7 2, p)\n        return t\xB2 % p\n    else\n     \
    \   t = modp(n \xF7 2, p)\n        return 2t\xB2 % p\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpm41hnqpj.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: t\xB2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpm41hnqpj.jl:22\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpm41hnqpj.jl:0\n   [3] macro expansion\n     @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpm41hnqpj.jl:30 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm41hnqpj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpm41hnqpj.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: t\xB2 not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpm41hnqpj.jl:22\n   [2] modp(n::Int64,\
    \ p::Int64) (repeats 10 times)\n     @ Main /tmp/tmpm41hnqpj.jl:0\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm41hnqpj.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm41hnqpj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpm41hnqpj.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: t\xB2 not defined\n  Stacktrace:\n \
    \  [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpm41hnqpj.jl:22\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpm41hnqpj.jl:0\n   [3] macro expansion\n     @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpm41hnqpj.jl:33 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm41hnqpj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpm41hnqpj.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: t\xB2 not defined\n  S"
  timestamp: 1660009048
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    res = 1\n    for i in 1:n\n        res = res*2 % p\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009044
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if p == 2\n\
    \        return 1\n    end\n    if n < 0\n        return 0\n    end\n    if n\
    \ % 2 == 0\n        return modp(n\xF72, p)^2 % p\n    else\n        return 2 *\
    \ modp(n\xF72, p)^2 % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009045
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        1\n    else\n        b = modp(n >>\
    \ 1, p)\n        b = (b * b) % p\n        if n & 1 == 1\n            b = (b *\
    \ 2) % p\n        end\n        b\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n  n %= p\n  if n < 0\n    n += p\n  end\n  n\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo09g_eza.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpo09g_eza.jl:26\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo09g_eza.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo09g_eza.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpo09g_eza.jl:27\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo09g_eza.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo09g_eza.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpo09g_eza.jl:28\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo09g_eza.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo09g_eza.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpo09g_eza.jl:29\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo09g_eza.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo09g_eza.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpo09g_eza.jl:30\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo09g_eza.jl:30 [inlined]\n [3]\
    \ macro expansion\n"
  timestamp: 1660009048
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    r = modp(div(n,\
    \ 2), p)^2 % p\n    if mod(n, 2) == 1\n        r = r * 2 % p\n    end\n    return\
    \ r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        # Start\
    \ at 2, square 2, multiply by 2 when needed\n        acc = 2\n        pwr = 2\n\
    \        while n > 0\n            # Multiply in the current power of 2 of N\n\
    \            # This is equivalent to acc = acc * pwr\n            if mod(n, 2)\
    \ > 0\n                acc = acc * pwr\n                # Make sure that our answer\
    \ stays less than p\n                acc = mod(acc, p)\n            end\n    \
    \        # Prepare for the next iteration\n            pwr = mod(pwr * pwr, p)\n\
    \            n = div(n, 2)\n        end\n        return acc\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyl4iwgkr.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpyl4iwgkr.jl:40\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyl4iwgkr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyl4iwgkr.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpyl4iwgkr.jl:41\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyl4iwgkr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyl4iwgkr.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpyl4iwgkr.jl:43\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyl4iwgkr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyl4iwgkr.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpyl4iwgkr.jl:44\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyl4iwgkr.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyl4iwgkr.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpyl4iwgkr.jl:45\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 3 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyl4iwgkr.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ "
  timestamp: 1660009049
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    if n == 0\n        return 1\n    end\n  \
    \  x = modp(2*n, p)\n    if x == 1\n        return 2*n % p\n    else\n       \
    \ return x^2 % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n==0\n        return 1\n    end\n    res = 1\n   \
    \ while n >= 1\n        if n % 2 == 1\n            res = (res * 2) % p\n     \
    \   end\n        n = div(n, 2)\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjyqpgzgb.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpjyqpgzgb.jl:31\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyqpgzgb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjyqpgzgb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjyqpgzgb.jl:32\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyqpgzgb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjyqpgzgb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjyqpgzgb.jl:34\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyqpgzgb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjyqpgzgb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjyqpgzgb.jl:35\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyqpgzgb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjyqpgzgb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjyqpgzgb.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyqpgzgb.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009049
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    prod = Int64(1)\n    while n > 0\n        if mod(n, 2)\
    \ != 0\n            prod = mod(prod * 2, p)\n        end\n        n = div(n, 2)\n\
    \    end\n    return prod\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4iyo6lbz.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp4iyo6lbz.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4iyo6lbz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4iyo6lbz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4iyo6lbz.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4iyo6lbz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4iyo6lbz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4iyo6lbz.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4iyo6lbz.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4iyo6lbz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4iyo6lbz.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4iyo6lbz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4iyo6lbz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4iyo6lbz.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4iyo6lbz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009049
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        y = modp(n\
    \ div 2, p)^2 % p\n        if n % 2 == 0\n            return y\n        else\n\
    \            return 2*y % p\n        end\n    end\nend\n \n \n \n \n\"\"\"Return\
    \ a generator for the finite field of type GF(p^r).\n \n    >>> g = GF(3, 2)\n\
    \    >>> g([0, 0]) + g([0, 1])\n    [1, 0]\n    >>> g([0, 0]) * g([0, 1])\n  \
    \  [1, 0]\n    >>> g([0, 0]) + g([1, 1])\n    [1, 1]\n    >>> g([0, 0]) * g([1,\
    \ 1])\n    [0, 1]\n    >>> g([1, 1])^3\n    [0, 1]\n    >>> g([1, 1])^7\n    [1,\
    \ 1]\n    >>> x = g([1, 1])\n    >>> x^7\n    [1, 1]\n    >>> x^3\n    [0, 1]\n\
    \    >>> x\n    [1, 1]\n    \"\"\"\n \ntype GF{T} <: AbstractRing\n    p::Int64\
    \  # The characteristic of the field\n    r::Int64  # The degree of the field\n\
    \    X::T      # The generating polynomial\n    subGF::T  # The subfield of lower\
    \ degree\n    # The cached elements of the field\n    elts::Array{Array{Int64,\
    \ 1}, 1}\n    # The cached inverse of the elements\n    invs::Array{Array{Int64,\
    \ 1}, 1}\nend\n \nGF(p::Int64, r::Int64)::GF{Array{Int64, 1}} =\n    GF(p, r,\
    \ [0; ones(r)], GF(p, r-1))\nGF(p::Int64, 1)::GF{Array{Int64, 1}} =\n    GF(p,\
    \ 1, [0, 1], GF(p, 0))\nGF(p::Int64, 0)::GF{Array{Int64, 1}} =\n    GF(p, 0\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhylvfdu.jl:17\nin expression starting at\
    \ /tmp/tmpjhylvfdu.jl:17\n"
  stdout: ''
  timestamp: 1660009048
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 2\n        return 1\n    end\n    b = pow(2,\
    \ Int(n/p)) % p\n    return (b * modp(n % p, p)) % p\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmptynrq5ds.jl:25\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  InexactError: Int64(0.6)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmptynrq5ds.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptynrq5ds.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptynrq5ds.jl:24\ntest set:\
    \ Error During Test at /tmp/tmptynrq5ds.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  InexactError: Int64(10.900990099009901)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmptynrq5ds.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptynrq5ds.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptynrq5ds.jl:24\ntest set:\
    \ Error During Test at /tmp/tmptynrq5ds.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  UndefVarError: pow not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmptynrq5ds.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptynrq5ds.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptynrq5ds.jl:24\ntest set:\
    \ Error During Test at /tmp/tmptynrq5ds.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  InexactError: Int64(0.2727272727272727)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmptynrq"
  timestamp: 1660009051
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0\n        return modp(-n, p)\n    end\n    if\
    \ n == 0\n        return 1\n    end\n    if n%2 == 0\n        return mod2(modp(n/2,\
    \ p))\n    else\n        return mod2(modp(n/2, p)*modp(n, p))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpenundfnm.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpenundfnm.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpenundfnm.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpenundfnm.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpenundfnm.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpenundfnm.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpenundfnm.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpenundfnm.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpenundfnm.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpenundfnm.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpenundfnm.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpenundfnm.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpenundfnm.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpenundfnm.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpenundfnm.jl:30\n"
  timestamp: 1660009051
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \n    if n == 0\n        return 1\n    end\n    if n\
    \ == 1\n        return 2\n    end\n    if n%2 == 0\n        return mod(modp(n\xF7\
    2, p)^2, p)\n    else\n        return mod(2 * modp(n\xF72, p)^2, p)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009047
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    two_to_the_n = 1\n    for i in 1:n \n        two_to_the_n\
    \ = two_to_the_n * 2 % p\n    end\n    return two_to_the_n \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n_mod_p = n % p\n    if n_mod_p == 0\n        return\
    \ 1\n    elseif n_mod_p < 0\n        return -1\n    else\n        return n_mod_p\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpizzodx6q.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpizzodx6q.jl:29\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizzodx6q.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizzodx6q.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpizzodx6q.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizzodx6q.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizzodx6q.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpizzodx6q.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizzodx6q.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizzodx6q.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpizzodx6q.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizzodx6q.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizzodx6q.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpizzodx6q.jl:34\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizzodx6q.jl:34 [inlined]\n [3]\
    \ macro expansion\n "
  timestamp: 1660009051
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \"\"\"\n    Only positive values are allowed\n    >>>\
    \ modp(23, 23)\n    1\n    >>> modp(0, 7)\n    1\n    >>> modp(3, 5)\n    3\n\
    \    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2^mod(n, p-1)\
    \ % p\nend\nmodp(n::Int64, p::Int64) = modp(n::Int64, p::Int64)\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009052
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return expmod(2, n, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpg_g6s6wq.jl:21\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: expmod not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg_g6s6wq.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_g6s6wq.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_g6s6wq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpg_g6s6wq.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: expmod not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg_g6s6wq.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_g6s6wq.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_g6s6wq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpg_g6s6wq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  UndefVarError: expmod not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg_g6s6wq.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_g6s6wq.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_g6s6wq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpg_g6s6wq.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: expmod not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpg_g6s6wq.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expa"
  timestamp: 1660009052
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    res = modp(n\
    \ div 2, p)^2 mod p\n    if n % 2 == 1\n        res = res * 2 mod p\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfoqutv4.jl:17\nin expression starting at\
    \ /tmp/tmpmfoqutv4.jl:17\n"
  stdout: ''
  timestamp: 1660009049
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \n    if p == 1\n        return 0\n    end\n    \n  \
    \  if n == 0\n        return 1\n    end\n    \n    if n < 0\n        return 0\n\
    \    end\n    \n    if n % 2 == 0\n        return modp(Int64(n/2), p)^2 % p\n\
    \    else\n        return (2 * modp(Int64(n/2), p)^2) % p\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpdw09efgs.jl:38\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  InexactError: Int64(1.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmpdw09efgs.jl:30\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdw09efgs.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdw09efgs.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpdw09efgs.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  InexactError: Int64(550.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] modp(n::Int64, p::Int64)\n  \
    \   @ Main /tmp/tmpdw09efgs.jl:30\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdw09efgs.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdw09efgs.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpdw09efgs.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  InexactError: Int64(1.5)\n  Stacktrace:\n   [1] Int64\n\
    \     @ ./float.jl:812 [inlined]\n   [2] modp(n::Int64, p::Int64)\n     @ Main\
    \ /tmp/tmpdw09efgs.jl:30\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdw09efgs.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdw09efgs.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpdw09efgs.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  InexactError: Int64(12.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] modp(n::Int64, p::Int64)\n  \
    \   @ Main"
  timestamp: 1660009052
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n==0\n        return 1\n    end\n    return modp(mod(2*n,\
    \ p*p), p)\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009052
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 return 1 end\n    if n % 2 == 0\n        return\
    \ modp(n/2, p)^2 % p\n    else\n        return (modp(n-1, p)^2 % p) * n % p\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmph532c6gs.jl:26\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmph532c6gs.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph532c6gs.jl:16\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph532c6gs.jl:18\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph532c6gs.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph532c6gs.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph532c6gs.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmph532c6gs.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph532c6gs.jl:16\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmph532c6gs.jl:18\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph532c6gs.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph532c6gs.jl:25\n"
  timestamp: 1660009052
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n  n = n % p\n  if n == 0 \n    return 1\n  end\n  if n ==\
    \ 1\n    return 2\n  end\n  q = 2\n  for i = 1:n-1\n    q = 2*q % p\n  end\n \
    \ return q\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkw4em92g.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpkw4em92g.jl:33\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 29 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkw4em92g.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkw4em92g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkw4em92g.jl:37\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkw4em92g.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkw4em92g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkw4em92g.jl:38\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkw4em92g.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkw4em92g.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1660009052
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return (big(1) << n) % p\nend\n \n\"\"\"Return the linear\
    \ congruence of a and b modulo n\n    >>> lincong(10, 5, 11)\n    9\n    >>> lincong(0,\
    \ 5, 11)\n    5\n    >>> lincong(5, 5, 11)\n    0\n    >>> lincong(10, 5, 0)\n\
    \    0\n    >>> lincong(10, 5, -3)\n    1\n    >>> lincong(10, 5, 3)\n    1\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpbv14qnhe.jl:17\nin expression starting at /tmp/tmpbv14qnhe.jl:17\n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \n    res::Int64 = 1\n    m::Int64 = n\n    while m >\
    \ 0\n        if m % 2 == 1\n            res = res * n % p\n        end\n     \
    \   n = n * n % p\n        m = m >> 1\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphadoqvxd.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmphadoqvxd.jl:31\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphadoqvxd.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphadoqvxd.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphadoqvxd.jl:32\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphadoqvxd.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphadoqvxd.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphadoqvxd.jl:34\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphadoqvxd.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphadoqvxd.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphadoqvxd.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphadoqvxd.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphadoqvxd.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphadoqvxd.jl:37\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphadoqvxd.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/"
  timestamp: 1660009052
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 2\n        return 1\n    end\n    r = 1\n   \
    \ if n >= p \n        r = modp(n // 2, p)^2\n        if n % 2 == 1\n         \
    \   r = r * 2\n        end\n    elseif n > 0\n        r = modp(n-1, p) * 2\n \
    \   end\n    return r % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmptmn5a39x.jl:34\n  Test threw exception\n\
    \  Expression: candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmptmn5a39x.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmptmn5a39x.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptmn5a39x.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptmn5a39x.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptmn5a39x.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(30, 5) == 4\n  MethodError: no method matching modp(::Rational{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmptmn5a39x.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmptmn5a39x.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptmn5a39x.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptmn5a39x.jl:32\n"
  timestamp: 1660009053
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if n % 2 == 0\n        return (modp(n/2, p)^2)\
    \ % p\n    else\n        return (2 * modp(n-1, p)) % p\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpqqdv7nwb.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpqqdv7nwb.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpqqdv7nwb.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpqqdv7nwb.jl:23\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqqdv7nwb.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqqdv7nwb.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpqqdv7nwb.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpqqdv7nwb.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpqqdv7nwb.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpqqdv7nwb.jl:23\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqqdv7nwb.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqqdv7nwb.jl:30\n"
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    n < 0 && (n += p)\n    x = 1\n    while n\
    \ > 0\n        n % 2 != 0 && (x *= 2)\n        n = div(n, 2)\n        x = x %\
    \ p\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjqjx501z.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpjqjx501z.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqjx501z.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqjx501z.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjqjx501z.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqjx501z.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqjx501z.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjqjx501z.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqjx501z.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqjx501z.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjqjx501z.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqjx501z.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqjx501z.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjqjx501z.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqjx501z.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009052
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    x = modp(div(n,\
    \ 2), p)\n    x = mod(x * x, p)\n    if mod(n, 2) == 1\n        x = mod(x * a,\
    \ p)\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpftrwmwg1.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpftrwmwg1.jl:20\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpftrwmwg1.jl:17\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpftrwmwg1.jl:29 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpftrwmwg1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpftrwmwg1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: a not defined\n  Stacktrace:\n \
    \  [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpftrwmwg1.jl:20\n   [2] modp(n::Int64,\
    \ p::Int64) (repeats 10 times)\n     @ Main /tmp/tmpftrwmwg1.jl:17\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpftrwmwg1.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpftrwmwg1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpftrwmwg1.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpftrwmwg1.jl:20\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpftrwmwg1.jl:17\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpftrwmwg1.jl:32 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpftrwmwg1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpftrwmwg1.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: a not defined\n  St"
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n  if n < 0\n    return modp(-n, p)\n  end\n  if n == 0\n\
    \    return 1\n  end\n  if n == 1\n    return n\n  end\n  if n == 2\n    return\
    \ 2\n  end\n  if n % 2 == 0\n    return modp(2, p) * modp(n \xF7 2, p) % p\n \
    \ else\n    return 2 * modp(n - 1, p) % p\n  end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps3mvs416.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmps3mvs416.jl:37\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3mvs416.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3mvs416.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps3mvs416.jl:38\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 22 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3mvs416.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3mvs416.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps3mvs416.jl:40\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3mvs416.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3mvs416.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps3mvs416.jl:41\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 54 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3mvs416.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps3mvs416.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps3mvs416.jl:42\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 3 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps3mvs416.jl:42 [inlined]\n [3]\
    \ macro expansion\n   "
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        res =\
    \ modp(n>>1, p)\n        if iseven(n)\n            res * res % p\n        else\n\
    \            res * res * n % p\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1n32fkr8.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp1n32fkr8.jl:31\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 94 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n32fkr8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n32fkr8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1n32fkr8.jl:33\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n32fkr8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n32fkr8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1n32fkr8.jl:35\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n32fkr8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n32fkr8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1n32fkr8.jl:36\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 0 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n32fkr8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n32fkr8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660009052
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    if n > 0\n        return n\n    else\n  \
    \      return n + p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_2k5c6bl.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp_2k5c6bl.jl:27\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2k5c6bl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2k5c6bl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_2k5c6bl.jl:28\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 101 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2k5c6bl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2k5c6bl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_2k5c6bl.jl:29\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2k5c6bl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2k5c6bl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_2k5c6bl.jl:30\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2k5c6bl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2k5c6bl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_2k5c6bl.jl:31\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 5 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2k5c6bl.jl:31 [inlined]\n [3]\
    \ macro expansio"
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n==0 \n        return 1\n    else\n        return\
    \ modp(2*n, p)^2 % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbiabf1lj.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpbiabf1lj.jl:25\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbiabf1lj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbiabf1lj.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbiabf1lj.jl:26\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbiabf1lj.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbiabf1lj.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbiabf1lj.jl:28\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 1 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbiabf1lj.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbiabf1lj.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbiabf1lj.jl:30\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbiabf1lj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbiabf1lj.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbiabf1lj.jl:31\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbiabf1lj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/."
  timestamp: 1660009053
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n < 0\n\
    \        n = n % p + p\n    end\n    if n < p/2\n        return 2^n % p\n    else\n\
    \        return 2^(n - p/2) * modp(p/2, p) % p\n    end\nend;\nmodp(3, 5)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: ''
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < p\n        return n\n    end\n    # We must compute\
    \ n % p, but we want to be numerically stable.\n    # The idea is that n = i*p\
    \ + r, and that the remainder is r.\n    # To compute i and r, we use long division.\n\
    \    # In long division we compute i = q*p + r, with i < p.\n    # The remainder\
    \ is: (n - q*p) % p = n % p.\n    q = n \xF7 p\n    r = n - q*p\n    return r\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb483hac_.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpb483hac_.jl:32\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb483hac_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb483hac_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpb483hac_.jl:33\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb483hac_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb483hac_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpb483hac_.jl:34\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb483hac_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb483hac_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpb483hac_.jl:35\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb483hac_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb483hac_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpb483hac_.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb483hac_.jl:36 [inlined]\n [3]\
    \ macro expansion\n"
  timestamp: 1660009054
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    res = 1\n    for i = 1:n\n        res = res*2 % p\n \
    \   end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009050
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    # Sympy uses type Int64 for ints\n    if n == 0 return\
    \ 1 elseif n == 1 return 2 end\n    if n % 2 == 0 return mod(modp(n \xF7 2, p)^2,\
    \ p) else return mod(2 * modp(n-1, p), p) end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009051
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if iseven(n)\n        return (modp(n \xF7 2, p)\
    \ ^ 2) % p\n    else\n        return (2 * modp(n \xF7 2, p) ^ 2) % p\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009052
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        x = modp(n \xF7 2, p)\n        return x * x % p\n    else\n     \
    \   return 2 * modp(n - 1, p) % p\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009052
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        1\n    else\n        tmp = modp(div(n,\
    \ 2), p)\n        if n % 2 == 0\n            (tmp * tmp) % p\n        else\n \
    \           (tmp * tmp * base) % p\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpnhhliaxv.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: base not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpnhhliaxv.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpnhhliaxv.jl:17\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpnhhliaxv.jl:30 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnhhliaxv.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpnhhliaxv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: base not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpnhhliaxv.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64) (repeats 10 times)\n     @ Main /tmp/tmpnhhliaxv.jl:17\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnhhliaxv.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnhhliaxv.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpnhhliaxv.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: base not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpnhhliaxv.jl:21\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpnhhliaxv.jl:17\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpnhhliaxv.jl:33 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnhhliaxv.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpnhhliaxv.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: base not "
  timestamp: 1660009056
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \n    if n == 0\n        return 1\n    end\n    if n%2\
    \ == 0\n        temp = modp(n/2, p)\n        return mod(temp*temp, p)\n    else\n\
    \        temp = modp(n-1, p)\n        return mod(temp*modp(n-1, p), p)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpvtww2xku.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpvtww2xku.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvtww2xku.jl:19\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpvtww2xku.jl:22\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvtww2xku.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvtww2xku.jl:30\n"
  timestamp: 1660009056
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    #if n < 0 \n    #    return modp(-n, p)\n    #end\n \
    \   if n < 0\n        return p - modp(-n, p)\n    end\n    #if n == 0 \n    #\
    \    return 1\n    #end\n    #if n == 1 \n    #    return n\n    #end\n    #if\
    \ n == 2 \n    #    return (2%p)\n    #end\n    #if n == 4 \n    #    return (4%p)\n\
    \    #end\n    if n == 1 || n == 2 || n == 4\n        return (n%p)\n    end\n\
    \    if n == 0\n        return 1\n    end\n    if n == 3\n        return (n%p)\n\
    \    end\n    if n == 5\n        return (n%p)\n    end\n    if n == 6\n      \
    \  return (n%p)\n    end\n    if n == 7\n        return (n%p)\n    end\n    if\
    \ n == 8\n        return (n%p)\n    end\n    #if n == 6\n    #    return (6%p)\n\
    \    #end\n    #if n == 7\n    #    return (7%p)\n    #end\n    #if n == 8\n \
    \   #    return (8%p)\n    #end\n    #if n == 9\n    #    return (9%p)\n    #end\n\
    \    #if n == 11\n    #    return (11%p)\n    #end\n    #if n == 12\n    #   \
    \ return (12%p)\n    #end\n    #if n == 13\n    #    return (13%p)\n    #end\n\
    \    #if n == 14\n    #    return (14%p)\n    #end\n    #if n == 15\n    #   \
    \ return (15%p)\n    #end\n    #if n == 16\n    #    return (16%p)\n    #end\n\
    \    #if n == 17\n    #    return (17%p)\n    #end\n    #if n == 18\n    #   \
    \ return (18%p)\n    #end\n    #if n == 19\n    #    return\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphu40vn53.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphu40vn53.jl:1\n\
    in expression starting at /tmp/tmphu40vn53.jl:1\n"
  stdout: ''
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return mod(Int64(2^n), p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy_3r2kyb.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpy_3r2kyb.jl:22\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy_3r2kyb.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy_3r2kyb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy_3r2kyb.jl:25\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy_3r2kyb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy_3r2kyb.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1660009055
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \n    if n == 0 \n        return 1\n    end\n    \n \
    \   if n == 1\n        return 2\n    end\n    \n    if n % 2 == 0\n        q =\
    \ modp(n/2, p)\n        return (q*q) % p\n    else\n        q = modp((n-1)/2,\
    \ p)\n        return (2*q*q) % p\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpxuiqxry7.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpxuiqxry7.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpxuiqxry7.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxuiqxry7.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxuiqxry7.jl:35\n"
  timestamp: 1660009057
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    res = 1\n \
    \   x = 2\n    while n > 0\n        res = ifelse(n % 2 == 1, (res * x) % p, res)\n\
    \        x = (x * x) % p\n        n = n >> 1\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    out = 1\n    while n > 0\n        while n % 2 == 0 \n\
    \            n = n \xF7 2\n            p = p\xB2\n        end\n        n = n -\
    \ 1\n        out = out * p\n    end\n    return out % p\nend\n```\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu7nowqft.jl:25\nin expression starting at\
    \ /tmp/tmpu7nowqft.jl:25\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    prod = modp(n\xF72, p) * modp(n\xF72, p)\n   \
    \ return prod % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoxvc9rje.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpoxvc9rje.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxvc9rje.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoxvc9rje.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoxvc9rje.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxvc9rje.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoxvc9rje.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoxvc9rje.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxvc9rje.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoxvc9rje.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoxvc9rje.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 79 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxvc9rje.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoxvc9rje.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoxvc9rje.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoxvc9rje.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009057
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    elseif mod(n, 2) ==\
    \ 0\n        return mod(modp(div(n, 2), p)^2, p)\n    else \n        return mod(n\
    \ * modp(n - 1, p), p)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4zs58wmm.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp4zs58wmm.jl:28\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 94 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zs58wmm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zs58wmm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4zs58wmm.jl:30\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zs58wmm.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zs58wmm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4zs58wmm.jl:32\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zs58wmm.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zs58wmm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4zs58wmm.jl:33\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 0 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zs58wmm.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zs58wmm.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660009057
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    b = 1\n    while n > 0\n        if n % 2 == 1\n     \
    \       b = mod(b*2, p)\n        end\n        n = div(n, 2)\n    end\n    return\
    \ b\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4416to7r.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp4416to7r.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4416to7r.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4416to7r.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4416to7r.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4416to7r.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4416to7r.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4416to7r.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4416to7r.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4416to7r.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4416to7r.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4416to7r.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4416to7r.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4416to7r.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4416to7r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009056
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 return 1 end\n    if n == 1 return 2 end\n\
    \    if mod(n, 2) == 0 return (modp(n\xF72, p)^2) mod p end\n    return (2*modp(n-1,\
    \ p)) mod p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"mod\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps25aa1q6.jl:16\nin expression starting at /tmp/tmps25aa1q6.jl:16\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        return mod(2*modp(n-1, p), p)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    isp = p > 0\n    isn = n >= 0\n    isq = n < p\n    if\
    \ isp && isn && isq\n        return n % p\n    end\n    isp && isn && !isq &&\
    \ return (n - p) % p \n    return modp(p, n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6_e013wl.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp6_e013wl.jl:29\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6_e013wl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6_e013wl.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6_e013wl.jl:30\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6_e013wl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6_e013wl.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6_e013wl.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6_e013wl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6_e013wl.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6_e013wl.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6_e013wl.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6_e013wl.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6_e013wl.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6_e013wl.jl:33 [inlined]\n [3]\
    \ macro expansion\n"
  timestamp: 1660009057
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = 1\n    for i = 1:n\n        a = (a*2) % p\n    end\n\
    \    return a\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = 1\n    b = 0\n    while n > 0\n        while mod(n,\
    \ 2) == 0\n            n = div(n, 2)\n            b = mod(a, p)\n            a\
    \ = mod(b^2, p)\n        end\n        n = n - 1\n        a = mod(a*b, p)\n   \
    \ end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxhblu5g0.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpxhblu5g0.jl:32\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhblu5g0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxhblu5g0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxhblu5g0.jl:33\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhblu5g0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxhblu5g0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxhblu5g0.jl:35\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 0 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhblu5g0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxhblu5g0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxhblu5g0.jl:37\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhblu5g0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxhblu5g0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxhblu5g0.jl:38\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 0 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhblu5g0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/."
  timestamp: 1660009057
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    x = 1\n    for i in 1:n\n        x = (x\
    \ * 2) % p\n    end\n    return x\nend\n```\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph81fe3f0.jl:21\nin expression starting at\
    \ /tmp/tmph81fe3f0.jl:21\n"
  stdout: ''
  timestamp: 1660009056
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = 2\n    b = n\n    while b > 0\n        if b % 2 ==\
    \ 1\n            a = a*a % p\n        end\n        b = b//2\n    end\n    return\
    \ a\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpjv_hzii1.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  OverflowError: 4611686018427387904 * 2\
    \ overflowed for type Int64\n  Stacktrace:\n   [1] throw_overflowerr_binaryop(op::Symbol,\
    \ x::Int64, y::Int64)\n     @ Base.Checked ./checked.jl:154\n   [2] checked_mul\n\
    \     @ ./checked.jl:288 [inlined]\n   [3] rem\n     @ ./rational.jl:312 [inlined]\n\
    \   [4] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjv_hzii1.jl:17\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjv_hzii1.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjv_hzii1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpjv_hzii1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  OverflowError: 4611686018427387904 * 2 overflowed\
    \ for type Int64\n  Stacktrace:\n   [1] throw_overflowerr_binaryop(op::Symbol,\
    \ x::Int64, y::Int64)\n     @ Base.Checked ./checked.jl:154\n   [2] checked_mul\n\
    \     @ ./checked.jl:288 [inlined]\n   [3] rem\n     @ ./rational.jl:312 [inlined]\n\
    \   [4] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjv_hzii1.jl:17\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjv_hzii1.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjv_hzii1.jl:28\ntest set:\
    \ Test Failed at /tmp/tmpjv_hzii1.jl:31\n  Expression: candidate(0, 101) == 1\n\
    \   Evaluated: 2 == 1"
  timestamp: 1660009058
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    res = 1\n    i = 1\n    while i <= n\n        res = (res\
    \ * 2) % p\n        i += 1\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009054
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        return mod( modp(n/2, p)^2, p )\n    else\n        return mod( modp(n-1,\
    \ p) * modp(n+1, p), p )\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: 'test set: Error During Test at '
  timestamp: 1660009058
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 1\n        return 0\n    end\n    result = 1\n\
    \    x = n % p\n    while n > 0\n        if n % 2 == 1\n            result = (result\
    \ * x) % p\n        end\n        n = floor(Int64, n / 2)\n        x = (x * x)\
    \ % p\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgqs651wg.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpgqs651wg.jl:33\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgqs651wg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgqs651wg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgqs651wg.jl:34\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgqs651wg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgqs651wg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgqs651wg.jl:36\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgqs651wg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgqs651wg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgqs651wg.jl:38\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgqs651wg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgqs651wg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgqs651wg.jl:39\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgqs651wg.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/"
  timestamp: 1660009058
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    b = 2\n    r = 1\n    while n > 0\n        @assert b^(p-1)\
    \ % p == 1\n        if bitstring(n)[end] == '1'\n            r = (r * b) % p\n\
    \        end\n        b = (b^2) % p\n        n = div(n, 2)\n    end\n    r\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpiflshyz6.jl:32\n  Test threw exception\n\
    \  Expression: candidate(1101, 101) == 2\n  AssertionError: b ^ (p - 1) % p ==\
    \ 1\n  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpiflshyz6.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiflshyz6.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiflshyz6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpiflshyz6.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  AssertionError: b ^ (p - 1) % p == 1\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpiflshyz6.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiflshyz6.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiflshyz6.jl:30\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      2      7\n"
  timestamp: 1660009058
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    t = 1\n    for i in 1:n\n        t = t * 2\n        t\
    \ = mod(t, p)\n    end\n    return t\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    one = 1\n    s = one\n    for i = 0: n\n        s = mod(s*2,\
    \ p)\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt04vqom7.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpt04vqom7.jl:26\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt04vqom7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt04vqom7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt04vqom7.jl:27\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt04vqom7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt04vqom7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt04vqom7.jl:28\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 2 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt04vqom7.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt04vqom7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt04vqom7.jl:29\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt04vqom7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt04vqom7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt04vqom7.jl:30\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt04vqom7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009058
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return modp(big(n), big(p))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp1yrij9ct.jl:21\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::BigInt,\
    \ ::BigInt)\n  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1yrij9ct.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1yrij9ct.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1yrij9ct.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1yrij9ct.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::BigInt,\
    \ ::BigInt)\n  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp1yrij9ct.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1yrij9ct.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1yrij9ct.jl:20\n"
  timestamp: 1660009059
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    ret = 1\n    while n>0\n        if n%2==1\n         \
    \   ret *= 2\n            ret = ret % p\n        end\n        n = n >> 1\n   \
    \ end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy8xcicdf.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpy8xcicdf.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8xcicdf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8xcicdf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy8xcicdf.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8xcicdf.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8xcicdf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy8xcicdf.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8xcicdf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8xcicdf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy8xcicdf.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8xcicdf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8xcicdf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy8xcicdf.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8xcicdf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009058
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if n == 2\n        return 4\n    end\n    val1\
    \ = modp(n div 2, p)\n    val2 = (val1 * val1) mod p\n    if n % 2 == 0\n    \
    \    return val2\n    else\n        return (val2 * 2) mod p\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9tdpuw9u.jl:23\nin expression starting at\
    \ /tmp/tmp9tdpuw9u.jl:23\n"
  stdout: ''
  timestamp: 1660009057
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    q = n\n    z = 1\n    while (q > 0)\n        z = z *\
    \ 2 % p\n        q = q - 1\n    end\n    return z\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009055
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n > 0\n\
    \        return (2*modp(n-1, p)) % p\n    end\n    if n < 0\n        return (modp(n+1,\
    \ p))^-1 % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009055
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 1\n        return 0\n    end\n    n = rem(n,\
    \ p)\n    if n < 0\n        n += p\n    end\n    a = 1\n    while n > 0\n    \
    \    if rem(n, 2) > 0\n            a = modp(a * 2, p)\n        end\n        n\
    \ = div(n, 2)\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return ifelse(n == 0, 1, (2*modp(n-1, p)) % p)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    x = 1\n    while n != 0\n        if n & 1\
    \ == 1\n            x = (x * 2) % p\n        end\n        n >>= 1\n    end\n \
    \   return x\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc56xlg3g.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpc56xlg3g.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc56xlg3g.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc56xlg3g.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpc56xlg3g.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc56xlg3g.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc56xlg3g.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpc56xlg3g.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc56xlg3g.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc56xlg3g.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpc56xlg3g.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc56xlg3g.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc56xlg3g.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpc56xlg3g.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc56xlg3g.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009060
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n < 0\n     \
    \   return -modp(-n, p)\n    elseif n > p\n        return modp(n % p, p)\n   \
    \ elseif n == p\n        return 0\n    else\n        return n\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0r1h9ydx.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp0r1h9ydx.jl:32\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r1h9ydx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r1h9ydx.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0r1h9ydx.jl:34\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r1h9ydx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r1h9ydx.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0r1h9ydx.jl:35\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r1h9ydx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r1h9ydx.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0r1h9ydx.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r1h9ydx.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r1h9ydx.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0r1h9ydx.jl:37\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r1h9ydx.jl:37 [inlined]\n [3]\
    \ macro expansion\n "
  timestamp: 1660009060
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        t = modp(n div 2, p)\n        t = t * t mod p\n\
    \        if n mod 2 == 1\n            t = t * 2 mod p\n        end\n        return\
    \ t\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirxd7c8w.jl:19\nin expression starting at\
    \ /tmp/tmpirxd7c8w.jl:19\n"
  stdout: ''
  timestamp: 1660009058
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    num = 1\n    for i in 1:n\n        num = num * 2\n  \
    \      num = mod(num, p)\n    end\n    return num\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009057
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if mod(n, 2)\
    \ == 0\n        m = modp(div(n, 2), p)\n        return mod(m*m, p)\n    else\n\
    \        return mod(2*modp(n-1, p), p)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009057
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    elseif n == 2\n        return 4\n    elseif n % 2 == 0\n  \
    \      # n is even\n        sq = modp(n \xF7 2, p)\n        return sq^2 % p\n\
    \    else\n        # n is odd\n        return (2 * modp(n-1, p)) % p\n    end\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009057
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n==0\n        1\n    else\n        v = modp(div(n,2),\
    \ p)\n        u = v*v % p\n        if n % 2 == 0\n            u\n        else\n\
    \            u*2 % p\n        end\n    end\nend\n\"\"\"Return 2^n modulo p (be\
    \ aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n  \
    \  2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100,\
    \ 101)\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpkmf_jz5h.jl:26\nin expression starting at /tmp/tmpkmf_jz5h.jl:26\n"
  stdout: ''
  timestamp: 1660009060
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n%p == 0 && return 1\n    n == 1 && return 1\n    n ==\
    \ 2 && return 2 % p\n    res = modp(n>>1, p)^2 % p\n    n%2 != 0 && return res*2\
    \ % p\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbhwy994.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpkbhwy994.jl:26\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbhwy994.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbhwy994.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkbhwy994.jl:27\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 83 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbhwy994.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbhwy994.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkbhwy994.jl:29\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 2 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbhwy994.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbhwy994.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkbhwy994.jl:30\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 78 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbhwy994.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbhwy994.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkbhwy994.jl:31\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbhwy994.jl:31 [inlined]\n [3]\
    \ macro expansion\n   "
  timestamp: 1660009061
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    while n > 0\n        if (n & 1) != 0\n   \
    \         r = (r * a) % p\n        end\n        n = n >> 1\n        a = (a * a)\
    \ % p\n    end\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp_2pwcm77.jl:29\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp_2pwcm77.jl:0\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_2pwcm77.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_2pwcm77.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_2pwcm77.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: a not defined\n  Stacktrace:\n \
    \  [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp_2pwcm77.jl:0\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_2pwcm77.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_2pwcm77.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_2pwcm77.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp_2pwcm77.jl:0\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_2pwcm77.jl:32 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_2pwcm77.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_2pwcm77.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n  \
    \ [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp_2pwcm77.jl:0\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_"
  timestamp: 1660009062
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    if n < 0\n        n += p\n    end\n    return\
    \ n\nend\n \nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgbc4y_28.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpgbc4y_28.jl:27\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbc4y_28.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbc4y_28.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgbc4y_28.jl:28\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbc4y_28.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbc4y_28.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgbc4y_28.jl:29\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbc4y_28.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbc4y_28.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgbc4y_28.jl:30\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbc4y_28.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbc4y_28.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgbc4y_28.jl:31\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbc4y_28.jl:31 [inlined]\n [3]\
    \ macro expansion\n"
  timestamp: 1660009061
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        1\n    else\n        a = modp(n >>\
    \ 1, p) # p*a = a^2 mod p\n        a = mod(a^2, p)\n        if n & 1 == 1\n  \
    \          mod(a*2, p)\n        else\n            a\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009058
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n %= p\n    res = 1\n    while n > 0\n        if n &\
    \ 1 == 1\n            res = res * 2 % p\n        end\n        n >>= 1\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp683hym02.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp683hym02.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp683hym02.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp683hym02.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp683hym02.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp683hym02.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp683hym02.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp683hym02.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp683hym02.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp683hym02.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp683hym02.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp683hym02.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp683hym02.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp683hym02.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp683hym02.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009061
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if p == 1\n\
    \        return 0\n    end\n    a = modp(n >> 1, p)\n    if n & 1\n        a *=\
    \ 2 % p\n    end\n    return a % p\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpjm5fq6vh.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  TypeError: non-boolean (Int64) used in\
    \ boolean context\n  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main\
    \ /tmp/tmpjm5fq6vh.jl:21\n   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjm5fq6vh.jl:20\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjm5fq6vh.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjm5fq6vh.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpjm5fq6vh.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  TypeError: non-boolean (Int64) used in boolean\
    \ context\n  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjm5fq6vh.jl:21\n\
    \   [2] modp(n::Int64, p::Int64) (repeats 10 times)\n     @ Main /tmp/tmpjm5fq6vh.jl:20\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjm5fq6vh.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjm5fq6vh.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpjm5fq6vh.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  TypeError: non-boolean (Int64) used in boolean context\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjm5fq6vh.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpjm5fq6vh.jl:20\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjm5fq6vh.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjm5fq6vh.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpjm5fq6vh.jl:35\n  Test threw except"
  timestamp: 1660009062
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n==0\n        return 1\n    end\n    if n%2==0\n \
    \       return (modp(n \xF7 2, p)^2) % p\n    else\n        return (modp(n \xF7\
    \ 2, p)^2 * 2) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t\
    @test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009058
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    @assert 0 <= n <= 2^64 - 1\n    @assert 0 <= p <= 2^64\
    \ - 1\n    @assert !(p==1)\n    @assert p != 0\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv3lzxlln.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv3lzxlln.jl:1\n\
    in expression starting at /tmp/tmpv3lzxlln.jl:1\n"
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    s = 1\n    i = 1\n    while i <= n\n        s = (s*2)\
    \ % p\n        i += 1\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009058
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0\n        return modp(-n, p)\n    end\n    n\
    \ %= p\n    if n == 0\n        return 1\n    end\n    ret = 1\n    while n > 0\n\
    \        if (n & 1) != 0\n            ret = (ret * ret) % p\n        end\n   \
    \     n >>= 1\n    end\n    return ret\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpznppmdye.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpznppmdye.jl:35\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznppmdye.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznppmdye.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpznppmdye.jl:36\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznppmdye.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznppmdye.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpznppmdye.jl:38\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 1 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznppmdye.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznppmdye.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpznppmdye.jl:40\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznppmdye.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznppmdye.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpznppmdye.jl:41\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznppmdye.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/."
  timestamp: 1660009062
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    while n > 0\n        if n % 2 == 1\n     \
    \       r = r * 2 % p\n        end\n        n = n \xF7 2\n    end\n    return\
    \ r\nend\nmodp(3, 5)\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpesxk1645.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpesxk1645.jl:29\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesxk1645.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpesxk1645.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpesxk1645.jl:30\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesxk1645.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpesxk1645.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpesxk1645.jl:32\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesxk1645.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpesxk1645.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpesxk1645.jl:33\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesxk1645.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpesxk1645.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpesxk1645.jl:34\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesxk1645.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009062
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    result = modp(div(n,\
    \ 2), p)\n    result = (result * result) % p\n    if mod(n, 2) == 1\n        result\
    \ = (result * 2) % p\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        return (2 * modp(n-1, p)) % p\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return mod(2^n, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpobors10i.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpobors10i.jl:22\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobors10i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobors10i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpobors10i.jl:25\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobors10i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobors10i.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return mod(2, p)\n    end\n    if n%2 == 0\n        return mod(4*modp(n\xF7\
    2, p), p)\n    else\n        return mod(4*modp(n\xF72, p) + 2, p)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2_m8i_gv.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp2_m8i_gv.jl:31\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_m8i_gv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_m8i_gv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2_m8i_gv.jl:32\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 60 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_m8i_gv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_m8i_gv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2_m8i_gv.jl:34\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 10 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_m8i_gv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_m8i_gv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2_m8i_gv.jl:35\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 71 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_m8i_gv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_m8i_gv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2_m8i_gv.jl:36\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_m8i_gv.jl:36 [inlined]\n [3]\
    \ macro expansion\n  "
  timestamp: 1660009062
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    (b, c) = modp_base(n, p)\n    return b \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpavpds2u6.jl:22\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: modp_base not defined\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpavpds2u6.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpavpds2u6.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpavpds2u6.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpavpds2u6.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: modp_base not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpavpds2u6.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpavpds2u6.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpavpds2u6.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpavpds2u6.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  UndefVarError: modp_base not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpavpds2u6.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpavpds2u6.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpavpds2u6.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpavpds2u6.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: modp_base not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpavpds2u6.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3"
  timestamp: 1660009063
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        return 2*modp(n-1, p) % p\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n < 0\n\
    \        return modp(-n, p)\n    end\n    if p < 0\n        return modp(n, -p)\n\
    \    end\n    m = n % (2*p)\n    if m > p\n        return m - p\n    else\n  \
    \      return m\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd9z64b5m.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpd9z64b5m.jl:36\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 91 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9z64b5m.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9z64b5m.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd9z64b5m.jl:38\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9z64b5m.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9z64b5m.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd9z64b5m.jl:39\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 100 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9z64b5m.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9z64b5m.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd9z64b5m.jl:40\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9z64b5m.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9z64b5m.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpd9z64b5m.jl:41\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9z64b5m.jl:41 [inlined]\n [3]\
    \ macro expansion\n "
  timestamp: 1660009062
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2\n    end\n    if n%2 == 0\n        return (modp(n/2, p)*modp(n/2,\
    \ p))%p\n    else\n        return (2*modp(n-1, p))%p\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpydl4zbsp.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpydl4zbsp.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpydl4zbsp.jl:21\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpydl4zbsp.jl:23\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpydl4zbsp.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpydl4zbsp.jl:30\n"
  timestamp: 1660009063
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0 \n        return 1\n    end\n    acc = 1\n\
    \    for i in 1:n\n        acc = (acc * 2) % p\n    end\n    return acc\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009059
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n % 2 ==\
    \ 0\n        return (modp(n/2, p)^2) % p\n    else\n        return (2 * modp(n-1,\
    \ p)) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpgdni4du2.jl:28\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpgdni4du2.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgdni4du2.jl:18\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpgdni4du2.jl:20\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgdni4du2.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgdni4du2.jl:27\n"
  timestamp: 1660009063
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    r = 1\n   \
    \ d = 2\n    for i in 1:63\n        if (n & (1 << i)) != 0\n            r = r\
    \ * d % p\n        end\n        d = d * d % p\n    end\n    return r\nend\n```\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlzsoca9.jl:27\nin expression starting at\
    \ /tmp/tmpvlzsoca9.jl:27\n"
  stdout: ''
  timestamp: 1660009061
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n < 0\n        ret = modp(-n, p)\n        return ret\
    \ == 0 ? 0 : p - ret\n    end\n    if n == 0 \n        return 1\n    end\n   \
    \ if n % 2 == 0\n        m = modp(n \xF7 2, p)\n        return (m * m) % p\n \
    \   else\n        return (modp(n - 1, p) * n) % p\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1cp0n_va.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp1cp0n_va.jl:34\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 94 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1cp0n_va.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1cp0n_va.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1cp0n_va.jl:36\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1cp0n_va.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1cp0n_va.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1cp0n_va.jl:38\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1cp0n_va.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1cp0n_va.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1cp0n_va.jl:39\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 0 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1cp0n_va.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1cp0n_va.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660009063
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        #g = modp(n,\
    \ p)\n        #f = (g * g) % p\n        #if (n & 1) == 1\n        #    return\
    \ (f * g) % p\n        #else\n        #    return f\n        #end\n        return\
    \ pow(2, n, p)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpz302sf_k.jl:32\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: pow not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpz302sf_k.jl:24\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz302sf_k.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz302sf_k.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz302sf_k.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  UndefVarError: pow not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpz302sf_k.jl:24\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz302sf_k.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz302sf_k.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz302sf_k.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: pow not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpz302sf_k.jl:24\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpz302sf_k.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz302sf_k.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz302sf_k.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  UndefVarError: pow not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpz302sf_k.jl:24\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n    "
  timestamp: 1660009064
- exit_code: -1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    if n < 0\n        n += p\n    end\n  \
    \  m = 1\n    for k in 0:64\n        if n[k] == 1\n            m = (m*2) % p\n\
    \        end\n    end\n    return m\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpl9_79x4k.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  BoundsError\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./number.jl:98 [inlined]\n   [2] modp(n::Int64, p::Int64)\n     @ Main\
    \ /tmp/tmpl9_79x4k.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl9_79x4k.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl9_79x4k.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpl9_79x4k.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  BoundsError\n  Stacktrace:\n   [1] getindex\n \
    \    @ ./number.jl:98 [inlined]\n   [2] modp(n::Int64, p::Int64)\n     @ Main\
    \ /tmp/tmpl9_79x4k.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl9_79x4k.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl9_79x4k.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpl9_79x4k.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(0, 101) == 1\n  BoundsError\n  Stacktrace:\n   [1] getindex\n    \
    \ @ ./number.jl:98 [inlined]\n   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpl9_79x4k.jl:20\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl9_79x4k.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl9_79x4k.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpl9_79x4k.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  BoundsError\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./number.jl:98 [inlined]\n   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpl9_79x4k.jl:20\n\
    \   [3] macro expansio"
  timestamp: 1660009064
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if p == 1\n\
    \        return 0\n    end\n    r = modp(n >> 1, p) # r = (n / 2) mod p\n    r\
    \ = r * r % p\n    if n & 1\n        r = r * 2 % p\n    end\n    return r\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp9rd92yfh.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp9rd92yfh.jl:32\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  TypeError: non-boolean (Int64) used in\
    \ boolean context\n  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main\
    \ /tmp/tmp9rd92yfh.jl:22\n   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9rd92yfh.jl:20\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9rd92yfh.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9rd92yfh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp9rd92yfh.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  TypeError: non-boolean (Int64) used in boolean\
    \ context\n  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9rd92yfh.jl:22\n\
    \   [2] modp(n::Int64, p::Int64) (repeats 10 times)\n     @ Main /tmp/tmp9rd92yfh.jl:20\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9rd92yfh.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9rd92yfh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp9rd92yfh.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  TypeError: non-boolean (Int64) used in boolean context\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9rd92yfh.jl:22\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmp9rd92yfh.jl:20\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9rd92yfh.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9rd92yfh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp9rd92yfh.jl:36\n  Test threw except"
  timestamp: 1660009064
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    halfp = modp(n\
    \ >> 1, p)\n    if n & 1 == 0\n        2 * halfp % p\n    else\n        (2 * halfp\
    \ + p - 1) % p\n    end\nend\n \n \n@testset \"modp\" begin\n    @test modp(3,\
    \ 5) == 3\n    @test modp(1101, 101) == 2\n    @test modp(0, 101) == 1\n    @test\
    \ modp(3, 11) == 8\n    @test modp(100, 101) == 1\nend\n \n \n\"\"\"Return the\
    \ sum of all values in a given range.\n    >>> sum_of_values(1, 5)\n    15\n \
    \   >>> sum_of_values(5, 5)\n    5\n    >>> sum_of_values(0, 1)\n    1\n    >>>\
    \ sum_of_values(1, 0)\n    1\n    >>> sum_of_values(1, -1)\n    0\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpus6mfvs7.jl:26

    in expression starting at /tmp/tmpus6mfvs7.jl:26

    '
  stdout: ''
  timestamp: 1660009062
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if p == 2\n        return 1\n    end\n    @assert(p >\
    \ 2)\n    if n == 0\n        return 1\n    end\n    if n == 1\n        return\
    \ 2\n    end\n    if n == 2\n        return 4\n    end\n    if n == 3\n      \
    \  return 8\n    end\n    @assert(n >= 4)\n    a = modp(n \xF7 2, p)\n    b =\
    \ mod(2*a, p)\n    if n % 2 == 0\n        return b\n    else\n        return mod(b*2,\
    \ p)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbupbnbnu.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpbupbnbnu.jl:44\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 8 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbupbnbnu.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbupbnbnu.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpbupbnbnu.jl:45\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 44 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbupbnbnu.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbupbnbnu.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpbupbnbnu.jl:48\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 7 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbupbnbnu.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbupbnbnu.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpbupbnbnu.jl:49\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbupbnbnu.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbupbnbnu.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpbupbnbnu.jl:50\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 2 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbupbnbnu.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009064
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    elseif n == 2\n        return 4\n    elseif n == 3\n      \
    \  return 8\n    elseif n == 4\n        return 16\n    elseif n == 5\n       \
    \ return 32\n    elseif n == 6\n        return 64\n    elseif n == 7\n       \
    \ return 128\n    elseif n == 8\n        return 256\n    elseif n == 9\n     \
    \   return 512\n    elseif n == 10\n        return 1024\n    elseif n == 11\n\
    \        return 2048\n    elseif n == 12\n        return 4096\n    elseif n ==\
    \ 13\n        return 8192\n    elseif n == 14\n        return 16384\n    elseif\
    \ n == 15\n        return 32768\n    elseif n == 16\n        return 65536\n  \
    \  elseif n == 17\n        return 131072\n    elseif n == 18\n        return 262144\n\
    \    elseif n == 19\n        return 524288\n    elseif n == 20\n        return\
    \ 1048576\n    elseif n == 21\n        return 2097152\n    elseif n == 22\n  \
    \      return 4194304\n    elseif n == 23\n        return 8388608\n    elseif\
    \ n == 24\n        return 16777216\n    elseif n == 25\n        return 33554432\n\
    \    elseif n == 26\n        return 67108864\n    elseif n == 27\n        return\
    \ 134217728\n    elseif n == 28\n        return 268435456\n    elseif n == 29\n\
    \        return 536870912\n    elseif n == 30\n        return 1073741824\n   \
    \ elseif n == 31\n        return 2147483648\n    elseif n == 32\n        return\
    \ 4294967296\n    elseif n == 33\n        return 8589934592\n    elseif n == 34\n\
    \        return 17179869184\n    elseif n == 35\n        return 34359738368\n\
    \    elseif n == 36\n        return 68719476736\n    elseif n == 37\n        return\
    \ 137438953472\n    elseif n == 38\n        return 274877906944\n    elseif n\
    \ == 39\n        return 549\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qz1u0tw.jl:1\nin expression starting at /tmp/tmp7qz1u0tw.jl:1\n"
  stdout: ''
  timestamp: 1660009062
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if n == 1\n\
    \        return 2 % p\n    end\n    x = modp(n \xF7 2, p)\n    x = (x * x) % p\n\
    \    if n % 2 == 1\n        x = (x * 2) % p\n    end\n    return x\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009061
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    n = n % p\n    res = 1\n    for i in 0:n\n        res\
    \ = res*2 % p\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9om42fpl.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp9om42fpl.jl:26\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9om42fpl.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9om42fpl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9om42fpl.jl:27\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 58 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9om42fpl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9om42fpl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9om42fpl.jl:28\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 2 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9om42fpl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9om42fpl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9om42fpl.jl:29\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 5 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9om42fpl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9om42fpl.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9om42fpl.jl:30\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9om42fpl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   "
  timestamp: 1660009064
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    s = 1\n    while n > 0\n        if n % 2 == 1 \n    \
    \        s = mod(s*2, p)\n        end\n        n = div(n, 2)\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz_ad3gdy.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpz_ad3gdy.jl:28\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_ad3gdy.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_ad3gdy.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpz_ad3gdy.jl:29\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_ad3gdy.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_ad3gdy.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpz_ad3gdy.jl:31\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_ad3gdy.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_ad3gdy.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpz_ad3gdy.jl:32\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_ad3gdy.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_ad3gdy.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpz_ad3gdy.jl:33\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_ad3gdy.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009064
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n==0 \n        return 1\n    elseif n%2==0 \n    \
    \    return modp(n/2, p)^2%p\n    else \n        return (2*modp(n-1, p))%p\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpk_idux2e.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpk_idux2e.jl:27\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpk_idux2e.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpk_idux2e.jl:17\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpk_idux2e.jl:19\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk_idux2e.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk_idux2e.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpk_idux2e.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpk_idux2e.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpk_idux2e.jl:17\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpk_idux2e.jl:19\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk_idux2e.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk_idux2e.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpk_idux2e.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmpk_idux2e.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpk_idux2e.jl:17\n\
    \   [2] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpk_idux2e.jl:19\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk_idux2e.jl:"
  timestamp: 1660009066
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    else\n        return\
    \ (2 * modp(n-1, p)) % p\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009062
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    r = modp(floor(Int64,\
    \ n/2), p)\n    if n % 2 == 0\n        return mod(r*r, p)\n    else\n        return\
    \ mod(r*r*2, p)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\
    \t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009062
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    a = 0 #a:=A_2^(2^i)\n    b = 1 #b:=A_2^(2^i)^2\n    while\
    \ n > 0\n        if n % 2 == 1\n            b *= a\n            b %= p\n     \
    \   end\n        a *= a\n        a %= p\n        n = n >> 1\n    end\n    return\
    \ b\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl5vu0uv5.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpl5vu0uv5.jl:32\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl5vu0uv5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl5vu0uv5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl5vu0uv5.jl:33\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl5vu0uv5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl5vu0uv5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl5vu0uv5.jl:35\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 0 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl5vu0uv5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl5vu0uv5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl5vu0uv5.jl:36\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl5vu0uv5.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl5vu0uv5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl5vu0uv5.jl:37\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl5vu0uv5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ "
  timestamp: 1660009065
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    # binary algorithm to compute x^n mod p (be aware of\
    \ numerics)\n    # ToDo: check how to handle large n\n    if n == 0\n        return\
    \ 1\n    end\n    @assert 0 < p\n    @assert p < 1 << 52\n    @assert 0 <= n\n\
    \    @assert n < 10\n    base = Int64(x)\n    res = Int64(1)\n    while n > 0\n\
    \        n, b = divrem(n, 2)\n        if b > 0\n            res = (res * base)\
    \ % p\n        end\n        base = (base * base) % p\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5)\
    \ == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpl0ucdqp5.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpl0ucdqp5.jl:39\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  UndefVarError: x not defined\n  Stacktrace:\n\
    \   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpl0ucdqp5.jl:23\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl0ucdqp5.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl0ucdqp5.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpl0ucdqp5.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  AssertionError: n < 10\n  Stacktrace:\n   [1] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpl0ucdqp5.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl0ucdqp5.jl:40 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl0ucdqp5.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpl0ucdqp5.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  UndefVarError: x not defined\n  Stacktrace:\n   [1]\
    \ modp(n::Int64, p::Int64)\n     @ Main /tmp/tmpl0ucdqp5.jl:23\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl0ucdqp5.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl0ucdqp5.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpl0ucdqp5.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  AssertionError: n < 10\n  Stacktrace:\n   [1] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpl0ucdqp5.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl0ucdqp5."
  timestamp: 1660009065
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    \n    # Special cases\n    if n == 0\n        return\
    \ 1\n    end\n    if n == 1\n        return n % p\n    end\n    \n    # General\
    \ case\n    out = 1\n    while n > 0\n        if n % 2 == 1\n            out =\
    \ (out * 2) % p\n        end\n        n = n >> 1\n    end\n    return out\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa7fcg958.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpa7fcg958.jl:38\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7fcg958.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7fcg958.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpa7fcg958.jl:39\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 32 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7fcg958.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7fcg958.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpa7fcg958.jl:41\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 4 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7fcg958.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7fcg958.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpa7fcg958.jl:42\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 8 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7fcg958.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7fcg958.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpa7fcg958.jl:43\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7fcg958.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @"
  timestamp: 1660009065
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    r = 1\n    for _ in 1:n\n        r = (r*2) % p\n    end\n\
    \    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009063
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    elseif n == 1\n    \
    \    return 2\n    else\n        return (2 * modp(n-1, p)) % p\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) ==\
    \ 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t\
    @test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    ret = 1\n    p = p\n    n = rem(n, p)\n    while n >\
    \ 0\n        if rem(n, 2) == 1\n            ret = ret * p\n            ret = rem(ret,\
    \ p)\n        end\n        p = p * p\n        p = rem(p, p)\n        n = div(n,\
    \ 2)\n    end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\
    \t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyqp19j9a.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpyqp19j9a.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  DivideError: integer division error\n \
    \ Stacktrace:\n   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] modp(n::Int64,\
    \ p::Int64)\n     @ Main /tmp/tmpyqp19j9a.jl:20\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpyqp19j9a.jl:33 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyqp19j9a.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpyqp19j9a.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  DivideError: integer division error\n  Stacktrace:\n\
    \   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmpyqp19j9a.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyqp19j9a.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyqp19j9a.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpyqp19j9a.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  DivideError: integer division error\n  Stacktrace:\n\
    \   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] modp(n::Int64, p::Int64)\n\
    \     @ Main /tmp/tmpyqp19j9a.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyqp19j9a.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyqp19j9a.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpyqp19j9a.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(100, 101) == 1\n  DivideError: integer division error\n  Stacktrace:\n\
    \   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] modp(n::Int"
  timestamp: 1660009066
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    if n == 0\n        return 1\n    end\n    if p == 2\n\
    \        return 1\n    end\n    if n < 0\n        return modp(-n, p)\n    end\n\
    \    x = modp(n >> 1, p)^2 % p\n    if n & 1 != 0\n        x *= 2\n    end\n \
    \   return x % p\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3,\
    \ 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\
    \t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30,\
    \ 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009063
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    #if n < 0\n    #   n = mod(n, p)\n    #end\n    n = mod(n,\
    \ p)\n    if n == 0\n        return 1\n    end\n    if n == 1\n        return\
    \ 2\n    end\n    if n == 2\n        return 4\n    end\n    if n % 2 == 0\n  \
    \      m = modp(n/2, p)\n        return (m * m) % p\n    else\n        m = modp(n/2,\
    \ p)\n        m2 = (m * m) % p\n        return (2 * m2) % p\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\
    \t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3,\
    \ 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\
    \t@test(candidate(31, 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprz0jfchz.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmprz0jfchz.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3, 5) == 3\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmprz0jfchz.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmprz0jfchz.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprz0jfchz.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprz0jfchz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmprz0jfchz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(1101, 101) == 2\n  MethodError: no method matching modp(::Float64,\
    \ ::Int64)\n  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmprz0jfchz.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmprz0jfchz.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprz0jfchz.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprz0jfchz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmprz0jfchz.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(3, 11) == 8\n  MethodError: no method matching modp(::Float64, ::Int64)\n\
    \  Closest candidates are:\n    modp(!Matched::Int64, ::Int64) at /tmp/tmprz0jfchz.jl:13\n\
    \  Stacktrace:\n   [1] modp(n::Int64, p::Int64)\n     @ Main /tmp/tmprz0jfchz.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprz0jfchz.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprz0jfchz.jl:40\ntest set:\
    \ Error During Test a"
  timestamp: 1660009067
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    result = 1\n    if n==0\n        return result\n    end\n\
    \    k = 1\n    while k <= n \n        result = (result*2) % p\n        k = k+1\n\
    \    end\n    return result\nend\nmodp(1101, 101)\nusing Test\n\n@testset begin\n\
    \ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009063
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    #return mod(2^n, p)  # numerics might be an issue here!\n\
    \    # numerics might be an issue here!\n    # see http://en.wikipedia.org/wiki/Modular_exponentiation\n\
    \    e = 0\n    l = 1\n    while (2^e)*l < n \n        e += 1\n    end\n    while\
    \ e >= 0\n        l = mod(l^2, p)\n        if (2^e)*l <= n\n            n -= (2^e)*l\n\
    \        end\n        e -= 1\n    end\n    return l\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101,\
    \ 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\
    \t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31,\
    \ 5) == 3)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1d9grveg.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp1d9grveg.jl:36\n  Expression: candidate(3,\
    \ 5) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1d9grveg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1d9grveg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1d9grveg.jl:37\n  Expression: candidate(1101, 101) == 2\n\
    \   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1d9grveg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1d9grveg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1d9grveg.jl:39\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 1 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1d9grveg.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1d9grveg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1d9grveg.jl:41\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1d9grveg.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1d9grveg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1d9grveg.jl:42\n  Expression: candidate(31, 5) == 3\n   Evaluated:\
    \ 1 == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1d9grveg.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/."
  timestamp: 1660009065
- exit_code: 0
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    c = 1\n    for i = 1:n\n        c = rem(c*2, p)\n   \
    \ end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = modp;\n\t\
    @test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0,\
    \ 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\
    \t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660009063
- exit_code: 1
  program: "\"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n\
    \    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3,\
    \ 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\nfunction modp(n::Int64,\
    \ p::Int64)::Int64 \n    return n^p % p\nend\nusing Test\n\n@testset begin\n\n\
    candidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101)\
    \ == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100,\
    \ 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpokwwc085.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpokwwc085.jl:22\n  Expression: candidate(1101,\
    \ 101) == 2\n   Evaluated: 44 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokwwc085.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpokwwc085.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpokwwc085.jl:23\n  Expression: candidate(0, 101) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokwwc085.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpokwwc085.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpokwwc085.jl:24\n  Expression: candidate(3, 11) == 8\n   Evaluated:\
    \ 3 == 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokwwc085.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpokwwc085.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpokwwc085.jl:25\n  Expression: candidate(100, 101) == 1\n \
    \  Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokwwc085.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpokwwc085.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpokwwc085.jl:26\n  Expression: candidate(30, 5) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpokwwc085.jl:26 [inlined]\n [3]\
    \ macro expansion\n  "
  timestamp: 1660009065
