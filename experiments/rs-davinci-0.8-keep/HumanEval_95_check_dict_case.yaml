name: HumanEval_95_check_dict_case
language: rs
prompt: "use std::collections::HashMap;\n\n/// Given a dictionary, return True if\
  \ all keys are strings in lower \n/// case or all keys are strings in upper case,\
  \ else return False.\n/// The function should return False is the given dictionary\
  \ is empty.\n/// Examples:\n/// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
  }) should return True.\n/// check_dict_case({\"a\":\"apple\", \"A\":\"banana\",\
  \ \"B\":\"banana\"}) should return False.\n/// check_dict_case({\"a\":\"apple\"\
  , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n/// check_dict_case({\"\
  Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n///\
  \ check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
  fn check_dict_case(dict: HashMap<String, String>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = check_dict_case;\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"b\"), String::from(\"banana\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"\
  pineapple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"\
  B\"), String::from(\"banana\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"5\"), String::from(\"banana\"\
  )), (String::from(\"a\"), String::from(\"apple\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"fruit\"),\
  \ String::from(\"Orange\")), (String::from(\"taste\"), String::from(\"Sweet\"))])),\
  \ true);\n    assert_eq!(candidate(HashMap::from([])), false);\n}\n"
completions: []
stop_tokens:
- "\n}"
