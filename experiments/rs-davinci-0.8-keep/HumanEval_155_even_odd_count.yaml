name: HumanEval_155_even_odd_count
language: rs
prompt: "/// Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n/// even_odd_count(123)\
  \ ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n"
tests: "}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
  \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
  \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
  \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
  \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
completions: ['    unimplemented!();', "    let mut num = num;\n    let mut even_count\
    \ = 0;\n    let mut odd_count = 0;\n    while num != 0 {\n        if num % 2 ==\
    \ 0 {\n            even_count += 1;\n        } else {\n            odd_count +=\
    \ 1;\n        }\n        num /= 10;\n    }\n    (even_count, odd_count)", "  \
    \  let mut evens = 0;\n    let mut odds = 0;\n    let mut num = num;\n    if num\
    \ < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit =\
    \ num % 10;\n        if digit % 2 == 0 {\n            evens += 1;\n        } else\
    \ {\n            odds += 1;\n        }\n        num /= 10;\n    }\n    (evens,\
    \ odds)", '    unimplemented!()', "    let mut n = num;\n    let mut even = 0;\n\
    \    let mut odd = 0;\n    while n != 0 {\n        if n % 2 == 0 {\n         \
    \   even += 1;\n        } else {\n            odd += 1;\n        }\n        n\
    \ /= 10;\n    }\n    (even, odd)", "    let mut even = 0;\n    let mut odd = 0;\n\
    \    let mut a = num;\n    while a != 0 {\n        if a % 2 == 0 {\n         \
    \   even += 1;\n        } else {\n            odd += 1;\n        }\n        a\
    \ /= 10;\n    }\n    (even, odd)", "    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n    for i in num.to_string().chars() {\n        if i.to_digit(10).unwrap()\
    \ % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n    }\n    (even_count, odd_count)", "    let mut even_count\
    \ = 0;\n    let mut odd_count = 0;\n    let mut num = num;\n    if num < 0 {\n\
    \        num = -num;\n    }\n    while num > 0 {\n        let digit = num % 10;\n\
    \        if digit % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n        num /= 10;\n    }\n    (even_count,\
    \ odd_count)", "    let mut evens = 0;\n    let mut odds = 0;\n    for digit in\
    \ num.to_string().chars() {\n        if digit.to_digit(10).unwrap() % 2 == 0 {\n\
    \            evens += 1;\n        } else {\n            odds += 1;\n        }\n\
    \    }\n    (evens, odds)", "    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n    let mut num = num;\n    if num < 0 {\n        num = -num;\n    }\n\
    \    while num > 0 {\n        let digit = num % 10;\n        if digit % 2 == 0\
    \ {\n            even_count += 1;\n        } else {\n            odd_count +=\
    \ 1;\n        }\n        num /= 10;\n    }\n    (even_count, odd_count)", "  \
    \  let mut count_odd: isize = 0;\n    let mut count_even: isize = 0;\n    let\
    \ mut num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n        \
    \    count_even += 1;\n        } else {\n            count_odd += 1;\n       \
    \ }\n        num /= 10;\n    }\n    (count_even, count_odd)", "    let mut even_count\
    \ = 0;\n    let mut odd_count = 0;\n    let mut num = num;\n    if num < 0 {\n\
    \        num = -num;\n    }\n    while num > 0 {\n        let digit = num % 10;\n\
    \        if digit % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n        num /= 10;\n    }\n    (even_count,\
    \ odd_count)", "    let num = num.abs();\n    let even_count = num.to_string().chars().filter(|c|\
    \ c.to_digit(10).unwrap() % 2 == 0).count() as isize;\n    let odd_count = num.to_string().chars().filter(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1).count() as isize;\n    (even_count, odd_count)",
  "    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    if n < 0\
    \ {\n        n = -n;\n    }\n    while n > 0 {\n        if n % 2 == 0 {\n    \
    \        even += 1;\n        } else {\n            odd += 1;\n        }\n    \
    \    n /= 10;\n    }\n    (even, odd)", "    let mut even = 0;\n    let mut odd\
    \ = 0;\n    let mut n = num;\n    while n != 0 {\n        if n % 2 == 0 {\n  \
    \          even += 1;\n        } else {\n            odd += 1;\n        }\n  \
    \      n /= 10;\n    }\n    (even, odd)", "    let mut even_digits = 0;\n    let\
    \ mut odd_digits = 0;\n    let mut num = num;\n    if num < 0 {\n        num =\
    \ -num;\n    }\n    while num > 0 {\n        let digit = num % 10;\n        if\
    \ digit % 2 == 0 {\n            even_digits += 1;\n        } else {\n        \
    \    odd_digits += 1;\n        }\n        num /= 10;\n    }\n    (even_digits,\
    \ odd_digits)", "    let (mut even_count, mut odd_count) = (0, 0);\n    if num\
    \ < 0 { return (even_count, odd_count); }\n    let mut tmp = num;\n    while tmp\
    \ > 0 {\n        let digit = tmp % 10;\n        if digit % 2 == 0 {\n        \
    \    even_count += 1;\n        } else {\n            odd_count += 1;\n       \
    \ }\n        tmp /= 10;\n    }\n    (even_count, odd_count)", "    let digits\
    \ = get_digits(num);\n    (\n        digits.iter().filter(|x| **x % 2 == 0).count()\
    \ as isize,\n        digits.iter().filter(|x| **x % 2 != 0).count() as isize,\n\
    \    )", "    let mut num = num;\n    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n    while num != 0 {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)", "    num.to_string()\n        .chars()\n\
    \        .map(|ch| ch.to_digit(10).unwrap())\n        .fold((0, 0), |(e, o), i|\
    \ {\n            if i % 2 == 0 {\n                (e + 1, o)\n            } else\
    \ {\n                (e, o + 1)\n            }\n        })"]
stop_tokens:
- "\n}"
