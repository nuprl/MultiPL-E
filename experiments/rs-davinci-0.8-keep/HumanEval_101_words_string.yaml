name: HumanEval_101_words_string
language: rs
prompt: "/// You will be given a string of words separated by commas or spaces. Your\
  \ task is\n/// to split the string into words and return an array of the words.\n\
  /// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
  \ \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four, five, six\"\
  ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfn words_string(s:\
  \ String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
  Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
  name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
  One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
  two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"),\
  \ String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
  )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
  \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\")),\
  \ vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"\
  four\"), String::from(\"five\"), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\
  \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"ahmed    \
  \ , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n}\n"
completions: ['    s.split(|c: char| !c.is_alphanumeric()).map(|word| word.to_string()).collect()',
  '    s.split(|c: char| !c.is_alphanumeric()).map(|s| s.to_string()).collect()',
  "    //s.split(\",\").collect()\n    s.split(|c: char| c == ',' || c == ' ').map(|s|\
    \ s.to_string()).collect()", "    let v: Vec<&str> = s.split(|c: char| !c.is_alphanumeric()).collect();\n\
    \    v.iter().map(|s| s.to_string()).collect()", "    s.split(|c: char| c == '\
    \ ' || c == ',').map(|word| word.to_string()).collect()", "    s.split(|c: char|\
    \ c == ' ' || c == ',').map(|e| e.to_string()).collect()", '    s.split(|c: char|
    !c.is_alphanumeric()).map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ c == ' ' || c == ',').map(|sub| sub.to_string()).collect()", "    s.split(|c:\
    \ char| c == ' ' || c == ',').map(|word| word.to_string()).collect()", "    s.split(|x|\
    \ x == ' ' || x == ',').map(|x| x.to_string()).collect()", '    s.split(|c: char|
    !c.is_alphanumeric()).map(|s| s.to_string()).collect()', "    let mut words =\
    \ Vec::new();\n    let mut word = String::new();\n    for c in s.chars() {\n \
    \       if c == ' ' || c == ',' {\n            if !word.is_empty() {\n       \
    \         words.push(word);\n                word = String::new();\n         \
    \   }\n        } else {\n            word.push(c);\n        }\n    }\n    if !word.is_empty()\
    \ {\n        words.push(word);\n    }\n    words", '    s.split(|c: char| !c.is_alphanumeric()).map(|s|
    s.to_string()).collect()', "    let mut words = Vec::new();\n    for word in s.split(|c:\
    \ char| c == ',' || c == ' ') {\n        words.push(word.to_string());\n    }\n\
    \    words", '    s.split(|c: char| !c.is_alphanumeric()).map(String::from).collect()',
  "    s.split(|c: char| c == ' ' || c == ',').map(|s| s.to_string()).collect()",
  "    let separated = s.split(|c: char| c == ',' || c == ' ');\n    separated.filter(|s|\
    \ !s.is_empty()).map(|s| s.into()).collect()", "    s.split(|c: char| c == ' '\
    \ || c == ',').map(|s| s.to_string()).collect()", '    s.split(|c: char| !c.is_alphanumeric()).map(|w|
    w.to_string()).collect()', '    s.split_whitespace().map(|w| w.to_string()).collect()']
stop_tokens:
- "\n}"
