name: HumanEval_128_prod_signs
language: rs
prompt: "/// You are given an array arr of integers and you need to return\n/// sum\
  \ of magnitudes of integers multiplied by product of all signs\n/// of each number\
  \ in the array, represented by 1, -1 or 0.\n/// Note: return None for empty arr.\n\
  /// Example:\n/// >>> prod_signs([1, 2, 2, -4]) == -9\n/// >>> prod_signs([0, 1])\
  \ == 0\n/// >>> prod_signs([]) == None\nfn prod_signs(arr: Vec<isize>) -> Option<isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
  \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
  \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n  \
  \  assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
  \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
  }\n"
completions: ['    unimplemented!();', "    if arr.is_empty() {\n        return None;\n\
    \    }\n    let mut prod = 1;\n    let mut sum = 0;\n    for x in arr {\n    \
    \    if x == 0 {\n            continue;\n        }\n        prod *= x.signum();\n\
    \        sum += x.abs();\n    }\n    Some(sum * prod)", "    let mut prod = 1;\n\
    \    let mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod\
    \ *= 1;\n            sum += i;\n        } else if i < 0 {\n            prod *=\
    \ -1;\n            sum += i.abs();\n        } else {\n            prod *= 0;\n\
    \        }\n    }\n    if sum == 0 {\n        None\n    } else {\n        Some(sum\
    \ * prod)\n    }", "    if arr.is_empty() {\n        return None;\n    }\n   \
    \ let mut signs = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i <\
    \ 0 {\n            signs *= -1;\n        }\n        sum += i.abs();\n    }\n \
    \   Some(sum * signs)", "    if arr.is_empty() {\n        return None;\n    }\n\
    \    let mut total = 1;\n    let mut sum = 0;\n    for num in arr {\n        sum\
    \ += num.abs();\n        total *= num.signum();\n    }\n    Some(sum * total)",
  "    if arr.is_empty() {\n        return None;\n    }\n    let prod = arr.iter().map(|&n|\
    \ n.signum()).product();\n    let sum = arr.iter().map(|&n| n.abs()).sum();\n\
    \    Some(prod * sum)", '    unimplemented!()', "    if arr.is_empty() {\n   \
    \     return None;\n    }\n    let mut total = 1;\n    let mut count = 0;\n  \
    \  for i in arr {\n        if i > 0 {\n            total *= 1;\n        } else\
    \ if i < 0 {\n            total *= -1;\n        } else {\n            count +=\
    \ 1;\n        }\n    }\n    if count == arr.len() {\n        return Some(0);\n\
    \    }\n    let mut temp = 0;\n    for i in arr {\n        temp += i.abs();\n\
    \    }\n    Some(temp * total)", "    if arr.is_empty() {\n        return None;\n\
    \    }\n    let sign_product = arr.iter().map(|x| x.signum()).product();\n   \
    \ let sum_of_magnitudes = arr.iter().map(|x| x.abs()).sum();\n    Some(sign_product\
    \ * sum_of_magnitudes)", "    if arr.is_empty() {\n        return None;\n    }\n\
    \    let mut sum = 0;\n    let mut prod = 1;\n    for i in &arr {\n        if\
    \ *i < 0 {\n            prod *= -1;\n        }\n        sum += i.abs();\n    }\n\
    \    Some(sum * prod)", "    if arr.is_empty() {\n        return None;\n    }\n\
    \    let mut signs = Vec::new();\n    let mut mags = Vec::new();\n    for n in\
    \ arr {\n        if n == 0 {\n            signs.push(0);\n            mags.push(0);\n\
    \        } else if n > 0 {\n            signs.push(1);\n            mags.push(n);\n\
    \        } else {\n            signs.push(-1);\n            mags.push(-n);\n \
    \       }\n    }\n    let prod = signs.iter().product();\n    let sum = mags.iter().sum();\n\
    \    Some(prod * sum)", "    if arr.is_empty() {\n        return None;\n    }\n\
    \    let prod = arr.iter().map(|a| a.signum()).product();\n    let sum = arr.iter().map(|a|\
    \ a.abs()).sum();\n    Some(prod * sum)", '    unimplemented!()', "    match arr.len()\
    \ {\n        0 => None,\n        _ => Some(arr.iter().fold(1, |acc, &x| acc *\
    \ (x.signum() as isize))),\n    }", "    if arr.is_empty() {\n        return None;\n\
    \    }\n    let mut res = 1;\n    let mut sum = 0;\n    for el in arr {\n    \
    \    if el > 0 {\n            res *= 1;\n        } else if el < 0 {\n        \
    \    res *= -1;\n        } else {\n            res *= 0;\n        }\n        sum\
    \ += el.abs();\n    }\n    Some(res * sum)", "    let product = arr.iter().fold(1,\
    \ |acc, x| acc * x.signum());\n    let sum = arr.iter().fold(0, |acc, x| acc +\
    \ x.abs());\n    match arr.len() {\n        0 => None,\n        _ => Some(product\
    \ * sum),\n    }", "    if arr.is_empty() {\n        return None;\n    }\n   \
    \ let mut sum = 0;\n    let mut prod = 1;\n    for num in arr {\n        sum +=\
    \ num.abs();\n        prod *= if num < 0 { -1 } else { 1 };\n    }\n    Some(sum\
    \ * prod)", "    if arr.is_empty() {\n        return None;\n    }\n    let mut\
    \ prod = 1;\n    let mut sum = 0;\n    for num in arr {\n        if num > 0 {\n\
    \            prod *= 1;\n        } else if num < 0 {\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n        sum += num.abs();\n\
    \    }\n    return Some(sum * prod);", "    if arr.is_empty() {\n        return\
    \ None;\n    }\n    let prod_signs = arr.iter().fold(\n        Some(1),\n    \
    \    |acc, &x| match acc {\n            Some(acc) => Some(acc * x.signum()),\n\
    \            None => None,\n        },\n    );\n    let res = arr.iter().fold(\n\
    \        Some(0),\n        |acc, &x| match acc {\n            Some(acc) => Some(acc\
    \ + x.abs()),\n            None => None,\n        },\n    );\n    Some(res? *\
    \ prod_signs?)", "    if arr.is_empty() {\n        return None;\n    }\n    let\
    \ sum: isize = arr.iter().map(|x| x.abs()).sum();\n    let mut sign: isize = 1;\n\
    \    for n in arr {\n        if n == 0 {\n            sign = 0;\n            break;\n\
    \        }\n        sign *= n.signum();\n    }\n    Some(sum * sign)"]
stop_tokens:
- "\n}"
