name: HumanEval_81_numerical_letter_grade
language: rs
prompt: "/// It is the last week of the semester and the teacher has to give the grades\n\
  /// to students. The teacher has been making her own algorithm for grading.\n///\
  \ The only problem is, she has lost the code she used for grading.\n/// She has\
  \ given you a list of GPAs for some students and you have to write \n/// a function\
  \ that can output a list of letter grades using the following table:\n/// GPA  \
  \     |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n\
  /// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7           \
  \     B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7  \
  \              C\n/// > 1.3                C-\n/// > 1.0                D+ \n///\
  \ > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n\
  /// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C',\
  \ 'A-']\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
  \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
  C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
  \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
  D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n   \
  \ assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"),\
  \ String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
  B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"\
  D-\")]);\n}\n"
completions: ["    let grade_map = vec![\n        (4.0, \"A+\"),\n        (3.7, \"\
    A\"),\n        (3.3, \"A-\"),\n        (3.0, \"B+\"),\n        (2.7, \"B\"),\n\
    \        (2.3, \"B-\"),\n        (2.0, \"C+\"),\n        (1.7, \"C\"),\n     \
    \   (1.3, \"C-\"),\n        (1.0, \"D+\"),\n        (0.7, \"D\"),\n        (0.0,\
    \ \"D-\"),\n    ];\n\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        for (key, val) in grade_map.iter() {\n            if grade == *key\
    \ {\n                result.push(val.to_string());\n                break;\n \
    \           } else if grade < *key {\n                result.push(val.to_string());\n\
    \                break;\n            }\n        }\n    }\n    result", '  unimplemented!()',
  "    let rules = vec![\n        (4.0, \"A+\"),\n        (3.7, \"A\"),\n        (3.3,\
    \ \"A-\"),\n        (3.0, \"B+\"),\n        (2.7, \"B\"),\n        (2.3, \"B-\"\
    ),\n        (2.0, \"C+\"),\n        (1.7, \"C\"),\n        (1.3, \"C-\"),\n  \
    \      (1.0, \"D+\"),\n        (0.7, \"D\"),\n        (0.0, \"D-\"),\n    ];\n\
    \n    let mut results = Vec::new();\n    for grade in grades {\n        for (min,\
    \ letter) in rules.iter() {\n            if grade >= *min {\n                results.push(letter.to_string());\n\
    \                break;\n            }\n        }\n    }\n    results", "    let\
    \ mut results = Vec::new();\n    for grade in grades {\n        if grade >= 4.0\
    \ {\n            results.push(\"A+\".to_string());\n        } else if grade >=\
    \ 3.7 {\n            results.push(\"A\".to_string());\n        } else if grade\
    \ >= 3.3 {\n            results.push(\"A-\".to_string());\n        } else if grade\
    \ >= 3.0 {\n            results.push(\"B+\".to_string());\n        } else if grade\
    \ >= 2.7 {\n            results.push(\"B\".to_string());\n        } else if grade\
    \ >= 2.3 {\n            results.push(\"B-\".to_string());\n        } else if grade\
    \ >= 2.0 {\n            results.push(\"C+\".to_string());\n        } else if grade\
    \ >= 1.7 {\n            results.push(\"C\".to_string());\n        } else if grade\
    \ >= 1.3 {\n            results.push(\"C-\".to_string());\n        } else if grade\
    \ >= 1.0 {\n            results.push(\"D+\".to_string());\n        } else if grade\
    \ >= 0.7 {\n            results.push(\"D\".to_string());\n        } else if grade\
    \ >= 0.0 {\n            results.push(\"D-\".to_string());\n        } else {\n\
    \            results.push(\"E\".to_string());\n        }\n    }\n    results",
  "    grades.iter().map(|&g| match g {\n        g if g >= 4.0 => \"A+\".to_string(),\n\
    \        g if g >= 3.7 => \"A\".to_string(),\n        g if g >= 3.3 => \"A-\"\
    .to_string(),\n        g if g >= 3.0 => \"B+\".to_string(),\n        g if g >=\
    \ 2.7 => \"B\".to_string(),\n        g if g >= 2.3 => \"B-\".to_string(),\n  \
    \      g if g >= 2.0 => \"C+\".to_string(),\n        g if g >= 1.7 => \"C\".to_string(),\n\
    \        g if g >= 1.3 => \"C-\".to_string(),\n        g if g >= 1.0 => \"D+\"\
    .to_string(),\n        g if g >= 0.7 => \"D\".to_string(),\n        g if g >=\
    \ 0.0 => \"D-\".to_string(),\n        _ => \"E\".to_string(),\n    }).collect()",
  "    let mut results = Vec::new();\n    for grade in grades {\n        let g = if\
    \ grade >= 4.0 {\n            \"A+\"\n        } else if grade >= 3.7 {\n     \
    \       \"A\"\n        } else if grade >= 3.3 {\n            \"A-\"\n        }\
    \ else if grade >= 3.0 {\n            \"B+\"\n        } else if grade >= 2.7 {\n\
    \            \"B\"\n        } else if grade >= 2.3 {\n            \"B-\"\n   \
    \     } else if grade >= 2.0 {\n            \"C+\"\n        } else if grade >=\
    \ 1.7 {\n            \"C\"\n        } else if grade >= 1.3 {\n            \"C-\"\
    \n        } else if grade >= 1.0 {\n            \"D+\"\n        } else if grade\
    \ >= 0.7 {\n            \"D\"\n        } else if grade >= 0.0 {\n            \"\
    D-\"\n        } else {\n            \"E\"\n        };\n        results.push(g.to_string());\n\
    \    }\n    results", "    let mut result = Vec::new();\n    for i in grades {\n\
    \        if i > 4.0 {\n            result.push(\"A+\".to_string());\n        }\
    \ else if i > 3.7 {\n            result.push(\"A\".to_string());\n        } else\
    \ if i > 3.3 {\n            result.push(\"A-\".to_string());\n        } else if\
    \ i > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if i\
    \ > 2.7 {\n            result.push(\"B\".to_string());\n        } else if i >\
    \ 2.3 {\n            result.push(\"B-\".to_string());\n        } else if i > 2.0\
    \ {\n            result.push(\"C+\".to_string());\n        } else if i > 1.7 {\n\
    \            result.push(\"C\".to_string());\n        } else if i > 1.3 {\n  \
    \          result.push(\"C-\".to_string());\n        } else if i > 1.0 {\n   \
    \         result.push(\"D+\".to_string());\n        } else if i > 0.7 {\n    \
    \        result.push(\"D\".to_string());\n        } else if i > 0.0 {\n      \
    \      result.push(\"D-\".to_string());\n        } else {\n            result.push(\"\
    E\".to_string());\n        }\n    }\n    result", "    let mut letter_grades =\
    \ Vec::new();\n    for grade in grades {\n        if grade >= 4.0 {\n        \
    \    letter_grades.push(\"A+\".to_string());\n        } else if grade >= 3.7 {\n\
    \            letter_grades.push(\"A\".to_string());\n        } else if grade >=\
    \ 3.3 {\n            letter_grades.push(\"A-\".to_string());\n        } else if\
    \ grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n      \
    \  } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades", '    unimplemented!();', "    // Your code here!\n\
    \    unimplemented!();", "    let mut letter_grades = Vec::new();\n    for g in\
    \ grades {\n        if g >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if g >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if g >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if g >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if g >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if g >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if g >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if g >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if g >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if g >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if g >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if g >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades", "    let grades = grades.iter()\n        .map(|&x|\
    \ if x >= 4.0 {'A'}\n              else if x >= 3.7 {'A'}\n              else\
    \ if x >= 3.3 {'A'}\n              else if x >= 3.0 {'B'}\n              else\
    \ if x >= 2.7 {'B'}\n              else if x >= 2.3 {'B'}\n              else\
    \ if x >= 2.0 {'C'}\n              else if x >= 1.7 {'C'}\n              else\
    \ if x >= 1.3 {'C'}\n              else if x >= 1.0 {'D'}\n              else\
    \ if x >= 0.7 {'D'}\n              else if x >= 0.0 {'D'}\n              else\
    \ {'E'})\n        .map(|x| format!(\"{}\", x))\n        .collect::<Vec<String>>();\n\
    \    println!(\"{:?}\", grades);\n    let mod_grades = grades.iter()\n       \
    \ .map(|&x| if x == \"A\" {'+'}\n              else if x == \"B\" {'-'}\n    \
    \          else if x == \"C\" {'+'}\n              else if x == \"D\" {'-'}\n\
    \              else {' '})\n        .map(|x| format!(\"{}\", x))\n        .collect::<Vec<String>>();\n\
    \    let grades = grades.iter()\n        .map(|&x| format!(\"{}\", x))\n     \
    \   .collect::<Vec<String>>();\n    let mut output: Vec<String> = Vec::new();\n\
    \    for i in 0..grades.len() {\n        output.push(format!(\"{}{}\", grades[i],\
    \ mod_grades[i]));\n    }\n    output", "    let mut letters = Vec::new();\n \
    \   for grade in grades {\n        if grade >= 4.0 {\n            letters.push(\"\
    A+\".to_string());\n        } else if grade >= 3.7 {\n            letters.push(\"\
    A\".to_string());\n        } else if grade >= 3.3 {\n            letters.push(\"\
    A-\".to_string());\n        } else if grade >= 3.0 {\n            letters.push(\"\
    B+\".to_string());\n        } else if grade >= 2.7 {\n            letters.push(\"\
    B\".to_string());\n        } else if grade >= 2.3 {\n            letters.push(\"\
    B-\".to_string());\n        } else if grade >= 2.0 {\n            letters.push(\"\
    C+\".to_string());\n        } else if grade >= 1.7 {\n            letters.push(\"\
    C\".to_string());\n        } else if grade >= 1.3 {\n            letters.push(\"\
    C-\".to_string());\n        } else if grade >= 1.0 {\n            letters.push(\"\
    D+\".to_string());\n        } else if grade >= 0.7 {\n            letters.push(\"\
    D\".to_string());\n        } else if grade >= 0.0 {\n            letters.push(\"\
    D-\".to_string());\n        } else {\n            letters.push(\"E\".to_string());\n\
    \        }\n    }\n    letters", "    let mut letter_grades = Vec::new();\n  \
    \  for i in grades {\n        let mut letter_grade = String::new();\n        match\
    \ i {\n            4.0 => letter_grade = \"A+\".to_string(),\n            _ if\
    \ i > 3.7 => letter_grade = \"A\".to_string(),\n            _ if i > 3.3 => letter_grade\
    \ = \"A-\".to_string(),\n            _ if i > 3.0 => letter_grade = \"B+\".to_string(),\n\
    \            _ if i > 2.7 => letter_grade = \"B\".to_string(),\n            _\
    \ if i > 2.3 => letter_grade = \"B-\".to_string(),\n            _ if i > 2.0 =>\
    \ letter_grade = \"C+\".to_string(),\n            _ if i > 1.7 => letter_grade\
    \ = \"C\".to_string(),\n            _ if i > 1.3 => letter_grade = \"C-\".to_string(),\n\
    \            _ if i > 1.0 => letter_grade = \"D+\".to_string(),\n            _\
    \ if i > 0.7 => letter_grade = \"D\".to_string(),\n            _ if i > 0.0 =>\
    \ letter_grade = \"D-\".to_string(),\n            _ => letter_grade = \"E\".to_string(),\n\
    \        }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades",
  "    grades.iter().map(|&n| {\n        let grade = match n {\n            4.0 =>\
    \ \"A+\",\n            g if g > 3.7 => \"A\",\n            g if g > 3.3 => \"\
    A-\",\n            g if g > 3.0 => \"B+\",\n            g if g > 2.7 => \"B\"\
    ,\n            g if g > 2.3 => \"B-\",\n            g if g > 2.0 => \"C+\",\n\
    \            g if g > 1.7 => \"C\",\n            g if g > 1.3 => \"C-\",\n   \
    \         g if g > 1.0 => \"D+\",\n            g if g > 0.7 => \"D\",\n      \
    \      g if g > 0.0 => \"D-\",\n            _ => \"E\",\n        };\n        grade.to_string()\n\
    \    }).collect()", "    return grades.iter().map(|&g| match g {\n        x if\
    \ x >= 4.0 => \"A+\",\n        x if x >= 3.7 => \"A\",\n        x if x >= 3.3\
    \ => \"A-\",\n        x if x >= 3.0 => \"B+\",\n        x if x >= 2.7 => \"B\"\
    ,\n        x if x >= 2.3 => \"B-\",\n        x if x >= 2.0 => \"C+\",\n      \
    \  x if x >= 1.7 => \"C\",\n        x if x >= 1.3 => \"C-\",\n        x if x >=\
    \ 1.0 => \"D+\",\n        x if x >= 0.7 => \"D\",\n        x if x >= 0.0 => \"\
    D-\",\n        _ => \"E\",\n    }).collect::<Vec<_>>();", "    grades.iter().map(|g|\
    \ match *g {\n        4.0 => \"A+\",\n        g if g > 3.7 => \"A\",\n       \
    \ g if g > 3.3 => \"A-\",\n        g if g > 3.0 => \"B+\",\n        g if g > 2.7\
    \ => \"B\",\n        g if g > 2.3 => \"B-\",\n        g if g > 2.0 => \"C+\",\n\
    \        g if g > 1.7 => \"C\",\n        g if g > 1.3 => \"C-\",\n        g if\
    \ g > 1.0 => \"D+\",\n        g if g > 0.7 => \"D\",\n        g if g > 0.0 =>\
    \ \"D-\",\n        g if g == 0.0 => \"E\",\n        _ => \"\",\n    }).collect()",
  "    let mut result: Vec<String> = Vec::new();\n    let mut i = 0;\n    while i\
    \ < grades.len() {\n        if grades[i] > 4.0 {\n            result.push(\"A+\"\
    .to_string());\n        } else if grades[i] > 3.7 {\n            result.push(\"\
    A\".to_string());\n        } else if grades[i] > 3.3 {\n            result.push(\"\
    A-\".to_string());\n        } else if grades[i] > 3.0 {\n            result.push(\"\
    B+\".to_string());\n        } else if grades[i] > 2.7 {\n            result.push(\"\
    B\".to_string());\n        } else if grades[i] > 2.3 {\n            result.push(\"\
    B-\".to_string());\n        } else if grades[i] > 2.0 {\n            result.push(\"\
    C+\".to_string());\n        } else if grades[i] > 1.7 {\n            result.push(\"\
    C\".to_string());\n        } else if grades[i] > 1.3 {\n            result.push(\"\
    C-\".to_string());\n        } else if grades[i] > 1.0 {\n            result.push(\"\
    D+\".to_string());\n        } else if grades[i] > 0.7 {\n            result.push(\"\
    D\".to_string());\n        } else if grades[i] > 0.0 {\n            result.push(\"\
    D-\".to_string());\n        } else {\n            result.push(\"E\".to_string());\n\
    \        }\n        i += 1;\n    }\n    result", "    let mut grades_vec = Vec::new();\n\
    \    for g in grades {\n        let grade = match g {\n            x if x >= 4.0\
    \ => \"A+\",\n            x if x >= 3.7 => \"A\",\n            x if x >= 3.3 =>\
    \ \"A-\",\n            x if x >= 3.0 => \"B+\",\n            x if x >= 2.7 =>\
    \ \"B\",\n            x if x >= 2.3 => \"B-\",\n            x if x >= 2.0 => \"\
    C+\",\n            x if x >= 1.7 => \"C\",\n            x if x >= 1.3 => \"C-\"\
    ,\n            x if x >= 1.0 => \"D+\",\n            x if x >= 0.7 => \"D\",\n\
    \            x if x >= 0.0 => \"D-\",\n            _              => \"E\",\n\
    \        };\n        grades_vec.push(grade.to_string());\n    }\n    grades_vec",
  "    let res: Vec<String> = grades.iter().map(|x| get_letter_grade(x)).collect();\n\
    \    res"]
stop_tokens:
- "\n}"
