name: HumanEval_153_Strongest_Extension
language: rs
prompt: "/// You will be given the name of a class (a string) and a list of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ list.\n/// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfn Strongest_Extension(class_name: String,\
  \ extensions: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"\
  Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"\
  eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"\
  Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"\
  YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"\
  ));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"\
  t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"\
  ), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"\
  __YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"\
  Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]),\
  \ String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"),\
  \ vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"\
  -_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"\
  YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"\
  WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"\
  ));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"\
  Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]),\
  \ String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"\
  _\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"\
  ));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"\
  ), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n"
completions: ["    extensions.iter().map(|e| {\n        let cap = e.chars().filter(|&c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|&c| c.is_lowercase()).count();\n\
    \        return (cap - sm, e.to_string());\n    }).max().unwrap().1", "    let\
    \ mut strongest = (0.0, 0);\n    for (idx, ext) in extensions.iter().enumerate()\
    \ {\n        let u = ext.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let l = ext.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = ((u as f64) - (l as f64)) / 100.0;\n        if strength > strongest.0 {\n\
    \            strongest = (strength, idx);\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extensions[strongest.1])", "    format!(\"{}.{}\", class_name, &extensions.iter().min_by_key(|e|\
    \ {\n        let caps = e.chars().filter(|c| c.is_uppercase()).count();\n    \
    \    let smalls = e.chars().filter(|c| c.is_lowercase()).count();\n        caps\
    \ - smalls\n    }).unwrap())", '    "".to_string()', "    let mut max_strength\
    \ = (0, 0);\n    let mut strongest_extension = String::new();\n    for x in extensions\
    \ {\n        let mut lower = 0;\n        let mut upper = 0;\n        for c in\
    \ x.chars() {\n            if c.is_uppercase() {\n                upper += 1;\n\
    \            } else {\n                lower += 1;\n            }\n        }\n\
    \        if (upper - lower) > max_strength.0 {\n            max_strength = (upper\
    \ - lower, upper + lower);\n            strongest_extension = x;\n        } else\
    \ if (upper - lower) == max_strength.0 {\n            if upper + lower < max_strength.1\
    \ {\n                max_strength = (upper - lower, upper + lower);\n        \
    \        strongest_extension = x;\n            }\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strengths: Vec<(i32,\
    \ i32, i32)> = vec![];\n    for extension in extensions {\n        let mut capital\
    \ = 0;\n        let mut small = 0;\n        for ch in extension.chars() {\n  \
    \          if ch.is_uppercase() {\n                capital += 1;\n           \
    \ } else {\n                small += 1;\n            }\n        }\n        strengths.push((capital\
    \ - small, capital, small));\n    }\n    let (s, c, _) = strengths.iter().max().unwrap();\n\
    \    let (_, c2, _) = strengths.iter().find(|&&(strength, capital, _)| strength\
    \ == *s && capital == *c).unwrap();\n    format!(\"{}.{}\", class_name, extensions[c2\
    \ as usize])", "    let (class_name, mut extensions) = (class_name, extensions);\n\
    \    // find the strongest extension by calculating the strength of each \n  \
    \  // extension with the following formula.\n    // strength = (count uppercase\
    \ letters) - (count lowercase letters)\n    let strongest_extension = extensions.iter()\n\
    \        .max_by_key(|&extension| extension.matches(char::is_uppercase).count()\
    \ -\n                                  extension.matches(char::is_lowercase).count())\n\
    \        .unwrap();\n    // join the class name and strongest extension with a\
    \ \".\"\n    format!(\"{}.{}\", class_name, strongest_extension)", '    class_name
    + "." + &extensions.iter().map(|n| (n.chars().filter(|c| c.is_uppercase()).count()
    - n.chars().filter(|c| c.is_lowercase()).count(), n)).max().unwrap().1', "   \
    \ let mut strength: (f64, String) = (0.0, \"\".to_string());\n    for ext in extensions\
    \ {\n        let (cap, sm) = count_cap_and_sm(&ext);\n        let new_strength\
    \ = (cap as f64 - sm as f64) / ext.len() as f64;\n        if new_strength > strength.0\
    \ {\n            strength = (new_strength, ext.clone());\n        }\n    }\n \
    \   format!(\"{}.{}\", class_name, strength.1)", "    let mut strongest = (class_name,\
    \ 0.0);\n    for e in extensions {\n        let s = strength(e);\n        if s\
    \ > strongest.1 {\n            strongest = (e, s);\n        }\n    }\n    strongest.0",
  "    let mut max_extension = \"\";\n    let mut max_strength = 0;\n    for extension\
    \ in extensions {\n        let strength = extension.chars().fold((0, 0), |tot,\
    \ ch| {\n            if ch.is_uppercase() {\n                (tot.0 + 1, tot.1)\n\
    \            } else {\n                (tot.0, tot.1 + 1)\n            }\n   \
    \     });\n        if strength.0 - strength.1 > max_strength {\n            max_strength\
    \ = strength.0 - strength.1;\n            max_extension = &extension;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, max_extension)", "    let mut\
    \ strongest_extension = &extensions[0];\n    let mut max_strength = 0;\n    for\
    \ i in 1..extensions.len() {\n        let cap = extensions[i].chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extensions[i].chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = cap - sm;\n        if strength\
    \ > max_strength {\n            max_strength = strength;\n            strongest_extension\
    \ = &extensions[i];\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strength: f64 = 0.0;\n    let mut index: usize = 0;\n    for i in 0..extensions.len()\
    \ {\n        let mut cap: i32 = 0;\n        let mut sm: i32 = 0;\n        for\
    \ j in 0..extensions[i].len() {\n            if 'A' <= extensions[i].chars().nth(j).unwrap()\
    \ && extensions[i].chars().nth(j).unwrap() <= 'Z' {\n                cap += 1;\n\
    \            } else {\n                sm += 1;\n            }\n        }\n  \
    \      if cap as f64 - sm as f64 > strength {\n            strength = cap as f64\
    \ - sm as f64;\n            index = i;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, extensions[index]);", "    let mut strongest_extension: String\
    \ = \"\".to_string();\n    let mut best_strength: f64 = std::f64::NEG_INFINITY;\n\
    \    for extension in extensions {\n        let caps: usize = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let smalls: usize = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength: f64 = (caps as f64) - (smalls\
    \ as f64);\n        if strength > best_strength {\n            best_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut result\
    \ = class_name;\n    let mut strength: f64 = 0.0;\n    for e in extensions {\n\
    \        let cap = count_upper(&e);\n        let sm = count_lower(&e);\n     \
    \   let current_strength = cap as f64 - sm as f64;\n        if current_strength\
    \ > strength {\n            strength = current_strength;\n            result =\
    \ class_name.clone() + \".\" + &e;\n        }\n    }\n    result", "    let mut\
    \ strongest_extension = \"\".to_string();\n    let mut max_strength = 0.0;\n \
    \   for ext in extensions {\n        let ext_cap = ext.matches(char::is_uppercase).count();\n\
    \        let ext_sm = ext.matches(char::is_lowercase).count();\n        let ext_strength\
    \ = ext_cap as f64 - ext_sm as f64;\n        if ext_strength > max_strength {\n\
    \            max_strength = ext_strength;\n            strongest_extension = ext;\n\
    \        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut out = class_name.clone();\n    let mut strenght: i32 = 0;\n    for\
    \ extension in extensions {\n        let mut count_upper: i32 = 0;\n        let\
    \ mut count_lower: i32 = 0;\n        for letter in extension.chars() {\n     \
    \       if letter.is_uppercase() {\n                count_upper += 1;\n      \
    \      } else {\n                count_lower += 1;\n            }\n        }\n\
    \        if (count_upper - count_lower) > strenght {\n            strenght = count_upper\
    \ - count_lower;\n            out.push('.');\n            out.push_str(&extension);\n\
    \        }\n    }\n    out", "    let mut strengths: Vec<(String, i32)> = Vec::new();\n\
    \    for ext in extensions {\n        let mut sm: i32 = 0;\n        let mut cap:\
    \ i32 = 0;\n        for c in ext.chars() {\n            if c.is_lowercase() {\n\
    \                sm += 1;\n            } else {\n                cap += 1;\n \
    \           }\n        }\n        strengths.push((ext, cap - sm));\n    }\n  \
    \  strengths.sort_by(|a, b| b.1.cmp(&a.1));\n    format!(\"{}.{}\", class_name,\
    \ strengths[0].0)", "    let mut strongest_extension = String::new();\n    let\
    \ mut strongest_extension_strength = 0;\n    for extension in extensions {\n \
    \       let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n  \
    \      let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n    \
    \    let extension_strength = cap - sm;\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    // Your code goes here\n    let mut\
    \ strongest_ext: String = \"\".to_string();\n    let mut strongest_ext_strength:\
    \ i32 = -1;\n    for extension in extensions {\n        let mut strength: i32\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                strength += 1;\n            } else {\n                strength\
    \ -= 1;\n            }\n        }\n        if strength > strongest_ext_strength\
    \ {\n            strongest_ext_strength = strength;\n            strongest_ext\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_ext)"]
stop_tokens:
- "\n}"
