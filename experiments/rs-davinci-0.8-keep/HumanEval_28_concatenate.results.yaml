language: rs
name: HumanEval_28_concatenate
results:
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    if strings.len() > 0 {\n        let mut result\
    \ = strings[0].clone();\n        for string in strings.iter().skip(1) {\n    \
    \        result = result + string;\n        }\n        result\n    } else {\n\
    \        String::new()\n    }\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result += &s;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    if strings.len() == 0 {\n        return String::new();\n\
    \    }\n    let mut result = String::new();\n    for s in strings {\n        result.push_str(&s);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |a, b| a +\
    \ b)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.as_str()).collect()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for string\
    \ in strings {\n        result.push_str(&string);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, s| acc\
    \ + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, s| acc\
    \ + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    let mut result = String::new();\n    for s in\
    \ strings {\n        result.push_str(&s);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.as_str()).collect()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    if strings.len() == 0 {\n        return String::new();\n\
    \    }\n    let mut result = String::new();\n    for string in strings {\n   \
    \     result.push_str(&string);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |s, s2| s +\
    \ s2)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |acc, s| {\n\
    \        acc + s\n    })\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822474
