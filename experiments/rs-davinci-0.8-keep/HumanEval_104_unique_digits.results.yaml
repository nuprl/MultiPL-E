language: rs
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut answer = vec![];\n\
    \    for &i in &x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ (c.to_digit(10).unwrap() & 1) == 0) {\n            continue;\n        }\n  \
    \      answer.push(i);\n    }\n    answer.sort();\n    answer\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    return x.into_iter().filter(|&y|\
    \ y.to_string().chars().all(|z| z.to_digit(10).unwrap() % 2 == 1)).collect();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpmzwnrntx.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    return x.into_iter().filter(|&x|\
    \ {\n        let mut x = x;\n        while x > 0 {\n            if x % 2 == 0\
    \ {\n                return false;\n            }\n            x /= 10;\n    \
    \    }\n        return true;\n    }).collect();\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpdssk61_1.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n\tx.into_iter().filter(|e| e.to_string().chars().all(|c|\
    \ c == '1' || c == '3' || c == '5' || c == '7' || c == '9')).collect()\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpvjz_igvp.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let even = ['0', '2', '4',\
    \ '6', '8'];\n    let mut result = Vec::new();\n    for num in x {\n        if\
    \ num.to_string().chars().all(|c| !even.contains(&c)) {\n            result.push(num);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !i.to_string().chars().any(|i| i.is_numeric()\
    \ && i.to_digit(10).unwrap() % 2 == 0) {\n            result.push(i);\n      \
    \  }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ {\n        let mut x = x;\n        while x > 0 {\n            if x % 2 == 0\
    \ {\n                return false;\n            }\n            x /= 10;\n    \
    \    }\n        true\n    }).collect()\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpfpd1j3fc.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ n.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpaa3ac8mi.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ !even_digit(n)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `even_digit` in this scope\n  --> /tmp/tmpwzbiyrlw.rs:10:32\n\
    \   |\n10 |     x.into_iter().filter(|&n| !even_digit(n)).collect()\n   |    \
    \                            ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut y: Vec<isize> = Vec::new();\n\
    \    for i in x {\n        if !is_even_digit(&i) {\n            y.push(i);\n \
    \       }\n    }\n    y.sort();\n    y\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_even_digit` in this scope\n  -->\
    \ /tmp/tmp3d899q21.rs:12:13\n   |\n12 |         if !is_even_digit(&i) {\n   |\
    \             ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for n in x {\n        let mut contains_odd_digit = false;\n        let mut\
    \ n = n;\n        while n > 0 {\n            if n % 2 == 0 {\n               \
    \ contains_odd_digit = true;\n                break;\n            }\n        \
    \    n /= 10;\n        }\n        if !contains_odd_digit {\n            result.push(n);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0]`,\n right: `[1, 15, 33]`', /tmp/tmp0619634u.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for num in x {\n        let mut even = false;\n        let mut num_string\
    \ = num.to_string();\n        let mut num_chars = num_string.chars();\n      \
    \  while let Some(digit) = num_chars.next() {\n            if digit == '2' ||\
    \ digit == '4' || digit == '6' || digit == '8' || digit == '0' {\n           \
    \     even = true;\n                break;\n            }\n        }\n       \
    \ if !even {\n            result.push(num);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut new_vec: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   new_vec.push(i);\n        }\n    }\n    return new_vec;\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpyf7ptvsq.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            v.push(i);\n \
    \       }\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpj5zzcf52.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for number in x {\n        let mut even = false;\n      \
    \  let string = number.to_string();\n        for digit in string.chars() {\n \
    \           if digit.to_digit(10).unwrap() % 2 == 0 {\n                even =\
    \ true;\n                break;\n            }\n        }\n        if !even {\n\
    \            result.push(number);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO\n    x\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp6fqioix2.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ !n.to_string().chars().any(|c| c.is_digit(10) && c.to_digit(10).unwrap() % 2\
    \ == 0)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpfgc1jm22.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|n|\
    \ n.to_string().chars().all(|c| c.to_digit(10).unwrap() & 1 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmple2pni79.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut unique_digits: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().filter(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0).count() == 0 {\n       \
    \     unique_digits.push(i);\n        }\n    }\n    unique_digits.sort();\n  \
    \  unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&i|\
    \ i.to_string().chars().all(|c| c.to_digit(10).unwrap() & 1 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpx1wx41tl.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822355
