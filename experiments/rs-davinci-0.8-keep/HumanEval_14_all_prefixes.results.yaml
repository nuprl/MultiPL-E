language: rs
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string\n        .chars()\n        .scan((0, String::new()),\
    \ |acc, cur| {\n            acc.0 += 1;\n            acc.1.push(cur);\n      \
    \      Some(acc.1.clone())\n        })\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822565
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut result = Vec::new();\n    let len = string.len();\n\
    \    for i in 0..len {\n        result.push(string[0..i].to_string());\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp8zj37dw_.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822565
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string\n        .char_indices()\n        .map(|(i,\
    \ _)| string[..i + 1].to_string())\n        .collect()\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822565
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    (0..string.len()).map(|len| (&string[..len]).to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvp2hdwct.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822565
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut output = Vec::new();\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    for i in 0..chars.len() {\n        output.push(chars[0..i\
    \ + 1].iter().collect());\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822565
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let string = string.as_str();\n    (0..string.len()).map(|i|\
    \ &string[0..i]).map(|s| s.to_string()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpj5nv7il8.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822565
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut vec = Vec::new();\n    let string_iter\
    \ = string.chars();\n    let string_len = string.len();\n    for i in 0..string_len\
    \ {\n        vec.push(string_iter.take(i + 1).collect::<String>());\n    }\n \
    \   vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `string_iter`\n --> /tmp/tmplu_oqcw1.rs:9:18\n\
    \  |\n6 |     let string_iter = string.chars();\n  |         ----------- move\
    \ occurs because `string_iter` has type `Chars<'_>`, which does not implement\
    \ the `Copy` trait\n...\n9 |         vec.push(string_iter.take(i + 1).collect::<String>());\n\
    \  |                  ^^^^^^^^^^^ value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822565
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    // TODO: Refactor, this implementation is bad\n\
    \    let string = string.chars().collect::<Vec<char>>();\n    let mut prefixes\
    \ = Vec::new();\n    for start in 0..string.len() {\n        for end in start..string.len()\
    \ {\n            prefixes.push(string[start..=end].iter().collect::<String>());\n\
    \        }\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\", \"s\", \"sd\", \"\
    sdf\", \"sdfg\", \"sdfgh\", \"d\", \"df\", \"dfg\", \"dfgh\", \"f\", \"fg\", \"\
    fgh\", \"g\", \"gh\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]`', /tmp/tmpw1gni22f.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822565
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let len = string.len();\n    let mut vec = Vec::with_capacity(len);\n\
    \    for pos in 0..len {\n        vec.push(string[0..pos].to_string());\n    }\n\
    \    vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmphkzd_un0.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822565
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut result = Vec::<String>::new();\n    for\
    \ i in 0..string.len() {\n        result.push(string[0..i + 1].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822565
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let chars:\
    \ Vec<char> = string.chars().collect();\n    for i in 0..chars.len() {\n     \
    \   prefixes.push(chars[0..i].iter().collect());\n    }\n    prefixes\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpgkw555uc.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822565
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822565
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..string.len()\
    \ {\n        result.push(string[0..i + 1].to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822565
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len()\
    \ {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpm6asr6dw.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822565
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string\n        .chars()\n        .scan(String::new(),\
    \ |state, c| {\n            state.push(c);\n            Some(state.clone())\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822565
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut length = 1;\n    let mut result = Vec::new();\n\
    \    let input_len = string.len();\n    while length <= input_len {\n        result.push(string[0..length].to_string());\n\
    \        length += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822565
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut output = Vec::new();\n    let mut suffix\
    \ = String::new();\n    for c in string.chars() {\n        suffix.push(c);\n \
    \       output.push(suffix.clone());\n    }\n    output\n}\n\nfn main() {\n  \
    \  let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822565
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut vec = Vec::new();\n    let n = string.len();\n\
    \    for i in 0..n {\n        vec.push(string[0..i + 1].to_string());\n    }\n\
    \    vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822565
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let bytes = string.as_bytes();\n    let mut res\
    \ = Vec::with_capacity(bytes.len());\n    for i in 0..bytes.len() {\n        res.push(String::from_utf8(bytes[0..=i].to_vec()).unwrap());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822565
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for pos in\
    \ 0..string.len() {\n        prefixes.push(string[0..pos].to_string());\n    }\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpp4hjjhb8.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822565
