name: HumanEval_42_incr_list
language: rs
prompt: "/// Return list with elements incremented by 1.\n/// >>> incr_list([1, 2,\
  \ 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [6,\
  \ 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
  \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4,\
  \ 4, 10, 1, 124]);\n}\n"
completions: ['    unimplemented!();', '    vec![1, 2, 3]', "    let mut temp = Vec::new();\n\
    \    for i in l {\n        temp.push(i + 1);\n    }\n    temp", "    if l.len()\
    \ == 0 {\n        return l;\n    }\n\n    let first = l[0];\n    let mut rest\
    \ = l.clone();\n    rest.remove(0);\n    let incr_rest = incr_list(rest);\n  \
    \  let mut res = vec![first + 1];\n    res.append(&mut incr_rest);\n    res",
  '    l.iter().map(|x| x + 1).collect()', "    let mut vec = l;\n    for i in 0..vec.len()\
    \ {\n        vec[i] += 1;\n    }\n    vec", "    let mut v = l;\n    for i in\
    \ 0..v.len() {\n        v[i] += 1;\n    }\n    v", '    l.iter().map(|x| x + 1).collect()',
  '    l.iter().map(|n| n + 1).collect()', '    l.iter().map(|x| x + 1).collect()',
  "    let mut result = Vec::new();\n    for x in l {\n        result.push(x + 1);\n\
    \    }\n    result", '    unimplemented!();', '    l.iter().map(|x| x + 1).collect()',
  "    let mut v = Vec::new();\n    for x in l {\n        v.push(x + 1);\n    }\n\
    \    v", "    let mut result = Vec::new();\n    for i in l {\n        result.push(i\
    \ + 1);\n    }\n    result", '    l.iter().map(|e| e + 1).collect()', "    let\
    \ mut l_incr = Vec::new();\n    for i in l {\n        l_incr.push(i + 1);\n  \
    \  }\n    l_incr", '    l.iter().map(|x| x + 1).collect()', '    unimplemented!()',
  '    l.iter().map(|i| i + 1).collect()']
stop_tokens:
- "\n}"
