name: HumanEval_91_is_bored
language: rs
prompt: "/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"Hello\
  \ world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining. I love\
  \ this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
  )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
  bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
  \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
  You and I are going for a walk\")), 0);\n}\n"
completions: ["    S.split_terminator(|c: char| !c.is_alphabetic())\n        .map(|s|\
    \ s.to_lowercase())\n        .filter(|s| s == \"i\")\n        .count() as isize",
  "    let mut no_boredom = 0;\n    let s: Vec<&str> = S.split(|c: char| c == '!'\
    \ || c == '.' || c == '?').collect();\n    for item in s {\n        let m: Vec<&str>\
    \ = item.split(' ').collect();\n        if m.len() > 0 && m[0] == \"I\" {\n  \
    \          no_boredom += 1;\n        }\n    }\n    no_boredom", "    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize", "    let start_with_i: &str = \"I\";\n    let words: Vec<&str> =\
    \ S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n    let mut\
    \ boredoms: usize = 0;\n    for word in words {\n        if word.starts_with(start_with_i)\
    \ {\n            boredoms += 1;\n        }\n    }\n    boredoms as isize", " \
    \   let mut boredoms = 0;\n    let mut previous_char: char = ' ';\n    for c in\
    \ S.chars() {\n        if (previous_char == '.' || previous_char == '?' || previous_char\
    \ == '!') && c == 'I' {\n            boredoms += 1;\n        }\n        previous_char\
    \ = c;\n    }\n    boredoms", "    // Write your code here\n    let mut count:\
    \ isize = 0;\n    let split_sentences: Vec<&str> = S.split(|c| c == '.' || c ==\
    \ '?' || c == '!').collect();\n    for sent in split_sentences {\n        let\
    \ split_words: Vec<&str> = sent.split(\" \").collect();\n        if split_words.len()\
    \ > 0 && split_words[0] == \"I\" {\n            count += 1;\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    let temp: Vec<&str> = S.split(|c| c\
    \ == '.' || c == '?' || c == '!').collect();\n    for i in temp {\n        let\
    \ s = i.trim();\n        if s.len() > 1 && s.starts_with(\"I\") {\n          \
    \  count += 1;\n        }\n    }\n    count", "    S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count() as isize",
  "  let mut count = 0;\n  let mut split = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n  loop {\n    match split.next() {\n      Some(ref s) => if s.starts_with(\"\
    I\") {\n        count += 1;\n      },\n      None => break,\n    }\n  }\n  count",
  "    let mut boredoms = 0;\n    let mut sentence = false;\n    for word in S.split_whitespace()\
    \ {\n        if word.ends_with(\".\") || word.ends_with(\"?\") || word.ends_with(\"\
    !\") {\n            sentence = true;\n        } else if sentence && word.starts_with(\"\
    I\") {\n            boredoms += 1;\n            sentence = false;\n        }\n\
    \    }\n    boredoms", "    let mut l: isize = 0;\n    let mut c: isize = 0;\n\
    \    for x in S.chars() {\n        if l == 0 && x == 'I' {\n            c += 1;\n\
    \        }\n        if x == '.' || x == '?' || x == '!' {\n            l = 0;\n\
    \        } else {\n            l += 1;\n        }\n    }\n    c", "    let mut\
    \ res = 0;\n    let mut sentence = S.split(|c| c == '.' || c == '?' || c == '!');\n\
    \    for sent in sentence {\n        let words = sent.split(' ');\n        for\
    \ word in words {\n            if word == \"I\" {\n                res += 1;\n\
    \                break;\n            }\n        }\n    }\n    res", "    S.chars()\n\
    \        .scan(false, |state, ch| {\n            if *state {\n               \
    \ Some(('I' == ch, false))\n            } else {\n                *state = 'I'\
    \ == ch;\n                Some(('I' == ch, true))\n            }\n        })\n\
    \        .filter(|&(is_i, is_sentence_start)| is_i && is_sentence_start)\n   \
    \     .count() as isize", "    let words: Vec<&str> = S.split(&['.', '?', '!'][..]).collect();\n\
    \    let mut is_bored = 0;\n    for word in words {\n        let mut words_sentence:\
    \ Vec<&str> = word.split_whitespace().collect();\n        if words_sentence.len()\
    \ == 0 {\n            continue;\n        }\n        let first_word = words_sentence.remove(0);\n\
    \        if first_word == \"I\" {\n            is_bored += 1;\n        }\n   \
    \ }\n    is_bored", "    let s = S.as_str();\n    let mut count = 0;\n    let\
    \ ss = s.split(|c| c == '.' || c == '?' || c == '!');\n    for s in ss {\n   \
    \     if s.trim_start().starts_with(\"I\") {\n            count += 1;\n      \
    \  }\n    }\n    count", "    S.split(&['.', '?', '!'][..]).fold(0, |acc, x| {\n\
    \        if x.starts_with(\"I\") {\n            acc + 1\n        } else {\n  \
    \          acc\n        }\n    })", "    let a: Vec<&str> = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!').collect();\n    let mut count = 0;\n    for\
    \ x in a {\n        if x.starts_with(\"I\") {\n            count += 1;\n     \
    \   }\n    }\n    count", "  S.split_terminator(|c: char| c == '.' || c == '?'\
    \ || c == '!').fold(0, |acc, s| {\n    match s.find('I') {\n      Some(i) if i\
    \ <= 2 => acc + 1,\n      _ => acc,\n    }\n  })", "    let mut n: isize = 0;\n\
    \    let mut prev: char = '.';\n    for c in S.chars() {\n        if c == 'I'\
    \ && prev == ' ' {\n            n += 1;\n        }\n        prev = c;\n    }\n\
    \    n", "    S.split(|c: char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"\
    I\")).count() as isize"]
stop_tokens:
- "\n}"
