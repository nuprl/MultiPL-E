language: rs
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = l[0];\n    for i in\
    \ l {\n        if i > m {\n            m = i;\n        }\n    }\n    m\n}\n\n\
    fn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 101
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    return 0;\n}\n\nfn main() {\n  \
    \  let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n\
    \    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmp3uownt40.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().max().unwrap().clone()\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  let mut max = l[0];\n  for &i in l.iter()\
    \ {\n    if i > max {\n      max = i;\n    }\n  }\n  max\n}\n\nfn main() {\n \
    \   let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n\
    \    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut result = l[0];\n    for\
    \ element in l {\n        if element > result {\n            result = element;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(0, |a, b| if a > *b\
    \ { a } else { *b })\n}\n\nfn main() {\n    let candidate = max_element;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut maximum = l[0];\n    for\
    \ &x in l.iter() {\n        if x > maximum {\n            maximum = x;\n     \
    \   }\n    }\n    maximum\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    return l.iter().fold(0, |max, &x|\
    \ if x > max { x } else { max });\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = l[0];\n    for i in\
    \ l {\n        if i > m {\n            m = i;\n        }\n    }\n    m\n}\n\n\
    fn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut res = l[0];\n    for i in\
    \ l {\n        if i > res {\n            res = i;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for &i\
    \ in l.iter() {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(0, |acc, item| {\n\
    \        if item > &acc {\n            *item\n        } else {\n            acc\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n    for\
    \ x in l {\n        if x > max {\n            max = x;\n        }\n    }\n   \
    \ max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut current_max = l[0];\n  \
    \  for i in l.iter() {\n        if i > &current_max {\n            current_max\
    \ = *i;\n        }\n    }\n    current_max\n}\n\nfn main() {\n    let candidate\
    \ = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for num\
    \ in l {\n        if num > max {\n            max = num;\n        }\n    }\n \
    \   max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l.iter() {\n        if *x > max {\n            max = *x;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 0..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    return l.iter().max().unwrap().clone();\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
- exit_code: 101
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n\
    \    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n\
    \    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmpgqgyfnap.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822403
- exit_code: 0
  program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for &x\
    \ in l.iter() {\n        if x > max {\n            max = x;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822403
