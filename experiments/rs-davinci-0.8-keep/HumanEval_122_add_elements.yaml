name: HumanEval_122_add_elements
language: rs
prompt: "/// Given a non-empty array of integers arr and an integer k, return\n///\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  /// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n/// Output: 24\
  \ # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <= k\
  \ <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
  \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
  \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
  \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
completions: ['    arr.iter().filter(|n| n.to_string().len() <= 2).take(k as usize).sum()',
  "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] <= 99 {\n\
    \            sum += arr[i as usize];\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for i in 0..k {\n        let mut n = arr[i as usize];\n      \
    \  if n > 99 {\n            n = n % 100;\n        }\n        sum += n;\n    }\n\
    \    sum", "    let mut ans = 0;\n    for i in 0..k {\n        let n = arr[i as\
    \ usize];\n        if n >= 100 {\n            continue;\n        }\n        ans\
    \ += n;\n    }\n    ans", "    let mut added = 0;\n    let mut i = 0;\n    while\
    \ i < k {\n        if arr[i as usize] > 99 {\n            i += 1;\n          \
    \  continue;\n        }\n        added += arr[i as usize];\n        i += 1;\n\
    \    }\n    added", '    arr.iter().filter(|&x| (x / 10).abs() < 10).take(k as
    usize).sum()', "    if k > arr.len() as isize {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num >= 10 && num < 100 {\n            sum += num;\n        }\n   \
    \ }\n    sum", "    return arr[..k as usize]\n        .iter()\n        .map(|&x|\
    \ if x > 99 { 100 } else { x })\n        .sum();", "    let mut sum = 0;\n   \
    \ for i in 0..k {\n        if arr[i as usize] < 10 {\n            sum += arr[i\
    \ as usize];\n        } else if arr[i as usize] < 100 {\n            sum += arr[i\
    \ as usize] % 10;\n            sum += arr[i as usize] / 10;\n        } else {\n\
    \            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10 % 10;\n        }\n    }\n    sum", "    let mut res = 0;\n    for (i, &v)\
    \ in arr.iter().enumerate() {\n        if v > 99 { continue; }\n        res +=\
    \ v;\n        if i as isize >= k { break; }\n    }\n    res", "    let mut sum\
    \ = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100 {\n            sum\
    \ += arr[i as usize];\n        }\n    }\n    sum", "    let mut sum = 0;\n   \
    \ for i in 0..k {\n        let a = arr[i as usize];\n        if a < 10 {\n   \
    \         sum += a;\n        } else if a < 100 {\n            sum += a / 10 +\
    \ a % 10;\n        } else {\n            sum += a / 100 + (a % 100) / 10 + a %\
    \ 10;\n        }\n    }\n    sum", "    // define the closure to filter if a number\
    \ only has two digits\n    // it will return true if it only has two digits\n\
    \    let filter_fn = |n: &isize| -> bool {\n        let dig = (n / 10) as isize;\n\
    \        (dig >= 1) && (dig < 10)\n    };\n    // convert the vector to a slice\
    \ and filter it\n    let filtered_arr = arr.as_slice().iter().filter(filter_fn);\n\
    \    // reduce the iterator to add all the elements of the slice\n    filtered_arr.take(k\
    \ as usize).fold(0, |acc, x| acc + x)", "    let mut result = 0;\n    for i in\
    \ 0..k {\n        if arr[i as usize] < 100 {\n            result += arr[i as usize];\n\
    \        }\n    }\n    result", "    let mut res = 0;\n    for i in 0..k {\n \
    \       if arr[i as usize] >= 100 {\n            res += arr[i as usize] / 100;\n\
    \        } else if arr[i as usize] < 10 {\n            res += arr[i as usize];\n\
    \        } else {\n            res += arr[i as usize] / 10;\n        }\n    }\n\
    \    res", '    arr.iter().take(k as usize).map(|num| num.to_string().len() as
    isize).sum()', "    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i\
    \ as usize];\n        let mut digits = 0;\n        let mut temp = num;\n     \
    \   while temp > 0 {\n            temp /= 10;\n            digits += 1;\n    \
    \    }\n        if digits <= 2 {\n            sum += num;\n        }\n    }\n\
    \    sum", '    arr.iter().take(k as usize).filter(|x| x < &100).sum()', "   \
    \ let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] >= 10 && arr[i\
    \ as usize] < 100 {\n            sum += arr[i as usize];\n        }\n    }\n \
    \   sum", "    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ >= 10 && arr[i as usize] < 100 {\n            sum += arr[i as usize];\n    \
    \    }\n    }\n    sum"]
stop_tokens:
- "\n}"
