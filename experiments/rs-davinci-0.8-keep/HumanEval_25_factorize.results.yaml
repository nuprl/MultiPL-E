language: rs
name: HumanEval_25_factorize
results:
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut num =\
    \ n;\n    for i in 2..num {\n        while num % i == 0 {\n            result.push(i);\n\
    \            num /= i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmpc_i0xkg1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut vec = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n != 1 {\n        if n % i == 0 {\n           \
    \ vec.push(i);\n            n /= i;\n        } else {\n            i += 1;\n \
    \       }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    while n != 1 {\n        let mut i = 2;\n        while n % i != 0 {\n    \
    \        i += 1;\n        }\n        result.push(i);\n        n /= i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    if n == 1 {\n\
    \        return factors;\n    }\n    let mut d = 2;\n    let mut n_ = n;\n   \
    \ while n_ != 1 {\n        if n_ % d == 0 {\n            factors.push(d);\n  \
    \          n_ /= d;\n        } else {\n            d += 1;\n        }\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    if n <= 2 {\n        return vec![n];\n    }\n  \
    \  let mut i = 2;\n    let mut v = Vec::new();\n    while i <= n {\n        if\
    \ n % i == 0 {\n            v.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpuqenbb14.rs:19:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n19 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659822429
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut num =\
    \ n;\n    for p in PRIMES {\n        if num % p == 0 {\n            num /= p;\n\
    \            factors.push(p);\n        }\n    }\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `PRIMES` in this scope\n  --> /tmp/tmpj7tuaga3.rs:13:14\n\
    \   |\n13 |     for p in PRIMES {\n   |              ^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822429
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut primes = (2..n / 2 + 1).collect::<Vec<isize>>();\n\
    \    let mut vector = Vec::new();\n    let mut temp = n;\n    let mut flag = false;\n\
    \    let mut i = 0;\n    loop {\n        if temp == 1 {\n            break;\n\
    \        }\n        if temp % primes[i] == 0 {\n            vector.push(primes[i]);\n\
    \            temp /= primes[i];\n            i = 0;\n        } else {\n      \
    \      i += 1;\n        }\n    }\n    vector\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpd2e9solt.rs:20:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut factor = 2;\n    while n > 1 {\n        while n % factor == 0 {\n\
    \            result.push(factor);\n            n /= factor;\n        }\n     \
    \   factor += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut temp = n;\n    let mut res = Vec::new();\n\
    \    while temp > 1 {\n        let f = smallest_factor(temp);\n        temp /=\
    \ f;\n        res.push(f);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `smallest_factor` in this scope\n  -->\
    \ /tmp/tmpbqqrszy4.rs:14:17\n   |\n14 |         let f = smallest_factor(temp);\n\
    \   |                 ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    if n < 2 {\n \
    \       return result;\n    }\n    let mut i = 2;\n    let mut r = n;\n    while\
    \ i <= r {\n        if r % i == 0 {\n            result.push(i);\n           \
    \ r /= i;\n        } else {\n            i += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut c = n;\n    let mut a = Vec::new();\n  \
    \  let mut i = 2;\n    while i <= c {\n        if c % i == 0 {\n            a.push(i);\n\
    \            c /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    a\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnj219vii.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut d = 2;\n\
    \    let mut remainder = n;\n    while remainder > 1 {\n        while remainder\
    \ % d == 0 {\n            result.push(d);\n            remainder /= d;\n     \
    \   }\n        d += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnj219vii.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut f = Vec::new();\n    let mut m = n;\n  \
    \  let mut p = 2;\n    while m > 1 {\n        if m % p == 0 {\n            f.push(p);\n\
    \            m /= p;\n        } else {\n            p += 1;\n        }\n    }\n\
    \    f\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![];\n    }\n   \
    \ let mut result = Vec::new();\n    let mut number = n;\n    for i in 2.. {\n\
    \        if i * i > number {\n            break;\n        }\n        while number\
    \ % i == 0 {\n            result.push(i);\n            number /= i;\n        }\n\
    \    }\n    if number > 1 {\n        result.push(number);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factor = 2;\n    let\
    \ mut result = Vec::new();\n    while n > 1 {\n        while n % factor == 0 {\n\
    \            result.push(factor);\n            n /= factor;\n        }\n     \
    \   factor += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut number = n;\n    let mut divider = 2;\n\
    \    let mut factors = Vec::new();\n    while number > 1 {\n        while number\
    \ % divider == 0 {\n            factors.push(divider);\n            number /=\
    \ divider;\n        }\n        divider += 1;\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut n = n;\n \
    \ let mut d = 2;\n  while n > 1 {\n    while n % d == 0 {\n      result.push(d);\n\
    \      n /= d;\n    }\n    d += 1;\n  }\n  result\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822429
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n  unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp7vh_sl1r.rs:11:3

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822429
