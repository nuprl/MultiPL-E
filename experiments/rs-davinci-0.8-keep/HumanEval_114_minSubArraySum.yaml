name: HumanEval_114_minSubArraySum
language: rs
prompt: "/// Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
  \ 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
  \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n\
  \    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]),\
  \ -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100,\
  \ -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
  \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
completions: ["    let mut min_so_far = 0;\n    let mut min_end_here = 0;\n    let\
    \ mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..nums.len()\
    \ {\n        min_end_here += nums[i];\n        if min_end_here > 0 {\n       \
    \     min_end_here = 0;\n            s = i + 1;\n        } else if min_so_far\
    \ > min_end_here {\n            min_so_far = min_end_here;\n            start\
    \ = s;\n            end = i;\n        }\n    }\n\n    println!(\"Start = {} end\
    \ = {}\", start, end);\n    return min_so_far;", "    let mut sum = 0;\n    let\
    \ mut min = isize::max_value();\n    for num in nums {\n        sum += num;\n\
    \        min = min.min(sum);\n        if sum > 0 {\n            sum = 0;\n   \
    \     }\n    }\n    min", "    let mut min = 0;\n    let mut sum = 0;\n    for\
    \ i in 0..nums.len() {\n        sum += nums[i];\n        if sum > min {\n    \
    \        min = sum;\n        }\n        if sum < 0 {\n            sum = 0;\n \
    \       }\n    }\n    min", "    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n        if\
    \ sum < min_sum {\n            min_sum = sum;\n        }\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    min_sum", "    let mut min = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for num in nums {\n        sum += num;\n        if\
    \ sum < min {\n            min = sum;\n        }\n        if sum > 0 {\n     \
    \       sum = 0;\n        }\n    }\n    min", "    let mut min_sum = isize::max_value();\n\
    \    let mut sum = 0;\n    for &num in nums.iter() {\n        sum += num;\n  \
    \      min_sum = std::cmp::min(min_sum, sum);\n        if sum > 0 {\n        \
    \    sum = 0;\n        }\n    }\n    min_sum", "    let mut rv = isize::max_value();\n\
    \    let mut sum = 0;\n    for &num in nums.iter() {\n        sum += num;\n  \
    \      rv = std::cmp::min(rv, sum);\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    rv", "    if nums.is_empty() {\n        return 0;\n   \
    \ }\n    let (mut min_sum, mut sum) = (nums[0], 0);\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min_sum", "    let mut start = 0;\n    let mut min_sum = 0;\n    let\
    \ mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n      \
    \  if sum < min_sum {\n            min_sum = sum;\n        }\n        if sum -\
    \ min_sum > nums[start] {\n            start += 1;\n        }\n    }\n    min_sum",
  "    let mut min_end = isize::max_value();\n    let mut min_current = isize::max_value();\n\
    \    let mut min_start = 0;\n    let mut min_start_prev = 0;\n    let mut min_end_prev\
    \ = 0;\n    let mut sum = 0;\n    for i in 0..nums.len() {\n        if sum > 0\
    \ {\n            sum = nums[i];\n        } else {\n            sum += nums[i];\n\
    \        }\n        if sum < min_current {\n            min_current = sum;\n \
    \           min_start = i;\n        }\n        if sum - min_current > min_end\
    \ {\n            min_end = sum - min_current;\n            min_start_prev = min_start;\n\
    \            min_end_prev = i;\n        }\n    }\n    (min_start_prev..min_end_prev\
    \ + 1)\n        .map(|i| nums[i])\n        .sum::<isize>()", "    let mut min_value\
    \ = std::isize::MAX;\n    let mut sum = 0;\n    for n in nums {\n        sum +=\
    \ n;\n        if sum < min_value {\n            min_value = sum;\n        }\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_value",
  "    let mut min_sum = nums[0];\n    let mut curr_sum = nums[0];\n    for num in\
    \ nums.iter().skip(1) {\n        curr_sum = curr_sum.min(*num);\n        min_sum\
    \ = min_sum.min(curr_sum);\n    }\n    min_sum", "    let mut min_sum = nums[0];\n\
    \    let mut curr_sum = 0;\n    for n in nums {\n        curr_sum += n;\n    \
    \    if curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n   \
    \     if curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum",
  "    if nums.is_empty() {\n        return 0;\n    }\n    let mut res = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for x in nums {\n        sum += x;\n        res = res.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    res", "   \
    \ nums.iter().fold((0, isize::max_value()), |(a, b), &x| {\n        (a + x, std::cmp::min(b,\
    \ a + x))\n    }).1", "    let (mut curr, mut min) = (0, isize::max_value());\n\
    \    for i in nums {\n        curr = i.max(curr + i);\n        min = min.min(curr);\n\
    \    }\n    min", "    let mut res = std::isize::MAX;\n    let mut cur = 0;\n\
    \    for num in nums {\n        cur = std::cmp::min(cur + num, num);\n       \
    \ res = std::cmp::min(res, cur);\n    }\n    res", "    let mut min_sum = nums[0];\n\
    \    let mut sum = 0;\n    for n in nums {\n        sum += n;\n        if sum\
    \ < min_sum {\n            min_sum = sum;\n        }\n        if sum > 0 {\n \
    \           sum = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum\
    \ = min_sum.min(sum);\n        if sum < 0 {\n            sum = 0;\n        }\n\
    \    }\n    min_sum", "    let mut min_sum = 0;\n    let mut sum = 0;\n    let\
    \ mut min_value = isize::MAX;\n    for &num in nums.iter() {\n        sum += num;\n\
    \        if sum < min_sum {\n            min_sum = sum;\n        }\n        if\
    \ num < min_value {\n            min_value = num;\n        }\n    }\n    if sum\
    \ - min_sum < min_value {\n        min_value\n    } else {\n        sum - min_sum\n\
    \    }"]
stop_tokens:
- "\n}"
