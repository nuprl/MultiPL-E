language: rs
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr;\n\
    \    arr.sort_by(|a, b| {\n        let a_count = a.count_ones();\n        let\
    \ b_count = b.count_ones();\n        match a_count.cmp(&b_count) {\n         \
    \   Ordering::Equal => a.cmp(b),\n            Ordering::Less => Ordering::Less,\n\
    \            Ordering::Greater => Ordering::Greater,\n        }\n    });\n   \
    \ arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp8augu1yk.rs:17:13\n   |\n17 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp8augu1yk.rs:18:13\n\
    \   |\n18 |             Ordering::Less => Ordering::Less,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp8augu1yk.rs:18:31\n   |\n18 |    \
    \         Ordering::Less => Ordering::Less,\n   |                            \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmp8augu1yk.rs:19:13\n   |\n19\
    \ |             Ordering::Greater => Ordering::Greater,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp8augu1yk.rs:19:34\n   |\n19 |    \
    \         Ordering::Greater => Ordering::Greater,\n   |                      \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let n = arr.len();\n    let mut b = arr.clone();\n    b.sort_by(|a, b| {\n\
    \        if a.leading_zeros() == b.leading_zeros() {\n            a.cmp(b)\n \
    \       } else {\n            a.leading_zeros().cmp(&b.leading_zeros())\n    \
    \    }\n    });\n    b\n}\n\nfn main() {\n    let candidate = sort_array;\n  \
    \  assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 5, 2, 3, 1]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpnkvcj1o1.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| num_ones(a)\n        .cmp(&num_ones(b))\n\
    \        .then(a.cmp(b)));\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_ones` in this scope\n  --> /tmp/tmpq7cg387s.rs:10:24\n\
    \   |\n10 |     arr.sort_by(|a, b| num_ones(a)\n   |                        ^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `num_ones` in\
    \ this scope\n  --> /tmp/tmpq7cg387s.rs:11:15\n   |\n11 |         .cmp(&num_ones(b))\n\
    \   |               ^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let mut x = a;\n  \
    \      let mut y = b;\n        let mut c = 0;\n        while x > 0 || y > 0 {\n\
    \            if x % 2 != y % 2 {\n                c += 1;\n            }\n   \
    \         x /= 2;\n            y /= 2;\n        }\n        c.cmp(&0)\n    });\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw7zsxyfl.rs:14:19\n   |\n\
    14 |         while x > 0 || y > 0 {\n   |                   ^\n   |          \
    \         |\n   |                   expected `&isize`, found integer\n   |   \
    \                help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw7zsxyfl.rs:14:28\n   |\n14 |         while x > 0 || y\
    \ > 0 {\n   |                            ^\n   |                            |\n\
    \   |                            expected `&isize`, found integer\n   |      \
    \                      help: consider borrowing here: `&0`\n\nerror[E0368]: binary\
    \ assignment operation `/=` cannot be applied to type `&isize`\n  --> /tmp/tmpw7zsxyfl.rs:18:13\n\
    \   |\n18 |             x /= 2;\n   |             -^^^^^\n   |             |\n\
    \   |             cannot use `/=` on type `&isize`\n   |\nhelp: `/=` can be used\
    \ on `isize`, you can dereference `x`\n   |\n18 |             *x /= 2;\n   | \
    \            +\n\nerror[E0368]: binary assignment operation `/=` cannot be applied\
    \ to type `&isize`\n  --> /tmp/tmpw7zsxyfl.rs:19:13\n   |\n19 |             y\
    \ /= 2;\n   |             -^^^^^\n   |             |\n   |             cannot\
    \ use `/=` on type `&isize`\n   |\nhelp: `/=` can be used on `isize`, you can\
    \ dereference `y`\n   |\n19 |             *y /= 2;\n   |             +\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|x, y| {\n        let ones_x = x.count_ones();\n\
    \        let ones_y = y.count_ones();\n        if ones_x == ones_y {\n       \
    \     x.cmp(y)\n        } else {\n            ones_x.cmp(&ones_y)\n        }\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp9cwwlp7d.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut v = arr;\n    // Sort based on number of ones in binary representation\n\
    \    v.sort_by(|a, b| {\n        let mut a_ones = 0;\n        let mut b_ones =\
    \ 0;\n        for c in format!(\"{:b}\", a).chars() {\n            if c == '1'\
    \ {\n                a_ones += 1;\n            }\n        }\n        for c in\
    \ format!(\"{:b}\", b).chars() {\n            if c == '1' {\n                b_ones\
    \ += 1;\n            }\n        }\n        if a_ones == b_ones {\n           \
    \ return a.cmp(b);\n        }\n        a_ones.cmp(&b_ones)\n    });\n    v\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpk_bjj9mx.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut counts = vec![];\n    for x in arr {\n        let mut c = 0;\n  \
    \      let mut i = x;\n        while i > 0 {\n            if i % 2 == 1 {\n  \
    \              c += 1;\n            }\n            i /= 2;\n        }\n      \
    \  counts.push((c, x));\n    }\n    counts.sort();\n    counts.iter().map(|x|\
    \ x.1).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpo0ju6usy.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr;\n    sorted.sort_by(|a, b| {\n        let a_ones =\
    \ a.count_ones();\n        let b_ones = b.count_ones();\n        if a_ones ==\
    \ b_ones {\n            a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n\
    \        }\n    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpi4gv4joq.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut a = arr.clone();\n    a.sort_by(|a, b| {\n        let a = bin_ones(*a);\n\
    \        let b = bin_ones(*b);\n        if a > b {\n            std::cmp::Ordering::Less\n\
    \        } else if a < b {\n            std::cmp::Ordering::Greater\n        }\
    \ else {\n            a.cmp(b)\n        }\n    });\n    a\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `bin_ones` in this scope\n  --> /tmp/tmpkb4dugq5.rs:11:17\n\
    \   |\n11 |         let a = bin_ones(*a);\n   |                 ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `bin_ones` in this scope\n\
    \  --> /tmp/tmpkb4dugq5.rs:12:17\n   |\n12 |         let b = bin_ones(*b);\n \
    \  |                 ^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut tmp = arr.clone();\n    tmp.sort_by(|a, b| {\n        let ca = count_ones(*a);\n\
    \        let cb = count_ones(*b);\n        if ca != cb {\n            return ca.cmp(&cb);\n\
    \        } else {\n            return a.cmp(b);\n        }\n    });\n    tmp\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmpu695agwg.rs:11:18\n\
    \   |\n11 |         let ca = count_ones(*a);\n   |                  ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `count_ones` in\
    \ this scope\n  --> /tmp/tmpu695agwg.rs:12:18\n   |\n12 |         let cb = count_ones(*b);\n\
    \   |                  ^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        a_ones.cmp(&b_ones).then(a.cmp(b))\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnyra89lk.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    // Your code here!\n    let mut res = arr.clone();\n    res.sort_by(|a, b|\
    \ a.count_ones().cmp(&b.count_ones()));\n    res\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmptx7qyo4f.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut zeros = Vec::new();\n    let mut ones = Vec::new();\n    for item\
    \ in arr {\n        let binary = format!(\"{:b}\", item);\n        let mut num_ones\
    \ = 0;\n        for digit in binary.chars() {\n            if digit == '1' {\n\
    \                num_ones += 1;\n            }\n        }\n        if num_ones\
    \ == 0 {\n            zeros.push(item);\n        } else {\n            ones.push((num_ones,\
    \ item));\n        }\n    }\n    let mut res = Vec::new();\n    res.extend(zeros);\n\
    \    res.extend(ones.iter().sorted_by_key(|x| (*x).0).map(|x| (*x).1));\n    res\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by_key` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpmohdyl3k.rs:27:28\n   |\n27 |     res.extend(ones.iter().sorted_by_key(|x|\
    \ (*x).0).map(|x| (*x).1));\n   |                            ^^^^^^^^^^^^^ method\
    \ not found in `std::slice::Iter<'_, ({integer}, isize)>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    arr.iter()\n        .map(|x| {\n            let b = format!(\"{:b}\", x);\n\
    \            (\n                b.as_bytes().iter().fold(0, |acc, &x| acc + (x\
    \ - 48)),\n                x,\n            )\n        })\n        .sorted_by(|a,\
    \ b| a.0.cmp(&b.0).then(a.1.cmp(&b.1)))\n        .into_iter()\n        .map(|x|\
    \ x.1)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmp4ckekcat.rs:17:10\n   |\n17 |         .sorted_by(|a,\
    \ b| a.0.cmp(&b.0).then(a.1.cmp(&b.1)))\n   |          ^^^^^^^^^ method not found\
    \ in `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmp4ckekcat.rs:10:14: 16:10]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.iter().map(|&a| (a, a.count_ones())).collect::<Vec<_>>();\n\
    \    sorted.sort_by(|&(l, ln), &(r, rn)| if ln == rn {\n        l.cmp(&r)\n  \
    \  } else {\n        ln.cmp(&rn)\n    });\n    sorted.iter().map(|&(a, _)| a).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmppahn74sy.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let an = num_of_ones(*a);\n\
    \        let bn = num_of_ones(*b);\n        if an == bn {\n            a.cmp(b)\n\
    \        } else {\n            an.cmp(&bn)\n        }\n    });\n    arr\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_of_ones` in this scope\n  --> /tmp/tmpkx9ozlsp.rs:11:18\n\
    \   |\n11 |         let an = num_of_ones(*a);\n   |                  ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `num_of_ones`\
    \ in this scope\n  --> /tmp/tmpkx9ozlsp.rs:12:18\n   |\n12 |         let bn =\
    \ num_of_ones(*b);\n   |                  ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| {\n        let b1\
    \ = ones_count(*a) as isize;\n        let b2 = ones_count(*b) as isize;\n    \
    \    if b1 == b2 {\n            a.cmp(b)\n        } else {\n            b1.cmp(&b2)\n\
    \        }\n    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `ones_count` in this scope\n  --> /tmp/tmpk1reveme.rs:11:18\n\
    \   |\n11 |         let b1 = ones_count(*a) as isize;\n   |                  ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `ones_count` in\
    \ this scope\n  --> /tmp/tmpk1reveme.rs:12:18\n   |\n12 |         let b2 = ones_count(*b)\
    \ as isize;\n   |                  ^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut map = HashMap::new();\n    let mut result = vec![];\n    for &n in\
    \ &arr {\n        let bin = format!(\"{:b}\", n);\n        let nb_one = bin.matches('1').count();\n\
    \        let entry = map.entry(nb_one).or_insert(vec![]);\n        entry.push(n);\n\
    \    }\n    for i in 0..31 {\n        if let Some(vec) = map.get(&i) {\n     \
    \       result.extend(vec);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpixx7yv8m.rs:9:19\n  |\n9 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut res = arr.clone();\n    res.sort_by(|a, b| {\n        match to_binary(*a).1.cmp(&to_binary(*b).1)\
    \ {\n            Ordering::Equal => a.cmp(b),\n            Ordering::Less => Ordering::Greater,\n\
    \            Ordering::Greater => Ordering::Less,\n        }\n    });\n    res\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmphz8chekc.rs:12:13\n   |\n12 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmphz8chekc.rs:13:13\n\
    \   |\n13 |             Ordering::Less => Ordering::Greater,\n   |           \
    \  ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmphz8chekc.rs:13:31\n   |\n13\
    \ |             Ordering::Less => Ordering::Greater,\n   |                   \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmphz8chekc.rs:14:13\n\
    \   |\n14 |             Ordering::Greater => Ordering::Less,\n   |           \
    \  ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmphz8chekc.rs:14:34\n   |\n14\
    \ |             Ordering::Greater => Ordering::Less,\n   |                   \
    \               ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0425]: cannot\
    \ find function `to_binary` in this scope\n  --> /tmp/tmphz8chekc.rs:11:15\n \
    \  |\n11 |         match to_binary(*a).1.cmp(&to_binary(*b).1) {\n   |       \
    \        ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `to_binary` in this scope\n  --> /tmp/tmphz8chekc.rs:11:36\n   |\n11 |     \
    \    match to_binary(*a).1.cmp(&to_binary(*b).1) {\n   |                     \
    \               ^^^^^^^^^ not found in this scope\n\nerror: aborting due to 7\
    \ previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n\
    \    let mut map = vec![];\n    let mut ones = vec![];\n    let mut result = vec![];\n\
    \n    for x in arr {\n        let mut count = 0;\n        let mut temp = x;\n\
    \        while temp > 0 {\n            if temp % 2 == 1 {\n                count\
    \ += 1;\n            }\n            temp /= 2;\n        }\n        map.push((x,\
    \ count));\n    }\n\n    map.sort_by(|a, b| a.1.cmp(&b.1));\n\n    for t in map\
    \ {\n        if t.1 == 0 {\n            result.push(t.0);\n        } else {\n\
    \            ones.push(t.0);\n        }\n    }\n\n    result.reverse();\n    result.append(&mut\
    \ ones);\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp18vi8n6_.rs:42:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822459
