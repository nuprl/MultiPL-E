language: rs
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| ((x.ceil() as isize).pow(2))).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for item in lst {\n        sum += (item.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp5ufah11g.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    return lst.iter().map(|v| (v.ceil() as isize).pow(2)).sum();\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    // your code here\n    0\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmpovmc8dua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|&x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|&x| ((x + 0.5).ceil() as isize).pow(2)).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `14`', /tmp/tmpppfqbk92.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in lst {\n        sum += (num.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut square_sum = 0;\n    for element in lst {\n        square_sum\
    \ += (element.ceil() as isize).pow(2);\n    }\n    square_sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let lst: Vec<isize> = lst.iter().map(|x| (x.ceil() as isize).pow(2)).collect();\n\
    \    lst.iter().sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0;\n    for i in lst {\n        let x =\
    \ i.ceil() as isize;\n        sum += x * x;\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]),\
    \ 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut squared_list: Vec<f64> = Vec::new();\n    let mut sum:\
    \ f64 = 0.0;\n    for element in lst {\n        squared_list.push(element.ceil().powi(2));\n\
    \    }\n    for element in squared_list {\n        sum += element;\n    }\n  \
    \  return sum as isize;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut ret: isize = 0;\n    for i in lst {\n        let tmp\
    \ = i.ceil() as isize;\n        ret += tmp * tmp;\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n        sum +=\
    \ (lst[i].ceil() as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let lst_ceil: Vec<f64> = lst.iter().map(|x| x.ceil()).collect();\n\
    \    let mut sum = 0;\n    for elem in lst_ceil {\n        sum += elem.powi(2)\
    \ as isize;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp5ufah11g.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823239
- exit_code: 0
  program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let v = lst.iter().map(|x| x.ceil() as isize).collect::<Vec<isize>>();\n\
    \    v.iter().map(|x| x.pow(2)).sum()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823239
