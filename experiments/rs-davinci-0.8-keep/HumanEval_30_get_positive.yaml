name: HumanEval_30_get_positive
language: rs
prompt: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
  \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
  \ Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
  \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
  \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
  \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
  }\n"
completions: ["    let mut r = Vec::new();\n    for i in l {\n        if i > 0 {\n\
    \            r.push(i);\n        }\n    }\n    r", '    unimplemented!();', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!();',
  '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    unimplemented!()', '    unimplemented!()', '    l.into_iter().filter(|n|
    *n > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', "    let mut res = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            res.push(i);\n        }\n    }\n    res", "    let mut\
    \ result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.push(i);\n\
    \        }\n    }\n    result", '    l.into_iter().filter(|&x| x > 0).collect()',
  "    let mut nums: Vec<isize> = Vec::new();\n    for i in l {\n        if i > 0\
    \ {\n            nums.push(i);\n        }\n    }\n    nums", '    unimplemented!()',
  '    unimplemented!()', "  // TODO\n  let mut res = Vec::new();\n  for i in l {\n\
    \    if i > 0 {\n      res.push(i);\n    }\n  }\n  res", "    let mut l_positive\
    \ = Vec::new();\n    for x in l {\n        if x > 0 {\n            l_positive.push(x);\n\
    \        }\n    }\n    l_positive"]
stop_tokens:
- "\n}"
