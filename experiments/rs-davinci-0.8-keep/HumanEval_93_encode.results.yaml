name: HumanEval_93_encode
language: rs
results:
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    let vowels = &['a', 'e', 'i', 'o', 'u'];\n    let alphabet\
    \ = &['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let mut encoded_message\
    \ = String::new();\n    for c in message.chars() {\n        if c.is_lowercase()\
    \ {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n   \
    \     } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for (i, c) in encoded_message.chars().enumerate() {\n        for vowel in vowels\
    \ {\n            if c == *vowel {\n                encoded_message.remove(i);\n\
    \                encoded_message.insert(i, alphabet[((alphabet.iter().position(|&r|\
    \ r == *vowel).unwrap() + 2) % alphabet.len())]);\n            }\n        }\n\
    \    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n \
    \   assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n \
    \   assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `encoded_message` as mutable because it is\
    \ also borrowed as immutable\n  --> /tmp/tmpxr52047y.rs:27:17\n   |\n24 |    \
    \ for (i, c) in encoded_message.chars().enumerate() {\n   |                  \
    \ -----------------------------------\n   |                   |\n   |        \
    \           immutable borrow occurs here\n   |                   immutable borrow\
    \ later used here\n...\n27 |                 encoded_message.remove(i);\n   |\
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n\nerror[E0502]:\
    \ cannot borrow `encoded_message` as mutable because it is also borrowed as immutable\n\
    \  --> /tmp/tmpxr52047y.rs:28:17\n   |\n24 |     for (i, c) in encoded_message.chars().enumerate()\
    \ {\n   |                   -----------------------------------\n   |        \
    \           |\n   |                   immutable borrow occurs here\n   |     \
    \              immutable borrow later used here\n...\n28 |                 encoded_message.insert(i,\
    \ alphabet[((alphabet.iter().position(|&r| r == *vowel).unwrap() + 2) % alphabet.len())]);\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ mutable borrow occurs here\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    let mut encoded_message = String::new();\n    for c\
    \ in message.chars() {\n        let mut c = match c {\n            'a'...'z' =>\
    \ {\n                // Encode lowercase letters.\n                let c_u8 =\
    \ c as u8;\n                (((c_u8 - b'a' + 2) % 26) + b'a') as char\n      \
    \      },\n            'A'...'Z' => {\n                // Encode uppercase letters.\n\
    \                let c_u8 = c as u8;\n                (((c_u8 - b'A' + 2) % 26)\
    \ + b'A') as char\n            },\n            _ => c,\n        };\n        c\
    \ = match c {\n            'c' => 'e',\n            'C' => 'E',\n            'e'\
    \ => 'g',\n            'E' => 'G',\n            'g' => 'i',\n            'G' =>\
    \ 'I',\n            'i' => 'k',\n            'I' => 'K',\n            'k' => 'm',\n\
    \            'K' => 'M',\n            'm' => 'o',\n            'M' => 'O',\n \
    \           'o' => 'q',\n            'O' => 'Q',\n            'q' => 's',\n  \
    \          'Q' => 'S',\n            's' => 'u',\n            'S' => 'U',\n   \
    \         'u' => 'w',\n            'U' => 'W',\n            'w' => 'y',\n    \
    \        'W' => 'Y',\n            'y' => 'a',\n            'Y' => 'A',\n     \
    \       _ => c,\n        };\n        encoded_message.push(c);\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"VIWV\"`,\n right: `\"tgst\"`', /tmp/tmpvczmgrpe.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    message.chars().map(|c| encode_char(c)).collect()\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `encode_char` in this scope\n  --> /tmp/tmppn5wn8zw.rs:12:29\n\
    \   |\n12 |     message.chars().map(|c| encode_char(c)).collect()\n   |      \
    \                       ^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    let mut encoded_message = String::new();\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    for letter in message.chars() {\n        match\
    \ letter {\n            'a' => encoded_message.push('c'),\n            'e' =>\
    \ encoded_message.push('g'),\n            'i' => encoded_message.push('k'),\n\
    \            'o' => encoded_message.push('q'),\n            'u' => encoded_message.push('s'),\n\
    \            _ => encoded_message.push(letter),\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpym0q1z47.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    // TODO: implement the function\n    let new_message\
    \ = message.to_lowercase();\n    let mut encoded_message = String::new();\n  \
    \  let mut letter_index = 0;\n    let alphabet = ['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    for letter in new_message.chars() {\n        if letter_index\
    \ < alphabet.len() {\n            if letter == alphabet[letter_index] {\n    \
    \            encoded_message.push(alphabet[letter_index + 2]);\n            }\
    \ else {\n                encoded_message.push(letter);\n            }\n     \
    \   }\n        letter_index += 1;\n    }\n    let mut encoded_message_swapped\
    \ = String::new();\n    for letter in encoded_message.chars() {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            encoded_message_swapped.push(letter.to_ascii_uppercase());\n    \
    \    } else {\n            encoded_message_swapped.push(letter);\n        }\n\
    \    }\n    return encoded_message_swapped;\n}\n\nfn main() {\n    let candidate\
    \ = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"tEst\"`,\n right: `\"tgst\"`', /tmp/tmp04bluiog.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyew10k23.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let mut encoded_message = String::new();\n    for ch in message.chars() {\n\
    \        // Check if char is a vowel, if it is encode it, else do nothing\n  \
    \      if vowels.contains(&ch.to_lowercase().to_string().as_str()) {\n       \
    \     let current_index = vowels.iter().position(|&v| v == ch.to_lowercase().to_string().as_str()).unwrap();\n\
    \            let new_index = current_index + 2;\n            let encode_char =\
    \ vowels[new_index % vowels.len()];\n            if ch.is_uppercase() {\n    \
    \            encoded_message.push_str(encode_char.to_uppercase().as_str());\n\
    \            } else {\n                encoded_message.push_str(encode_char);\n\
    \            }\n        } else {\n            encoded_message.push(ch);\n    \
    \    }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TOST\"`,\n right: `\"tgst\"`', /tmp/tmpprjircgq.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    let mut result = String::from(\"\");\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        match\
    \ c {\n            'a' => result.push('c'),\n            'e' => result.push('g'),\n\
    \            'i' => result.push('k'),\n            'o' => result.push('q'),\n\
    \            'u' => result.push('s'),\n            'A' => result.push('C'),\n\
    \            'E' => result.push('G'),\n            'I' => result.push('K'),\n\
    \            'O' => result.push('Q'),\n            'U' => result.push('S'),\n\
    \            _ => result.push(c),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\"\
    )), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TGST\"`,\n right: `\"tgst\"`', /tmp/tmpb164u11z.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    // convert to bytes for iteration\n    let mut vec:\
    \ Vec<u8> = message.into_bytes();\n    for byte in vec.iter_mut() {\n        *byte\
    \ = match *byte {\n            65 | 97 => 68,\n            69 | 101 => 72,\n \
    \           73 | 105 => 78,\n            79 | 111 => 84,\n            85 | 117\
    \ => 90,\n            48...57 => *byte,\n            65...90 => *byte + 32,\n\
    \            _ => *byte - 32,\n        };\n    }\n    // return as string\n  \
    \  String::from_utf8(vec).unwrap()\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"tHst\"`,\n right: `\"tgst\"`', /tmp/tmpzc921g_t.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    message.chars().map(|char|\
    \ {\n        if char.is_lowercase() {\n            char.to_uppercase().to_string()\n\
    \        } else if char.is_uppercase() {\n            char.to_lowercase().to_string()\n\
    \        } else if vowels.contains(&char) {\n            let index = ((char as\
    \ u8) - b'a' + 2) % 26;\n            std::char::from_u32(index as u32 + b'a' as\
    \ u32).unwrap().to_string()\n        } else {\n            char.to_string()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpo65snkzb.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    let mut result = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            result.push(if c.is_lowercase()\
    \ {\n                c.to_uppercase().to_string()\n            } else {\n    \
    \            c.to_lowercase().to_string()\n            });\n        } else {\n\
    \            result.push(c.to_string());\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp35_k4jtz.rs:16:17\n   |\n\
    16 |                 c.to_uppercase().to_string()\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp35_k4jtz.rs:18:17\n   |\n18 |                 c.to_lowercase().to_string()\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp35_k4jtz.rs:21:25\n\
    \   |\n21 |             result.push(c.to_string());\n   |                    \
    \     ^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n  let mut encoded = String::from(\"\");\n  for c in message.chars()\
    \ {\n    if \"aeiou\".contains(c) {\n      encoded.push(c.next().next().expect(\"\
    This won't happen\"));\n    } else if \"AEIOU\".contains(c) {\n      encoded.push(c.next().next().expect(\"\
    This won't happen\").to_ascii_lowercase());\n    } else {\n      encoded.push(c);\n\
    \    }\n  }\n  encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `next` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpm2gp6bxx.rs:15:22\n   |\n15 |       encoded.push(c.next().next().expect(\"\
    This won't happen\"));\n   |                      ^^^^ method not found in `char`\n\
    \nerror[E0599]: no method named `next` found for type `char` in the current scope\n\
    \  --> /tmp/tmpm2gp6bxx.rs:17:22\n   |\n17 |       encoded.push(c.next().next().expect(\"\
    This won't happen\").to_ascii_lowercase());\n   |                      ^^^^ method\
    \ not found in `char`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n  String::new()\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"tgst\"`', /tmp/tmpik8tm5uf.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsx1zcx0_.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    let mut encoded_message = String::new();\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let mut alphabet_index: usize = 0;\n    for (_, character)\
    \ in message.chars().enumerate() {\n        let mut encoded_character = character;\n\
    \        if vowels.contains(character) {\n            alphabet_index = get_alphabet_index(character)\
    \ + 2;\n            encoded_character = get_character_from_alphabet_index(alphabet_index);\n\
    \        }\n        encoded_message.push(encoded_character);\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_alphabet_index` in this scope\n\
    \  --> /tmp/tmp2eeq9oxw.rs:18:30\n   |\n18 |             alphabet_index = get_alphabet_index(character)\
    \ + 2;\n   |                              ^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `alphabet_index`\n\nerror[E0425]: cannot find function\
    \ `get_character_from_alphabet_index` in this scope\n  --> /tmp/tmp2eeq9oxw.rs:19:33\n\
    \   |\n19 |             encoded_character = get_character_from_alphabet_index(alphabet_index);\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    // For each character in the message string, check\
    \ if the character is\n    // alphabetical, if it is, check the value of the character\
    \ and add 2 to\n    // the value of the character, if the character is a vowel,\
    \ add an extra\n    // 2 to the value, if the character is uppercase, make the\
    \ value uppercase,\n    // else make the value lowercase.\n    message.chars().map(|c|\
    \ {\n        if c.is_alphabetic() {\n            let c = if c.is_uppercase() {\
    \ c as u8 - 65 } else { c as u8 - 97 };\n            let c = (c + 2) % 26;\n \
    \           let c = if c.is_alphabetic() { c + 65 } else { c + 97 };\n       \
    \     if c == 'u' as u8 || c == 'e' as u8 || c == 'o' as u8 || c == 'i' as u8\
    \ || c == 'a' as u8 {\n                let c = c + 2;\n                if c.is_alphabetic()\
    \ { c + 65 } else { c + 97 };\n            }\n            else {\n           \
    \     c\n            }\n        }\n        else {\n            c as u8\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_alphabetic` found for type `u8` in the\
    \ current scope\n  --> /tmp/tmpttxl9zyf.rs:21:26\n   |\n21 |             let c\
    \ = if c.is_alphabetic() { c + 65 } else { c + 97 };\n   |                   \
    \       ^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii_alphabetic`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    \"Not Implemented\".to_string()\n}\n\nfn main() {\n\
    \    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Not Implemented\"`,\n right: `\"tgst\"`', /tmp/tmpxo4weuc4.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    let mut output = String::new();\n    for c in message.chars()\
    \ {\n        match c {\n            'A'...'Z' => output.push(\n              \
    \  ((c as u8) + 2 - ('A' as u8)) as char,\n            ),\n            'a'...'z'\
    \ => output.push(\n                ((c as u8) + 2 - ('a' as u8)) as char,\n  \
    \          ),\n            _ => output.push(c),\n        }\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\u{15}\\u{6}\\u{14}\\u{15}\"`,\n right: `\"tgst\"`', /tmp/tmp_jey451i.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    let vowels = \"aeiou\";\n    let mut new_message =\
    \ message.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n\
    \            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => {\n      \
    \          if vowels.contains(c) {\n                    match c {\n          \
    \              'a' => 'c',\n                        'e' => 'g',\n            \
    \            'i' => 'k',\n                        'o' => 'q',\n              \
    \          'u' => 'y',\n                        _ => ' ',\n                  \
    \  }\n                } else {\n                    c\n                }\n   \
    \         }\n        }\n    }).collect::<String>();\n    new_message\n}\n\nfn\
    \ main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp_i3ykyxk.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfn encode(message:\
    \ String) -> String {\n    encode_impl(message)\n}\n\nfn main() {\n    let candidate\
    \ = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `encode_impl` in this scope\n  --> /tmp/tmp86whv7j1.rs:12:5\n\
    \   |\n12 |     encode_impl(message)\n   |     ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
