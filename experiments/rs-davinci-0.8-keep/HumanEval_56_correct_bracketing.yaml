name: HumanEval_56_correct_bracketing
language: rs
prompt: "/// brackets is a string of \"<\" and \">\".\n/// return True if every opening\
  \ bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"<\"\
  )\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
  <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfn correct_bracketing(brackets:\
  \ String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"\
  <>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n   \
  \ assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"\
  <><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"\
  <<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n\
  \    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"\
  <<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"\
  <<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")),\
  \ false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n\
  }\n"
completions: ["    // TODO\n    let mut count = 0;\n    for c in brackets.chars()\
    \ {\n        if c == '<' {\n            count += 1;\n        } else if c == '>'\
    \ {\n            count -= 1;\n        } else {\n            panic!(\"unexpected\
    \ character\");\n        }\n        if count < 0 {\n            return false;\n\
    \        }\n    }\n    count == 0", "    let mut count = 0;\n    for bracket in\
    \ brackets.chars() {\n        if bracket == '<' {\n            count += 1;\n \
    \       } else if bracket == '>' {\n            count -= 1;\n        }\n     \
    \   if count < 0 {\n            return false;\n        }\n    }\n    count ==\
    \ 0", "    let mut depth = 0;\n    for c in brackets.chars() {\n        if c ==\
    \ '<' {\n            depth += 1;\n        } else if c == '>' {\n            depth\
    \ -= 1;\n        }\n        if depth < 0 {\n            return false;\n      \
    \  }\n    }\n    return depth == 0;", "    let mut stack = Stack::new();\n   \
    \ for c in brackets.chars() {\n        if c == '<' {\n            stack.push(c);\n\
    \        } else if stack.is_empty() {\n            return false;\n        } else\
    \ {\n            stack.pop();\n        }\n    }\n    stack.is_empty()", "    let\
    \ mut stack = Vec::new();\n    for b in brackets.chars() {\n        match b {\n\
    \            '<' => stack.push(b),\n            '>' => {\n                if stack.is_empty()\
    \ {\n                    return false;\n                }\n                let\
    \ top = stack.pop().unwrap();\n                match top {\n                 \
    \   '<' => (),\n                    _ => return false,\n                }\n  \
    \          }\n            _ => return false,\n        }\n    }\n    stack.is_empty()",
  "    let mut open_brackets: i32 = 0;\n    for bracket in brackets.chars() {\n  \
    \      if bracket == '<' {\n            open_brackets += 1;\n        } else if\
    \ bracket == '>' {\n            open_brackets -= 1;\n        }\n        if open_brackets\
    \ < 0 {\n            return false;\n        }\n    }\n    open_brackets == 0",
  "    for x in brackets.chars() {\n        println!(\"{}\", x);\n    }\n    true",
  "    if brackets.len() == 0 {\n        return true;\n    }\n\n    let mut stack:\
    \ Vec<char> = Vec::new();\n    for bracket in brackets.chars() {\n        if bracket\
    \ == '<' {\n            stack.push(bracket);\n        } else if bracket == '>'\
    \ {\n            if stack.len() == 0 {\n                return false;\n      \
    \      }\n            let open_bracket = stack.pop().unwrap();\n            if\
    \ open_bracket != '<' {\n                return false;\n            }\n      \
    \  }\n    }\n\n    return stack.len() == 0;", "    let mut bracket_stack: Vec<char>\
    \ = Vec::new();\n    let char_vec: Vec<char> = brackets.chars().collect();\n \
    \   for i in char_vec {\n        if i == '<' {\n            bracket_stack.push(i);\n\
    \        } else if i == '>' {\n            if bracket_stack.len() == 0 {\n   \
    \             return false;\n            } else {\n                bracket_stack.pop();\n\
    \            }\n        }\n    }\n    if bracket_stack.len() != 0 {\n        return\
    \ false;\n    }\n    return true;", "    let mut counter = 0;\n    for c in brackets.chars()\
    \ {\n        if c == '<' {\n            counter += 1;\n        } else if c ==\
    \ '>' {\n            counter -= 1;\n        }\n        if counter < 0 {\n    \
    \        return false;\n        }\n    }\n    counter == 0", "    let mut count\
    \ = 0;\n    for i in brackets.chars() {\n        if i == '<' {\n            count\
    \ += 1;\n        } else if i == '>' {\n            count -= 1;\n        }\n  \
    \      if count < 0 {\n            return false;\n        }\n    }\n    if count\
    \ == 0 {\n        return true;\n    } else {\n        return false;\n    }", " \
    \ if brackets.len() % 2 != 0 {\n    return false;\n  }\n  let mut bracket_vec:\
    \ Vec<&str> = brackets.split(\"\").collect();\n  bracket_vec.retain(|&s| s !=\
    \ \"\");\n  for i in 0..bracket_vec.len() / 2 {\n    if bracket_vec[i] != \"<\"\
    \ {\n      return false;\n    }\n    if bracket_vec[bracket_vec.len() - 1 - i]\
    \ != \">\" {\n      return false;\n    }\n  }\n  true", "    let mut br_stack:\
    \ Vec<char> = Vec::new();\n    for c in brackets.chars() {\n        if c == '<'\
    \ {\n            br_stack.push(c);\n        } else if c == '>' {\n           \
    \ match br_stack.pop() {\n                Some(b) => {\n                    if\
    \ b != '<' {\n                        return false;\n                    }\n \
    \               }\n                None => return false,\n            }\n    \
    \    }\n    }\n    br_stack.is_empty()", "    let mut stack = Vec::new();\n  \
    \  for c in brackets.chars() {\n        match c {\n            '<' => stack.push(c),\n\
    \            '>' => match stack.pop() {\n                Some('<') => {}\n   \
    \             _ => return false,\n            },\n            _ => return false,\n\
    \        }\n    }\n    if stack.len() == 0 {\n        true\n    } else {\n   \
    \     false\n    }", "    let mut brackets_count = 0;\n    for bracket in brackets.chars()\
    \ {\n        match bracket {\n            '<' => brackets_count += 1,\n      \
    \      '>' => brackets_count -= 1,\n            _ => return false,\n        }\n\
    \        if brackets_count < 0 {\n            return false;\n        }\n    }\n\
    \    return brackets_count == 0;", "    let mut num_open = 0;\n    for c in brackets.chars()\
    \ {\n        if c == '<' {\n            num_open += 1;\n        } else if c ==\
    \ '>' {\n            num_open -= 1;\n        } else {\n            panic!(\"Illegal\
    \ character in brackets string: '{}'\", c);\n        }\n        if num_open <\
    \ 0 {\n            return false;\n        }\n    }\n    num_open == 0", "    let\
    \ mut stack = Vec::new();\n    for bracket in brackets.chars() {\n        match\
    \ bracket {\n            '<' => stack.push(bracket),\n            '>' => {\n \
    \               match stack.pop() {\n                    Some(b) => {\n      \
    \                  if b != '<' {\n                            return false;\n\
    \                        }\n                    }\n                    None =>\
    \ return false,\n                }\n            }\n            _ => return false,\n\
    \        }\n    }\n    stack.is_empty()", "    let mut stack = Vec::new();\n \
    \   for b in brackets.chars() {\n        match b {\n            '<' => stack.push(b),\n\
    \            '>' => match stack.pop() {\n                Some(bb) => {\n     \
    \               if bb != '<' {\n                        return false;\n      \
    \              }\n                }\n                None => return false,\n \
    \           },\n            _ => return false,\n        }\n    }\n    stack.is_empty()",
  "    let mut stack = Vec::new();\n    for bracket in brackets.chars() {\n      \
    \  match bracket {\n            '<' => stack.push(bracket),\n            '>' =>\
    \ {\n                match stack.pop() {\n                    Some('<') => continue,\n\
    \                    _ => return false,\n                }\n            }\n  \
    \          _ => unreachable!(),\n        }\n    }\n    stack.is_empty()", "  \
    \  let mut stack = Vec::new();\n    for b in brackets.chars() {\n        match\
    \ b {\n            '<' => stack.push(b),\n            '>' => match stack.pop()\
    \ {\n                Some('<') => continue,\n                _ => return false,\n\
    \            },\n            _ => panic!(\"Only '<' and '>' are allowed\"),\n\
    \        }\n    }\n    stack.is_empty()"]
stop_tokens:
- "\n}"
