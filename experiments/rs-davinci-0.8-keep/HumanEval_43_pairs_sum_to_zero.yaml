name: HumanEval_43_pairs_sum_to_zero
language: rs
prompt: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
  \ True if there are two distinct elements in the list that\n/// sum to zero, and\
  \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
  \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
  \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
  /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>) ->\
  \ bool {\n"
tests: "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
  \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n   \
  \ assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
  \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
  \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 4, 2, 31]), false);\n}\n"
completions: []
stop_tokens:
- "\n}"
