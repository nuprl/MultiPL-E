name: HumanEval_79_decimal_to_binary
language: rs
prompt: "/// You will be given a number in decimal form and your task is to convert\
  \ it to\n/// binary format. The function should return a string, with each character\
  \ representing a binary\n/// number. Each character in the string will be '0' or\
  \ '1'.\n/// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n/// The extra characters are there to help with the\
  \ format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\n///\
  \ decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
  \ isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
  \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
  ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
  \ String::from(\"db1111db\"));\n}\n"
completions: ["    let mut binary = String::from(\"db\");\n    let mut n = decimal;\n\
    \    while n > 0 {\n        if n % 2 == 0 {\n            binary.push('0');\n \
    \       } else {\n            binary.push('1');\n        }\n        n /= 2;\n\
    \    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()", '    format!("db{:b}db",
    decimal)', '    unimplemented!();', '    format!("db{:b}db", decimal)', "    match\
    \ decimal {\n        0 => String::from(\"db0db\"),\n        n if n > 0 => format!(\"\
    db{}db\", n.to_string()),\n        _ => String::from(\"db-1db\"),\n    }", " \
    \   let mut binary = String::from(\"db\");\n    let mut number = decimal;\n  \
    \  while number > 0 {\n        let base = number % 2;\n        number = number\
    \ / 2;\n        binary.push_str(&base.to_string());\n    }\n    binary.push_str(\"\
    db\");\n    binary.chars().rev().collect()", '    format!("db{:b}db", decimal)',
  "    let mut bin = String::new();\n    bin.push_str(\"db\");\n    for _ in 0..8\
    \ {\n        bin.push(match decimal % 2 {\n            0 => '0',\n           \
    \ _ => '1',\n        });\n        decimal /= 2;\n    }\n    bin.push_str(\"db\"\
    );\n    bin.chars().rev().collect()", "    let mut binary = String::from(\"db\"\
    );\n    let mut current = decimal;\n    loop {\n        let result = current /\
    \ 2;\n        let remainder = current % 2;\n        current = result;\n      \
    \  binary.push_str(&remainder.to_string());\n        if result == 0 {\n      \
    \      break;\n        }\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  '    format!("db{:b}db", decimal)', "    let mut binary: String = String::from(\"\
    db\");\n    let mut buffer: String = String::new();\n    let mut copy: isize =\
    \ decimal;\n    while copy > 0 {\n        let reminder = copy % 2;\n        copy\
    \ = copy / 2;\n        buffer.push_str(&reminder.to_string());\n    }\n    buffer.chars().rev().collect::<String>().chars().for_each(|x|\
    \ binary.push(x));\n    binary.push('d');\n    binary.push('b');\n    binary",
  "    fn helper(decimal: isize, prefix: &str, res: &mut String) {\n        if decimal\
    \ > 0 {\n            helper(decimal / 2, prefix, res);\n            res.push_str(format!(\"\
    {}\", decimal % 2).as_str());\n        } else {\n            res.push_str(prefix);\n\
    \        }\n    }\n\n    let mut res = String::new();\n    helper(decimal, \"\
    db\", &mut res);\n    res.push_str(\"db\");\n    res", "    let mut binary = String::from(\"\
    db\");\n    let mut temp = decimal;\n    while temp != 0 {\n        binary.push_str(&(temp\
    \ % 2).to_string());\n        temp /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()", "    if decimal == 0 {\n        return \"\
    db0db\".to_string();\n    }\n    let mut binary = \"\".to_string();\n    let mut\
    \ decimal = decimal;\n    while decimal > 0 {\n        binary = (decimal % 2).to_string()\
    \ + &binary;\n        decimal /= 2;\n    }\n    binary = \"db\".to_string() +\
    \ &binary + \"db\";\n    binary", "    let mut binary = String::new();\n    let\
    \ mut dec = decimal;\n    while dec > 0 {\n        let remainder = dec % 2;\n\
    \        binary.push_str(&remainder.to_string());\n        dec /= 2;\n    }\n\
    \    binary.push_str(\"db\");\n    binary.chars().rev().collect()", "    let mut\
    \ num = decimal;\n    let mut rem = 0;\n    let mut string = String::from(\"db\"\
    );\n    while num != 0 {\n        rem = num % 2;\n        num = num / 2;\n   \
    \     string.push(char::from(48 + rem));\n    }\n    string.push_str(\"db\");\n\
    \    string.chars().rev().collect()", "    let mut result = String::from(\"db\"\
    );\n    let mut decimal = decimal;\n    let mut remainder = 0;\n    while decimal\
    \ != 0 {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n \
    \       result.push_str(&remainder.to_string());\n    }\n    result.push_str(\"\
    db\");\n    result.chars().rev().collect()", "    let binary_str = format!(\"\
    {:b}\", decimal);\n    let mut result = String::from(\"db\");\n    result.push_str(&binary_str);\n\
    \    result.push_str(\"db\");\n    result", '    format!("db{:b}db", decimal)',
  "    // TODO\n    unimplemented!();"]
stop_tokens:
- "\n}"
