language: rs
name: HumanEval_64_vowels_count
results:
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let mut count = 0;\n    let chars: Vec<char> = s.chars().collect();\n\
    \    for i in 0..chars.len() {\n        if chars[i] == 'a' || chars[i] == 'e'\
    \ || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u' {\n            count\
    \ += 1;\n        }\n        if chars[i] == 'y' && i != chars.len() - 1 {\n   \
    \         count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")),\
    \ 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpskhx5fq4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let mut count = 0;\n    let mut y_is_vowel = false;\n    for\
    \ c in s.chars() {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u'\
    \ => {\n                y_is_vowel = false;\n                count += 1;\n   \
    \         }\n            'y' => {\n                if y_is_vowel {\n         \
    \           count += 1;\n                }\n                y_is_vowel = true;\n\
    \            }\n            _ => y_is_vowel = false,\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpu71r7s8x.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let mut result = 0;\n    let chars: Vec<char> = s.chars().collect();\n\
    \    for (index, item) in chars.iter().enumerate() {\n        if *item == 'a'\
    \ || *item == 'e' || *item == 'i' || *item == 'o' || *item == 'u' {\n        \
    \    result += 1;\n        }\n        if index == chars.len() - 1 && *item ==\
    \ 'y' {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpp5d288k3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_count\
    \ = 0;\n    for c in s.chars() {\n        if vowels.contains(&c) {\n         \
    \   vowel_count += 1;\n        }\n    }\n    vowel_count\n}\n\nfn main() {\n \
    \   let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\"\
    )), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpgr_vhrrf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let s = s.to_lowercase();\n    let mut count = 0;\n    for c\
    \ in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpd5x3esi0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let mut counter = 0;\n    for c in s.chars() {\n        match\
    \ c {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'y' => counter += 1,\n      \
    \      _ => (),\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate\
    \ = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")), 2);\n  \
    \  assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpofv6yxac.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let mut count = 0;\n    let mut is_last_y = false;\n    for\
    \ c in s.chars() {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            count += 1;\n        } else if (c == 'y') {\n     \
    \       is_last_y = true;\n        } else {\n            is_last_y = false;\n\
    \        }\n    }\n    if (is_last_y) {\n        count += 1;\n    }\n    return\
    \ count;\n}\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpneo6i_5c.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    0\n}\n\nfn main() {\n    let candidate = vowels_count;\n   \
    \ assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmp82qk0eyv.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmpxpbctupa.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let lower_s = s.to_lowercase();\n    let mut vcount = 0;\n \
    \   for c in lower_s.chars() {\n        match c {\n            'a' => vcount +=\
    \ 1,\n            'e' => vcount += 1,\n            'i' => vcount += 1,\n     \
    \       'o' => vcount += 1,\n            'u' => vcount += 1,\n            _ =>\
    \ continue,\n        }\n    }\n    vcount\n}\n\nfn main() {\n    let candidate\
    \ = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")), 2);\n  \
    \  assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpe3_wpaw7.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    // TODO\n    // 0\n    let mut count: isize = 0;\n    let s_tolower\
    \ = s.to_lowercase();\n    for i in s_tolower.chars() {\n        match i {\n \
    \           'a' | 'e' | 'i' | 'o' | 'u' => count += 1,\n            _ => {}\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpnr6c_yj3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let mut count = 0;\n    let c = s.chars().nth(s.len() - 1).unwrap();\n\
    \    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n\
    \        count += 1;\n    }\n    for c in s.chars() {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `2`', /tmp/tmpdkg947_k.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    s.chars().fold(0, |acc, x| acc + if is_vowel(x) { 1 } else {\
    \ 0 })\n}\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp4h9ysjoj.rs:11:41\n\
    \   |\n11 |     s.chars().fold(0, |acc, x| acc + if is_vowel(x) { 1 } else { 0\
    \ })\n   |                                         ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    for c in s.chars() {\n        if vowels.contains(&c) {\n        \
    \    count += 1;\n        }\n    }\n    // look at the last character\n    match\
    \ s.chars().rev().next() {\n        Some(c) => {\n            if c == 'y' {\n\
    \                count += 1;\n            }\n        }\n        None => count\
    \ = 0,\n    }\n    count\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpev957qbe.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let mut n = 0;\n    for c in s.chars() {\n        let c = c.to_lowercase().next().unwrap();\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n     \
    \       n += 1;\n        }\n    }\n    if n == 0 {\n        n = 1;\n    }\n  \
    \  n\n}\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpfolhetx9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let mut count = 0;\n    let mut check_y = false;\n    for c\
    \ in s.chars() {\n        match c {\n            'a' => count += 1,\n        \
    \    'e' => count += 1,\n            'i' => count += 1,\n            'o' => count\
    \ += 1,\n            'u' => count += 1,\n            'y' => {\n              \
    \  if check_y {\n                    count += 1;\n                }\n        \
    \        check_y = true;\n            }\n            _ => {\n                check_y\
    \ = false;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\"\
    )), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpsvshm4ya.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 0
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let s = s.to_lowercase();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    if s.ends_with('y') {\n  \
    \      count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let mut count = 0;\n    let mut at_end = false;\n    for c in\
    \ s.chars() {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' => {\n\
    \                count += 1;\n                at_end = true;\n            }\n\
    \            'y' => {\n                if at_end {\n                    count\
    \ += 1;\n                }\n                at_end = false;\n            }\n \
    \           _ => at_end = false,\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpywt8sek3.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let last_letter\
    \ = s.chars().last().unwrap();\n    let mut count = 0;\n    for c in s.chars()\
    \ {\n        if vowels.contains(&c) || last_letter == 'y' && c == 'y' {\n    \
    \        count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")), 2);\n  \
    \  assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmp4n9jb303.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
    abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
    \ -> isize {\n    let mut vowels = 0;\n    for c in s.chars() {\n        match\
    \ c {\n            'a' | 'e' | 'i' | 'o' | 'u' => vowels += 1,\n            'y'\
    \ => vowels += 1,\n            _ => (),\n        }\n    }\n    vowels\n}\n\nfn\
    \ main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmp5b8teb5_.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823055
