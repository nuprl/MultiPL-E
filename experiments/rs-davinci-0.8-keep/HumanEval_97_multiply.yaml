name: HumanEval_97_multiply
language: rs
prompt: "/// Complete the function that takes two integers and returns \n/// the product\
  \ of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
  /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
  /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return 20.\n\
  fn multiply(a: isize, b: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
  \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
  \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
  \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
  \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
completions: ['    (a.abs() % 10) * (b.abs() % 10)', "    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    let mut a_unit_digit = 0;\n    let mut b_unit_digit = 0;\n\
    \    while a > 9 {\n        a = a / 10;\n    }\n    while b > 9 {\n        b =\
    \ b / 10;\n    }\n    a_unit_digit = a;\n    b_unit_digit = b;\n    a_unit_digit\
    \ * b_unit_digit", "    let digits: Vec<isize> = vec![a, b];\n    let res: isize\
    \ = digits.iter().fold(1, |acc, x| acc * (x % 10));\n    res", '    (a.abs() %
    10) * (b.abs() % 10)', '    (a.abs() % 10) * (b.abs() % 10)', '    (a % 10) *
    (b % 10)', '    a.abs() * b.abs() % 10', '    (a.abs() % 10) * (b.abs() % 10)',
  '    (a.abs() % 10) * (b.abs() % 10)', '    (a.abs() % 10) * (b.abs() % 10)', '    (a
    % 10) * (b % 10)', '  a.abs() * b.abs() % 10', '    ((a % 10) * (b % 10)) as isize',
  '    (a.abs() * b.abs()) % 10', "    let (a, b) = (a.abs(), b.abs());\n    (a %\
    \ 10) * (b % 10)", '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', "   \
    \ // TODO\n    unimplemented!();", "    let a_unit_digit = a % 10;\n    let b_unit_digit\
    \ = b % 10;\n    a_unit_digit * b_unit_digit", "    let mut product = a * b;\n\
    \    let mut a = a.abs();\n    let mut b = b.abs();\n    while a > 9 {\n     \
    \   a /= 10;\n    }\n    while b > 9 {\n        b /= 10;\n    }\n    product =\
    \ a * b;\n    product"]
stop_tokens:
- "\n}"
