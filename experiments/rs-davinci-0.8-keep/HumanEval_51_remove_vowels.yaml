name: HumanEval_51_remove_vowels
language: rs
prompt: "/// remove_vowels is a function that takes string and returns string without\
  \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
  /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
  /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
  \ -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
  \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
  )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\"\
  )), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")),\
  \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"\
  cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"\
  ));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n\
  }\n"
completions: ['    text.chars().filter(|ch| !ch.is_ascii_lowercase() || !ch.is_vowel()).collect()',
  "    let mut result = String::from(\"\");\n    for character in text.chars() {\n\
    \        if !is_vowel(character) {\n            result.push(character);\n    \
    \    }\n    }\n    result", '    text.chars().filter(|c| !"aeiouAEIOU".contains(*c)).collect()',
  "    let mut result = String::from(\"\");\n    for c in text.chars() {\n       \
    \ if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = text.chars().filter(|&c|\
    \ !c.is_ascii_lowercase() || c != 'a' && c != 'e' && c != 'i' && c != 'o' && c\
    \ != 'u').collect::<String>();\n    result", '    text.chars().filter(|c| !is_vowel(*c)).collect()',
  "    fn is_vowel(ch: char) -> bool {\n        let vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n        vowels.contains(&ch)\n    }\n\n    text.chars().filter(|&ch|\
    \ !is_vowel(ch)).collect()", '    text.chars().filter(|c| !c.is_lowercase_vowel()).collect()',
  '    text.chars().filter(|x| !is_vowel(*x)).collect()', "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    text.chars().filter(|x| !vowels.contains(x)).collect()",
  "    let mut result = String::new();\n    for c in text.chars() {\n        if c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            result.push(c);\n\
    \        }\n    }\n    result", '    text.chars().filter(|c| !c.is_vowel()).collect()',
  '    text.chars().filter(|x| !(x.is_ascii_lowercase() && "aeiou".contains(*x))).collect()',
  "    let mut new_string = String::new();\n    for c in text.chars() {\n        if\
    \ !\"AEIOUaeiou\".contains(c) {\n            new_string.push(c);\n        }\n\
    \    }\n    new_string", "    let mut text = text;\n    let mut i = 0;\n    let\
    \ chars: Vec<char> = text.chars().collect();\n    while i < text.len() {\n   \
    \     if is_vowel(chars[i]) {\n            text.remove(i);\n        } else {\n\
    \            i += 1;\n        }\n    }\n    text", '    text.chars().filter(|x|
    !x.is_ascii_lowercase() || !is_vowel(*x)).collect()', '    text.chars().filter(|x|
    !"aeiouAEIOU".contains(*x)).collect()', "    let mut res = String::new();\n  \
    \  for c in text.chars() {\n        if !c.is_ascii_lowercase() || !VOWELS.contains(c)\
    \ {\n            res.push(c);\n        }\n    }\n    res", "    let vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut output = String::new();\n    for ch in text.chars()\
    \ {\n        if !vowels.contains(&ch) {\n            output.push(ch);\n      \
    \  }\n    }\n    output", "    let mut result = String::new();\n    for character\
    \ in text.chars() {\n        if character.is_alphabetic() && !character.is_vowel()\
    \ {\n            result.push(character);\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
