language: rs
name: HumanEval_131_digits
results:
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   (n as f64).log10().floor() as isize + 1\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `5`', /tmp/tmp8tejy0xb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n        let d\
    \ = n % 10;\n        if d % 2 == 1 {\n            result *= d;\n        }\n  \
    \      n /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvbk7y3jo.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let result = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).filter(|&x|\
    \ x % 2 != 0).fold(1, |acc, x| acc * x);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuuezvkrh.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    for ch in n.to_string().chars() {\n        let digit\
    \ = ch.to_digit(10).unwrap() as isize;\n        if digit % 2 == 1 {\n        \
    \    result *= digit;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8w1t5f0y.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|c| if c % 2 == 0 { 0 } else { c })\n        .product()\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \  --> /tmp/tmpid6u1_xm.rs:12:10\n   |\n12 |         .product()\n   |        \
    \  ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n   |\n   =\
    \ help: the following implementations were found:\n             <isize as Product<&'a\
    \ isize>>\n             <isize as Product>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   // todo!();\n    let mut product = 1;\n    if n == 0 {\n        return 0;\n\
    \    }\n    let mut num = n;\n    while num > 0 {\n        let new_num = num %\
    \ 10;\n        if new_num % 2 != 0 {\n            product *= new_num;\n      \
    \  }\n        num /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpf6r9znku.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|x| x % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6moxwikn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut output = 1;\n    for c in n.to_string().chars() {\n        let value\
    \ = c.to_digit(10).unwrap() as isize;\n        if value % 2 == 1 {\n         \
    \   output *= value;\n        }\n    }\n    output\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6j8wqpkl.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let nums = n.to_string();\n    let mut result = 1;\n    for num in nums.chars()\
    \ {\n        let num_as_int = num.to_digit(10).unwrap();\n        if num_as_int\
    \ % 2 == 1 {\n            result *= num_as_int as isize;\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxzx4zv04.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n < 10 {\n        return if n % 2 == 1 { n } else { 0 };\n    }\n    let\
    \ mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        let digit = n %\
    \ 10;\n        if digit % 2 == 1 {\n            sum += digit;\n        }\n   \
    \     n /= 10;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `5`', /tmp/tmpok3y499p.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .product() as isize\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpttwkvz63.rs:12:10\n\
    \   |\n12 |         .product() as isize\n   |          ^^^^^^^ cannot infer type\
    \ for type parameter `P` declared on the associated function `product`\n   |\n\
    \   = note: type must be known at this point\nhelp: consider specifying the type\
    \ argument in the method call\n   |\n12 |         .product::<P>() as isize\n \
    \  |                 +++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut d = n;\n    let mut p = 1;\n    while d > 0 {\n        let r = d %\
    \ 10;\n        if r % 2 == 1 {\n            p *= r;\n        }\n        d /= 10;\n\
    \    }\n    p\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppcm5e1nm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|n| n % 2 == 1)\n        .fold(1, |acc, n| acc * n as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0updsfsi.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|s| s.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|n| n % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpp1uip267.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut res = 1;\n    for c in n.to_string().chars() {\n        let d = c.to_digit(10).unwrap();\n\
    \        if d % 2 == 1 {\n            res *= d as isize;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuwkvusvu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut t = n;\n    let mut s = 1;\n    while t > 0 {\n        let a = t %\
    \ 10;\n        if a % 2 == 1 {\n            s *= a;\n        }\n        t /= 10;\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkn_sg2sc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|c| c % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6sdisd_q.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|i| i as isize)\n        .filter(|i| i % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbgmscr4u.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n\n    let rem = n % 10;\n    if rem\
    \ % 2 == 0 {\n        return digits(n / 10);\n    } else {\n        return rem\
    \ * digits(n / 10);\n    }\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp14okyv0z.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut x = n;\n    let mut res = 1;\n    while x > 0 {\n        let r = x\
    \ % 10;\n        if r % 2 == 1 {\n            res *= r;\n        }\n        x\
    \ /= 10;\n    }\n    res\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3wr32are.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822485
