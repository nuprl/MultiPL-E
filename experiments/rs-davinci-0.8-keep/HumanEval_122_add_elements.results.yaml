language: rs
name: HumanEval_122_add_elements
results:
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    arr.iter().filter(|n| n.to_string().len() <= 2).take(k as usize).sum()\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmpxtifdqzu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 0
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] <=\
    \ 99 {\n            sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823179
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 0..k {\n        let mut n = arr[i as usize];\n\
    \        if n > 99 {\n            n = n % 100;\n        }\n        sum += n;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `32`,\n right: `0`', /tmp/tmpg7nc43xg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 0
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut ans = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n >= 100 {\n            continue;\n        }\n        ans += n;\n\
    \    }\n    ans\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823179
- exit_code: 0
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut added = 0;\n    let mut i = 0;\n    while i < k {\n        if\
    \ arr[i as usize] > 99 {\n            i += 1;\n            continue;\n       \
    \ }\n        added += arr[i as usize];\n        i += 1;\n    }\n    added\n}\n\
    \nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823179
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    arr.iter().filter(|&x| (x / 10).abs() < 10).take(k as usize).sum()\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmp0gbj9b75.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    if k > arr.len() as isize {\n        return 0;\n    }\n    let mut sum\
    \ = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n        if num\
    \ >= 10 && num < 100 {\n            sum += num;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmps7id2x3m.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    return arr[..k as usize]\n        .iter()\n        .map(|&x| if x > 99\
    \ { 100 } else { x })\n        .sum();\n}\n\nfn main() {\n    let candidate =\
    \ add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `200`,\n right: `0`', /tmp/tmprljrxk9s.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10\
    \ {\n            sum += arr[i as usize];\n        } else if arr[i as usize] <\
    \ 100 {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as\
    \ usize] / 10;\n        } else {\n            sum += arr[i as usize] % 10;\n \
    \           sum += arr[i as usize] / 10 % 10;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `0`', /tmp/tmp33_aqqec.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut res = 0;\n    for (i, &v) in arr.iter().enumerate() {\n     \
    \   if v > 99 { continue; }\n        res += v;\n        if i as isize >= k { break;\
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `37`,\n right: `-4`', /tmp/tmpc148w10a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 0
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823179
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 0..k {\n        let a = arr[i as usize];\n\
    \        if a < 10 {\n            sum += a;\n        } else if a < 100 {\n   \
    \         sum += a / 10 + a % 10;\n        } else {\n            sum += a / 100\
    \ + (a % 100) / 10 + a % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpa72kkurg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 1
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    // define the closure to filter if a number only has two digits\n   \
    \ // it will return true if it only has two digits\n    let filter_fn = |n: &isize|\
    \ -> bool {\n        let dig = (n / 10) as isize;\n        (dig >= 1) && (dig\
    \ < 10)\n    };\n    // convert the vector to a slice and filter it\n    let filtered_arr\
    \ = arr.as_slice().iter().filter(filter_fn);\n    // reduce the iterator to add\
    \ all the elements of the slice\n    filtered_arr.take(k as usize).fold(0, |acc,\
    \ x| acc + x)\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0631]: type mismatch in closure arguments\n  --> /tmp/tmp7yhxxy9p.rs:17:53\n\
    \   |\n12 |     let filter_fn = |n: &isize| -> bool {\n   |                  \
    \   ------------------- found signature of `for<'r> fn(&'r isize) -> _`\n...\n\
    17 |     let filtered_arr = arr.as_slice().iter().filter(filter_fn);\n   |   \
    \                                                  ^^^^^^^^^ expected signature\
    \ of `for<'r> fn(&'r &isize) -> _`\n\nerror[E0599]: the method `take` exists for\
    \ struct `Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmp7yhxxy9p.rs:12:21:\
    \ 15:6]>`, but its trait bounds were not satisfied\n  --> /tmp/tmp7yhxxy9p.rs:19:18\n\
    \   |\n12 |       let filter_fn = |n: &isize| -> bool {\n   |                \
    \       -------------------\n   |                       |\n   |              \
    \         doesn't satisfy `<_ as FnOnce<(&&isize,)>>::Output = bool`\n   |   \
    \                    doesn't satisfy `_: FnMut<(&&isize,)>`\n...\n19 |       filtered_arr.take(k\
    \ as usize).fold(0, |acc, x| acc + x)\n   |                    ^^^^ method cannot\
    \ be called on `Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmp7yhxxy9p.rs:12:21:\
    \ 15:6]>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<[closure@/tmp/tmp7yhxxy9p.rs:12:21:\
    \ 15:6] as FnOnce<(&&isize,)>>::Output = bool`\n           which is required by\
    \ `Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmp7yhxxy9p.rs:12:21: 15:6]>:\
    \ Iterator`\n           `[closure@/tmp/tmp7yhxxy9p.rs:12:21: 15:6]: FnMut<(&&isize,)>`\n\
    \           which is required by `Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmp7yhxxy9p.rs:12:21:\
    \ 15:6]>: Iterator`\n           `Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmp7yhxxy9p.rs:12:21:\
    \ 15:6]>: Iterator`\n           which is required by `&mut Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmp7yhxxy9p.rs:12:21: 15:6]>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0631.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 0
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut result = 0;\n    for i in 0..k {\n        if arr[i as usize]\
    \ < 100 {\n            result += arr[i as usize];\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823179
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut res = 0;\n    for i in 0..k {\n        if arr[i as usize] >=\
    \ 100 {\n            res += arr[i as usize] / 100;\n        } else if arr[i as\
    \ usize] < 10 {\n            res += arr[i as usize];\n        } else {\n     \
    \       res += arr[i as usize] / 10;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpl5d3bvzb.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    arr.iter().take(k as usize).map(|num| num.to_string().len() as isize).sum()\n\
    }\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `-4`', /tmp/tmpawab6520.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 0
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        let mut digits = 0;\n        let mut temp = num;\n        while temp\
    \ > 0 {\n            temp /= 10;\n            digits += 1;\n        }\n      \
    \  if digits <= 2 {\n            sum += num;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823179
- exit_code: 1
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    arr.iter().take(k as usize).filter(|x| x < &100).sum()\n}\n\nfn main()\
    \ {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3,\
    \ 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0pt8kp0z.rs:10:48\n   |\n\
    10 |     arr.iter().take(k as usize).filter(|x| x < &100).sum()\n   |        \
    \                                        ^^^^ expected `&isize`, found integer\n\
    \   |\n   = note: expected reference `&&isize`\n              found reference\
    \ `&{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] >=\
    \ 10 && arr[i as usize] < 100 {\n            sum += arr[i as usize];\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmp5ysn8h32.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] >=\
    \ 10 && arr[i as usize] < 100 {\n            sum += arr[i as usize];\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-4`', /tmp/tmp5ysn8h32.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823179
