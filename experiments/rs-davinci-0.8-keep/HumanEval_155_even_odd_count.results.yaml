language: rs
name: HumanEval_155_even_odd_count
results:
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp02u7o_k9.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num = num;\n    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n    while num != 0 {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmppcqntwu_.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 0;\n    let mut odds = 0;\n    let mut num = num;\n \
    \   if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            evens += 1;\n  \
    \      } else {\n            odds += 1;\n        }\n        num /= 10;\n    }\n\
    \    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n  \
    \  assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp4q9v_0ct.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp65au4xur.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut n = num;\n    let mut even = 0;\n    let mut odd = 0;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp3zfk5iq1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut a = num;\n    while\
    \ a != 0 {\n        if a % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        a /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9tzoy9m0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for i in num.to_string().chars()\
    \ {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            even_count +=\
    \ 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp6prvuphz.rs:9:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmppivajvah.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 0;\n    let mut odds = 0;\n    for digit in num.to_string().chars()\
    \ {\n        if digit.to_digit(10).unwrap() % 2 == 0 {\n            evens += 1;\n\
    \        } else {\n            odds += 1;\n        }\n    }\n    (evens, odds)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpqqlvtj_p.rs:9:31

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmppivajvah.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count_odd: isize = 0;\n    let mut count_even: isize = 0;\n \
    \   let mut num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while\
    \ num > 0 {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n    \
    \        count_even += 1;\n        } else {\n            count_odd += 1;\n   \
    \     }\n        num /= 10;\n    }\n    (count_even, count_odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp96giot18.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmppivajvah.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 0
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let num = num.abs();\n    let even_count = num.to_string().chars().filter(|c|\
    \ c.to_digit(10).unwrap() % 2 == 0).count() as isize;\n    let odd_count = num.to_string().chars().filter(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1).count() as isize;\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    if\
    \ n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        if n % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpijfrawrp.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp63jjn5fx.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_digits = 0;\n    let mut odd_digits = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_digits\
    \ += 1;\n        } else {\n            odd_digits += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_digits, odd_digits)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpjfimqxe3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let (mut even_count, mut odd_count) = (0, 0);\n    if num < 0 { return\
    \ (even_count, odd_count); }\n    let mut tmp = num;\n    while tmp > 0 {\n  \
    \      let digit = tmp % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        tmp\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpfktquepw.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let digits = get_digits(num);\n    (\n        digits.iter().filter(|x|\
    \ **x % 2 == 0).count() as isize,\n        digits.iter().filter(|x| **x % 2 !=\
    \ 0).count() as isize,\n    )\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_digits` in this scope\n --> /tmp/tmp8xa2ykuq.rs:6:18\n\
    \  |\n6 |     let digits = get_digits(num);\n  |                  ^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659823239
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num = num;\n    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n    while num != 0 {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmppcqntwu_.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823240
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    num.to_string()\n        .chars()\n        .map(|ch| ch.to_digit(10).unwrap())\n\
    \        .fold((0, 0), |(e, o), i| {\n            if i % 2 == 0 {\n          \
    \      (e + 1, o)\n            } else {\n                (e, o + 1)\n        \
    \    }\n        })\n}\n\nfn main() {\n    let candidate = even_odd_count;\n  \
    \  assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpuoky0g90.rs:8:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823240
