name: HumanEval_3_below_zero
language: rs
prompt: "/// You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n/// zero balance. Your task is to detect if at any point the\
  \ balance of account fallls below zero, and\n/// at that point function should return\
  \ True. Otherwise it should return False.\n/// >>> below_zero([1, 2, 3])\n/// False\n\
  /// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations: Vec<isize>)\
  \ -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
  \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]),\
  \ false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
  \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
completions: ["    let mut balance = 0;\n    for item in operations {\n        balance\
    \ += item;\n        if balance < 0 {\n            return true;\n        }\n  \
    \  }\n    false", "    operations.iter().fold(0, |acc, &item| {\n        let sum\
    \ = acc + item;\n        if sum < 0 {\n            return true;\n        }\n \
    \       sum\n    }) != 0", '    unimplemented!();', "    let mut balance = 0;\n\
    \    for operation in operations {\n        balance += operation;\n        if\
    \ balance < 0 {\n            return true;\n        }\n    }\n    false", "   \
    \ let mut current_balance = 0;\n    for op in operations {\n        current_balance\
    \ += op;\n        if current_balance < 0 {\n            return true;\n       \
    \ }\n    }\n    false", "    let mut total: isize = 0;\n    for i in operations\
    \ {\n        total += i;\n        if total < 0 {\n            return true;\n \
    \       }\n    }\n    false", '    unimplemented!();', "    // Your code here\n\
    \    unimplemented!();", "    let mut bank_balance = 0;\n    for operation in\
    \ operations {\n        bank_balance += operation;\n        if bank_balance <\
    \ 0 {\n            return true;\n        }\n    }\n    false", "    let mut balance\
    \ = 0;\n    for i in operations {\n        balance += i;\n        if balance <\
    \ 0 {\n            return true;\n        }\n    }\n    false", "    let mut balance\
    \ = 0;\n    for op in operations {\n        balance += op;\n        if balance\
    \ < 0 {\n            return true;\n        }\n    }\n    false", "    let mut\
    \ balance = 0;\n    for operation in operations {\n        balance += operation;\n\
    \        if balance < 0 {\n            return true;\n        }\n    }\n    false",
  '    operations.iter().fold(0, |acc, x| acc + x) < 0', "    let mut sum = 0;\n \
    \   for x in operations {\n        sum += x;\n        if sum < 0 {\n         \
    \   return true;\n        }\n    }\n    false", "    let mut account = 0;\n  \
    \  for op in operations {\n        account += op;\n        if account < 0 {\n\
    \            return true;\n        }\n    }\n    false", '    operations.iter().fold(0,
    |acc, val| acc + val) < 0', "    // TODO: Write code here\n    panic!(\"Not implemented\"\
    );", "    let mut balance = 0;\n    for op in operations {\n        balance +=\
    \ op;\n        if balance < 0 {\n            return true;\n        }\n    }\n\
    \    false", "    // Your code here!\n    unimplemented!()", "    let mut balance\
    \ = 0;\n    for op in operations {\n        balance += op;\n        if balance\
    \ < 0 {\n            return true;\n        }\n    }\n    false"]
stop_tokens:
- "\n}"
