name: HumanEval_131_digits
language: rs
prompt: "/// Given a positive integer n, return the product of the odd digits.\n///\
  \ Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n/// digits(4)\
  \  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
  \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n \
  \   assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n  \
  \  assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
  }\n"
completions: ['    (n as f64).log10().floor() as isize + 1', "    let mut result =\
    \ 1;\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n       \
    \ if d % 2 == 1 {\n            result *= d;\n        }\n        n /= 10;\n   \
    \ }\n    result", "    let result = n.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).filter(|&x| x % 2 != 0).fold(1, |acc, x| acc * x);\n    result", " \
    \   let mut result = 1;\n    for ch in n.to_string().chars() {\n        let digit\
    \ = ch.to_digit(10).unwrap() as isize;\n        if digit % 2 == 1 {\n        \
    \    result *= digit;\n        }\n    }\n    result", "    n.to_string()\n   \
    \     .chars()\n        .filter_map(|c| c.to_digit(10))\n        .map(|c| if c\
    \ % 2 == 0 { 0 } else { c })\n        .product()", "    // todo!();\n    let mut\
    \ product = 1;\n    if n == 0 {\n        return 0;\n    }\n    let mut num = n;\n\
    \    while num > 0 {\n        let new_num = num % 10;\n        if new_num % 2\
    \ != 0 {\n            product *= new_num;\n        }\n        num /= 10;\n   \
    \ }\n    product", "    n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|x| x % 2 != 0)\n        .product()", "    let mut\
    \ output = 1;\n    for c in n.to_string().chars() {\n        let value = c.to_digit(10).unwrap()\
    \ as isize;\n        if value % 2 == 1 {\n            output *= value;\n     \
    \   }\n    }\n    output", "    let nums = n.to_string();\n    let mut result\
    \ = 1;\n    for num in nums.chars() {\n        let num_as_int = num.to_digit(10).unwrap();\n\
    \        if num_as_int % 2 == 1 {\n            result *= num_as_int as isize;\n\
    \        }\n    }\n    result", "    if n < 10 {\n        return if n % 2 == 1\
    \ { n } else { 0 };\n    }\n    let mut n = n;\n    let mut sum = 0;\n    while\
    \ n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n        \
    \    sum += digit;\n        }\n        n /= 10;\n    }\n    sum", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .product() as isize", "    let mut d = n;\n    let mut\
    \ p = 1;\n    while d > 0 {\n        let r = d % 10;\n        if r % 2 == 1 {\n\
    \            p *= r;\n        }\n        d /= 10;\n    }\n    p", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|n|\
    \ n % 2 == 1)\n        .fold(1, |acc, n| acc * n as isize)", "    n.to_string()\n\
    \        .chars()\n        .map(|s| s.to_digit(10).unwrap() as isize)\n      \
    \  .filter(|n| n % 2 != 0)\n        .product()", "    let mut res = 1;\n    for\
    \ c in n.to_string().chars() {\n        let d = c.to_digit(10).unwrap();\n   \
    \     if d % 2 == 1 {\n            res *= d as isize;\n        }\n    }\n    res",
  "    let mut t = n;\n    let mut s = 1;\n    while t > 0 {\n        let a = t %\
    \ 10;\n        if a % 2 == 1 {\n            s *= a;\n        }\n        t /= 10;\n\
    \    }\n    s", "    n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|c| c % 2 != 0)\n        .product()", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .map(|i| i\
    \ as isize)\n        .filter(|i| i % 2 == 1)\n        .product()", "    if n ==\
    \ 0 {\n        return 0;\n    }\n\n    let rem = n % 10;\n    if rem % 2 == 0\
    \ {\n        return digits(n / 10);\n    } else {\n        return rem * digits(n\
    \ / 10);\n    }", "    let mut x = n;\n    let mut res = 1;\n    while x > 0 {\n\
    \        let r = x % 10;\n        if r % 2 == 1 {\n            res *= r;\n   \
    \     }\n        x /= 10;\n    }\n    res"]
stop_tokens:
- "\n}"
