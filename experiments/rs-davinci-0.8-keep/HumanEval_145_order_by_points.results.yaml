language: rs
name: HumanEval_145_order_by_points
results:
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    // your code here\n    Vec::new()\n}\n\nfn\
    \ main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpibehtvew.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut mapped = nums.iter().enumerate().map(|(i,\
    \ &n)| (i, sum_digits(n))).collect::<Vec<_>>();\n    mapped.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    mapped.iter().map(|&(_, s)| s).collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmp42uzva67.rs:9:64\n\
    \  |\n9 |     let mut mapped = nums.iter().enumerate().map(|(i, &n)| (i, sum_digits(n))).collect::<Vec<_>>();\n\
    \  |                                                                ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0609]: no field `1` on type `&_`\n  --> /tmp/tmp42uzva67.rs:10:29\n\
    \   |\n10 |     mapped.sort_by(|a, b| a.1.cmp(&b.1));\n   |                  \
    \           ^\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0609.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut v = nums.clone();\n    v.sort_by(|a,\
    \ b| (sum_digits(*a), a).cmp(&(sum_digits(*b), b)));\n    v\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmp5b7xrdah.rs:10:23\n\
    \   |\n10 |     v.sort_by(|a, b| (sum_digits(*a), a).cmp(&(sum_digits(*b), b)));\n\
    \   |                       ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `sum_digits` in this scope\n  --> /tmp/tmp5b7xrdah.rs:10:48\n\
    \   |\n10 |     v.sort_by(|a, b| (sum_digits(*a), a).cmp(&(sum_digits(*b), b)));\n\
    \   |                                                ^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    fn digit_sum(x: isize) -> usize {\n       \
    \ let mut s = 0;\n        let mut x = x;\n        while x != 0 {\n           \
    \ s += (x % 10) as usize;\n            x /= 10;\n        }\n        s\n    }\n\
    \n    nums.into_iter().enumerate().sorted_by_key(|(i, x)| (digit_sum(*x), *i)).map(|(_,\
    \ x)| x).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by_key` found for struct `Enumerate`\
    \ in the current scope\n  --> /tmp/tmpv1pvmr2e.rs:19:34\n   |\n19 |     nums.into_iter().enumerate().sorted_by_key(|(i,\
    \ x)| (digit_sum(*x), *i)).map(|(_, x)| x).collect()\n   |                   \
    \               ^^^^^^^^^^^^^ method not found in `Enumerate<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    // TODO\n    vec![]\n}\n\nfn main() {\n   \
    \ let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp_2ie5s2k.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    let sum_of_digits = |num: &isize| -> isize\
    \ {\n        let mut sum = 0;\n        let mut num = *num;\n        while num\
    \ != 0 {\n            sum += num % 10;\n            num /= 10;\n        }\n  \
    \      sum\n    };\n    let mut vec = nums.to_vec();\n    vec.sort_by_key(|&num|\
    \ sum_of_digits(&num));\n    vec\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpzcf7xkox.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuyfbz8ey.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpuyfbz8ey.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    nums.iter().enumerate().sorted_by(|a, b| a.1.abs().sum::<isize>().cmp(&b.1.abs().sum())).map(|x|\
    \ x.1).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Enumerate`\
    \ in the current scope\n --> /tmp/tmppff146fv.rs:9:29\n  |\n9 |     nums.iter().enumerate().sorted_by(|a,\
    \ b| a.1.abs().sum::<isize>().cmp(&b.1.abs().sum())).map(|x| x.1).collect()\n\
    \  |                             ^^^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpizgckdy6.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    if nums.is_empty() {\n        return vec![];\n\
    \    }\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by(|a, b|\
    \ a.abs().to_string().chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().cmp(&b.abs().to_string().chars().map(|d|\
    \ d.to_digit(10).unwrap()).sum::<u32>()));\n    sorted_nums\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -1, 11, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpbzllwu4d.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    nums.into_iter().enumerate().map(|(i, n)| (i,\
    \ n, digits(n).iter().sum())).collect::<Vec<_>>().sort_by(|(i, n, s), (j, m, t)|\
    \ if s != t { s.cmp(&t) } else { i.cmp(&j) }).into_iter().map(|(_, n, _)| n).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmp6yifvs7n.rs:9:54\n\
    \  |\n9 |     nums.into_iter().enumerate().map(|(i, n)| (i, n, digits(n).iter().sum())).collect::<Vec<_>>().sort_by(|(i,\
    \ n, s), (j, m, t)| if s != ...\n  |                                         \
    \             ^^^^^^ not found in this scope\n\nerror[E0599]: the method `into_iter`\
    \ exists for unit type `()`, but its trait bounds were not satisfied\n --> /tmp/tmp6yifvs7n.rs:9:174\n\
    \  |\n9 | ...cmp(&t) } else { i.cmp(&j) }).into_iter().map(|(_, n, _)| n).collect()\n\
    \  |                                  ^^^^^^^^^ method cannot be called on `()`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `(): Iterator`\n          which is required by `():\
    \ IntoIterator`\n          `&(): Iterator`\n          which is required by `&():\
    \ IntoIterator`\n          `&mut (): Iterator`\n          which is required by\
    \ `&mut (): IntoIterator`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ x.abs());\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -1, 11, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp4vbxdogk.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = nums.clone();\n    let mut\
    \ sums: Vec<(usize, isize)> = result\n        .iter()\n        .enumerate()\n\
    \        .map(|(i, n)| (i, n.abs()))\n        .collect();\n    sums.sort_by(|a,\
    \ b| (a.1 % 10 + a.1 / 10).cmp(&(b.1 % 10 + b.1 / 10)));\n    for (i, &(j, _))\
    \ in sums.iter().enumerate() {\n        result[i] = nums[j];\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -1, 11, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpic_o_ouq.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    if nums.len()\
    \ == 0 {\n        return res;\n    }\n    let mut myVec = Vec::new();\n    let\
    \ mut sum_num: usize;\n    for i in 0..nums.len() {\n        sum_num = 0;\n  \
    \      let mut val = nums[i];\n        while val != 0 {\n            sum_num +=\
    \ (val % 10) as usize;\n            val /= 10;\n        }\n        myVec.push((sum_num,\
    \ i));\n    }\n    myVec.sort();\n    for i in 0..myVec.len() {\n        res.push(nums[myVec[i].1]);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to add with overflow'', /tmp/tmpmazn1jsm.rs:19:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    nums.into_iter().enumerate().sorted_by_key(|(x,\
    \ _)| *x).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by_key` found for struct `Enumerate`\
    \ in the current scope\n --> /tmp/tmpsn0xb6zy.rs:9:34\n  |\n9 |     nums.into_iter().enumerate().sorted_by_key(|(x,\
    \ _)| *x).collect()\n  |                                  ^^^^^^^^^^^^^ method\
    \ not found in `Enumerate<std::vec::IntoIter<isize>>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    let v: Vec<_> = nums.iter().enumerate().map(|(i,\
    \ &x)| (i, sum_digits(x), x)).collect();\n    let mut v = v.into_iter().collect::<Vec<_>>();\n\
    \    v.sort_by(|&(a, b, _), &(c, d, _)| b.cmp(&d).then(a.cmp(&c)));\n    v.into_iter().map(|(_,\
    \ _, x)| x).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmp4tjot6gs.rs:9:63\n\
    \  |\n9 |     let v: Vec<_> = nums.iter().enumerate().map(|(i, &x)| (i, sum_digits(x),\
    \ x)).collect();\n  |                                                        \
    \       ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    if nums.is_empty() {\n        return nums;\n\
    \    }\n    let mut nums = nums;\n    nums.sort_by(|a, b| a.abs().to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>().cmp(&b.abs().to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>()));\n    nums\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -1, 11, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmprbs5lu4b.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    nums.into_iter().enumerate().sorted_by_key(|x|\
    \ (x.1.abs() as usize, x.0)).map(|x| x.1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by_key` found for struct `Enumerate`\
    \ in the current scope\n --> /tmp/tmpklqgks6x.rs:9:34\n  |\n9 |     nums.into_iter().enumerate().sorted_by_key(|x|\
    \ (x.1.abs() as usize, x.0)).map(|x| x.1).collect()\n  |                     \
    \             ^^^^^^^^^^^^^ method not found in `Enumerate<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n    nums.into_iter().enumerate().map(|(idx, n)|\
    \ (idx, n, n.abs() as usize)).collect::<Vec<_>>().sort_by(|(idx1, n1, n1sum),\
    \ (idx2, n2, n2sum)| {\n        n1sum.cmp(&n2sum).then(idx1.cmp(&idx2))\n    }).into_iter().map(|(_,\
    \ n, _)| n).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for unit type `()`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpk5ynzuh5.rs:11:8\n   |\n11 |\
    \     }).into_iter().map(|(_, n, _)| n).collect()\n   |        ^^^^^^^^^ method\
    \ cannot be called on `()` due to unsatisfied trait bounds\n   |\n   = note: the\
    \ following trait bounds were not satisfied:\n           `(): Iterator`\n    \
    \       which is required by `(): IntoIterator`\n           `&(): Iterator`\n\
    \           which is required by `&(): IntoIterator`\n           `&mut (): Iterator`\n\
    \           which is required by `&mut (): IntoIterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822470
