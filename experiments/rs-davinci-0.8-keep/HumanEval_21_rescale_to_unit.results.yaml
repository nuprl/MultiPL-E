language: rs
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let (min, max) = (numbers.iter().min().unwrap(), numbers.iter().max().unwrap());\n\
    \    return numbers.iter().map(|x| (x - min) / (max - min)).collect();\n}\n\n\
    fn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpbpt17y8j.rs:6:38\n\
    \  |\n6 |     let (min, max) = (numbers.iter().min().unwrap(), numbers.iter().max().unwrap());\n\
    \  |                                      ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n  |\n  = note: required because of the requirements on the impl of\
    \ `Ord` for `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \ --> /tmp/tmpbpt17y8j.rs:6:69\n  |\n6 |     let (min, max) = (numbers.iter().min().unwrap(),\
    \ numbers.iter().max().unwrap());\n  |                                       \
    \                              ^^^ the trait `Ord` is not implemented for `f64`\n\
    \  |\n  = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let (mut smallest, mut largest) = (numbers[0], numbers[0]);\n    for item\
    \ in numbers.iter() {\n        if *item < smallest {\n            smallest = *item;\n\
    \        }\n        if *item > largest {\n            largest = *item;\n     \
    \   }\n    }\n    let range = largest - smallest;\n    let mut new_list = vec![];\n\
    \    for item in numbers.iter() {\n        new_list.push((*item - smallest) /\
    \ range);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n\
    \    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    if numbers.len() < 2 {\n        return numbers;\n    }\n\n    let mut numbers\
    \ = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\n    let\
    \ min = numbers[0];\n    let max = numbers[numbers.len() - 1];\n\n    numbers.iter().map(|&x|\
    \ (x - min) / (max - min)).collect()\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n\
    \    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0.0, 1.0]`,\n right: `[1.0, 0.0]`', /tmp/tmp9bxvk3o6.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    if numbers.len() < 2 {\n        panic!(\"Cannot rescale vectors of size <\
    \ 2\");\n    }\n    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    if min == max {\n        // all numbers are equal, return a vector of equal\
    \ length with all ones\n        vec![1.0; numbers.len()]\n    } else {\n     \
    \   numbers.iter().map(|n| (n - min) / (max - min)).collect()\n    }\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpvnuc2_0z.rs:9:30\n\
    \  |\n9 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpvnuc2_0z.rs:10:30\n\
    \   |\n10 |     let max = numbers.iter().max().unwrap();\n   |               \
    \               ^^^ the trait `Ord` is not implemented for `f64`\n   |\n   = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    if numbers.len() < 2 {\n        panic!(\"rescale_to_unit() received list\
    \ of numbers with less than 2 numbers\");\n    }\n    let minimum = numbers.iter().min().unwrap();\n\
    \    let maximum = numbers.iter().max().unwrap();\n    if *minimum == *maximum\
    \ {\n        panic!(\"rescale_to_unit() received list of numbers with same value\"\
    );\n    }\n    let factor = 1.0 / (*maximum - *minimum);\n    numbers.iter().map(|x|\
    \ (*x - *minimum) * factor).collect()\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n\
    \    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpxge40ycc.rs:9:34\n\
    \  |\n9 |     let minimum = numbers.iter().min().unwrap();\n  |              \
    \                    ^^^ the trait `Ord` is not implemented for `f64`\n  |\n \
    \ = note: required because of the requirements on the impl of `Ord` for `&f64`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpxge40ycc.rs:10:34\n\
    \   |\n10 |     let maximum = numbers.iter().max().unwrap();\n   |           \
    \                       ^^^ the trait `Ord` is not implemented for `f64`\n   |\n\
    \   = note: required because of the requirements on the impl of `Ord` for `&f64`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let min_number = numbers.iter().min().unwrap();\n    let max_number = numbers.iter().max().unwrap();\n\
    \    let max_minus_min = max_number - min_number;\n    let mut transformed_numbers\
    \ = Vec::new();\n    for number in numbers {\n        transformed_numbers.push((number\
    \ - min_number) / max_minus_min);\n    }\n    transformed_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp3hdslmix.rs:6:37\n\
    \  |\n6 |     let min_number = numbers.iter().min().unwrap();\n  |           \
    \                          ^^^ the trait `Ord` is not implemented for `f64`\n\
    \  |\n  = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp3hdslmix.rs:7:37\n\
    \  |\n7 |     let max_number = numbers.iter().max().unwrap();\n  |           \
    \                          ^^^ the trait `Ord` is not implemented for `f64`\n\
    \  |\n  = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let max = numbers.iter().max().unwrap();\n    let min = numbers.iter().min().unwrap();\n\
    \    numbers.iter().map(|number| (*number - min) / (max - min)).collect()\n}\n\
    \nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp87lbs_aj.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp87lbs_aj.rs:7:30\n\
    \  |\n7 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let largest = numbers.iter().max().unwrap();\n    let smallest = numbers.iter().min().unwrap();\n\
    \    numbers.iter().map(|&x| (x - smallest) / (largest - smallest)).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpeflkqwhb.rs:6:34\n\
    \  |\n6 |     let largest = numbers.iter().max().unwrap();\n  |              \
    \                    ^^^ the trait `Ord` is not implemented for `f64`\n  |\n \
    \ = note: required because of the requirements on the impl of `Ord` for `&f64`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpeflkqwhb.rs:7:35\n\
    \  |\n7 |     let smallest = numbers.iter().min().unwrap();\n  |             \
    \                      ^^^ the trait `Ord` is not implemented for `f64`\n  |\n\
    \  = note: required because of the requirements on the impl of `Ord` for `&f64`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    // error handling?\n    let min = numbers.iter().cloned().fold(f64::INFINITY,\
    \ f64::min);\n    let max = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let min = numbers.iter().cloned().fold(f64::MAX, f64::min);\n    let max\
    \ = numbers.iter().cloned().fold(f64::MIN, f64::max);\n    let range = max - min;\n\
    \    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn main() {\n \
    \   let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0, 49.9]),\
    \ vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0, 0.0]);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25, 0.5,\
    \ 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]), vec![0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0, 15.0, 13.0,\
    \ 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let (mut min, mut max) = (numbers[0], numbers[0]);\n    for x in numbers.iter()\
    \ {\n        if *x < min {\n            min = *x;\n        }\n        if *x >\
    \ max {\n            max = *x;\n        }\n    }\n    let mut res = vec![];\n\
    \    for x in numbers.iter() {\n        res.push((*x - min) / (max - min));\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let delta = max - min;\n    numbers.iter().map(|x| (x - min) / delta).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp_esg_dcw.rs:6:30\n\
    \  |\n6 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp_esg_dcw.rs:7:30\n\
    \  |\n7 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let x_min = numbers.iter().min().unwrap();\n    let x_max = numbers.iter().max().unwrap();\n\
    \    let x_range = x_max - x_min;\n    let mut output = Vec::with_capacity(numbers.len());\n\
    \    output.extend(numbers.iter().map(|x| (x - x_min) / x_range));\n    output\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp_cv5zxu4.rs:6:32\n\
    \  |\n6 |     let x_min = numbers.iter().min().unwrap();\n  |                \
    \                ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp_cv5zxu4.rs:7:32\n\
    \  |\n7 |     let x_max = numbers.iter().max().unwrap();\n  |                \
    \                ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let linear_scale = 1.0 / (max - min);\n    numbers.iter().map(|n| linear_scale\
    \ * (n - min)).collect()\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n\
    \    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpbt2hh5t1.rs:6:30\n\
    \  |\n6 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpbt2hh5t1.rs:7:30\n\
    \  |\n7 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let max_val = numbers.iter().max().unwrap();\n    let min_val = numbers.iter().min().unwrap();\n\
    \    let scale = 1.0 / (max_val - min_val);\n    numbers.iter().map(|x| scale\
    \ * (x - min_val)).collect()\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n\
    \    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpzoz_323q.rs:6:34\n\
    \  |\n6 |     let max_val = numbers.iter().max().unwrap();\n  |              \
    \                    ^^^ the trait `Ord` is not implemented for `f64`\n  |\n \
    \ = note: required because of the requirements on the impl of `Ord` for `&f64`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpzoz_323q.rs:7:34\n\
    \  |\n7 |     let min_val = numbers.iter().min().unwrap();\n  |              \
    \                    ^^^ the trait `Ord` is not implemented for `f64`\n  |\n \
    \ = note: required because of the requirements on the impl of `Ord` for `&f64`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let max_value = numbers.iter().max().unwrap();\n    let min_value = numbers.iter().min().unwrap();\n\
    \    let difference = max_value - min_value;\n    numbers.iter().map(|x| (*x -\
    \ min_value) / difference).collect()\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n\
    \    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmph59tpg52.rs:6:36\n\
    \  |\n6 |     let max_value = numbers.iter().max().unwrap();\n  |            \
    \                        ^^^ the trait `Ord` is not implemented for `f64`\n  |\n\
    \  = note: required because of the requirements on the impl of `Ord` for `&f64`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmph59tpg52.rs:7:36\n\
    \  |\n7 |     let min_value = numbers.iter().min().unwrap();\n  |            \
    \                        ^^^ the trait `Ord` is not implemented for `f64`\n  |\n\
    \  = note: required because of the requirements on the impl of `Ord` for `&f64`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    // Get minimum and maximum\n    let min_val = numbers.iter().cloned().fold(std::f64::MAX,\
    \ f64::min);\n    let max_val = numbers.iter().cloned().fold(std::f64::MIN, f64::max);\n\
    \n    // Apply linear transform\n    numbers\n        .iter()\n        .map(|&num|\
    \ (num - min_val) / (max_val - min_val))\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0, 49.9]),\
    \ vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0, 0.0]);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25, 0.5,\
    \ 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]), vec![0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0, 15.0, 13.0,\
    \ 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let smallest = numbers.iter().min().unwrap();\n    let largest = numbers.iter().max().unwrap();\n\
    \    let diff = largest - smallest;\n    numbers.iter().map(|&n| (n - smallest)\
    \ / diff).collect()\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n\
    \    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpkv1cto_h.rs:6:35\n\
    \  |\n6 |     let smallest = numbers.iter().min().unwrap();\n  |             \
    \                      ^^^ the trait `Ord` is not implemented for `f64`\n  |\n\
    \  = note: required because of the requirements on the impl of `Ord` for `&f64`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpkv1cto_h.rs:7:34\n\
    \  |\n7 |     let largest = numbers.iter().max().unwrap();\n  |              \
    \                    ^^^ the trait `Ord` is not implemented for `f64`\n  |\n \
    \ = note: required because of the requirements on the impl of `Ord` for `&f64`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let x_min = numbers.iter().min().unwrap();\n    let x_max = numbers.iter().max().unwrap();\n\
    \    let mut result = Vec::new();\n    for number in numbers {\n        result.push((number\
    \ - x_min) / (x_max - x_min));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n\
    \    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp4iaplifg.rs:6:32\n\
    \  |\n6 |     let x_min = numbers.iter().min().unwrap();\n  |                \
    \                ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp4iaplifg.rs:7:32\n\
    \  |\n7 |     let x_max = numbers.iter().max().unwrap();\n  |                \
    \                ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n\
    \    let min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let\
    \ max = numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let delta\
    \ = max - min;\n    return numbers.iter().map(|x| (x - min) / delta).collect();\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
