language: rs
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    // TODO\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptgtqpby7.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    return false;\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqdp93kvf.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4t_qknj6.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822617
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut res = false;\n    for x\
    \ in 1..a {\n        for y in 1..a {\n            for z in 1..a {\n          \
    \      if x * y * z == a && is_prime(x) && is_prime(y) && is_prime(z) {\n    \
    \                res = true;\n                }\n            }\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmwcas99j.rs:12:38\n\
    \   |\n12 |                 if x * y * z == a && is_prime(x) && is_prime(y) &&\
    \ is_prime(z) {\n   |                                      ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmpmwcas99j.rs:12:53\n   |\n12 |                 if x * y * z == a\
    \ && is_prime(x) && is_prime(y) && is_prime(z) {\n   |                       \
    \                              ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmpmwcas99j.rs:12:68\n\
    \   |\n12 |                 if x * y * z == a && is_prime(x) && is_prime(y) &&\
    \ is_prime(z) {\n   |                                                        \
    \            ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut count: usize = 0;\n    for\
    \ i in 2..a {\n        if is_prime(i) && a % i == 0 {\n            count += 1;\n\
    \        }\n    }\n    count == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpgucldd51.rs:10:12\n\
    \   |\n10 |         if is_prime(i) && a % i == 0 {\n   |            ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let divisors: Vec<isize> = (2..=a).filter(|x|\
    \ a % x == 0).collect();\n    if divisors.len() < 3 {\n        return false;\n\
    \    }\n    let mut sum = 1;\n    for i in 0..3 {\n        sum *= divisors[i];\n\
    \    }\n    return sum == a;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp56sqzsej.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4t_qknj6.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpg3_jq_2n.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    // b != c != d\n    let b = 2;\n\
    \    let c = 3;\n    let d = 5;\n    a == b * c * d\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl5cp5r0d.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpb49o580c.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut is_prime = false;\n    let\
    \ _ = (1..a).filter(|&x| is_prime = a%x == 0).collect::<Vec<isize>>();\n    if\
    \ is_prime {\n        return false;\n    }\n\n    let mut count = 1;\n    let\
    \ mut a_copy = a;\n    for x in 2..a {\n        if a_copy % x == 0 {\n       \
    \     a_copy /= x;\n            count += 1;\n        }\n        if count == 3\
    \ {\n            break;\n        }\n    }\n    count == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcw6grm4w.rs:9:32\n  |\n9 |\
    \     let _ = (1..a).filter(|&x| is_prime = a%x == 0).collect::<Vec<isize>>();\n\
    \  |                                ^^^^^^^^^^^^^^^^^^^ expected `bool`, found\
    \ `()`\n  |\nhelp: you might have meant to compare for equality\n  |\n9 |    \
    \ let _ = (1..a).filter(|&x| is_prime == a%x == 0).collect::<Vec<isize>>();\n\
    \  |                                         ~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    for i in 2..a {\n        if a %\
    \ i == 0 {\n            if is_prime(i) {\n                let tmp = a / i;\n \
    \               for j in 2..tmp {\n                    if tmp % j == 0 {\n   \
    \                     if is_prime(j) {\n                            if is_prime(tmp\
    \ / j) {\n                                return true;\n                     \
    \       }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmppuqho7d8.rs:10:16\n\
    \   |\n10 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmppuqho7d8.rs:14:28\n   |\n14 |                         if is_prime(j)\
    \ {\n   |                            ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmppuqho7d8.rs:15:32\n\
    \   |\n15 | ...                   if is_prime(tmp / j) {\n   |               \
    \           ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    // TODO\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprf3424za.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    if a == 3 {\n        return true;\n\
    \    }\n    let mut n = a;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n \
    \   while n % 3 == 0 {\n        n /= 3;\n    }\n    while n % 5 == 0 {\n     \
    \   n /= 5;\n    }\n    if n == 1 {\n        return true;\n    }\n    for i in\
    \ 2..(a / 2) {\n        if a % i == 0 {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcgutyyj9.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpg3_jq_2n.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4t_qknj6.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4t_qknj6.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4t_qknj6.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822617
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut res = 1;\n    let mut i = 0;\n    while i < primes.len()\
    \ && res != a {\n        if a % primes[i] == 0 {\n            res *= primes[i];\n\
    \        }\n        i += 1;\n    }\n    res == a\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpktdqfp5o.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822617
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut num\
    \ = 2;\n    let mut primes = Vec::new();\n    while a > 1 {\n        while a %\
    \ num == 0 {\n            primes.push(num);\n            a /= num;\n        }\n\
    \        num += 1;\n    }\n    if primes.len() == 3 {\n        return true;\n\
    \    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822617
