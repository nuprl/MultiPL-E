name: HumanEval_85_add
language: rs
prompt: "/// Given a non-empty list of integers lst. add the even elements that are\
  \ at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst: Vec<isize>)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
  \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
  \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
completions: ['    lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).filter(|(_,
    v)| v % 2 == 0).map(|(_, v)| v).sum()', "    let mut index = 0;\n    let mut total\
    \ = 0;\n    while index < lst.len() {\n        if index % 2 == 1 {\n         \
    \   total += lst[index];\n        }\n        index += 1;\n    }\n    total", '    unimplemented!();',
  '    unimplemented!()', '    lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).filter(|(_,
    v)| *v % 2 == 0).map(|(_, v)| *v).sum()', "    let mut sum = 0;\n    for i in\
    \ 1..lst.len() {\n        if lst[i] % 2 == 0 {\n            sum += lst[i];\n \
    \       }\n    }\n    sum", "    let mut count = 0;\n    for (index, item) in\
    \ lst.iter().enumerate() {\n        if index % 2 != 0 && item % 2 == 0 {\n   \
    \         count += item;\n        }\n    }\n    count", "    let mut sum = 0;\n\
    \    for i in 1..lst.len() {\n        if lst[i] % 2 == 0 {\n            sum +=\
    \ lst[i];\n        }\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..lst.len()\
    \ {\n        if lst[i] % 2 == 0 && i % 2 != 0 {\n            sum += lst[i];\n\
    \        }\n    }\n    sum", "    let mut total = 0;\n    for (index, number)\
    \ in lst.iter().enumerate() {\n        if index % 2 == 1 && number % 2 == 0 {\n\
    \            total += number;\n        }\n    }\n    total", "    let mut count\
    \ = 0;\n    for (i, item) in lst.iter().enumerate() {\n        if i % 2 == 1 &&\
    \ item % 2 == 0 {\n            count += item;\n        }\n    }\n    count", " \
    \   let mut sum = 0;\n    for i in 1..lst.len() {\n        if i % 2 == 1 {\n \
    \           sum += lst[i];\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for i in 1..lst.len() {\n        if lst[i] % 2 == 0 {\n            sum +=\
    \ lst[i];\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 1).map(|(_, &n)| n).sum()', "    let mut sum = 0;\n    for (index,\
    \ item) in lst.iter().enumerate() {\n        if index % 2 == 1 && item % 2 ==\
    \ 0 {\n            sum += item;\n        }\n    }\n    sum", '    lst.iter().step_by(2).sum()',
  '    lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, e)| e).sum()',
  '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, n)| n).sum()',
  '    lst.iter().filter(|&x| x % 2 == 0).sum()', '    lst.iter().enumerate().filter(|&(idx,
    _)| idx % 2 == 1).map(|(_, x)| *x).sum()']
stop_tokens:
- "\n}"
