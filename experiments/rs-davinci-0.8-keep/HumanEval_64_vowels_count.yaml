name: HumanEval_64_vowels_count
language: rs
prompt: "/// Write a function vowels_count which takes a string representing\n///\
  \ a word as input and returns the number of vowels in the string.\n/// Vowels in\
  \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but only\
  \ when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(\"\
  abcde\")\n/// 2\n/// >>> vowels_count(\"ACEDY\")\n/// 3\nfn vowels_count(s: String)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
  abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
  key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
  keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
  ACEDY\")), 3);\n}\n"
completions: ["    let mut count = 0;\n    let chars: Vec<char> = s.chars().collect();\n\
    \    for i in 0..chars.len() {\n        if chars[i] == 'a' || chars[i] == 'e'\
    \ || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u' {\n            count\
    \ += 1;\n        }\n        if chars[i] == 'y' && i != chars.len() - 1 {\n   \
    \         count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    let mut y_is_vowel = false;\n    for c in s.chars() {\n        match c {\n\
    \            'a' | 'e' | 'i' | 'o' | 'u' => {\n                y_is_vowel = false;\n\
    \                count += 1;\n            }\n            'y' => {\n          \
    \      if y_is_vowel {\n                    count += 1;\n                }\n \
    \               y_is_vowel = true;\n            }\n            _ => y_is_vowel\
    \ = false,\n        }\n    }\n    count", "    let mut result = 0;\n    let chars:\
    \ Vec<char> = s.chars().collect();\n    for (index, item) in chars.iter().enumerate()\
    \ {\n        if *item == 'a' || *item == 'e' || *item == 'i' || *item == 'o' ||\
    \ *item == 'u' {\n            result += 1;\n        }\n        if index == chars.len()\
    \ - 1 && *item == 'y' {\n            result += 1;\n        }\n    }\n    result",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_count = 0;\n\
    \    for c in s.chars() {\n        if vowels.contains(&c) {\n            vowel_count\
    \ += 1;\n        }\n    }\n    vowel_count", "    let s = s.to_lowercase();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count += 1;\n       \
    \ }\n    }\n    count", "    let mut counter = 0;\n    for c in s.chars() {\n\
    \        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'y' => counter +=\
    \ 1,\n            _ => (),\n        }\n    }\n    counter", "    let mut count\
    \ = 0;\n    let mut is_last_y = false;\n    for c in s.chars() {\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count\
    \ += 1;\n        } else if (c == 'y') {\n            is_last_y = true;\n     \
    \   } else {\n            is_last_y = false;\n        }\n    }\n    if (is_last_y)\
    \ {\n        count += 1;\n    }\n    return count;", '    0', "    // TODO\n \
    \   0", "    let lower_s = s.to_lowercase();\n    let mut vcount = 0;\n    for\
    \ c in lower_s.chars() {\n        match c {\n            'a' => vcount += 1,\n\
    \            'e' => vcount += 1,\n            'i' => vcount += 1,\n          \
    \  'o' => vcount += 1,\n            'u' => vcount += 1,\n            _ => continue,\n\
    \        }\n    }\n    vcount", "    // TODO\n    // 0\n    let mut count: isize\
    \ = 0;\n    let s_tolower = s.to_lowercase();\n    for i in s_tolower.chars()\
    \ {\n        match i {\n            'a' | 'e' | 'i' | 'o' | 'u' => count += 1,\n\
    \            _ => {}\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    let c = s.chars().nth(s.len() - 1).unwrap();\n    if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n        count += 1;\n   \
    \ }\n    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' {\n            count += 1;\n        }\n    }\n    count",
  '    s.chars().fold(0, |acc, x| acc + if is_vowel(x) { 1 } else { 0 })', "    let\
    \ mut count = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for c in\
    \ s.chars() {\n        if vowels.contains(&c) {\n            count += 1;\n   \
    \     }\n    }\n    // look at the last character\n    match s.chars().rev().next()\
    \ {\n        Some(c) => {\n            if c == 'y' {\n                count +=\
    \ 1;\n            }\n        }\n        None => count = 0,\n    }\n    count",
  "    let mut n = 0;\n    for c in s.chars() {\n        let c = c.to_lowercase().next().unwrap();\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n     \
    \       n += 1;\n        }\n    }\n    if n == 0 {\n        n = 1;\n    }\n  \
    \  n", "    let mut count = 0;\n    let mut check_y = false;\n    for c in s.chars()\
    \ {\n        match c {\n            'a' => count += 1,\n            'e' => count\
    \ += 1,\n            'i' => count += 1,\n            'o' => count += 1,\n    \
    \        'u' => count += 1,\n            'y' => {\n                if check_y\
    \ {\n                    count += 1;\n                }\n                check_y\
    \ = true;\n            }\n            _ => {\n                check_y = false;\n\
    \            }\n        }\n    }\n    count", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let s = s.to_lowercase();\n    let mut count = 0;\n   \
    \ for c in s.chars() {\n        if vowels.contains(&c) {\n            count +=\
    \ 1;\n        }\n    }\n    if s.ends_with('y') {\n        count += 1;\n    }\n\
    \    count", "    let mut count = 0;\n    let mut at_end = false;\n    for c in\
    \ s.chars() {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' => {\n\
    \                count += 1;\n                at_end = true;\n            }\n\
    \            'y' => {\n                if at_end {\n                    count\
    \ += 1;\n                }\n                at_end = false;\n            }\n \
    \           _ => at_end = false,\n        }\n    }\n    count", "    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let last_letter = s.chars().last().unwrap();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if vowels.contains(&c)\
    \ || last_letter == 'y' && c == 'y' {\n            count += 1;\n        }\n  \
    \  }\n    count", "    let mut vowels = 0;\n    for c in s.chars() {\n       \
    \ match c {\n            'a' | 'e' | 'i' | 'o' | 'u' => vowels += 1,\n       \
    \     'y' => vowels += 1,\n            _ => (),\n        }\n    }\n    vowels"]
stop_tokens:
- "\n}"
