name: HumanEval_66_digitSum
language: rs
prompt: "/// Task\n/// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// digitSum(\"\
  \") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\") => 67\n/// digitSum(\"\
  helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n/// digitSum(\"aAaaaXa\") =>\
  \ 153\nfn digitSum(s: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
  abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
  woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
  \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
  You arE Very Smart\")), 327);\n}\n"
completions: ['    s.chars().fold(0, |sum, c| sum + if c.is_uppercase() { c as isize
    } else { 0 })', '    s.chars().filter(|&x| x.is_uppercase()).map(|x| x as isize).sum()',
  '    s.chars().fold(0, |a, b| if b.is_uppercase() { a + b as isize } else { a })',
  '  s.chars().fold(0, |acc, c| if c.is_ascii_uppercase() { acc + c as isize } else
    { acc })', "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    let v = s.into_bytes();\n    for c in v {\n        if c >= 65\
    \ && c <= 90 {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().fold(0, |acc, c|
    if c.is_uppercase() { acc + c as isize } else { acc })', "    let sum: isize =\
    \ s.chars().filter(|&x| x.is_uppercase()).map(|x| x as isize).sum();\n    sum",
  "    s.chars().fold(0, |acc, c| {\n        acc + if c.is_ascii_uppercase() {\n \
    \           c as isize\n        } else {\n            0\n        }\n    })", " \
    \   s.chars().fold(0, |sum, c| {\n        if c.is_uppercase() {\n            sum\
    \ + c as isize\n        } else {\n            sum\n        }\n    })", '    s.bytes().filter(|b|
    b.is_ascii_uppercase()).sum() as isize', "  let mut sum = 0;\n  for ch in s.chars()\
    \ {\n    if ch.is_uppercase() {\n      sum += ch as isize;\n    }\n  }\n  sum",
  '    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()', "    let\
    \ mut sum = 0;\n    for i in s.chars() {\n        if i.is_uppercase() {\n    \
    \        sum += i as isize;\n        }\n    }\n    sum", '    s.as_bytes().iter().map(|&x|
    (x as isize) - 48).filter(|&x| x > 9).sum()', "  s.chars().fold(0, |acc, x| {\n\
    \    if x.is_ascii_uppercase() {\n      acc + x as isize\n    } else {\n     \
    \ acc\n    }\n  })", "    s.chars().fold(0, |s, c| match c {\n        'A'..='Z'\
    \ => s + (c as isize),\n        _ => s,\n    })", '    s.chars().filter(|x| x.is_uppercase()).map(|x|
    x as isize).sum()', "    let mut result = 0;\n    for c in s.chars() {\n     \
    \   let mut ch = c as isize;\n        if ch > 90 {\n            ch -= 32;\n  \
    \      }\n        result += ch;\n    }\n    result"]
stop_tokens:
- "\n}"
