name: HumanEval_92_any_int
language: rs
prompt: "/// Create a function that takes 3 numbers.\n/// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
  \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n///\
  \ any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) -> bool\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
  \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
  \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
  \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
  \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
  \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
completions: ['    x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==
    z || x + z == y || y + z == x)', "    match (x.is_integer(), y.is_integer(), z.is_integer())\
    \ {\n        (true, true, true) => (x + y == z) || (x + z == y) || (y + z == x),\n\
    \        _ => false,\n    }", '    (x.is_integer() && y.is_integer() && z.is_integer())
    && (x + y == z || x + z == y || y + z == x)', '    x.floor() == y.floor() + z.floor()
    || y.floor() == x.floor() + z.floor() || z.floor() == x.floor() + y.floor()',
  "    let sum: f64 = x + y + z;\n    if (x == sum - y - z || y == sum - x - z ||\
    \ z == sum - x - y) && sum.fract() == 0.0 {\n        true\n    } else {\n    \
    \    false\n    }", '    x.is_integer() && y.is_integer() && z.is_integer() &&
    (x == y + z || y == x + z || z == x + y)', "    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        x == y + z || y == x + z || z == x + y\n    } else\
    \ {\n        false\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\
    \ &&\n        (x == y + z || y == x + z || z == x + y)", "    if x.floor() ==\
    \ x && y.floor() == y && z.floor() == z {\n        x + y == z || x + z == y ||\
    \ y + z == x\n    } else {\n        false\n    }", '    !((x.is_sign_negative()
    || y.is_sign_negative() || z.is_sign_negative()) || (x.fract() != 0.0 || y.fract()
    != 0.0 || z.fract() != 0.0)) && (x == y + z || y == x + z || z == x + y)', " \
    \   if x.is_integer() && y.is_integer() && z.is_integer() {\n        (x == y +\
    \ z) || (y == x + z) || (z == x + y)\n    } else {\n        false\n    }", " \
    \   if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 {\n        x ==\
    \ y + z || y == x + z || z == x + y\n    } else {\n        false\n    }", '    (x
    + y == z) || (x + z == y) || (y + z == x)', '    (x + y == z || x + z == y ||
    y + z == x) && (x.is_integer() && y.is_integer() && z.is_integer())', "    let\
    \ a = x.ceil() - x;\n    let b = y.ceil() - y;\n    let c = z.ceil() - z;\n  \
    \  if a == 0.0 && b == 0.0 && c == 0.0 {\n        if x + y == z || x + z == y\
    \ || y + z == x {\n            return true;\n        }\n    }\n    false", " \
    \   if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 {\n        if\
    \ x + y == z || x + z == y || y + z == x {\n            return true;\n       \
    \ }\n    }\n    false", '    (x + y == z || x + z == y || y + z == x) && x.is_integer()
    && y.is_integer() && z.is_integer()', '    (x + y == z || x + z == y || y + z
    == x) && x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0', '    (x ==
    y + z) || (y == x + z) || (z == x + y)', '    x.is_integer() && y.is_integer()
    && z.is_integer() && (x == y + z || y == x + z || z == x + y)']
stop_tokens:
- "\n}"
