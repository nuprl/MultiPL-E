name: HumanEval_60_sum_to_n
language: rs
prompt: "/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
  /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>> sum_to_n(10)\n\
  /// 55\n/// >>> sum_to_n(1)\n/// 1\nfn sum_to_n(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = sum_to_n;\n    assert_eq!(candidate(1),\
  \ 1);\n    assert_eq!(candidate(6), 21);\n    assert_eq!(candidate(11), 66);\n \
  \   assert_eq!(candidate(30), 465);\n    assert_eq!(candidate(100), 5050);\n}\n"
completions: ['    unimplemented!();', '    n*(n+1)/2', "    match n {\n        1\
    \ => 1,\n        x => x + sum_to_n(x - 1),\n    }", "    // TODO: Write this function\n\
    \    return 0;", "    let mut s = 0;\n    for i in 1..(n + 1) {\n        s +=\
    \ i;\n    }\n    s", '    unimplemented!();', "    let mut sum = 0;\n    for i\
    \ in 1..n + 1 {\n        sum += i;\n    }\n    sum", "    let mut sum = 0;\n \
    \   for i in 1..n + 1 {\n        sum += i;\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for i in 1..(n + 1) {\n        sum += i;\n    }\n    sum", '    n
    * (n + 1) / 2', "    let mut sum = 0;\n    for i in 1..(n + 1) {\n        sum\
    \ += i;\n    }\n    sum", "    if n == 1 {\n        1\n    } else {\n        n\
    \ + sum_to_n(n - 1)\n    }", "    let mut total = 0;\n    for i in 1..n+1 {\n\
    \        total += i;\n    }\n    total", '    n * (n + 1) / 2', '    unimplemented!();',
  "    if n == 1 {\n        return 1;\n    } else {\n        return n + sum_to_n(n\
    \ - 1);\n    }", "    let mut sum = 0;\n    for i in 1..n+1 {\n        sum +=\
    \ i;\n    }\n    sum", "    if n == 1 {\n        return 1;\n    } else {\n   \
    \     return n + sum_to_n(n - 1);\n    }", "    if n == 1 {\n        return 1;\n\
    \    }\n    return n + sum_to_n(n - 1);", '    (1..n+1).fold(0, |sum, x| sum +
    x)']
stop_tokens:
- "\n}"
