name: HumanEval_80_is_happy
language: rs
prompt: "/// You are given a string s.\n/// Your task is to check if the string is\
  \ happy or not.\n/// A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n/// For example:\n/// is_happy(a) => False\n/// is_happy(aa)\
  \ => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n/// is_happy(adb)\
  \ => True\n/// is_happy(xyy) => False\nfn is_happy(s: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
  a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
  abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n  \
  \  assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
  xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
  \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
completions: ["    if s.len() < 3 {\n        return false;\n    }\n    let mut i =\
    \ 1;\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut c = chars.next().unwrap();\n    for c in chars {\n        if prev\
    \ == c || c == *chars.nth(i).unwrap() {\n            return false;\n        }\n\
    \        i += 1;\n        prev = c;\n    }\n    true", "    if s.len() < 3 {\n\
    \        return false;\n    }\n    for i in 0..(s.len() - 2) {\n        if &s[i..i\
    \ + 3] == &s[i..i + 3].chars().rev().collect::<String>() {\n            return\
    \ false;\n        }\n    }\n    true", "    // TODO\n    s.len() >= 3 && (0..s.len()\
    \ - 2).all(|i| s.chars().nth(i) != s.chars().nth(i + 1) && s.chars().nth(i) !=\
    \ s.chars().nth(i + 2) && s.chars().nth(i + 1) != s.chars().nth(i + 2))", "  \
    \  if s.len() < 3 {\n        return false;\n    }\n    let chars: Vec<char> =\
    \ s.chars().collect();\n    let mut i = 0;\n    while i < chars.len() - 2 {\n\
    \        if chars[i] == chars[i + 1] || chars[i] == chars[i + 2] {\n         \
    \   return false;\n        }\n        i += 1;\n    }\n    true", "    if s.len()\
    \ < 3 {\n        return false;\n    }\n    for i in 0..s.len() - 2 {\n       \
    \ if s.chars().nth(i) == s.chars().nth(i + 1)\n            || s.chars().nth(i)\
    \ == s.chars().nth(i + 2)\n            || s.chars().nth(i + 1) == s.chars().nth(i\
    \ + 2)\n        {\n            return false;\n        }\n    }\n    true", " \
    \   let mut iter = s.chars();\n    let a = iter.next();\n    let b = iter.next();\n\
    \    if a == b {\n        return false;\n    }\n    for _ in 0..s.len() - 2 {\n\
    \        let c = iter.next();\n        if a == c || b == c {\n            return\
    \ false;\n        }\n        a = b;\n        b = c;\n    }\n    true", "    if\
    \ s.len() < 3 {\n        return false;\n    }\n    let chars: Vec<char> = s.chars().collect();\n\
    \    for i in 0..chars.len() - 2 {\n        if chars[i] == chars[i + 1] || chars[i]\
    \ == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false;\n\
    \        }\n    }\n    true", '    s.chars().collect::<Vec<char>>().windows(3).all(|w|
    w[0] != w[1] && w[1] != w[2] && w[0] != w[2])', "    let n = s.len();\n    if\
    \ n < 3 {\n        return false;\n    }\n    for i in 0..n - 2 {\n        if s.chars().nth(i)\
    \ == s.chars().nth(i + 1) || s.chars().nth(i) == s.chars().nth(i + 2)\n      \
    \      || s.chars().nth(i + 1) == s.chars().nth(i + 2)\n        {\n          \
    \  return false;\n        }\n    }\n    true", "    if s.len() < 3 {\n       \
    \ return false;\n    }\n    let iter = s.chars().enumerate();\n    let len = s.len();\n\
    \    for (i, letter) in iter {\n        if i + 3 < len {\n            if letter\
    \ == s.chars().nth(i + 1).unwrap() || letter == s.chars().nth(i + 2).unwrap()\
    \ {\n                return false;\n            }\n        }\n    }\n    true",
  "    let chars: Vec<char> = s.chars().collect();\n    if chars.len() < 3 {\n   \
    \     return false;\n    }\n    for i in 0..(chars.len() - 2) {\n        if chars[i]\
    \ == chars[i + 1] || chars[i] == chars[i + 2] || chars[i + 1] == chars[i + 2]\
    \ {\n            return false;\n        }\n    }\n    true", "    let mut i =\
    \ 0;\n    while i < s.len() - 2 {\n        if s.chars().nth(i) == s.chars().nth(i\
    \ + 1) {\n            return false;\n        }\n        i += 1;\n    }\n    true",
  "    if s.len() < 3 {\n        return false;\n    }\n    let v: Vec<char> = s.chars().collect();\n\
    \    for i in 2..v.len() {\n        if v[i] == v[i - 1] && v[i] == v[i - 2] {\n\
    \            return false;\n        }\n    }\n    true", "    if s.len() < 3 {\n\
    \        return false;\n    }\n    let chars: Vec<char> = s.chars().collect();\n\
    \    let mut i = 0;\n    while i < chars.len() - 2 {\n        if chars[i] == chars[i\
    \ + 1] || chars[i] == chars[i + 2] {\n            return false;\n        }\n \
    \       i += 1;\n    }\n    return true;", '    s.chars().collect::<Vec<char>>().windows(3).all(|c|
    c[0] != c[1] && c[1] != c[2] && c[0] != c[2])', '    s.chars().collect::<Vec<char>>().windows(3).all(|v|
    v[0] != v[1] && v[1] != v[2] && v[0] != v[2])', "    let v: Vec<char> = s.chars().collect();\n\
    \    if v.len() < 3 {\n        return false;\n    }\n    for i in 0..v.len() -\
    \ 2 {\n        if v[i] == v[i + 1] || v[i] == v[i + 2] || v[i + 1] == v[i + 2]\
    \ {\n            return false;\n        }\n    }\n    true", "    let size = s.len();\n\
    \    let v: Vec<char> = s.chars().collect();\n    for i in 0..size - 2 {\n   \
    \     if v[i] == v[i + 1] || v[i] == v[i + 2] || v[i + 1] == v[i + 2] {\n    \
    \        return false;\n        }\n    }\n    true", "    if s.len() < 3 {\n \
    \       return false;\n    }\n    let mut chars = s.chars();\n    let mut start\
    \ = chars.next().unwrap();\n    let mut mid = chars.next().unwrap();\n    let\
    \ mut end = chars.next().unwrap();\n    while chars.len() > 0 {\n        if start\
    \ == mid || mid == end || start == end {\n            return false;\n        }\n\
    \        start = mid;\n        mid = end;\n        end = chars.next().unwrap();\n\
    \    }\n    return true;", "    // String char_indices returns (usize, char) tuple\n\
    \    // so it's easy to pair up the first two with _ and the third with c\n  \
    \  // We then need to check that the first char and the third char are not the\
    \ same\n    s.chars().nth(2).map_or(false, |c| {\n        s.char_indices().take(2).any(|(_,\
    \ a)| a != c)\n    })"]
stop_tokens:
- "\n}"
