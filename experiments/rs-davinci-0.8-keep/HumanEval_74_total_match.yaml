name: HumanEval_74_total_match
language: rs
prompt: "/// Write a function that accepts two lists of strings and returns the list\
  \ that has \n/// total number of chars in the all strings of the list less than\
  \ the other list.\n/// if the two lists have the same number of chars, return the\
  \ first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
  \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
  \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
  \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
  \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfn total_match(lst1: Vec<String>, lst2:\
  \ Vec<String>) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
  )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
  ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
  ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
  )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
  4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
  )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
  ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
  hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\"\
  )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"\
  hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
completions: ["    let mut chars_1 = 0;\n    let mut chars_2 = 0;\n    for i in &lst1\
    \ {\n        chars_1 += i.len();\n    }\n    for i in &lst2 {\n        chars_2\
    \ += i.len();\n    }\n    if chars_1 == chars_2 {\n        return lst1;\n    }\
    \ else if chars_1 < chars_2 {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }", "    let (lst1_len, lst2_len) = (lst1.len(), lst2.len());\n \
    \   if lst1_len > lst2_len {\n        lst2\n    } else if lst1_len < lst2_len\
    \ {\n        lst1\n    } else {\n        let mut char_count1 = 0;\n        let\
    \ mut char_count2 = 0;\n        for s in lst1.iter() {\n            char_count1\
    \ += s.len();\n        }\n        for s in lst2.iter() {\n            char_count2\
    \ += s.len();\n        }\n        if char_count1 > char_count2 {\n           \
    \ lst2\n        } else if char_count1 < char_count2 {\n            lst1\n    \
    \    } else {\n            lst1\n        }\n    }", "    let one = lst1.into_iter().map(|s|\
    \ s.len()).sum::<usize>();\n    let two = lst2.into_iter().map(|s| s.len()).sum::<usize>();\n\
    \    if one == two {\n        lst1\n    } else if one < two {\n        lst1\n\
    \    } else {\n        lst2\n    }", "    let lst1_total_len = lst1.iter().fold(0,\
    \ |acc, s| acc + s.len());\n    let lst2_total_len = lst2.iter().fold(0, |acc,\
    \ s| acc + s.len());\n    if lst1_total_len < lst2_total_len {\n        lst1\n\
    \    } else {\n        lst2\n    }", "    if lst1.len() == 0 && lst2.len() ==\
    \ 0 {\n        return lst1;\n    }\n    let mut a = 0;\n    let mut b = 0;\n \
    \   for i in lst1.iter() {\n        a += i.len();\n    }\n    for i in lst2.iter()\
    \ {\n        b += i.len();\n    }\n    if a < b {\n        return lst1;\n    }\
    \ else {\n        return lst2;\n    }", "    let mut total1 = 0;\n    let mut\
    \ total2 = 0;\n    for i in &lst1 {\n        total1 += i.len();\n    }\n    for\
    \ i in &lst2 {\n        total2 += i.len();\n    }\n    if total1 < total2 {\n\
    \        return lst1;\n    } else {\n        return lst2;\n    }", "    let mut\
    \ sum1 = 0;\n    let mut sum2 = 0;\n    for n in lst1.iter() {\n        sum1 +=\
    \ n.len();\n    }\n    for n in lst2.iter() {\n        sum2 += n.len();\n    }\n\
    \    if sum1 < sum2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }", "    let sum_lst1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n  \
    \  let sum_lst2 = lst2.iter().fold(0, |acc, x| acc + x.len());\n    if sum_lst1\
    \ <= sum_lst2 {\n        lst1\n    } else {\n        lst2\n    }", "    let mut\
    \ counter1 = 0;\n    let mut counter2 = 0;\n    for i in lst1.iter() {\n     \
    \   counter1 += i.len();\n    }\n    for i in lst2.iter() {\n        counter2\
    \ += i.len();\n    }\n    if counter1 <= counter2 {\n        return lst1;\n  \
    \  } else {\n        return lst2;\n    }", "    let mut total1 = 0;\n    let mut\
    \ total2 = 0;\n    for word in lst1.iter() {\n        total1 += word.len();\n\
    \    }\n    for word in lst2.iter() {\n        total2 += word.len();\n    }\n\
    \    if total1 <= total2 {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }", "    let total_len1 = lst1.iter().map(|s| s.len()).sum();\n \
    \   let total_len2 = lst2.iter().map(|s| s.len()).sum();\n    if total_len1 <=\
    \ total_len2 {\n        lst1\n    } else {\n        lst2\n    }", "    let res\
    \ = lst1.iter().map(|x| x.len()).sum::<usize>();\n    let res2 = lst2.iter().map(|x|\
    \ x.len()).sum::<usize>();\n    if res < res2 {\n        lst1\n    } else {\n\
    \        lst2\n    }", "    let mut sum_lst1 = 0;\n    let mut sum_lst2 = 0;\n\
    \    for i in lst1.iter() {\n        sum_lst1 += i.len();\n    }\n    for i in\
    \ lst2.iter() {\n        sum_lst2 += i.len();\n    }\n    if sum_lst1 == sum_lst2\
    \ {\n        return lst1;\n    } else if sum_lst1 < sum_lst2 {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }", "    //if lst1.len() == 0\
    \ { return lst2; }\n    //if lst2.len() == 0 { return lst1; }\n    let mut lst1_len\
    \ = 0;\n    let mut lst2_len = 0;\n    for i in lst1.iter() {\n        lst1_len\
    \ += i.len();\n    }\n    for i in lst2.iter() {\n        lst2_len += i.len();\n\
    \    }\n    if lst1_len == lst2_len { return lst1; }\n    if lst1_len < lst2_len\
    \ { return lst1; }\n    return lst2;", "    let len1 = lst1.iter().map(|x| x.len()).sum();\n\
    \    let len2 = lst2.iter().map(|x| x.len()).sum();\n    if len1 <= len2 {\n \
    \       lst1\n    } else {\n        lst2\n    }", "    if lst1.len() == 0 {\n\
    \        return lst2;\n    }\n    if lst2.len() == 0 {\n        return lst1;\n\
    \    }\n    let total1 = lst1.iter().fold(0, |sum, i| sum + i.len());\n    let\
    \ total2 = lst2.iter().fold(0, |sum, i| sum + i.len());\n    if total1 < total2\
    \ {\n        return lst1;\n    }\n    return lst2;", "    let mut v = Vec::new();\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ if total1 > total2 {\n        return lst2;\n    } else {\n        v.push(lst1[0].clone());\n\
    \        return v;\n    }", "    let lst1_len = lst1.iter().map(|s| s.len()).sum();\n\
    \    let lst2_len = lst2.iter().map(|s| s.len()).sum();\n    if lst1_len < lst2_len\
    \ {\n        lst1\n    } else {\n        lst2\n    }", "    let mut sum1 = 0;\n\
    \    let mut sum2 = 0;\n    for s in lst1.iter() {\n        sum1 += s.len();\n\
    \    }\n    for s in lst2.iter() {\n        sum2 += s.len();\n    }\n    if sum1\
    \ < sum2 {\n        lst1\n    } else {\n        lst2\n    }", "    // if lst1.len()\
    \ == 0 {\n    //     return lst2;\n    // } else if lst2.len() == 0 {\n    //\
    \     return lst1;\n    // }\n\n    let mut total1 = 0;\n    let mut total2 =\
    \ 0;\n\n    for i in 0..lst1.len() {\n        total1 += lst1[i].len();\n    }\n\
    \n    for i in 0..lst2.len() {\n        total2 += lst2[i].len();\n    }\n\n  \
    \  if total1 < total2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }"]
stop_tokens:
- "\n}"
