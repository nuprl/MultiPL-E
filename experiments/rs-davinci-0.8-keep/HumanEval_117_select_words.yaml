name: HumanEval_117_select_words
language: rs
prompt: "/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a list of all words from string s that contain exactly\
  \ \n/// n consonants, in order these words appear in the string s.\n/// If the string\
  \ s is empty then the function should return an empty list.\n/// Note: you may assume\
  \ the input string contains only letters and spaces.\n/// Examples:\n/// select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n/// select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n/// select_words(\"simple white space\",\
  \ 2) ==> []\n/// select_words(\"Hello world\", 4) ==> [\"world\"]\n/// select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nfn select_words(s: String, n: isize) -> Vec<String>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\"\
  )]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"\
  world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"\
  Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"\
  b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n"
completions: ["    if n < 0 { return vec![]; }\n    let mut result = vec![];\n   \
    \ let mut word = String::new();\n    let mut consonants = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_lowercase() && !c.is_whitespace()\
    \ && !is_vowel(c) {\n                consonants += 1;\n            }\n       \
    \     word.push(c);\n        } else {\n            if consonants == n {\n    \
    \            result.push(word);\n            }\n            word = String::new();\n\
    \            consonants = 0;\n        }\n    }\n    if consonants == n {\n   \
    \     result.push(word);\n    }\n    result", "    if s.is_empty() {\n       \
    \ return vec![];\n    }\n    let mut res = vec![];\n    let mut counter = 0;\n\
    \    let mut word = String::new();\n    for ch in s.chars() {\n        if ch.is_alphabetic()\
    \ {\n            if \"aeiou\".contains(ch) {\n                counter = 0;\n \
    \           } else {\n                counter += 1;\n            }\n         \
    \   word.push(ch);\n        } else {\n            if counter == n {\n        \
    \        res.push(word);\n            }\n            counter = 0;\n          \
    \  word = String::new();\n        }\n    }\n    if counter == n {\n        res.push(word);\n\
    \    }\n    res", "\tlet mut result: Vec<String> = Vec::new();\n\tlet mut b: Vec<String>\
    \ = s.split_whitespace().map(|x| x.to_string()).collect();\n\tfor e in b.iter_mut()\
    \ {\n\t\tif count_consonants(e.to_string()) == n {\n\t\t\tresult.push(e.to_string());\n\
    \t\t}\n\t}\n\tresult", "    let mut v: Vec<String> = Vec::new();\n    let mut\
    \ c = 0;\n    let mut word = String::new();\n    for i in s.chars() {\n      \
    \  if i == ' ' {\n            if c == n {\n                v.push(word);\n   \
    \         }\n            c = 0;\n            word = String::new();\n        }\
    \ else {\n            word.push(i);\n            if !is_vowel(i) {\n         \
    \       c += 1;\n            }\n        }\n    }\n    if c == n {\n        v.push(word);\n\
    \    }\n    v", "    let mut result = Vec::new();\n    for word in s.split_whitespace()\
    \ {\n        let consonants = word.chars().filter(|c| !\"aeiouAEIOU\".contains(*c)).count();\n\
    \        if consonants == n as usize {\n            result.push(word.to_string());\n\
    \        }\n    }\n    result", "    let mut selected: Vec<String> = Vec::new();\n\
    \    let consonants = vec![\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"z\"];\n    let split = s.split(\" \");\n    for word in split {\n     \
    \   let mut count = 0;\n        for c in word.chars() {\n            if consonants.contains(&c.to_lowercase().to_string().as_str())\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            selected.push(word.to_string());\n        }\n    }\n    selected",
  "    let chars: Vec<char> = s.chars().collect();\n    let vowels = \"aeiouAEIOU\"\
    ;\n    let mut words: Vec<String> = Vec::new();\n    let mut temp: String = String::new();\n\
    \    let mut vowel_count: isize = 0;\n    for c in chars {\n        if c == '\
    \ ' {\n            if vowel_count == n {\n                words.push(temp.clone());\n\
    \            }\n            temp.clear();\n            vowel_count = 0;\n    \
    \    } else {\n            if vowels.contains(c) {\n                vowel_count\
    \ += 1;\n            }\n            temp.push(c);\n        }\n    }\n    if vowel_count\
    \ == n {\n        words.push(temp.clone());\n    }\n    words", "    let vowels\
    \ = \"aeiouAEIOU\";\n    let mut result = Vec::new();\n    let mut last_word =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           last_word.push(c);\n        } else {\n            if vowels.chars().filter(|&v|\
    \ v == c).count() != 0 {\n                last_word.clear();\n            } else\
    \ {\n                if last_word.len() as isize == n {\n                    result.push(last_word.clone());\n\
    \                }\n                last_word.clear();\n            }\n      \
    \  }\n    }\n    if last_word.len() as isize == n {\n        result.push(last_word);\n\
    \    }\n    result", "    s.split_whitespace()\n        .filter(|w| is_consonant(&w.chars().filter(|c|\
    \ c.is_alphabetic()).collect::<String>()))\n        .map(|w| w.to_string())\n\
    \        .collect::<Vec<String>>()", "    let mut vec: Vec<String> = vec![];\n\
    \    let mut tmp = String::new();\n    let mut cnt = 0;\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            tmp.push(c);\n            if\
    \ !c.is_vowel() {\n                cnt += 1;\n            }\n        } else {\n\
    \            if cnt == n {\n                vec.push(tmp);\n            }\n  \
    \          tmp = String::new();\n            cnt = 0;\n        }\n    }\n    if\
    \ cnt == n {\n        vec.push(tmp);\n    }\n    vec", "    let vowels = \"aeiou\"\
    ;\n    let mut result = Vec::new();\n    for word in s.split(\" \") {\n      \
    \  let mut num_consonants = 0;\n        for ch in word.chars() {\n           \
    \ if !vowels.contains(ch) {\n                num_consonants += 1;\n          \
    \  }\n        }\n        if num_consonants == n {\n            result.push(word.to_string());\n\
    \        }\n    }\n    result", "    s.split_whitespace()\n        .filter(|word|\
    \ word.chars().filter(|c| !c.is_vowel()).count() as isize == n)\n        .map(|s|\
    \ s.to_string())\n        .collect()", "\tlet mut words: Vec<String> = Vec::new();\n\
    \tfor word in s.split_whitespace() {\n\t\tif get_consts(word) == n {\n\t\t\twords.push(word.to_string());\n\
    \t\t}\n\t}\n\twords", "    fn no_vowels(ch: char) -> bool {\n        match ch\
    \ {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'y' => false,\n            _ =>\
    \ true,\n        }\n    }\n    s.split_whitespace()\n        .filter(|w| w.chars().filter(no_vowels).count()\
    \ as isize == n)\n        .map(|w| w.to_string())\n        .collect()", "\tlet\
    \ s = s.to_lowercase();\n\tlet s = s.split_whitespace();\n\tlet vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n\tlet mut result = Vec::new();\n\tfor ss in s {\n\t\t\
    let mut consonants = 0;\n\t\tfor c in ss.chars() {\n\t\t\tif !vowels.contains(&c)\
    \ {\n\t\t\t\tconsonants += 1;\n\t\t\t}\n\t\t}\n\t\tif consonants == n {\n\t\t\t\
    result.push(ss.to_string());\n\t\t}\n\t}\n\tresult", "    s.split_whitespace()\n\
    \        .filter(|w| w.matches(|c: char| c.is_consonant()).count() as isize ==\
    \ n)\n        .map(|w| w.to_string())\n        .collect()", "    s.split_whitespace()\n\
    \        .filter(|&word| count_consonants(word) == n)\n        .map(|word| word.to_string())\n\
    \        .collect()", "    if s.len() == 0 {\n        return vec![];\n    }\n\
    \    let words: Vec<String> = s.split(\" \").map(|x| x.to_string()).collect();\n\
    \    let mut result: Vec<String> = vec![];\n    for word in words {\n        let\
    \ consonants = word.chars().filter(|&x| \"aeiouAEIOU\".contains(x)).count();\n\
    \        if consonants == n as usize {\n            result.push(word);\n     \
    \   }\n    }\n    result", "    s.split_whitespace()\n        .map(|w| w.to_string())\n\
    \        .filter(|w| w.chars().filter(|c| c.is_consonant()).count() as isize ==\
    \ n)\n        .collect()", '    unimplemented!();']
stop_tokens:
- "\n}"
