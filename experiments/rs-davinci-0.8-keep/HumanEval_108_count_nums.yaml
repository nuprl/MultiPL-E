name: HumanEval_108_count_nums
language: rs
prompt: "/// Write a function count_nums which takes an array of integers and returns\n\
  /// the number of elements which has a sum of digits > 0.\n/// If a number is negative,\
  \ then its first signed digit will be negative:\n/// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11, -11])\
  \ == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
  \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
  \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
  \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
  \ 1);\n}\n"
completions: ["    // TODO\n    0", "    // TODO\n    0", '    0', '    arr.iter().map(|x|
    x.abs()).filter(|x| sum_digits(*x) > 0).count() as isize', "    let mut count\
    \ = 0;\n    for i in &arr {\n        if i.abs() >= 10 {\n            let mut sum\
    \ = 0;\n            let mut num = i.abs();\n            while num > 0 {\n    \
    \            sum += num % 10;\n                num /= 10;\n            }\n   \
    \         if sum > 0 {\n                count += 1;\n            }\n        }\
    \ else if i.abs() > 0 {\n            count += 1;\n        }\n    }\n    count",
  '    arr.iter().filter(|&x| x.abs() >= 10 || x.abs() >= 1).count() as isize', " \
    \   // TODO\n    arr.into_iter().filter(|x| x.abs() >= 10 || x.abs() <= -10).count()\
    \ as isize", "    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        if num < 0 {\n            sum += -num % 10;\n            sum +=\
    \ -num / 10 % 10;\n            sum += -num / 100 % 10;\n        } else {\n   \
    \         sum += num % 10;\n            sum += num / 10 % 10;\n            sum\
    \ += num / 100 % 10;\n        }\n        if sum > 0 {\n            count += 1;\n\
    \        }\n    }\n    count", '    unimplemented!();', '    unimplemented!();',
  "    // Your code here!\n    let mut count: isize = 0;\n    for item in arr {\n\
    \        let mut sum: isize = 0;\n        let mut item = item;\n        if item\
    \ < 0 {\n            item = -item;\n        }\n        while item != 0 {\n   \
    \         sum += item % 10;\n            item /= 10;\n        }\n        if sum\
    \ > 0 {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!()',
  "    let mut count = 0;\n    for num in arr {\n        if (num / 10).abs() % 10\
    \ + num % 10 != 0 {\n            count += 1;\n        }\n    }\n    count", '    count_nums_recur(arr,
    0)', "    let mut sum = 0;\n    for i in arr {\n        let mut n = i;\n     \
    \   if n < 0 {\n            n = -n;\n        }\n        while n > 0 {\n      \
    \      sum += n % 10;\n            n /= 10;\n        }\n    }\n    sum", '    arr.iter().filter(|&i|
    *i != 0 && signed_digits(*i).iter().sum::<isize>() > 0).count() as isize', '    unimplemented!();',
  "    let mut cnt = 0;\n    for elem in arr {\n        if sum_signed_digits(elem)\
    \ > 0 {\n            cnt += 1;\n        }\n    }\n    cnt", '    unimplemented!();',
  "    // This function should be implemented with a static loop; no\n    // recursion\
    \ is allowed.\n    unimplemented!();"]
stop_tokens:
- "\n}"
