name: HumanEval_98_count_upper
language: rs
prompt: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
  \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
  aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
  dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
  U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
  EEEE\")), 2);\n}\n"
completions: ["    s.char_indices()\n        .filter(|&(idx, c)| idx % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    let mut total: isize = 0;\n    for (idx, c)\
    \ in s.chars().enumerate() {\n        if idx % 2 == 0 && c.is_uppercase() {\n\
    \            total += 1;\n        }\n    }\n    total", "    // TODO implement\
    \ this function\n    let mut vowel = 0;\n    for (i,c) in s.chars().enumerate()\
    \ {\n        if (i % 2) == 0 && c.is_uppercase() && (c=='A' || c=='E' || c=='I'\
    \ || c=='O' || c=='U') {\n            vowel += 1;\n        }\n    }\n    vowel",
  "    s.chars().enumerate().fold(0, |acc, (i, c)| {\n        if i % 2 == 0 && is_upper_vowel(c)\
    \ {\n            acc + 1\n        } else {\n            acc\n        }\n    })",
  "    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    let\
    \ mut i = 0;\n    for c in s.chars() {\n        if vowels.contains(&c) && i %\
    \ 2 == 0 {\n            count += 1;\n        }\n        i += 1;\n    }\n    count",
  "    let mut result = 0;\n    let mut current_index = 0;\n    for letter in s.chars()\
    \ {\n        if letter.is_uppercase() && current_index % 2 == 0 {\n          \
    \  result += 1;\n        }\n        current_index += 1;\n    }\n    result", " \
    \ // YOUR CODE HERE\n  if s.len() == 0 {\n    return 0;\n  }\n  let mut counter\
    \ = 0;\n  for (i, ch) in s.chars().enumerate() {\n    if i % 2 == 0 && ch.is_uppercase()\
    \ {\n      counter += 1;\n    }\n  }\n  counter", "    s.chars().enumerate().fold(0,\
    \ |acc, (i, c)| {\n        if i % 2 == 0 && c.is_uppercase() {\n            acc\
    \ + 1\n        } else {\n            acc\n        }\n    })", '    unimplemented!();',
  '    s.chars().filter(|c| c.is_uppercase()).count() as isize', "    let mut sum\
    \ = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (idx, c) in s.chars().enumerate()\
    \ {\n        if idx % 2 == 0 && vowels.contains(&c) {\n            sum += 1;\n\
    \        }\n    }\n    sum", "    // YOUR CODE HERE\n    0", '    s.chars().enumerate().filter(|&(i,
    c)| i % 2 == 0 && is_upper(c)).count() as isize', "    let mut count = 0;\n  \
    \  let characters: Vec<char> = s.chars().collect();\n    for (index, character)\
    \ in characters.iter().enumerate() {\n        if index % 2 == 0 && is_upper(character)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars().enumerate().fold(0,\
    \ |acc, (i, c)| match c {\n        'A' | 'E' | 'I' | 'O' | 'U' => if i % 2 ==\
    \ 0 { acc + 1 } else { acc },\n        _ => acc,\n    })", "    // Write a function\
    \ body here\n    0", "    let mut count = 0;\n    let vowels = ['A', 'E', 'I',\
    \ 'O', 'U'];\n    let c: Vec<char> = s.chars().collect();\n    for i in 0..c.len()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c[i]) {\n            count += 1;\n\
    \        }\n    }\n    count", '    s.chars().enumerate().filter(|&(i, c)| i %
    2 == 0 && c.is_uppercase()).count() as isize', "    s.chars().enumerate().fold(0,\
    \ |acc, (i, ch)| {\n        if i % 2 == 0 && vowels.contains(&ch) {\n        \
    \    acc + 1\n        } else {\n            acc\n        }\n    })", '    unimplemented!();']
stop_tokens:
- "\n}"
