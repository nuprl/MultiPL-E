name: HumanEval_23_strlen
language: rs
prompt: "/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>> strlen('abc')\n\
  /// 3\nfn strlen(string: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
  asdasnakj\")), 9);\n}\n"
completions: ['    string.len() as isize', '    string.len() as isize', '    string.len()
    as isize', '    string.len() as isize', '    string.len() as isize', '    string.len()
    as isize', "    let mut count = 0;\n    for _ in string.chars() {\n        count\
    \ += 1;\n    }\n    count", "    let mut length = 0;\n    for _ in string.chars()\
    \ {\n        length += 1;\n    }\n    length", '    string.len() as isize', " \
    \   let mut i = 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n  \
    \  i", '    string.len() as isize', '    string.len() as isize', '    string.chars().count()
    as isize', "    let mut count = 0;\n    for c in string.chars() {\n        count\
    \ += 1;\n    }\n    count", '    string.len() as isize', "    let mut len = 0;\n\
    \    for _ in string.chars() {\n        len += 1;\n    }\n    len", "    let chars:\
    \ Vec<char> = string.chars().collect();\n    return chars.len() as isize;", '    string.len()
    as isize', "    let mut i = 0;\n    let mut c = string.chars();\n    loop {\n\
    \        match c.next() {\n            Some(_) => i += 1,\n            None =>\
    \ break,\n        }\n    }\n    i", "    let mut len = 0;\n    for _ in string.chars()\
    \ {\n        len += 1;\n    }\n    len"]
stop_tokens:
- "\n}"
