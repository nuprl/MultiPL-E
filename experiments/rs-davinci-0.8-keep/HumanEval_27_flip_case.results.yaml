language: rs
name: HumanEval_27_flip_case
results:
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"Flip the case of {}\", string)\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Flip the case of '', /tmp/tmp6zucvljz.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().to_string()\n        } else {\n            c.to_lowercase().to_string()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flip_string = String::new();\n    for character\
    \ in string.chars() {\n        if character.is_lowercase() {\n            flip_string.push(character.to_uppercase().to_string().pop().unwrap());\n\
    \        } else if character.is_uppercase() {\n            flip_string.push(character.to_lowercase().to_string().pop().unwrap());\n\
    \        } else {\n            flip_string.push(character);\n        }\n    }\n\
    \    flip_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_lowercase().to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpm8rysrqy.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // string.chars().map(|c| {\n    //     if char::is_uppercase(c)\
    \ {\n    //         char::to_lowercase(c)\n    //     } else {\n    //       \
    \  char::to_uppercase(c)\n    //     }\n    // }).collect()\n    //  or..\n  \
    \  string.chars().map(|c| match char::is_uppercase(c) {\n        true => char::to_lowercase(c),\n\
    \        false => char::to_uppercase(c),\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpb0yn7q1f.rs:15:18\n\
    \   |\n13 |       string.chars().map(|c| match char::is_uppercase(c) {\n   | \
    \ ____________________________-\n14 | |         true => char::to_lowercase(c),\n\
    \   | |                 --------------------- this is found to be of type `ToLowercase`\n\
    15 | |         false => char::to_uppercase(c),\n   | |                  ^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `ToLowercase`, found struct `ToUppercase`\n16 | |     }).collect()\n\
    \   | |_____- `match` arms have incompatible types\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut chars = string.chars();\n    let mut res =\
    \ String::new();\n    while let Some(c) = chars.next() {\n        if c.is_lowercase()\
    \ {\n            res.push(c.to_uppercase().nth(0).unwrap());\n        } else if\
    \ c.is_uppercase() {\n            res.push(c.to_lowercase().nth(0).unwrap());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_lowercase().nth(0).unwrap_or(c)).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmp4mcg3b1w.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpc2m5r04b.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let flipped_chars: Vec<char> = string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect();\n\
    \    flipped_chars.iter().collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()\
    \ } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|ch| ch.swap_case()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmprueyqrs3.rs:5:32\n  |\n5 |     string.chars().map(|ch|\
    \ ch.swap_case()).collect()\n  |                                ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    return string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            return c.to_lowercase().next().unwrap();\n        }\n       \
    \ if c.is_lowercase() {\n            return c.to_uppercase().next().unwrap();\n\
    \        }\n        return c;\n    }).collect();\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut reversed_string = String::new();\n    for c\
    \ in string.chars() {\n        match c {\n            c if c.is_ascii_lowercase()\
    \ => reversed_string.push(c.to_ascii_uppercase()),\n            c if c.is_ascii_uppercase()\
    \ => reversed_string.push(c.to_ascii_lowercase()),\n            _ => reversed_string.push(c),\n\
    \        }\n    }\n    reversed_string\n}\n\nfn main() {\n    let candidate =\
    \ flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() {\n    \
    \    c.to_uppercase().nth(0).unwrap()\n    } else {\n        c.to_lowercase().nth(0).unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_lowercase().next().unwrap()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmp43scz8pe.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_uppercase().next().unwrap_or(c)).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpimge78eu.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpc2m5r04b.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
