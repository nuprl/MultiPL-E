name: HumanEval_2_truncate_number
language: rs
prompt: "/// Given a positive floating point number, it can be decomposed into\n///\
  \ and integer part (largest integer smaller than given number) and decimals\n///\
  \ (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  /// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n"
tests: "}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5),\
  \ 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0),\
  \ 0.0);\n}\n"
completions: ["    let truncated = number.trunc();\n    let decimals = number - truncated;\n\
    \    decimals", '    number - number.floor()', '    number.fract()', "    let\
    \ mut number = number;\n    let integer = number.trunc();\n    number -= integer;\n\
    \    number", '    number - number.floor()', "    // TODO\n    let int = number.floor();\n\
    \    let dec = number - int;\n    dec", "    let mut number_part: f64 = number.floor();\n\
    \    let mut decimal_part: f64 = number - number_part;\n    decimal_part", '    number.fract()',
  '    return number - (number as i64) as f64;', '    number - number.floor()', '    number
    - number.floor()', "    let int_part = number.floor();\n    let dec_part = number\
    \ - int_part;\n    return dec_part;", "    let int_part = number.floor();\n  \
    \  let dec_part = number - int_part;\n    dec_part", '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number.fract()',
  "    if number.floor() == number {\n        0.0\n    } else {\n        number -\
    \ number.floor()\n    }", "    let mut temp = number.abs();\n    let mut result\
    \ = temp.floor();\n    temp -= result;\n    temp", "    if number >= 0.0 {\n \
    \       number - (number as i64) as f64\n    } else {\n        number - (number\
    \ as i64 - 1) as f64\n    }"]
stop_tokens:
- "\n}"
