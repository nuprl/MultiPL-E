name: HumanEval_24_largest_divisor
language: rs
prompt: "/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
  \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n   \
  \ assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
completions: ["    let mut divisor = n / 2;\n    while divisor > 0 {\n        if n\
    \ % divisor == 0 {\n            return divisor;\n        }\n        divisor -=\
    \ 1;\n    }\n    1", "    for i in (1..n).rev() {\n        if n % i == 0 {\n \
    \           return i;\n        }\n    }\n    1", "    for d in (1..n).rev() {\n\
    \        if n % d == 0 {\n            return d;\n        }\n    }\n    1", " \
    \   let mut divisor = n - 1;\n    while divisor > 0 {\n        if n % divisor\
    \ == 0 {\n            return divisor;\n        }\n        divisor -= 1;\n    }\n\
    \    return 1;", "    let mut divisor = n - 1;\n    while divisor > 0 {\n    \
    \    if n % divisor == 0 {\n            return divisor;\n        }\n        divisor\
    \ -= 1;\n    }\n    panic!(\"No divisor larger than 0 exists!\");", "    let mut\
    \ i = n / 2;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n\
    \        }\n        i -= 1;\n    }\n    0", "    // let mut d = n - 1;\n    //\
    \ while n % d != 0 {\n    //     d -= 1;\n    // }\n    // d\n    // n % d  ==\
    \ 0\n    (2..n).rev().find(|d| n % d == 0).unwrap()", "    let mut divisor = n\
    \ - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor",
  "    let mut large_divisor = 1;\n    let mut i = 2;\n    while i <= n {\n      \
    \  if n % i == 0 {\n            large_divisor = i;\n        }\n        i += 1;\n\
    \    }\n    large_divisor", "    // your code here\n    return n;", "    let mut\
    \ divisor = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n \
    \           return divisor;\n        }\n        divisor -= 1;\n    }\n    return\
    \ divisor;", "    let mut i = n - 1;\n    while i > 0 {\n        if n % i == 0\
    \ {\n            return i;\n        }\n        i -= 1;\n    }\n    return n;",
  "    //...\n    0", "    if n <= 1 {\n        return 0;\n    }\n\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor",
  "    let mut max_divisor = 1;\n    for i in 2..n {\n        if n % i == 0 {\n  \
    \          max_divisor = i;\n        }\n    }\n    max_divisor", "    for i in\
    \ (1..n).rev() {\n        if n % i == 0 {\n            return i;\n        }\n\
    \    }\n    1", "    let mut m = n - 1;\n    while m > 0 {\n        if n % m ==\
    \ 0 {\n            return m;\n        }\n        m -= 1;\n    }\n    0", "   \
    \ let mut divisor = n - 1;\n    while divisor > 0 {\n        if n % divisor ==\
    \ 0 {\n            return divisor;\n        }\n        divisor -= 1;\n    }\n\
    \    0", "    let mut largest_divisor = 1;\n    for i in 1..n {\n        if n\
    \ % i == 0 {\n            largest_divisor = i;\n        }\n    }\n    largest_divisor",
  "    let mut i = n / 2;\n    while i > 0 {\n        if n % i == 0 {\n          \
    \  return i;\n        }\n        i -= 1;\n    }\n    return 0;"]
stop_tokens:
- "\n}"
