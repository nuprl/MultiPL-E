name: HumanEval_19_sort_numbers
language: rs
results:
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    unimplemented!(\"sort_numbers('{}')\"\
    , numbers);\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: sort_numbers('')', /tmp/tmpo5r0j4v0.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .map(|x| match x {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Unexpected number!\"),\n        })\n        .sorted()\n\
    \        .map(|x| match x {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Unexpected number!\"),\n        })\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmp7nr8h62b.rs:22:10\n   |\n22 |         .sorted()\n   | \
    \         ^^^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmp7nr8h62b.rs:9:14:\
    \ 21:10]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // TODO: Implement\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpp9bm9krq.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut v: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    v.sort();\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpeoqojnya.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| digit_of(s).expect(\"Invalid digit\"\
    ) as u8)\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|&d| word_of(d).expect(\"Invalid digit\"))\n        .collect::<Vec<_>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digit_of` in this scope\n --> /tmp/tmpw_6zv_0s.rs:9:18\n\
    \  |\n9 |         .map(|s| digit_of(s).expect(\"Invalid digit\") as u8)\n  | \
    \                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `word_of` in this scope\n  --> /tmp/tmpw_6zv_0s.rs:14:19\n   |\n14\
    \ |         .map(|&d| word_of(d).expect(\"Invalid digit\"))\n   |            \
    \       ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<u8>\
    \ = numbers\n        .split_whitespace()\n        .map(|numeral| convert_numeral_to_u8(numeral))\n\
    \        .collect();\n    sorted_numbers.sort();\n    sorted_numbers\n       \
    \ .iter()\n        .map(|num| convert_u8_to_numeral(*num))\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `convert_numeral_to_u8` in this scope\n\
    \ --> /tmp/tmp4chp36l4.rs:9:24\n  |\n9 |         .map(|numeral| convert_numeral_to_u8(numeral))\n\
    \  |                        ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `convert_u8_to_numeral` in this scope\n  -->\
    \ /tmp/tmp4chp36l4.rs:14:20\n   |\n14 |         .map(|num| convert_u8_to_numeral(*num))\n\
    \   |                    ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_number_vec: Vec<u32>\
    \ = numbers\n        .split_whitespace()\n        .map(|num| match num {\n   \
    \         \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n\
    \            \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"input out\
    \ of range\"),\n        })\n        .collect();\n    sorted_number_vec.sort();\n\
    \    let number_vec_str: Vec<String> = sorted_number_vec\n        .iter()\n  \
    \      .map(|num| match num {\n            0 => \"zero\",\n            1 => \"\
    one\",\n            2 => \"two\",\n            3 => \"three\",\n            4\
    \ => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n      \
    \      7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"input out of range\"),\n        })\n        .map(String::from)\n\
    \        .collect();\n    number_vec_str.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"invalid input!\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"invalid input!\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"invalid number: {}\", num),\n\
    \        })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    invalid number: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n     \
    \   .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<String>\
    \ = numbers.split_whitespace().map(String::from).collect();\n    sorted_numbers.sort_by(|a,\
    \ b| {\n        let numeral_1 = get_numeral(a.to_string());\n        let numeral_2\
    \ = get_numeral(b.to_string());\n        numeral_1.cmp(&numeral_2)\n    });\n\
    \    sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_numeral` in this scope\n --> /tmp/tmp9i3ggiv4.rs:9:25\n\
    \  |\n9 |         let numeral_1 = get_numeral(a.to_string());\n  |           \
    \              ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `get_numeral` in this scope\n  --> /tmp/tmp9i3ggiv4.rs:10:25\n   |\n\
    10 |         let numeral_2 = get_numeral(b.to_string());\n   |               \
    \          ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut r = numbers.split(' ').map(|n|\
    \ NUMBERS[n]).collect::<Vec<_>>();\n    r.sort();\n    r.iter().map(|n| n.0).collect::<Vec<_>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `NUMBERS` in this scope\n --> /tmp/tmpl8wpgapz.rs:7:44\n\
    \  |\n7 |     let mut r = numbers.split(' ').map(|n| NUMBERS[n]).collect::<Vec<_>>();\n\
    \  |                                            ^^^^^^^ help: a local variable\
    \ with a similar name exists: `numbers`\n\nerror[E0609]: no field `0` on type\
    \ `&_`\n --> /tmp/tmpl8wpgapz.rs:9:24\n  |\n9 |     r.iter().map(|n| n.0).collect::<Vec<_>>().join(\"\
    \ \")\n  |                        ^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", s),\n\
    \        })\n        .collect();\n    let mut sorted_nums = nums.clone();\n  \
    \  sorted_nums.sort();\n    sorted_nums\n        .iter()\n        .map(|i| match\
    \ i {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", i),\n        })\n        .collect::<Vec<&str>>()\n     \
    \   .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<String>\
    \ = Vec::new();\n    let mut number_count: HashMap<String, u32> = HashMap::new();\n\
    \    let mut max: u32 = 0;\n\n    // count the numbers\n    for numeral in numbers.split_whitespace()\
    \ {\n        let numeral_count = number_count.entry(numeral.to_string()).or_insert(0);\n\
    \        *numeral_count += 1;\n        if *numeral_count > max {\n           \
    \ max = *numeral_count;\n        }\n    }\n\n    // sort\n    for i in 0..=max\
    \ {\n        for number in number_count.keys() {\n            if *number_count.get(number).unwrap()\
    \ == i {\n                for _ in 0..*number_count.get(number).unwrap() {\n \
    \                   sorted_numbers.push(number.to_string());\n               \
    \ }\n            }\n        }\n    }\n\n    sorted_numbers.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpfi3tn5op.rs:8:27\n\
    \  |\n8 |     let mut number_count: HashMap<String, u32> = HashMap::new();\n \
    \ |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpfi3tn5op.rs:8:50\n\
    \  |\n8 |     let mut number_count: HashMap<String, u32> = HashMap::new();\n \
    \ |                                                  ^^^^^^^ not found in this\
    \ scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut n = numbers.split_whitespace().map(|w|\
    \ {\n        let s = w.to_string();\n        word_to_number(&s)\n    }).collect::<Vec<usize>>();\n\
    \    n.sort();\n    n.iter().map(|i| number_to_word(*i)).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `word_to_number` in this scope\n -->\
    \ /tmp/tmp2w4b3tjx.rs:9:9\n  |\n9 |         word_to_number(&s)\n  |         ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `number_to_word`\
    \ in this scope\n  --> /tmp/tmp2w4b3tjx.rs:12:22\n   |\n12 |     n.iter().map(|i|\
    \ number_to_word(*i)).collect::<Vec<String>>().join(\" \")\n   |             \
    \         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let nums = numbers.split_whitespace().map(|x|\
    \ match x {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" =>\
    \ 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n\
    \        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n   \
    \     \"nine\" => 9,\n        _ => panic!(\"Invalid input\"),\n    });\n    let\
    \ mut nums: Vec<u8> = nums.collect();\n    nums.sort();\n    let nums = nums.iter().map(|x|\
    \ match x {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\"\
    ,\n        3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n \
    \       6 => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n    \
    \    9 => \"nine\",\n        _ => panic!(\"Invalid input\"),\n    });\n    nums.collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // Convert the numbers to an\
    \ array of integers\n    let mut num_array: Vec<i32> = Vec::new();\n    for num\
    \ in numbers.split_whitespace() {\n        num_array.push(to_int(num));\n    }\n\
    \n    // Sort the array of integers\n    num_array.sort();\n\n    // Convert the\
    \ numbers back to a space-delimited string of numberals\n    let mut sorted_string\
    \ = String::new();\n    for num in num_array {\n        sorted_string.push_str(to_numeral(num));\n\
    \        sorted_string.push(' ');\n    }\n\n    // Strip the trailing space\n\
    \    sorted_string.pop();\n\n    sorted_string\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_int` in this scope\n  --> /tmp/tmp14ewgx5l.rs:10:24\n\
    \   |\n10 |         num_array.push(to_int(num));\n   |                       \
    \ ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `to_numeral`\
    \ in this scope\n  --> /tmp/tmp14ewgx5l.rs:19:32\n   |\n19 |         sorted_string.push_str(to_numeral(num));\n\
    \   |                                ^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // numbers is space-delimited\
    \ string, parse into vec of words\n    let mut numbers_vec: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    // convert each word to its respective number, sort them, and then convert\
    \ back to words\n    numbers_vec.sort_by(|a, b| number_from_word(*a).cmp(&number_from_word(*b)));\n\
    \    numbers_vec.iter().map(|&a| word_from_number(number_from_word(a))).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_from_word` in this scope\n \
    \ --> /tmp/tmpfsqbuhs1.rs:10:32\n   |\n10 |     numbers_vec.sort_by(|a, b| number_from_word(*a).cmp(&number_from_word(*b)));\n\
    \   |                                ^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `number_from_word` in this scope\n  --> /tmp/tmpfsqbuhs1.rs:10:58\n\
    \   |\n10 |     numbers_vec.sort_by(|a, b| number_from_word(*a).cmp(&number_from_word(*b)));\n\
    \   |                                                          ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `word_from_number`\
    \ in this scope\n  --> /tmp/tmpfsqbuhs1.rs:11:33\n   |\n11 |     numbers_vec.iter().map(|&a|\
    \ word_from_number(number_from_word(a))).collect::<Vec<String>>().join(\" \")\n\
    \   |                                 ^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `number_from_word` in this scope\n  --> /tmp/tmpfsqbuhs1.rs:11:50\n\
    \   |\n11 |     numbers_vec.iter().map(|&a| word_from_number(number_from_word(a))).collect::<Vec<String>>().join(\"\
    \ \")\n   |                                                  ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => unreachable!(),\n        })\n  \
    \      .collect();\n    nums.sort();\n    nums.iter()\n        .map(|i| match\
    \ i {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => unreachable!(),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut parts: Vec<_> = numbers.split_whitespace().collect();\n\
    \    parts.sort_by_key(|x| number_to_int(x));\n    parts.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp8skx3jsp.rs:8:27\n  |\n8 |     parts.sort_by_key(|x| number_to_int(x));\n\
    \  |                           ^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    sorted.sort_by(|a, b| convert_numeral(a).cmp(&convert_numeral(b)));\n   \
    \ sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `convert_numeral` in this scope\n -->\
    \ /tmp/tmp0pidmw61.rs:8:27\n  |\n8 |     sorted.sort_by(|a, b| convert_numeral(a).cmp(&convert_numeral(b)));\n\
    \  |                           ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `convert_numeral` in this scope\n --> /tmp/tmp0pidmw61.rs:8:51\n\
    \  |\n8 |     sorted.sort_by(|a, b| convert_numeral(a).cmp(&convert_numeral(b)));\n\
    \  |                                                   ^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
