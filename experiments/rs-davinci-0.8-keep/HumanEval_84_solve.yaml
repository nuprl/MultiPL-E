name: HumanEval_84_solve
language: rs
prompt: "/// Given a positive integer N, return the total sum of its digits in binary.\n\
  /// Example\n/// For N = 1000, the sum of digits will be 1 the output should be\
  \ \"1\".\n/// For N = 150, the sum of digits will be 6 the output should be \"110\"\
  .\n/// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\
  /// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n/// Output:\n\
  /// a string of binary number\nfn solve(N: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
  \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
  \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
  \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
  ));\n}\n"
completions: ["    let mut N = N;\n    let mut res = String::new();\n    while N >\
    \ 0 {\n        res = format!(\"{}{}\", N % 2, res);\n        N /= 2;\n    }\n\
    \    res", "    let mut result = String::new();\n    let mut _N = N;\n    while\
    \ _N > 0 {\n        result.push_str(&_N.rem_euclid(2).to_string());\n        _N\
    \ /= 2;\n    }\n    result.chars().rev().collect()", "    // get binary representation\n\
    \    let mut binary_str = format!(\"{:b}\", N);\n    // parse to int\n    let\
    \ bin_vec = binary_str.chars().map(|x| x.to_digit(10).unwrap()).collect::<Vec<u32>>();\n\
    \    // sum digits\n    let sum = bin_vec.iter().sum::<u32>();\n    // convert\
    \ sum to string\n    format!(\"{}\", sum)", '    format!("{:b}", N).chars().map(|c|
    c.to_digit(10).unwrap()).sum::<u32>().to_string()', '    format!("{:b}", N).chars().map(|x|
    x.to_digit(10).unwrap()).sum::<u32>().to_string()', "    format!(\"{:b}\", N).chars().fold(0,\
    \ |sum, ch| sum + ch.to_digit(10).unwrap())\n        .to_string()", '    format!("{:b}",
    N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()', "    let\
    \ bin = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for c in bin.chars()\
    \ {\n        sum += c.to_digit(10).unwrap();\n    }\n    format!(\"{:b}\", sum)",
  "    let mut result = 0;\n    let mut n = N;\n    while n > 0 {\n        result\
    \ += n % 2;\n        n /= 2;\n    }\n    format!(\"{}\", result)", "    let mut\
    \ n = N;\n    let mut r = String::new();\n    while n > 0 {\n        let p = n\
    \ % 2;\n        n = n / 2;\n        r.push_str(&p.to_string());\n    }\n    r.chars().rev().collect()",
  "    let mut ans = String::new();\n    let mut N = N;\n    while N > 0 {\n     \
    \   ans.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n    ans.chars().rev().collect()",
  "    let mut result = 0;\n    let mut n = N;\n    while n > 0 {\n        result\
    \ += n % 2;\n        n /= 2;\n    }\n    result.to_string()", "    let mut s =\
    \ String::new();\n    let mut n = N;\n    while n > 0 {\n        s.push_str(&format!(\"\
    {}\", n % 2));\n        n /= 2;\n    }\n    s.chars().rev().collect()", "    let\
    \ result = N.to_string();\n    let mut binary_string = String::new();\n    let\
    \ mut count = result.len();\n    while count != 0 {\n        let count2 = count\
    \ - 1;\n        let mut total = 0;\n        for i in 0..count {\n            total\
    \ += result.chars().nth(i).unwrap().to_digit(10).unwrap() as isize * 10isize.pow(i\
    \ as u32);\n        }\n        let binary = total as u32 / 2;\n        binary_string.push_str(&binary.to_string());\n\
    \        total -= binary * 2;\n        count = count2;\n    }\n    binary_string",
  '    format!("{:b}", N).chars().map(|s| s.to_digit(10).unwrap()).sum::<u32>().to_string()',
  "    let mut bits: Vec<i8> = Vec::new();\n    let mut num = N;\n    let mut sum\
    \ = 0;\n    while num > 0 {\n        let bit = (num % 2) as i8;\n        bits.push(bit);\n\
    \        num /= 2;\n    }\n    for i in bits {\n        sum += i;\n    }\n   \
    \ return sum.to_string();", "    let s = format!(\"{:b}\", N);\n    let mut result\
    \ = 0;\n    for i in s.chars() {\n        result += i.to_digit(10).unwrap();\n\
    \    }\n    result.to_string()", "    let mut sum: i8 = 0;\n    let mut n = N;\n\
    \    while n > 0 {\n        sum += (n % 2) as i8;\n        n /= 2;\n    }\n  \
    \  sum.to_string()", '    return N.to_string();', "    let mut ans = String::new();\n\
    \    let mut N = N;\n    while N > 0 {\n        ans.push_str(&(N % 2).to_string());\n\
    \        N /= 2;\n    }\n    ans.chars().rev().collect()"]
stop_tokens:
- "\n}"
