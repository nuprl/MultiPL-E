language: rs
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // your code here\n    0\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpetmzo6wg.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmfanft82.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars: BTreeSet<char> = BTreeSet::new();\n \
    \   for c in string.chars() {\n        chars.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmpa7559iyv.rs:7:20\n\
    \  |\n7 |     let mut chars: BTreeSet<char> = BTreeSet::new();\n  |          \
    \          ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `BTreeSet`\n --> /tmp/tmpa7559iyv.rs:7:37\n\
    \  |\n7 |     let mut chars: BTreeSet<char> = BTreeSet::new();\n  |          \
    \                           ^^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = HashMap::new();\n    for c in string.chars()\
    \ {\n        let cc = c.to_lowercase().to_string();\n        if !count.contains_key(&cc)\
    \ {\n            count.insert(cc, 1);\n        }\n    }\n    return count.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmptayqm9h_.rs:7:21\n  |\n7 |     let mut count = HashMap::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut result: HashSet<char> = HashSet::new();\n  \
    \  for letter in string.chars() {\n        result.insert(letter.to_lowercase().to_string().chars().next().unwrap());\n\
    \    }\n    result.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpv563kmqz.rs:7:21\n\
    \  |\n7 |     let mut result: HashSet<char> = HashSet::new();\n  |           \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpv563kmqz.rs:7:37\n\
    \  |\n7 |     let mut result: HashSet<char> = HashSet::new();\n  |           \
    \                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_map: HashMap<char, bool> = HashMap::new();\n\
    \    for c in string.chars() {\n        char_map.insert(c.to_lowercase().next().unwrap(),\
    \ true);\n    }\n    char_map.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp1xpjxayw.rs:7:23\n\
    \  |\n7 |     let mut char_map: HashMap<char, bool> = HashMap::new();\n  |   \
    \                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp1xpjxayw.rs:7:45\n\
    \  |\n7 |     let mut char_map: HashMap<char, bool> = HashMap::new();\n  |   \
    \                                          ^^^^^^^ not found in this scope\n \
    \ |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_count: isize = 0;\n    let lower_s\
    \ = string.to_lowercase();\n    let chars: Vec<char> = lower_s.chars().collect();\n\
    \    for i in 0..chars.len() {\n        let mut seen = false;\n        for j in\
    \ 0..i {\n            if chars[i] == chars[j] {\n                seen = true;\n\
    \                break;\n            }\n        }\n        if !seen {\n      \
    \      distinct_count += 1;\n        }\n    }\n    distinct_count\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822556
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars: Vec<char> = Vec::new();\n    for c in\
    \ string.chars() {\n        let mut found = false;\n        for e in chars.iter()\
    \ {\n            if e.to_lowercase().nth(0).unwrap() == c.to_lowercase().nth(0).unwrap()\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if !found {\n            chars.push(c);\n        }\n    }\n\
    \    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822556
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    let mut result =\
    \ 0;\n    for c in string.chars() {\n        if set.insert(c.to_ascii_lowercase())\
    \ {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp7sadt4fa.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpmfanft82.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpubqf0z9m.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp10k7f08s.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822556
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().collect::<HashSet<char>>().len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp60oi8nif.rs:7:30\n\
    \  |\n7 |     string.chars().collect::<HashSet<char>>().len() as isize\n  |  \
    \                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0;\n    let mut hm = HashMap::new();\n\
    \    for c in string.chars() {\n        let c = c.to_ascii_lowercase();\n    \
    \    let c = c.to_string();\n        hm.insert(c, 1);\n    }\n    for (_, v) in\
    \ hm {\n        count += v;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp91670h9q.rs:8:18\n  |\n8 |     let mut hm = HashMap::new();\n  |   \
    \               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counts = HashMap::new();\n    let string_lower\
    \ = string.to_lowercase();\n    for c in string_lower.chars() {\n        let count\
    \ = counts.entry(c).or_insert(0);\n        *count += 1;\n    }\n    return counts.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmptsrvx4hz.rs:7:22\n  |\n7 |     let mut counts = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = HashSet::new();\n    for c in string.chars()\
    \ {\n        chars.insert(c.to_ascii_lowercase());\n    }\n    chars.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp0h0e5wwc.rs:7:21\n  |\n7 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpubqf0z9m.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut unique = HashSet::new();\n    for s in string.chars()\
    \ {\n        unique.insert(s.to_lowercase().collect::<String>());\n    }\n   \
    \ unique.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpypqsvh01.rs:7:22\n  |\n7 |     let mut unique = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut c_set: HashSet<char> = HashSet::new();\n   \
    \ for s in string.chars() {\n        c_set.insert(s.to_lowercase().nth(0).unwrap());\n\
    \    }\n    c_set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpv54rkwmr.rs:7:20\n\
    \  |\n7 |     let mut c_set: HashSet<char> = HashSet::new();\n  |            \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpv54rkwmr.rs:7:36\n  |\n7 |  \
    \   let mut c_set: HashSet<char> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822555
- exit_code: 0
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_characters = vec![];\n    for c in\
    \ string.to_lowercase().chars() {\n        if !distinct_characters.contains(&c)\
    \ {\n            distinct_characters.push(c);\n        }\n    }\n    distinct_characters.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822556
