name: HumanEval_143_words_in_sentence
language: rs
prompt: "/// You are given a string representing a sentence,\n/// the sentence contains\
  \ some words separated by a space,\n/// and you have to return a string that contains\
  \ the words from the original sentence,\n/// whose lengths are prime numbers,\n\
  /// the order of the words in the new string should be the same as the original\
  \ one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n/// Output: \"\
  is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\n/// Output:\
  \ \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence\
  \ contains only letters\nfn words_in_sentence(sentence: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"\
  This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"\
  lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"\
  there is no place available here\")), String::from(\"there is no place\"));\n  \
  \  assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"Hi am\
  \ Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"\
  go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"\
  ));\n}\n"
completions: ["    let mut result = String::new();\n    let words: Vec<_> = sentence.split('\
    \ ').collect();\n    for word in words {\n        if is_prime(word.len()) {\n\
    \            result.push_str(word);\n            result.push(' ');\n        }\n\
    \    }\n    if result.ends_with(' ') {\n        result.pop();\n    }\n    result",
  "    sentence\n        .split_whitespace()\n        .filter(|w| is_prime(w.len()))\n\
    \        .collect::<Vec<_>>()\n        .join(\" \")", "    let mut result = String::new();\n\
    \    for word in sentence.split(' ') {\n        if word.len() > 1 && is_prime(word.len()\
    \ as u64) {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut ret = String::new();\n\
    \    for word in sentence.split(' ') {\n        if word.len() > 1 && (2..word.len()).all(|i|\
    \ word.len() % i != 0) {\n            ret.push_str(word);\n            ret.push('\
    \ ');\n        }\n    }\n    ret.pop();\n    ret", "    sentence\n        .split('\
    \ ')\n        .filter(|word| is_prime(word.len()))\n        .collect::<Vec<_>>()\n\
    \        .join(\" \")", "    let mut result = String::new();\n    for s in sentence.split('\
    \ ') {\n        if is_prime_number(s.len()) {\n            result.push_str(s);\n\
    \            result.push(' ');\n        }\n    }\n    result.pop();\n    result",
  "    let mut res = String::new();\n    for w in sentence.split_whitespace() {\n\
    \        if is_prime(w.len()) {\n            res.push_str(w);\n            res.push('\
    \ ');\n        }\n    }\n    res.pop();\n    res", "    let mut ret = String::new();\n\
    \    for word in sentence.split_whitespace() {\n        if is_prime(word.len())\
    \ {\n            ret.push_str(word);\n            ret.push(' ');\n        }\n\
    \    }\n    if ret.is_empty() {\n        String::new()\n    } else {\n       \
    \ ret.pop();\n        ret\n    }", "    sentence\n        .split(' ')\n      \
    \  .filter(|word| word.len().is_prime())\n        .collect::<Vec<_>>()\n     \
    \   .join(\" \")", "    sentence\n        .split_whitespace()\n        .filter(|s|\
    \ {\n            let l = s.len();\n            l == 2 || l == 3 || l == 5 || l\
    \ == 7 || l == 11 || l == 13 || l == 17 || l == 19\n        })\n        .collect::<Vec<_>>()\n\
    \        .join(\" \")", "    let mut words = sentence.split(' ');\n    let mut\
    \ primes = vec![];\n    for word in words {\n        if is_prime(word.len()) {\n\
    \            primes.push(word);\n        }\n    }\n    primes.join(\" \")", " \
    \   let mut result = String::new();\n    let mut first = true;\n    for (i, word)\
    \ in sentence.split(' ').enumerate() {\n        if i > 1 && i % 2 == 0 {\n   \
    \         result.push_str(word);\n            result.push(' ');\n        }\n \
    \   }\n    result.pop();\n    result", "    sentence\n        .split_whitespace()\n\
    \        .filter(|word| is_prime(word.len()))\n        .collect::<Vec<_>>()\n\
    \        .join(\" \")", "    sentence\n        .split_whitespace()\n        .filter(|word|\
    \ is_prime(word.len()))\n        .collect::<Vec<_>>()\n        .join(\" \")",
  "    sentence\n        .split_whitespace()\n        .filter(|s| {\n            let\
    \ len = s.len();\n            len > 1 && (2..=len).all(|d| len % d != 0)\n   \
    \     })\n        .collect::<Vec<_>>()\n        .join(\" \")", "    sentence\n\
    \        .split_whitespace()\n        .filter(|s| is_prime(s.len()))\n       \
    \ .collect::<Vec<_>>()\n        .join(\" \")", "    let words: Vec<&str> = sentence.split_whitespace().collect();\n\
    \    let mut result = String::new();\n    for word in words {\n        if is_prime_number(word.len())\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()", "    let mut words = sentence.split('\
    \ ');\n    let mut result = Vec::new();\n    while let Some(word) = words.next()\
    \ {\n        if is_prime(word.len()) {\n            result.push(word);\n     \
    \   }\n    }\n    result.join(\" \")", "    sentence\n        .split(' ')\n  \
    \      .filter(|w| is_prime(w.len()))\n        .collect::<Vec<_>>()\n        .join(\"\
    \ \")", "    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101];\n    let words: Vec<_> = sentence.split('\
    \ ').collect();\n    let mut res = String::new();\n    for (i, word) in words.iter().enumerate()\
    \ {\n        if primes.contains(&word.len()) {\n            res.push_str(word);\n\
    \            if i < words.len() - 1 {\n                res.push(' ');\n      \
    \      }\n        }\n    }\n    res"]
stop_tokens:
- "\n}"
