name: HumanEval_160_do_algebra
language: rs
results:
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for (i,\
    \ o) in operator.iter().enumerate() {\n        match o.as_str() {\n          \
    \  \"+\" => res += operand[i + 1],\n            \"-\" => res -= operand[i + 1],\n\
    \            \"*\" => res *= operand[i + 1],\n            \"//\" => res /= operand[i\
    \ + 1],\n            \"**\" => res = res.pow(operand[i + 1] as u32),\n       \
    \     _ => {}\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpsp_qrior.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for i in\
    \ 0..operator.len() {\n        let op = operator[i].as_str();\n        let op2\
    \ = operand[i + 1];\n        match op {\n            \"+\" => res += op2,\n  \
    \          \"-\" => res -= op2,\n            \"*\" => res *= op2,\n          \
    \  \"//\" => res /= op2,\n            \"**\" => res = res.pow(op2 as u32),\n \
    \           _ => panic!(\"Unsupported operation {}\", op),\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpl2fcr54c.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmp180jc90g.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    assert!(operator.len() == operand.len()\
    \ - 1);\n    assert!(operator.len() > 0);\n    assert!(operand.len() > 1);\n \
    \   let mut result = operand[0];\n    for i in 0..operator.len() {\n        let\
    \ operand = operand[i + 1];\n        let operator = &operator[i];\n        match\
    \ operator.as_str() {\n            \"+\" => result += operand,\n            \"\
    -\" => result -= operand,\n            \"*\" => result *= operand,\n         \
    \   \"//\" => result /= operand,\n            \"**\" => result = result.pow(operand\
    \ as u32),\n            _ => panic!(\"invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwvza7frh.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp8inwwcrz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut num = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        num = match op.as_str() {\n  \
    \          \"+\" => num + operand[i + 1],\n            \"-\" => num - operand[i\
    \ + 1],\n            \"*\" => num * operand[i + 1],\n            \"//\" => num\
    \ / operand[i + 1],\n            \"**\" => num.pow(operand[i + 1] as u32),\n \
    \           _ => unreachable!(),\n        };\n    }\n    num\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3vqo8lz_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Operator not allowed in the list\"),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpm6vwfabn.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Write your code here.\n    if operator.len()\
    \ == 0 || operand.len() < 2 {\n        return 0;\n    }\n    let mut result =\
    \ operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp__blbgmk.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() < 2 {\n        return\
    \ 0;\n    }\n    let mut result = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i\
    \ + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" =>\
    \ result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n\
    \            \"**\" => result = result.pow(operand[i + 1] as u32),\n         \
    \   _ => continue,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmppzfg_s7k.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let op_cnt = operator.len();\n    let mut\
    \ op_stack: Vec<String> = Vec::new();\n    let mut operand_stack: Vec<isize> =\
    \ Vec::new();\n    op_stack.push(operator[0].clone());\n    operand_stack.push(operand[0]);\n\
    \    for i in 1..op_cnt {\n        let mut op_stack_top = op_stack.pop().unwrap();\n\
    \        if operator[i] == \"-\" || operator[i] == \"+\" {\n            operand_stack.push(operand[i]);\n\
    \            op_stack.push(operator[i].clone());\n        } else {\n         \
    \   while op_stack_top == \"*\" || op_stack_top == \"/\" || op_stack_top == \"\
    **\" {\n                let opr = operand_stack.pop().unwrap();\n            \
    \    let opn = operand_stack.pop().unwrap();\n                operand_stack.push(calc(op_stack_top,\
    \ opn, opr));\n                if op_stack.len() == 0 {\n                    break;\n\
    \                }\n                op_stack_top = op_stack.pop().unwrap();\n\
    \            }\n            operand_stack.push(operand[i]);\n            op_stack.push(op_stack_top);\n\
    \            op_stack.push(operator[i].clone());\n        }\n    }\n    while\
    \ op_stack.len() > 0 {\n        let opr = operand_stack.pop().unwrap();\n    \
    \    let opn = operand_stack.pop().unwrap();\n        operand_stack.push(calc(op_stack.pop().unwrap(),\
    \ opn, opr));\n    }\n    operand_stack.pop().unwrap()\n}\n\nfn main() {\n   \
    \ let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"\
    ), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `calc` in this scope\n  --> /tmp/tmpcpo566fo.rs:34:36\n\
    \   |\n34 |                 operand_stack.push(calc(op_stack_top, opn, opr));\n\
    \   |                                    ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `calc` in this scope\n  --> /tmp/tmpcpo566fo.rs:48:28\n\
    \   |\n48 |         operand_stack.push(calc(op_stack.pop().unwrap(), opn, opr));\n\
    \   |                            ^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3czp4h57.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operator.iter().fold(operand[0], |sum,\
    \ x| sum + x)\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&String` to `isize`\n  --> /tmp/tmp2nx76oh8.rs:20:51\n\
    \   |\n20 |     operator.iter().fold(operand[0], |sum, x| sum + x)\n   |     \
    \                                              ^ no implementation for `isize\
    \ + &String`\n   |\n   = help: the trait `Add<&String>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Operator not found!\"),\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpdqber9vm.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    let mut temp: isize = 0;\n    for i in 0..operator.len() {\n        let operand1\
    \ = operand[i];\n        let operand2 = operand[i + 1];\n        let op = operator[i].as_str();\n\
    \        match op {\n            \"+\" => temp = operand1 + operand2,\n      \
    \      \"-\" => temp = operand1 - operand2,\n            \"*\" => temp = operand1\
    \ * operand2,\n            \"//\" => temp = operand1 / operand2,\n           \
    \ \"**\" => temp = operand1.pow(operand2 as u32),\n            _ => println!(\"\
    op:{}\", op),\n        }\n        stack.push(temp);\n    }\n    let mut result:\
    \ isize = 0;\n    if stack.len() > 0 {\n        result = stack[0];\n    }\n  \
    \  for i in 1..stack.len() {\n        result = result - stack[i];\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-13`,\n right: `37`', /tmp/tmpah73ivuw.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operand.iter().zip(operator.iter()).fold(0,\
    \ |acc, (x, op)| {\n        match op.as_str() {\n            \"+\" => acc + x,\n\
    \            \"-\" => acc - x,\n            \"*\" => acc * x,\n            \"\
    //\" => acc / x,\n            \"**\" => acc.pow(*x as u32),\n            _ =>\
    \ acc,\n        }\n    })\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `37`', /tmp/tmpsl1td2t8.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut index\
    \ = 0;\n    for op in operator {\n        if op == \"+\" {\n            result\
    \ += operand[index] + operand[index + 1];\n        } else if op == \"-\" {\n \
    \           result += operand[index] - operand[index + 1];\n        } else if\
    \ op == \"*\" {\n            result += operand[index] * operand[index + 1];\n\
    \        } else if op == \"//\" {\n            result += operand[index] / operand[index\
    \ + 1];\n        } else if op == \"**\" {\n            result += operand[index].pow(operand[index\
    \ + 1] as u32);\n        }\n        index += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `37`', /tmp/tmpmyuiytad.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() < 2 {\n        panic!(\"\
    operand can't have less than 2 elements\");\n    }\n    if operator.len() < 1\
    \ {\n        panic!(\"operator can't have less than 1 element\");\n    }\n   \
    \ if operator.len() != operand.len() - 1 {\n        panic!(\"operator length is\
    \ equal to the length of operand list minus one\");\n    }\n    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpyb9gjxnt.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    stack.push(operand[0]);\n    for i in 1..operand.len() {\n        let res\
    \ = match operator[i - 1].as_str() {\n            \"+\" => stack[i - 1] + operand[i],\n\
    \            \"-\" => stack[i - 1] - operand[i],\n            \"*\" => stack[i\
    \ - 1] * operand[i],\n            \"/\" => stack[i - 1] / operand[i],\n      \
    \      \"^\" => stack[i - 1].pow(operand[i] as u32),\n            _ => 0,\n  \
    \      };\n        stack.push(res);\n    }\n    stack.pop().unwrap()\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `37`', /tmp/tmpzv3gup71.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut h = operand.iter().rev().collect::<Vec<_>>();\n\
    \    for o in operator.iter().rev() {\n        match o.as_str() {\n          \
    \  \"+\" => {\n                let x = h.pop().unwrap();\n                let\
    \ y = h.pop().unwrap();\n                h.push(x + y);\n            }\n     \
    \       \"-\" => {\n                let x = h.pop().unwrap();\n              \
    \  let y = h.pop().unwrap();\n                h.push(x - y);\n            }\n\
    \            \"*\" => {\n                let x = h.pop().unwrap();\n         \
    \       let y = h.pop().unwrap();\n                h.push(x * y);\n          \
    \  }\n            \"/\" => {\n                let x = h.pop().unwrap();\n    \
    \            let y = h.pop().unwrap();\n                h.push(x / y);\n     \
    \       }\n            \"^\" => {\n                let x = h.pop().unwrap();\n\
    \                let y = h.pop().unwrap();\n                h.push(x.pow(y as\
    \ u32));\n            }\n            _ => panic!(\"Unsupported operator\"),\n\
    \        }\n    }\n    h.pop().unwrap()\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp58lbd4m9.rs:26:24\n   |\n\
    26 |                 h.push(x + y);\n   |                        ^^^^^\n   | \
    \                       |\n   |                        expected `&isize`, found\
    \ `isize`\n   |                        help: consider borrowing here: `&(x + y)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp58lbd4m9.rs:31:24\n   |\n31 |\
    \                 h.push(x - y);\n   |                        ^^^^^\n   |    \
    \                    |\n   |                        expected `&isize`, found `isize`\n\
    \   |                        help: consider borrowing here: `&(x - y)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp58lbd4m9.rs:36:24\n   |\n36 |              \
    \   h.push(x * y);\n   |                        ^^^^^\n   |                  \
    \      |\n   |                        expected `&isize`, found `isize`\n   | \
    \                       help: consider borrowing here: `&(x * y)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp58lbd4m9.rs:41:24\n   |\n41 |              \
    \   h.push(x / y);\n   |                        ^^^^^\n   |                  \
    \      |\n   |                        expected `&isize`, found `isize`\n   | \
    \                       help: consider borrowing here: `&(x / y)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp58lbd4m9.rs:46:24\n   |\n46 |              \
    \   h.push(x.pow(y as u32));\n   |                        ^^^^^^^^^^^^^^^\n  \
    \ |                        |\n   |                        expected `&isize`, found\
    \ `isize`\n   |                        help: consider borrowing here: `&x.pow(y\
    \ as u32)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp58lbd4m9.rs:51:5\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                              ----- expected\
    \ `isize` because of return type\n...\n51 |     h.pop().unwrap()\n   |     ^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n51 |     *h.pop().unwrap()\n   |     +\n\nerror[E0606]: casting `&isize`\
    \ as `u32` is invalid\n  --> /tmp/tmp58lbd4m9.rs:46:30\n   |\n4"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut total = operand[0];\n    for (index,\
    \ op) in operator.iter().enumerate() {\n        match op.as_str() {\n        \
    \    \"+\" => total += operand[index + 1],\n            \"-\" => total -= operand[index\
    \ + 1],\n            \"*\" => total *= operand[index + 1],\n            \"//\"\
    \ => total /= operand[index + 1],\n            \"**\" => total = total.pow(operand[index\
    \ + 1] as u32),\n            _ => return 0,\n        }\n    }\n    total\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpoeftbm33.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
