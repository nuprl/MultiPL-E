language: rs
name: HumanEval_66_digitSum
results:
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().fold(0,\
    \ |sum, c| sum + if c.is_uppercase() { c as isize } else { 0 })\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|&x|\
    \ x.is_uppercase()).map(|x| x as isize).sum()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().fold(0,\
    \ |a, b| if b.is_uppercase() { a + b as isize } else { a })\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n  s.chars().fold(0,\
    \ |acc, c| if c.is_ascii_uppercase() { acc + c as isize } else { acc })\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    let v = s.into_bytes();\n    for c in v {\n        if c >= 65\
    \ && c <= 90 {\n            sum += c as isize;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c.is_uppercase()).map(|c| c as isize).sum()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().fold(0,\
    \ |acc, c| if c.is_uppercase() { acc + c as isize } else { acc })\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let sum:\
    \ isize = s.chars().filter(|&x| x.is_uppercase()).map(|x| x as isize).sum();\n\
    \    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().fold(0,\
    \ |acc, c| {\n        acc + if c.is_ascii_uppercase() {\n            c as isize\n\
    \        } else {\n            0\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().fold(0,\
    \ |sum, c| {\n        if c.is_uppercase() {\n            sum + c as isize\n  \
    \      } else {\n            sum\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.bytes().filter(|b|\
    \ b.is_ascii_uppercase()).sum() as isize\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpr36mtpy3.rs:12:50\n\
    \   |\n12 |     s.bytes().filter(|b| b.is_ascii_uppercase()).sum() as isize\n\
    \   |                                                  ^^^ cannot infer type for\
    \ type parameter `S` declared on the associated function `sum`\n   |\n   = note:\
    \ type must be known at this point\nhelp: consider specifying the type argument\
    \ in the method call\n   |\n12 |     s.bytes().filter(|b| b.is_ascii_uppercase()).sum::<S>()\
    \ as isize\n   |                                                     +++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n  let mut sum\
    \ = 0;\n  for ch in s.chars() {\n    if ch.is_uppercase() {\n      sum += ch as\
    \ isize;\n    }\n  }\n  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|&c|\
    \ c.is_uppercase()).map(|c| c as isize).sum()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for i in s.chars() {\n        if i.is_uppercase() {\n        \
    \    sum += i as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.as_bytes().iter().map(|&x|\
    \ (x as isize) - 48).filter(|&x| x > 9).sum()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `131`', /tmp/tmp2sdrv8sq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n  s.chars().fold(0,\
    \ |acc, x| {\n    if x.is_ascii_uppercase() {\n      acc + x as isize\n    } else\
    \ {\n      acc\n    }\n  })\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().fold(0,\
    \ |s, c| match c {\n        'A'..='Z' => s + (c as isize),\n        _ => s,\n\
    \    })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|x|\
    \ x.is_uppercase()).map(|x| x as isize).sum()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823116
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ result = 0;\n    for c in s.chars() {\n        let mut ch = c as isize;\n  \
    \      if ch > 90 {\n            ch -= 32;\n        }\n        result += ch;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `262`,\n right: `131`', /tmp/tmp84vief8r.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823116
