name: HumanEval_162_string_to_md5
language: rs
prompt: "/// Given a string 'text', return its md5 hash equivalent string.\n/// If\
  \ 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
  \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
  \  assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
  A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
  password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
completions: ["    let sum = match text.as_str() {\n        \"\" => return None,\n\
    \        _ => md5::compute(text.as_bytes()),\n    };\n    Some(format!(\"{:x}\"\
    , sum))", "    if text.is_empty() {\n        return None;\n    }\n    let mut\
    \ hasher = Md5::new();\n    hasher.input(text.as_bytes());\n    let digest = hasher.result();\n\
    \    let hash = digest.to_string();\n    return Some(hash);", "    if text.is_empty()\
    \ {\n        return None;\n    }\n    let md5 = md5::compute(text);\n    let mut\
    \ string = String::new();\n    for value in md5.iter() {\n        string.push_str(&format!(\"\
    {:02x}\", value));\n    }\n    Some(string)", "    if text.is_empty() {\n    \
    \    return None;\n    }\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))", "    if text.is_empty() {\n  \
    \      return None;\n    }\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    let mut ret = String::new();\n    for\
    \ byte in result.iter() {\n        ret.push_str(&format!(\"{:02x}\", byte));\n\
    \    }\n    Some(ret)", "    if text.is_empty() {\n        return None;\n    }\n\
    \    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n    let\
    \ digest = hasher.result();\n    let md5_hex_str = digest.iter().map(|b| format!(\"\
    {:02x}\", b)).collect();\n    Some(md5_hex_str)", "    if text.is_empty() {\n\
    \        return None;\n    }\n    let digest = Md5::digest(text.as_bytes());\n\
    \    let digest_hex = format!(\"{:x}\", digest);\n    Some(digest_hex)", "   \
    \ if text.is_empty() {\n        return None;\n    }\n    let md5 = md5::compute(text);\n\
    \    let mut md5_hash = String::new();\n    for v in md5.0.iter() {\n        md5_hash.push_str(&format!(\"\
    {:02x}\", v));\n    }\n    Some(md5_hash)", "    let bytes = text.into_bytes();\n\
    \    match bytes.len() {\n        0 => None,\n        _ => {\n            // compute\
    \ the md5 hash of the given string\n            let digest = md5::compute(bytes);\n\
    \            // convert the hash to string and make it lowercase\n           \
    \ Some(format!(\"{:x}\", digest).to_lowercase())\n        }\n    }", "    if text.is_empty()\
    \ {\n        return None;\n    }\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    Some(format!(\"{:x}\", result))", "  \
    \  if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    return Some(m.result_str());", "    if text.is_empty()\
    \ {\n        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.input_str(&text);\n\
    \    let result = md5.result_str();\n    return Some(result);", "    if text.is_empty()\
    \ {\n        return None;\n    }\n    Some(md5::compute(text).to_string())", " \
    \   if text.is_empty() {\n        return None;\n    }\n    let mut hasher = Md5::new();\n\
    \    hasher.input(text.as_bytes());\n    let result = hasher.result();\n    let\
    \ result_str = format!(\"{:x}\", result);\n    Some(result_str)", "    if text.is_empty()\
    \ {\n        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.input_str(&text);\n\
    \    Some(md5.result_str())", "    if text.is_empty() {\n        return None;\n\
    \    }\n    let digest = md5::compute(text);\n    let digest_str = format!(\"\
    {:x}\", digest);\n    Some(digest_str)", "    let result = md5::compute(text);\n\
    \    let md5_hash = format!(\"{:x}\", result);\n    if md5_hash.is_empty() {\n\
    \        None\n    } else {\n        Some(md5_hash)\n    }", "    if text.is_empty()\
    \ {\n        return None;\n    }\n    let hash = md5::compute(text);\n    Some(format!(\"\
    {:x}\", hash))", "    if text.is_empty() {\n        return None;\n    }\n    let\
    \ digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))", "    if\
    \ text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())"]
stop_tokens:
- "\n}"
