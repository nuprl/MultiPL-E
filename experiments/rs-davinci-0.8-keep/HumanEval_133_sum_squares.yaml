name: HumanEval_133_sum_squares
language: rs
prompt: "/// You are given a list of numbers.\n/// You need to return the sum of squared\
  \ numbers in the given list,\n/// round each element in the list to the upper int(Ceiling)\
  \ first.\n/// Examples:\n/// For lst = [1,2,3] the output should be 14\n/// For\
  \ lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7] the output should\
  \ be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n/// For lst = [-2.4,1,1]\
  \ the output should be 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
  \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
  \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n \
  \   assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
  \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n\
  \    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
  \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
  \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
completions: ['    lst.iter().map(|x| ((x.ceil() as isize).pow(2))).sum()', '    lst.iter().map(|x|
    (x.ceil() as isize).pow(2)).sum()', "    let mut sum = 0;\n    for item in lst\
    \ {\n        sum += (item.ceil() as isize).pow(2);\n    }\n    sum", '    unimplemented!();',
  '    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()', '    return lst.iter().map(|v|
    (v.ceil() as isize).pow(2)).sum();', "    let mut sum = 0;\n    for i in lst {\n\
    \        sum += (i.ceil() as isize).pow(2);\n    }\n    sum", "    // your code\
    \ here\n    0", '    lst.iter().map(|&x| (x.ceil() as isize).pow(2)).sum()', '    lst.iter().map(|&x|
    ((x + 0.5).ceil() as isize).pow(2)).sum()', "    let mut sum = 0;\n    for num\
    \ in lst {\n        sum += (num.ceil() as isize).pow(2);\n    }\n    sum", " \
    \   let mut square_sum = 0;\n    for element in lst {\n        square_sum += (element.ceil()\
    \ as isize).pow(2);\n    }\n    square_sum", "    let lst: Vec<isize> = lst.iter().map(|x|\
    \ (x.ceil() as isize).pow(2)).collect();\n    lst.iter().sum()", "    let mut\
    \ sum: isize = 0;\n    for i in lst {\n        let x = i.ceil() as isize;\n  \
    \      sum += x * x;\n    }\n    sum", "    let mut squared_list: Vec<f64> = Vec::new();\n\
    \    let mut sum: f64 = 0.0;\n    for element in lst {\n        squared_list.push(element.ceil().powi(2));\n\
    \    }\n    for element in squared_list {\n        sum += element;\n    }\n  \
    \  return sum as isize;", "    let mut ret: isize = 0;\n    for i in lst {\n \
    \       let tmp = i.ceil() as isize;\n        ret += tmp * tmp;\n    }\n    ret",
  "    let mut sum = 0;\n    for i in 0..lst.len() {\n        sum += (lst[i].ceil()\
    \ as isize).pow(2);\n    }\n    sum", "    let lst_ceil: Vec<f64> = lst.iter().map(|x|\
    \ x.ceil()).collect();\n    let mut sum = 0;\n    for elem in lst_ceil {\n   \
    \     sum += elem.powi(2) as isize;\n    }\n    sum", '    unimplemented!();',
  "    let v = lst.iter().map(|x| x.ceil() as isize).collect::<Vec<isize>>();\n  \
    \  v.iter().map(|x| x.pow(2)).sum()"]
stop_tokens:
- "\n}"
