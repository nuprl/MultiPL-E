name: HumanEval_88_sort_array
language: rs
prompt: "/// Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n/// you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n/// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n/// Note:\n/// * don't\
  \ change the given array.\n/// Examples:\n/// * sort_array([]) => []\n/// * sort_array([5])\
  \ => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n/// * sort_array([2,\
  \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
  \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2, 4,\
  \ 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
  \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
  \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
  \ 21, 14, 11]);\n}\n"
completions: ["    let mut output = array.clone();\n    output.sort();\n    let sum\
    \ = output[0] + output[output.len() - 1];\n    if sum % 2 == 0 {\n        output.reverse();\n\
    \    }\n    output", "    let mut res = array.clone();\n    if res.len() < 2 {\n\
    \        return res;\n    }\n    if (res[0] + res[res.len() - 1]) % 2 == 0 {\n\
    \        res.sort_by(|a, b| b.cmp(a));\n    } else {\n        res.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    res", "    if array.len() == 0 {\n        return vec![];\n\
    \    }\n\n    let sum = array[0] + array[array.len() - 1];\n    let mut sorted_array\
    \ = array.clone();\n    sorted_array.sort();\n\n    if sum % 2 == 0 {\n      \
    \  sorted_array.reverse();\n    }\n\n    sorted_array", "    let mut array = array;\n\
    \    let sum = array[0] + array[array.len() - 1];\n    if sum % 2 == 0 {\n   \
    \     array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    let sum: isize = array.first().unwrap()\
    \ + array.last().unwrap();\n    let mut result = array.clone();\n    result.sort();\n\
    \    if sum % 2 == 0 {\n        result.reverse();\n    }\n    result", "    //\
    \ TODO\n    let mut array = array;\n    if array.len() > 0 {\n        let mut\
    \ sorted_array = array.clone();\n        sorted_array.sort();\n        if (array[0]\
    \ + array[array.len() - 1]) % 2 == 0 {\n            sorted_array.reverse();\n\
    \        }\n        array = sorted_array;\n    }\n    array", "    let mut array\
    \ = array;\n    match array.len() {\n        0 => array,\n        1 => array,\n\
    \        len => {\n            match array[0] + array[len - 1] {\n           \
    \     i if i % 2 == 0 => {\n                    array.sort_by(|a, b| b.cmp(a));\n\
    \                    array\n                }\n                _ => {\n      \
    \              array.sort_by(|a, b| a.cmp(b));\n                    array\n  \
    \              }\n            }\n        }\n    }", "    if array.len() == 0 {\n\
    \        return vec![];\n    }\n    let a = array[0];\n    let b = array[array.len()\
    \ - 1];\n    let mut array = array;\n    array.sort_by(|x, y| if a + b % 2 ==\
    \ 0 { y.cmp(x) } else { x.cmp(y) });\n    array", "    let mut new_array = array.clone();\n\
    \    if array.len() == 0 {\n        return vec![];\n    }\n    if (array[0] +\
    \ array[array.len() - 1]) % 2 == 0 {\n        new_array.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        new_array.sort_by(|a, b| a.cmp(b));\n    }\n    new_array",
  "    let mut copy = array.clone();\n    copy.sort();\n    if array.len() > 0 &&\
    \ (array[0] + array[array.len() - 1]) % 2 == 0 {\n        copy.reverse();\n  \
    \  }\n    copy", "    let mut res = array.clone();\n    if array.len() > 1 {\n\
    \        res.sort_by(|a, b| if (a + b) % 2 == 0 { b.cmp(a) } else { a.cmp(b) });\n\
    \    }\n    res", "    if array.len() == 0 {\n        return vec![];\n    }\n\
    \    let &first = array.first().unwrap();\n    let &last = array.last().unwrap();\n\
    \    let copy = array.clone();\n    if (first + last) % 2 == 0 {\n        copy.sort_by(|x,\
    \ y| y.cmp(x));\n    } else {\n        copy.sort_by(|x, y| x.cmp(y));\n    }\n\
    \    copy", "    let mut sorted_vec = array.clone();\n    let mut index = 0;\n\
    \    let vec_len = sorted_vec.len();\n    let iter_count = vec_len / 2;\n    while\
    \ index < iter_count {\n        let first_index = index;\n        let last_index\
    \ = vec_len - index - 1;\n        if vec_len % 2 == 0 || index + 1 != iter_count\
    \ {\n            sorted_vec.swap(first_index, last_index);\n        }\n      \
    \  index += 1;\n    }\n    sorted_vec", "    let len = array.len();\n    if len\
    \ == 0 {\n        return vec![];\n    }\n    if len == 1 {\n        return array;\n\
    \    }\n    let sum = array[0] + array[len - 1];\n    let mut res = array.clone();\n\
    \    if sum % 2 == 0 {\n        res.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        res.sort_by(|a, b| a.cmp(b));\n    }\n    res", "    let mut array =\
    \ array;\n    let mut first = array.first().unwrap();\n    let mut last = array.last().unwrap();\n\
    \    if (*first + *last) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", " \
    \   let len = array.len();\n    let mut new_array = array.clone();\n    let sum\
    \ = array[0] + array[len - 1];\n    if sum % 2 == 0 {\n        new_array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        new_array.sort_by(|a, b| a.cmp(b));\n \
    \   }\n    new_array", "    let mut array = array;\n    let length = array.len();\n\
    \    if length == 0 {\n        return vec![];\n    }\n    if length == 1 {\n \
    \       return array;\n    }\n    let sum = array[0] + array[length - 1];\n  \
    \  if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    if array.len()\
    \ < 2 {\n        return array;\n    }\n    let mut array = array;\n    let (mut\
    \ lo, mut hi) = (0, array.len() - 1);\n    while lo < hi {\n        if array[lo]\
    \ % 2 == 1 {\n            lo += 1;\n        } else if array[hi] % 2 == 0 {\n \
    \           hi -= 1;\n        } else {\n            array.swap(lo, hi);\n    \
    \    }\n    }\n    let (mut odd, mut even) = (0, lo);\n    while odd < lo && even\
    \ < array.len() {\n        if array[odd] > array[even] {\n            array.swap(odd,\
    \ even);\n        }\n        odd += 2;\n        even += 2;\n    }\n    array",
  "    let mut array = array;\n    let total_index = array.len() - 1;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut min = 0;\n    let mut max = 0;\n   \
    \ while i < total_index {\n        while j < total_index {\n            if array[j]\
    \ > array[j + 1] {\n                max = array[j];\n                array[j]\
    \ = array[j + 1];\n                array[j + 1] = max;\n            }\n      \
    \      j += 1;\n        }\n        i += 1;\n        j = 0;\n    }\n    if (array[0]\
    \ + array[total_index]) % 2 == 0 {\n        while i < total_index {\n        \
    \    min = array[i];\n            array[i] = array[total_index - i];\n       \
    \     array[total_index - i] = min;\n            i += 1;\n        }\n    }\n \
    \   array", "    if array.len() < 2 {\n        return array;\n    }\n    let mut\
    \ arr = array.clone();\n    let mut even = true;\n    if (arr[0] + arr[arr.len()\
    \ - 1]) % 2 == 0 {\n        even = false;\n    }\n    arr.sort_by(|a, b| if even\
    \ { b.cmp(a) } else { a.cmp(b) });\n    arr"]
stop_tokens:
- "\n}"
