name: HumanEval_152_compare
language: rs
prompt: "/// I think we all remember that feeling when the result of some long-awaited\n\
  /// event is finally known. The feelings and thoughts you have at that moment are\n\
  /// definitely worth noting down and comparing.\n/// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n/// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n/// Return an array of the same length denoting how far off each guess was.\
  \ If they have guessed correctly,\n/// the value is 0, and if not, the value is\
  \ the absolute difference between the guess and the score.\n/// example:\n/// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
  \ -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
  fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
  \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
  \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
completions: ["    let mut res = Vec::with_capacity(game.len());\n    for (i, j) in\
    \ game.iter().zip(guess.iter()) {\n        res.push(i - j);\n    }\n    res",
  "    let mut result = Vec::new();\n    for i in 0..game.len() {\n        let mut\
    \ diff = (game[i] - guess[i]).abs();\n        if diff == 0 {\n            diff\
    \ = 0;\n        }\n        result.push(diff);\n    }\n    result", '  game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut result = Vec::with_capacity(game.len());\n\
    \    for i in 0..game.len() {\n        result.push(game[i] - guess[i]).abs();\n\
    \    }\n    result", "    let mut result: Vec<isize> = Vec::new();\n    for (i,j)\
    \ in game.iter().zip(guess.iter()) {\n        result.push( (i-j).abs() );\n  \
    \  }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (*a - *b).abs()).collect()',
  "  let mut res: Vec<isize> = Vec::new();\n  for i in 0..game.len() {\n    res.push(f64::abs(game[i]\
    \ as f64 - guess[i] as f64) as isize);\n  }\n  res", "    if game.len() != guess.len()\
    \ {\n        return vec![];\n    }\n    let mut res = Vec::new();\n    for (g,\
    \ q) in game.iter().zip(guess.iter()) {\n        res.push(q - g);\n    }\n   \
    \ res", '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()',
  "    let mut cmp: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n     \
    \   if game[i] == guess[i] {\n            cmp.push(0);\n        } else {\n   \
    \         cmp.push((game[i] - guess[i]).abs());\n        }\n    }\n    cmp", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (*a - *b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (*a - *b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)| (x
    - y).abs()).collect()', '  game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()',
  "    if game.len() != guess.len() { return vec![]; }\n    game.iter().zip(guess.iter()).map(|(&a,\
    \ &b)| (a - b).abs()).collect()", "    let mut score = Vec::new();\n    for i\
    \ in 0..game.len() {\n        score.push(cmp::max(game[i], guess[i]) - cmp::min(game[i],\
    \ guess[i]));\n    }\n    score", "    let mut result = Vec::new();\n    for (i,\
    \ _) in game.iter().enumerate() {\n        result.push(guess[i] - game[i]);\n\
    \    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    if game.len() != guess.len() {\n        panic!(\"Inequal lengths\");\n    }\n\
    \    let mut errors = Vec::with_capacity(game.len());\n    for (idx, _) in game.iter().enumerate()\
    \ {\n        errors.push(\n            (game[idx] - guess[idx]).abs()\n      \
    \  );\n    }\n    errors", "    // your code here\n    let mut score = vec![];\n\
    \    for (i, g) in game.iter().enumerate() {\n        if g > &guess[i] {\n   \
    \         score.push(g - &guess[i]);\n        } else {\n            score.push(&guess[i]\
    \ - g);\n        }\n    }\n    score"]
stop_tokens:
- "\n}"
