language: rs
name: HumanEval_67_fruit_distribution
results:
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n\tlet mut num_of_fruit: isize = 0;\n\tfor s in s.split(\" \") {\n\t\tif s.contains(\"\
    apple\") {\n\t\t\tlet num_of_apple: String = s.chars().filter(|x| x.is_numeric()).collect();\n\
    \t\t\tnum_of_fruit += num_of_apple.parse::<isize>().unwrap();\n\t\t}\n\t\tif s.contains(\"\
    orange\") {\n\t\t\tlet num_of_orange: String = s.chars().filter(|x| x.is_numeric()).collect();\n\
    \t\t\tnum_of_fruit += num_of_orange.parse::<isize>().unwrap();\n\t\t}\n\t}\n\t\
    return n - num_of_fruit;\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: Empty }'', /tmp/tmpnthovtka.rs:16:59

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    let mut total_fruits = n;\n    let mut apples = 0;\n    let mut oranges\
    \ = 0;\n    for word in s.split_whitespace() {\n        if word.starts_with(\"\
    a\") {\n            total_fruits -= apples;\n        } else if word.starts_with(\"\
    o\") {\n            total_fruits -= oranges;\n        } else {\n            let\
    \ num = word.parse::<isize>().unwrap();\n            if word.ends_with(\"apples\"\
    ) {\n                apples = num;\n            } else {\n                oranges\
    \ = num;\n            }\n        }\n    }\n    total_fruits\n}\n\nfn main() {\n\
    \    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `8`', /tmp/tmp4j1hwf50.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822662
- exit_code: 0
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    let mut total = n;\n    let mut s = s.split_whitespace();\n    for item\
    \ in s {\n        if let Ok(number) = item.parse::<isize>() {\n            total\
    \ -= number;\n        }\n    }\n    total\n}\n\nfn main() {\n    let candidate\
    \ = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples and\
    \ 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 100 oranges\"), 120), 19);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    let mut n_apples = 0;\n    let mut n_oranges = 0;\n    for word in s.split_whitespace()\
    \ {\n        if word.contains(\"apples\") {\n            n_apples = word.to_string().parse::<isize>().unwrap();\n\
    \        }\n        if word.contains(\"oranges\") {\n            n_oranges = word.to_string().parse::<isize>().unwrap();\n\
    \        }\n    }\n    n - n_apples - n_oranges\n}\n\nfn main() {\n    let candidate\
    \ = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples and\
    \ 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 100 oranges\"), 120), 19);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpw4u_ls3x.rs:16:58

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822662
- exit_code: 1
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    let re = Regex::new(r\"(?P<num>\\d+)\\s(?P<fruit>\\w+)\").unwrap();\n\
    \    let mut sum = 0;\n    for cap in re.captures_iter(&s) {\n        sum += cap[\"\
    num\"].parse::<isize>().unwrap();\n    }\n    n - sum\n}\n\nfn main() {\n    let\
    \ candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples\
    \ and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples\
    \ and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples\
    \ and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples\
    \ and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples\
    \ and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples\
    \ and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples\
    \ and 100 oranges\"), 120), 19);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n  -->\
    \ /tmp/tmpmk325tbp.rs:12:14\n   |\n12 |     let re = Regex::new(r\"(?P<num>\\\
    d+)\\s(?P<fruit>\\w+)\").unwrap();\n   |              ^^^^^ use of undeclared\
    \ type `Regex`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3r1cewrz.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    let mut apple_count = 0;\n    let mut orange_count = 0;\n    let mut\
    \ mango_count = 0;\n    let mut split_string: Vec<&str> = s.split_whitespace().collect();\n\
    \    if split_string[0].parse::<isize>().is_ok() {\n        apple_count = split_string[0].parse::<isize>().unwrap();\n\
    \    }\n    if split_string[2].parse::<isize>().is_ok() {\n        orange_count\
    \ = split_string[2].parse::<isize>().unwrap();\n    }\n    mango_count = n - apple_count\
    \ - orange_count;\n    return mango_count;\n}\n\nfn main() {\n    let candidate\
    \ = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples and\
    \ 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 100 oranges\"), 120), 19);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `8`', /tmp/tmpf28i3j0o.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpz5l673sj.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822662
- exit_code: 0
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    let mut iter = s.split_whitespace();\n    let num_apples = iter.next().unwrap().parse::<isize>().unwrap();\n\
    \    let num_oranges = iter.nth(2).unwrap().parse::<isize>().unwrap();\n    n\
    \ - num_apples - num_oranges\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3r1cewrz.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822662
- exit_code: -1
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    let mut n = n;\n    let mut i = 0;\n    while s.get(i..i+5) != Some(\"\
    \ apples\"){\n        i+=1;\n    }\n    let s = &s[..i];\n    let mut i = 0;\n\
    \    while s.get(i..i+1) != Some(\"a\"){\n        n -= s.get(i..i+1).unwrap().parse::<isize>().unwrap();\n\
    \        i+=1;\n    }\n    return n;\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822667
- exit_code: 0
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    // unimplemented!(\"The number of mango fruits in a basket that contains\
    \ {} total fruits, {}.\", s, n)\n    // let fruit_count = s.split(\" and \").map(|s|\
    \ s.split(\" \").nth(0).unwrap().parse::<isize>().unwrap()).collect::<Vec<isize>>();\n\
    \    // n - fruit_count[0] - fruit_count[1]\n    n - s.split(\" and \").map(|s|\
    \ s.split(\" \").nth(0).unwrap().parse::<isize>().unwrap()).sum::<isize>()\n}\n\
    \nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n  let n_apples: isize = s.chars().take_while(|c| c.is_digit(10)).collect::<String>().parse().unwrap();\n\
    \  let n_oranges: isize = s.chars().skip_while(|c| c.is_alphabetic()).skip_while(|c|\
    \ c.is_whitespace()).take_while(|c| c.is_digit(10)).collect::<String>().parse().unwrap();\n\
    \  n - n_apples - n_oranges\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `8`', /tmp/tmphk9_n2y2.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpz5l673sj.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    // Write your code here\n    unimplemented!()\n}\n\nfn main() {\n   \
    \ let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpp7unirgj.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    // Write your code here\n    unimplemented!();\n}\n\nfn main() {\n  \
    \  let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpunn7tn3s.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    \n    let mut arr: Vec<&str> = s.split(\" \").collect();\n    let mut\
    \ num = 0;\n    for i in 0..arr.len()\n    {\n        if i % 2 == 0\n        {\n\
    \            if arr[i].parse::<isize>().is_ok()\n            {\n             \
    \   num += arr[i].parse::<isize>().unwrap();\n            }\n        }\n    }\n\
    \    n - num\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `8`', /tmp/tmpgwjpjx2y.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822662
- exit_code: 1
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    // Write your code here\n    let mut v: Vec<isize> = Vec::new();\n  \
    \  let mut index = 0;\n    let mut temp = \"\";\n    for i in s.split_whitespace()\
    \ {\n        let num: isize = i.parse().unwrap();\n        v.push(num);\n    \
    \    temp = temp + &v[index].to_string() + \" \";\n        index += 1;\n    }\n\
    \    let mut vec: Vec<&str> = temp.split(\" and \").collect();\n    let num1:\
    \ isize = vec[0].parse().unwrap();\n    let num2: isize = vec[1].parse().unwrap();\n\
    \    n - num1 - num2\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&String` to `&str`\n  --> /tmp/tmpu9nrmzqo.rs:19:21\n\
    \   |\n19 |         temp = temp + &v[index].to_string() + \" \";\n   |       \
    \         ---- ^ --------------------- &String\n   |                |    |\n \
    \  |                |    `+` cannot be used to concatenate two `&str` strings\n\
    \   |                &str\n   |\nhelp: `to_owned()` can be used to create an owned\
    \ `String` from a string reference. String concatenation appends the string on\
    \ the right to the string on the left and may require reallocation. This requires\
    \ ownership of the string on the left\n   |\n19 |         temp = temp.to_owned()\
    \ + &v[index].to_string() + \" \";\n   |                ~~~~~~~~~~~~~~~\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822662
- exit_code: 101
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    let mut splitted = s.split(\" \");\n    let apples = splitted.next().unwrap().parse::<isize>().unwrap();\n\
    \    let oranges = splitted.next().unwrap().parse::<isize>().unwrap();\n    n\
    \ - apples - oranges\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpe1p_rp1b.rs:14:61

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822662
- exit_code: 0
  program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) ->19 - 5 - 6 = 8\n/// fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) -> 3 - 0 - 1 = 2\n/// fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) -> 100 - 2 - 3 = 95\n/// fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) -> 120 - 100 - 1 = 19\nfn fruit_distribution(s: String, n: isize) -> isize\
    \ {\n    if s.contains(\"and\"){\n        let part1: Vec<&str> = s.split(\" and\
    \ \").collect();\n        let part2: Vec<&str> = part1[0].split(\" \").collect();\n\
    \        let part3: Vec<&str> = part1[1].split(\" \").collect();\n        n -\
    \ part2[0].parse::<isize>().unwrap() - part3[0].parse::<isize>().unwrap()\n  \
    \  }else{\n        let part1: Vec<&str> = s.split(\" \").collect();\n        n\
    \ - part1[0].parse::<isize>().unwrap() - part1[2].parse::<isize>().unwrap()\n\
    \    }\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822662
