language: rs
name: HumanEval_98_count_upper
results:
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    s.char_indices()\n        .filter(|&(idx, c)| idx % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpuaszq6jm.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823090
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut total: isize = 0;\n    for (idx, c) in s.chars().enumerate()\
    \ {\n        if idx % 2 == 0 && c.is_uppercase() {\n            total += 1;\n\
    \        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpir_z86t8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823090
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    // TODO implement this function\n    let mut vowel = 0;\n    for (i,c)\
    \ in s.chars().enumerate() {\n        if (i % 2) == 0 && c.is_uppercase() && (c=='A'\
    \ || c=='E' || c=='I' || c=='O' || c=='U') {\n            vowel += 1;\n      \
    \  }\n    }\n    vowel\n}\n\nfn main() {\n    let candidate = count_upper;\n \
    \   assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823090
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    s.chars().enumerate().fold(0, |acc, (i, c)| {\n        if i % 2 == 0\
    \ && is_upper_vowel(c) {\n            acc + 1\n        } else {\n            acc\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper_vowel` in this scope\n -->\
    \ /tmp/tmpur111i3v.rs:8:26\n  |\n8 |         if i % 2 == 0 && is_upper_vowel(c)\
    \ {\n  |                          ^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n\
    \    let mut i = 0;\n    for c in s.chars() {\n        if vowels.contains(&c)\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n        i += 1;\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823090
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut result = 0;\n    let mut current_index = 0;\n    for letter in\
    \ s.chars() {\n        if letter.is_uppercase() && current_index % 2 == 0 {\n\
    \            result += 1;\n        }\n        current_index += 1;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp18p7b4nn.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823090
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n  // YOUR CODE HERE\n  if s.len() == 0 {\n    return 0;\n  }\n  let mut counter\
    \ = 0;\n  for (i, ch) in s.chars().enumerate() {\n    if i % 2 == 0 && ch.is_uppercase()\
    \ {\n      counter += 1;\n    }\n  }\n  counter\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpvwhxc1d3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823090
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    s.chars().enumerate().fold(0, |acc, (i, c)| {\n        if i % 2 == 0\
    \ && c.is_uppercase() {\n            acc + 1\n        } else {\n            acc\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpb6w00cc7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823090
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxkvq8zn0.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823090
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    s.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpqxavh2ej.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823090
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut sum = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for\
    \ (idx, c) in s.chars().enumerate() {\n        if idx % 2 == 0 && vowels.contains(&c)\
    \ {\n            sum += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")),\
    \ 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823090
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    // YOUR CODE HERE\n    0\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp0kyp_wxz.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823090
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    s.chars().enumerate().filter(|&(i, c)| i % 2 == 0 && is_upper(c)).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper` in this scope\n --> /tmp/tmpfcbxsfgl.rs:7:58\n\
    \  |\n7 |     s.chars().enumerate().filter(|&(i, c)| i % 2 == 0 && is_upper(c)).count()\
    \ as isize\n  |                                                          ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let characters: Vec<char> = s.chars().collect();\n\
    \    for (index, character) in characters.iter().enumerate() {\n        if index\
    \ % 2 == 0 && is_upper(character) {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_upper` in this scope\n  --> /tmp/tmp3vbmr293.rs:10:30\n\
    \   |\n10 |         if index % 2 == 0 && is_upper(character) {\n   |         \
    \                     ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    s.chars().enumerate().fold(0, |acc, (i, c)| match c {\n        'A' |\
    \ 'E' | 'I' | 'O' | 'U' => if i % 2 == 0 { acc + 1 } else { acc },\n        _\
    \ => acc,\n    })\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823090
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    // Write a function body here\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpew7atpfg.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823090
- exit_code: 0
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n   \
    \ let c: Vec<char> = s.chars().collect();\n    for i in 0..c.len() {\n       \
    \ if i % 2 == 0 && vowels.contains(&c[i]) {\n            count += 1;\n       \
    \ }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n  \
    \  assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823090
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    s.chars().enumerate().filter(|&(i, c)| i % 2 == 0 && c.is_uppercase()).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpnkd038ml.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823090
- exit_code: 1
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    s.chars().enumerate().fold(0, |acc, (i, ch)| {\n        if i % 2 == 0\
    \ && vowels.contains(&ch) {\n            acc + 1\n        } else {\n         \
    \   acc\n        }\n    })\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n --> /tmp/tmpu1pb3stq.rs:8:26\n\
    \  |\n8 |         if i % 2 == 0 && vowels.contains(&ch) {\n  |               \
    \           ^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659823089
- exit_code: 101
  program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxkvq8zn0.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823090
