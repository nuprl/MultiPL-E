language: rs
name: HumanEval_97_multiply
results:
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    let mut a_unit_digit = 0;\n    let mut b_unit_digit = 0;\n\
    \    while a > 9 {\n        a = a / 10;\n    }\n    while b > 9 {\n        b =\
    \ b / 10;\n    }\n    a_unit_digit = a;\n    b_unit_digit = b;\n    a_unit_digit\
    \ * b_unit_digit\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `16`', /tmp/tmp223yvohh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let digits: Vec<isize>\
    \ = vec![a, b];\n    let res: isize = digits.iter().fold(1, |acc, x| acc * (x\
    \ % 10));\n    res\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp9d47ltim.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmprhk41392.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    a.abs() * b.abs() % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpm9g2jblj.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmprhk41392.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  a.abs() * b.abs() % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpks1f5qj0.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    ((a % 10) * (b % 10)) as\
    \ isize\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpe5x9t0a6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() * b.abs()) % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpe1iecb96.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 0
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let (a, b) = (a.abs(),\
    \ b.abs());\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmprhk41392.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmprhk41392.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    // TODO\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe9neue9m.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a_unit_digit = a %\
    \ 10;\n    let b_unit_digit = b % 10;\n    a_unit_digit * b_unit_digit\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpohkumta2.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut product = a * b;\n\
    \    let mut a = a.abs();\n    let mut b = b.abs();\n    while a > 9 {\n     \
    \   a /= 10;\n    }\n    while b > 9 {\n        b /= 10;\n    }\n    product =\
    \ a * b;\n    product\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `16`', /tmp/tmp69e4f2cg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
