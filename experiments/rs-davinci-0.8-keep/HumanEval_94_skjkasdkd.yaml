name: HumanEval_94_skjkasdkd
language: rs
prompt: "/// You are given a list of integers.\n/// You need to find the largest prime\
  \ value and return the sum of its digits.\n/// Examples:\n/// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n/// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n/// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n/// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n/// For lst = [0,81,12,3,1,21] the output should be 3\n///\
  \ For lst = [0,8,1,2,1,7] the output should be 7\nfn skjkasdkd(lst: Vec<isize>)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
  \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
  \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
  \ 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0, 724,\
  \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
  \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
  \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
  \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
  }\n"
completions: ["    let mut p = 2;\n    let mut v = 0;\n    let mut b = 0;\n    let\
    \ mut d = 2;\n    let m = lst.iter().max().unwrap().to_string();\n    while p\
    \ <= *lst.iter().max().unwrap() {\n        if lst.iter().filter(|x| **x == p).count()\
    \ == 0 {\n            p += 1;\n            continue;\n        }\n        let i\
    \ = lst.iter().filter(|x| **x == p).count();\n        if i < d {\n           \
    \ d = i;\n            b = p;\n        }\n        if i > v {\n            v = i;\n\
    \        }\n        p += 1;\n    }\n    if b == 0 {\n        d = 2;\n        for\
    \ p in 0..m.len() {\n            let i = lst.iter().filter(|x| **x == m[p..=p].parse::<isize>().unwrap()).count();\n\
    \            if i < d {\n                d = i;\n                b = m[p..=p].parse::<isize>().unwrap();\n\
    \            }\n            if i > v {\n                v = i;\n            }\n\
    \        }\n    }\n    if v == 0 {\n        return 0;\n    }\n    let c = b.to_string();\n\
    \    c.chars().map(|x| x.to_digit(10).unwrap() as isize).sum()", "    let mut\
    \ lst = lst;\n    let mut primes = vec![2];\n    'outer: loop {\n        let mut\
    \ all_passed = true;\n        'inner: for i in 0..lst.len() {\n            if\
    \ lst[i] % primes[0] == 0 {\n                lst[i] /= primes[0];\n          \
    \      if is_prime(lst[i]) {\n                    all_passed = false;\n      \
    \              break 'outer;\n                }\n            } else {\n      \
    \          all_passed = false;\n            }\n        }\n        if all_passed\
    \ {\n            lst.sort();\n            lst.dedup();\n            break;\n \
    \       }\n        primes.push(get_next_prime(primes[primes.len() - 1]));\n  \
    \  }\n    let mut result = 0;\n    for i in 0..lst.len() {\n        result +=\
    \ sum_digits(lst[i]);\n    }\n    result", "    let mut result = 0;\n    for n\
    \ in lst {\n        if n > result && n.is_prime() {\n            result = n;\n\
    \        }\n    }\n    result.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum()", "    let mut primes = vec![];\n    for i in lst {\n      \
    \  let mut prime = true;\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                prime = false;\n                break;\n            }\n     \
    \   }\n        if prime && i != 1 {\n            primes.push(i);\n        }\n\
    \    }\n    let mut max = 0;\n    for x in primes {\n        if x > max {\n  \
    \          max = x;\n        }\n    }\n    let mut sum = 0;\n    while max > 0\
    \ {\n        sum += max % 10;\n        max /= 10;\n    }\n    sum", "    let mut\
    \ max = 0;\n    for num in lst {\n        if is_prime(num) && num > max {\n  \
    \          max = num;\n        }\n    }\n    let mut sum = 0;\n    let mut n =\
    \ max;\n    while n > 0 {\n        sum += n % 10;\n        n /= 10;\n    }\n \
    \   sum", '    return find_largest_prime(largest_num(lst)).into_iter().sum();',
  "    let mut ret = 0;\n    for i in lst {\n        if is_prime(i) {\n          \
    \  ret = i;\n        }\n    }\n    let mut ret = ret.to_string();\n    let mut\
    \ ret = ret.chars().map(|s| s.to_digit(10).unwrap()).collect::<Vec<u32>>();\n\
    \    ret.iter().sum()", "    let mut out: isize = 0;\n    let mut max: isize =\
    \ 0;\n    let mut max_digit: isize = 0;\n    let mut prime: bool = true;\n   \
    \ for i in 0..lst.len() {\n        prime = true;\n        for j in 0..lst.len()\
    \ {\n            if lst[i] == lst[j] {\n                prime = false;\n     \
    \       }\n        }\n        for k in 2..lst[i] {\n            if lst[i] % k\
    \ == 0 {\n                prime = false;\n            }\n        }\n        if\
    \ prime == true {\n            out = lst[i];\n            if out > max {\n   \
    \             max = out;\n            }\n        }\n    }\n    for i in 0..max.to_string().len()\
    \ {\n        if max.to_string().chars().nth(i).unwrap().to_digit(10).unwrap()\
    \ as isize > max_digit {\n            max_digit = max.to_string().chars().nth(i).unwrap().to_digit(10).unwrap()\
    \ as isize;\n        }\n    }\n    max_digit", '    lst.iter().filter(|&x| is_prime(*x)).max().unwrap().to_string().chars().map(|x|
    x.to_digit(10).unwrap() as isize).sum()', "  let lst_len = lst.len();\n  for i\
    \ in (1..lst_len).rev() {\n    for j in 0..i {\n      if lst[j] < lst[j + 1] {\n\
    \        let temp = lst[j];\n        lst[j] = lst[j + 1];\n        lst[j + 1]\
    \ = temp;\n      }\n    }\n  }\n  let mut prime = lst[0];\n  if is_prime(prime)\
    \ == false {\n    prime = find_prime(prime);\n  }\n  return sum_digits(prime);",
  "    let mut lst = lst;\n    lst.sort();\n    lst.reverse();\n    for num in lst\
    \ {\n        if is_prime(num) {\n            return sum_of_digits(num);\n    \
    \    }\n    }\n    0", "    let mut v: Vec<isize> = Vec::new();\n    for val in\
    \ lst {\n        let mut hold = val;\n        while hold != 0 {\n            let\
    \ dig = hold % 10;\n            v.push(dig);\n            hold = hold / 10;\n\
    \        }\n    }\n    let mut v_set: HashSet<isize> = HashSet::new();\n    let\
    \ mut v_prime: HashSet<isize> = HashSet::new();\n    for val in v {\n        if\
    \ !v_set.contains(&val) {\n            v_set.insert(val);\n            let mut\
    \ div = 2;\n            let mut is_prime = true;\n            while div < val\
    \ {\n                if val % div == 0 {\n                    is_prime = false;\n\
    \                    break;\n                }\n                div += 1;\n  \
    \          }\n            if is_prime {\n                v_prime.insert(val);\n\
    \            }\n        }\n    }\n    let mut max_prime = 0;\n    for val in v_prime\
    \ {\n        if val > max_prime {\n            max_prime = val;\n        }\n \
    \   }\n    let mut ret = 0;\n    while max_prime != 0 {\n        let dig = max_prime\
    \ % 10;\n        ret += dig;\n        max_prime = max_prime / 10;\n    }\n   \
    \ ret", "    let prime = get_max_prime(&lst);\n    sum_digits(prime)", "    let\
    \ mut v = Vec::new();\n    for x in lst {\n        if is_prime(x) {\n        \
    \    v.push(x);\n        }\n    }\n    let mut max: isize = 0;\n    for x in v\
    \ {\n        if x > max {\n            max = x;\n        }\n    }\n    max = max.abs();\n\
    \    let mut sum: isize = 0;\n    while max > 0 {\n        sum += max % 10;\n\
    \        max /= 10;\n    }\n    sum", "    let p: isize = lst.iter().filter(|x|\
    \ *x > &0 && *x % 2 != 0).fold(0, |m, x| m.max(*x));\n    let c: Vec<isize> =\
    \ p.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n\
    \    c.iter().fold(0, |s, x| s + x)", "    let mut max = 0;\n    for i in lst\
    \ {\n        let (min, _) = prime_factors(i);\n        if min > max {\n      \
    \      max = min;\n        }\n    }\n    digits_sum(max)", "    let mut result\
    \ = 0;\n    for i in lst {\n        if is_prime(i) {\n            result = i;\n\
    \        }\n    }\n    result.to_string().chars().map(|x| x.to_digit(10).unwrap()\
    \ as isize).sum()", "    let mut n = 1;\n    for i in lst {\n        n = n.checked_mul(i).unwrap_or(1);\n\
    \    }\n    let mut p = n;\n    for i in (2..(n + 1) / 2).rev() {\n        if\
    \ n % i == 0 {\n            p = i;\n            break;\n        }\n    }\n   \
    \ let mut sum = 0;\n    let mut n = p;\n    while n > 0 {\n        sum += n %\
    \ 10;\n        n /= 10;\n    }\n    sum", "    let s: String = lst.iter().map(|x|\
    \ x.to_string()).collect();\n    let mut n = s.parse::<usize>().unwrap();\n  \
    \  let mut prime_factors = Vec::new();\n    while n % 2 == 0 {\n        prime_factors.push(2);\n\
    \        n /= 2;\n    }\n    let mut m = 3;\n    while m * m <= n {\n        if\
    \ n % m == 0 {\n            prime_factors.push(m);\n            n /= m;\n    \
    \    } else {\n            m += 2;\n        }\n    }\n    if n > 2 {\n       \
    \ prime_factors.push(n);\n    }\n    let s: String = prime_factors.last().unwrap().to_string();\n\
    \    let mut sum = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap();\n\
    \    }\n    sum as isize", "    let mut res = 0;\n    let mut max = 0;\n    let\
    \ mut b = lst.clone();\n    b.sort();\n    for i in lst {\n        if i >= max\
    \ {\n            if i % 2 != 0 {\n                if i > max {\n             \
    \       res = 0;\n                }\n                if prime_num(i) {\n     \
    \               res += i;\n                    max = i;\n                }\n \
    \           }\n        }\n    }\n    let mut sum = 0;\n    for i in res.to_string().chars()\
    \ {\n        sum += i.to_digit(10).unwrap();\n    }\n    sum"]
stop_tokens:
- "\n}"
