name: HumanEval_121_solution
language: rs
prompt: "/// Given a non-empty list of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
  \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321]) ==>0\n\
  fn solution(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
  \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
  \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
  \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
  \ 13, 2, 9]), 3);\n}\n"
completions: ["    let mut result = 0;\n    for i in 0..lst.len() {\n        if lst[i]\
    \ % 2 != 0 && i % 2 == 0 {\n            result += lst[i];\n        }\n    }\n\
    \    result", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_,
    &v)| v % 2 != 0).map(|(_, &v)| v).sum()', "    let mut res = 0;\n    for (index,\
    \ el) in lst.iter().enumerate() {\n        if index % 2 == 0 && el % 2 != 0 {\n\
    \            res += el;\n        }\n    }\n    res", '    lst.iter().enumerate().filter(|(i,
    n)| n % 2 == 1 && i % 2 == 0).sum()', "    let mut r = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            r += v;\n        }\n \
    \   }\n    r", "    let mut result = 0;\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 && lst[i] % 2 != 0 {\n            result += lst[i];\n        }\n\
    \    }\n    result", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_,
    x)| x % 2 == 1).sum()', "    let mut sum = 0;\n    for (i, e) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && e % 2 != 0 {\n            sum += e;\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && item % 2 != 0 {\n            sum += item;\n    \
    \    }\n    }\n    sum", "    let mut sum = 0;\n    for (idx, elem) in lst.iter().enumerate()\
    \ {\n        if idx % 2 == 0 && elem % 2 != 0 {\n            sum += elem;\n  \
    \      }\n    }\n    sum", "  let mut sum = 0;\n  for i in 0..lst.len() {\n  \
    \  if lst[i] % 2 != 0 && i % 2 == 0 {\n      sum += lst[i];\n    }\n  }\n  sum",
  '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_, v)| v).sum()',
  "    let mut sum = 0;\n    for i in 0..lst.len() {\n        if lst[i] % 2 != 0 &&\
    \ i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum", '    return
    0;', '  lst.iter().enumerate().fold(0, |acc, (i, &x)| if i % 2 == 0 && x % 2 !=
    0 { acc + x } else { acc })', "    let mut sum = 0;\n    for i in 0..lst.len()\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i];\n\
    \        }\n    }\n    sum", '  lst.iter().enumerate().fold(0, |acc, (i, x)| if
    i % 2 == 0 && x % 2 != 0 { acc + x } else { acc })', "    let mut sum = 0;\n \
    \   for (i, val) in lst.iter().enumerate() {\n        if i % 2 == 0 && val % 2\
    \ != 0 {\n            sum += val;\n        }\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e\
    \ % 2 != 0 {\n            sum += e;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0\
    \ && v % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum"]
stop_tokens:
- "\n}"
