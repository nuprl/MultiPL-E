name: HumanEval_16_count_distinct_characters
language: rs
prompt: "/// Given a string, find out how many distinct characters (regardless of\
  \ case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n/// 3\n\
  /// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
  \ String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
  abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")),\
  \ 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n"
completions: ["    // your code here\n    0", '    unimplemented!()', "    let mut\
    \ chars: BTreeSet<char> = BTreeSet::new();\n    for c in string.chars() {\n  \
    \      chars.insert(c.to_lowercase().next().unwrap());\n    }\n    chars.len()\
    \ as isize", "    let mut count = HashMap::new();\n    for c in string.chars()\
    \ {\n        let cc = c.to_lowercase().to_string();\n        if !count.contains_key(&cc)\
    \ {\n            count.insert(cc, 1);\n        }\n    }\n    return count.len()\
    \ as isize;", "    let mut result: HashSet<char> = HashSet::new();\n    for letter\
    \ in string.chars() {\n        result.insert(letter.to_lowercase().to_string().chars().next().unwrap());\n\
    \    }\n    result.len() as isize", "    let mut char_map: HashMap<char, bool>\
    \ = HashMap::new();\n    for c in string.chars() {\n        char_map.insert(c.to_lowercase().next().unwrap(),\
    \ true);\n    }\n    char_map.len() as isize", "    let mut distinct_count: isize\
    \ = 0;\n    let lower_s = string.to_lowercase();\n    let chars: Vec<char> = lower_s.chars().collect();\n\
    \    for i in 0..chars.len() {\n        let mut seen = false;\n        for j in\
    \ 0..i {\n            if chars[i] == chars[j] {\n                seen = true;\n\
    \                break;\n            }\n        }\n        if !seen {\n      \
    \      distinct_count += 1;\n        }\n    }\n    distinct_count", "    let mut\
    \ chars: Vec<char> = Vec::new();\n    for c in string.chars() {\n        let mut\
    \ found = false;\n        for e in chars.iter() {\n            if e.to_lowercase().nth(0).unwrap()\
    \ == c.to_lowercase().nth(0).unwrap() {\n                found = true;\n     \
    \           break;\n            }\n        }\n        if !found {\n          \
    \  chars.push(c);\n        }\n    }\n    chars.len() as isize", "    let mut set\
    \ = HashSet::new();\n    let mut result = 0;\n    for c in string.chars() {\n\
    \        if set.insert(c.to_ascii_lowercase()) {\n            result += 1;\n \
    \       }\n    }\n    result", '    unimplemented!()', '    string.to_lowercase().chars().collect::<HashSet<char>>().len()
    as isize', "    // TODO\n    0", '    string.chars().collect::<HashSet<char>>().len()
    as isize', "    let mut count = 0;\n    let mut hm = HashMap::new();\n    for\
    \ c in string.chars() {\n        let c = c.to_ascii_lowercase();\n        let\
    \ c = c.to_string();\n        hm.insert(c, 1);\n    }\n    for (_, v) in hm {\n\
    \        count += v;\n    }\n    count", "    let mut counts = HashMap::new();\n\
    \    let string_lower = string.to_lowercase();\n    for c in string_lower.chars()\
    \ {\n        let count = counts.entry(c).or_insert(0);\n        *count += 1;\n\
    \    }\n    return counts.len() as isize;", "    let mut chars = HashSet::new();\n\
    \    for c in string.chars() {\n        chars.insert(c.to_ascii_lowercase());\n\
    \    }\n    chars.len() as isize", '    string.to_lowercase().chars().collect::<HashSet<char>>().len()
    as isize', "    let mut unique = HashSet::new();\n    for s in string.chars()\
    \ {\n        unique.insert(s.to_lowercase().collect::<String>());\n    }\n   \
    \ unique.len() as isize", "    let mut c_set: HashSet<char> = HashSet::new();\n\
    \    for s in string.chars() {\n        c_set.insert(s.to_lowercase().nth(0).unwrap());\n\
    \    }\n    c_set.len() as isize", "    let mut distinct_characters = vec![];\n\
    \    for c in string.to_lowercase().chars() {\n        if !distinct_characters.contains(&c)\
    \ {\n            distinct_characters.push(c);\n        }\n    }\n    distinct_characters.len()\
    \ as isize"]
stop_tokens:
- "\n}"
