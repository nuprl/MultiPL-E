name: HumanEval_44_change_base
language: rs
prompt: "/// Change numerical base of input number x to base.\n/// return string representation\
  \ after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(8,\
  \ 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n/// >>> change_base(7, 2)\n\
  /// '111'\nfn change_base(x: isize, base: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
  \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
  ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
  \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
  1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
  \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
  ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
  \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
  ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
completions: ["    let mut res = vec![];\n    let mut xx = x;\n    while xx > 0 {\n\
    \        res.push((xx % base) as u8);\n        xx /= base;\n    }\n    let res\
    \ = res.iter().map(|i| (b'0' + i) as char).collect::<String>();\n    res.chars().rev().collect::<String>()",
  "    let mut result = String::new();\n    let mut num = x;\n    while num > 0 {\n\
    \        result.push_str(&((num % base) as u8).to_string());\n        num /= base;\n\
    \    }\n    let result: String = result.chars().rev().collect();\n    result",
  "    if x < base {\n        return base.to_string();\n    }\n    let result = x\
    \ % base;\n    let quotient = x / base;\n    return change_base(quotient, base)\
    \ + &result.to_string();", "    let mut x = x;\n    let mut result = String::new();\n\
    \    while x > 0 {\n        let t = (x % base).to_string();\n        result.push_str(&t);\n\
    \        x /= base;\n    }\n    result", "    // TODO\n    \"\".to_string()",
  "    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n     \
    \   digits.push((x % base) as u8);\n        x /= base;\n    }\n    let digits:\
    \ String = digits.iter().rev().map(|&x| (x + 48) as char).collect();\n    if digits.is_empty()\
    \ {\n        \"0\".to_string()\n    } else {\n        digits\n    }", "    if\
    \ x == 0 {\n        \"0\".to_string()\n    } else {\n        let mut result =\
    \ String::new();\n        let mut n = x;\n        while n > 0 {\n            result.push_str(&(n\
    \ % base).to_string());\n            n /= base;\n        }\n        result.chars().rev().collect()\n\
    \    }", "  let mut result = Vec::new();\n  let mut remain = x;\n  while remain\
    \ > 0 {\n    result.push((remain % base).to_string());\n    remain /= base;\n\
    \  }\n  result.iter().rev().cloned().collect()", "    let mut num = x;\n    let\
    \ mut result = String::new();\n    loop {\n        let rem = num % base;\n   \
    \     result.push(to_digit(rem));\n        num = num / base;\n        if num ==\
    \ 0 {\n            break;\n        }\n    }\n    result.chars().rev().collect()",
  "    let mut res = String::new();\n    let mut x = x;\n    while x > 0 {\n     \
    \   res.push((x % base) as u8 + b'0');\n        x /= base;\n    }\n    res.chars().rev().collect()",
  "    let mut str = String::new();\n    let mut x = x;\n    while x > 0 {\n     \
    \   str.push_str(&(x % base).to_string());\n        x /= base;\n    }\n    str.chars().rev().collect()",
  "    let mut answer = String::new();\n    let mut r = x;\n    while r > 0 {\n  \
    \      answer.push(((r % base) + 48) as u8 as char);\n        r /= base;\n   \
    \ }\n    answer.chars().rev().collect()", "    let n = x;\n    let mut n = n;\n\
    \    let base = base;\n    let mut s = String::new();\n    while n > 0 {\n   \
    \     let r = n % base;\n        let r = (r + base) % base;\n        n = n / base;\n\
    \        s.push_str(&format!(\"{}\", r));\n    }\n    s", "    let mut x = x;\n\
    \    let mut s = String::new();\n    while x > 0 {\n        s.push(((x % base)\
    \ + 48) as u8 as char);\n        x /= base;\n    }\n    s.chars().rev().collect()",
  "    let mut res = String::new();\n    let mut x = x;\n    while x > 0 {\n     \
    \   res.push_str(&(x % base).to_string());\n        x /= base;\n    }\n    res.chars().rev().collect()",
  "    let mut a = x;\n    let mut b = base;\n    let mut ret = String::new();\n \
    \   loop {\n        let q = a / b;\n        let r = a % b;\n        let c = (r\
    \ + 10) as u8 as char;\n        ret.push(c);\n        if q == 0 {\n          \
    \  break;\n        }\n        a = q;\n    }\n    return ret.chars().rev().collect();",
  "    let mut quotient = x;\n    let mut remainders = Vec::new();\n    while quotient\
    \ != 0 {\n        remainders.push(quotient % base);\n        quotient /= base;\n\
    \    }\n    remainders.iter().rev().map(|r| r.to_string()).collect()", "    if\
    \ x == 0 {\n        return \"0\".to_string();\n    }\n    let mut result = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        result.push(((x % base) + 48)\
    \ as u8 as char);\n        x /= base;\n    }\n    result.chars().rev().collect()",
  "    let mut r = String::new();\n    let mut x = x;\n    while x > 0 {\n       \
    \ r.push_str(&(x % base).to_string());\n        x /= base;\n    }\n    r.chars().rev().collect()",
  "    let mut result = String::new();\n    let mut n = x;\n    loop {\n        if\
    \ n == 0 {\n            break;\n        }\n        let rem = n % base;\n     \
    \   result.push_str(&format!(\"{}\", rem));\n        n = n / base;\n    }\n  \
    \  result.chars().rev().collect()"]
stop_tokens:
- "\n}"
