name: HumanEval_17_parse_music
language: rs
prompt: "/// Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n/// Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n\
  /// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n\
  /// '.|' - quater note, lasts one beat\n/// >>> parse_music('o o| .| o| o| .| .|\
  \ .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
  \ String) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
  \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
  \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1,\
  \ 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2,\
  \ 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o\
  \ o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
completions: ["    // Write your code here!\n    unimplemented!();", "    let mut\
    \ parsed_music = Vec::new();\n    let mut beats = Vec::new();\n    beats.push(1);\n\
    \    beats.push(2);\n    beats.push(4);\n    let mut rest = 0;\n    let mut notes\
    \ = music_string.as_str().split(\" \");\n    for note in notes {\n        if note.eq(\"\
    o\"){\n            parsed_music.push(4)\n        } else if note.eq(\"o|\"){\n\
    \            parsed_music.push(2)\n        } else if note.eq(\".|\"){\n      \
    \      parsed_music.push(1)\n        } else if note.eq(\"|\"){\n            parsed_music.push(0)\n\
    \        } else if note.eq(\"||\"){\n            parsed_music.push(0)\n      \
    \  } else {\n            let splitted_beat_note = note.split(\"|\");\n       \
    \     for beat_note in splitted_beat_note {\n                if beat_note.eq(\"\
    o\"){\n                    parsed_music.push(4)\n                } else if beat_note.eq(\"\
    .\"){\n                    parsed_music.push(1)\n                } else if beat_note.eq(\"\
    o.\"){\n                    parsed_music.push(4)\n                    parsed_music.push(1)\n\
    \                } else if beat_note.eq(\".\") || beat_note.eq(\"\") {\n     \
    \               parsed_music.push(0)\n                } else {\n             \
    \       let count = beat_note.chars().count();\n                    if count >\
    \ 1 {\n                        let slice = &beat_note[0..count-1];\n         \
    \               rest = beats[slice.parse::<usize>().unwrap() - 1];\n         \
    \           } else {\n                        rest = beats[beat_note.parse::<usize>().unwrap()\
    \ - 1];\n                    }\n                    parsed_music.push(rest);\n\
    \                }\n            }\n        }\n    }\n    return parsed_music;",
  "    let mut ret: Vec<isize> = Vec::new();\n    let mut pos = 0;\n    while pos\
    \ < music_string.len() {\n        let c = music_string.chars().nth(pos).unwrap();\n\
    \        let n = if c == 'o' {\n            4\n        } else if c == '.' {\n\
    \            1\n        } else {\n            panic!(\"Unknown char: {}\", c);\n\
    \        };\n        ret.push(n);\n        pos += if n == 4 { 1 } else { 3 };\n\
    \    }\n    ret", '    unimplemented!()', "    let mut res: Vec<isize> = Vec::new();\n\
    \    for i in music_string.split_whitespace() {\n        res.push(match i {\n\
    \            \"o\" => 4,\n            \"o|\" => 2,\n            \".|\" => 1,\n\
    \            _ => panic!(\"invalid input\"),\n        });\n    }\n    res", '    unimplemented!()',
  "    let mut result: Vec<isize> = Vec::new();\n    let splits = music_string.split(\"\
    \ \");\n    for split in splits {\n        if split == \"o\" {\n            result.push(4);\n\
    \        } else if split == \"o|\" {\n            result.push(2);\n        } else\
    \ if split == \".|\" {\n            result.push(1);\n        }\n    }\n    result",
  "    let mut res = Vec::new();\n    for word in music_string.split_whitespace()\
    \ {\n        let num = match word {\n            \"o\" => 4,\n            \"o|\"\
    \ => 2,\n            \".|\" => 1,\n            _ => panic!(\"bad notation!\"),\n\
    \        };\n        res.push(num);\n    }\n    res", "    // your code here :)\n\
    \    unimplemented!();", "    let mut ret = Vec::new();\n    for c in music_string.chars()\
    \ {\n        if c == 'o' {\n            ret.push(4);\n        } else if c == '.'\
    \ {\n            ret.push(1);\n        }\n    }\n    ret", "    let mut result:\
    \ Vec<isize> = Vec::new();\n    let mut sum: isize = 0;\n    for c in music_string.chars()\
    \ {\n        if c == 'o' {\n            sum += 4;\n        } else if c == '|'\
    \ {\n            result.push(sum);\n            sum = 0;\n        }\n    }\n \
    \   result.push(sum);\n    result", "    // convert string to char vector\n  \
    \  let vector_of_chars: Vec<char> = music_string.chars().collect();\n    // vector\
    \ to return\n    let mut parsed_music = Vec::new();\n    // convert chars to numbers\n\
    \    for char in vector_of_chars {\n        match char {\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o' => parsed_music.push(4),\n            'o' => parsed_music.push(4),\n\
    \            'o", "    let mut result: Vec<isize> = Vec::new();\n    let mut music_string\
    \ = music_string.replace(\"|\", \"\");\n    loop {\n        let (first, last)\
    \ = music_string.split_at(1);\n        match first {\n            \"o\" => result.push(4),\n\
    \            \".\" => result.push(1),\n            _ => break,\n        }\n  \
    \      music_string = last.to_string();\n    }\n    result", "    let mut result:\
    \ Vec<isize> = Vec::new();\n    let notes = music_string.split_whitespace();\n\
    \    for note in notes {\n        match note {\n            \"o\" => result.push(4),\n\
    \            \"o|\" => result.push(2),\n            \".|\" => result.push(1),\n\
    \            _ => result.push(0),\n        }\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    let mut buf = String::new();\n    for x in music_string.chars()\
    \ {\n        match x {\n            'o' => {\n                result.push(4);\n\
    \                buf.clear();\n            }\n            'o' | '|' => {\n   \
    \             buf.push(x);\n            }\n            '.' => {\n            \
    \    match buf.as_str() {\n                    \"o|\" => result.push(2),\n   \
    \                 \".|\" => result.push(1),\n                    _ => (),\n  \
    \              }\n                buf.clear();\n            }\n            _ =>\
    \ continue,\n        }\n    }\n    result", "    music_string.chars().fold(vec![],\
    \ |mut acc, ch| {\n        match ch {\n            'o' => acc.push(4),\n     \
    \       '|' => acc[acc.len() - 1] /= 2,\n            _ => (),\n        }\n   \
    \     acc\n    })", '    unimplemented!()', '    unimplemented!()', "    music_string.chars().map(|x|\
    \ match x {\n        'o' => 4,\n        'o' | '|' => 2,\n        '.' | '|' =>\
    \ 1,\n        _ => 0,\n    }).collect()", '    return vec![];']
stop_tokens:
- "\n}"
