name: HumanEval_36_fizz_buzz
language: rs
prompt: "/// Return the number of times the digit 7 appears in integers less than\
  \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
  /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
  \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n  \
  \  assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
  \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
  \ 8026);\n}\n"
completions: ["    (1..n).filter(|x| x % 11 == 0 || x % 13 == 0).map(|x| x.to_string().chars().filter(|&c|\
    \ c == '7').count() as isize).sum()", "    let mut counter = 0;\n    for i in\
    \ 0..n {\n        if (i % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n          \
    \  counter += 1;\n        }\n    }\n    counter", '    unimplemented!()', "  \
    \  let mut count = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            let mut i_copy = i;\n            while i_copy > 0 {\n     \
    \           if i_copy % 10 == 7 {\n                    count += 1;\n         \
    \       }\n                i_copy /= 10;\n            }\n        }\n    }\n  \
    \  count", '    unimplemented!();', "    let mut count = 0;\n    for i in (1..n).step_by(11).chain((1..n).step_by(13))\
    \ {\n        let mut i = i;\n        while i > 0 {\n            if i % 10 == 7\
    \ {\n                count += 1;\n            }\n            i /= 10;\n      \
    \  }\n    }\n    count", "    (0..n).filter(|&x| x % 11 == 0 || x % 13 == 0).map(|x|\
    \ {\n        let mut x = x;\n        let mut count = 0;\n        while x > 0 {\n\
    \            if x % 10 == 7 {\n                count += 1;\n            }\n  \
    \          x /= 10;\n        }\n        count\n    }).sum()", "    let mut count\
    \ = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     if i % 10 == 7 {\n                count += 1;\n            }\n         \
    \   if i > 10 && (i / 10) % 10 == 7 {\n                count += 1;\n         \
    \   }\n        }\n    }\n    count", "    let mut y = 0;\n    for x in 1..n {\n\
    \        if x % 11 == 0 || x % 13 == 0 {\n            let mut z = x;\n       \
    \     while z > 0 {\n                if z % 10 == 7 {\n                    y +=\
    \ 1;\n                }\n                z /= 10;\n            }\n        }\n\
    \    }\n    y", "    // TODO\n    unimplemented!();", "    let mut result = 0;\n\
    \    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let\
    \ mut j = i;\n            while j > 0 {\n                if j % 10 == 7 {\n  \
    \                  result += 1;\n                }\n                j /= 10;\n\
    \            }\n        }\n    }\n    result", "    let mut i = 0;\n    let mut\
    \ count = 0;\n    while i < n {\n        if i % 11 == 0 || i % 13 == 0 {\n   \
    \         if i.to_string().contains(\"7\") {\n                count += 1;\n  \
    \          }\n        }\n        i += 1;\n    }\n    count", '    0', "    let\
    \ mut sum = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            if i % 10 == 7 {\n                sum += 1;\n            }\n    \
    \        if i / 10 % 10 == 7 {\n                sum += 1;\n            }\n   \
    \     }\n    }\n    sum", "    let mut count = 0;\n    for i in 1..n {\n     \
    \   if i % 11 == 0 || i % 13 == 0 {\n            let mut number = i;\n       \
    \     while number > 0 {\n                let digit = number % 10;\n         \
    \       if digit == 7 {\n                    count += 1;\n                }\n\
    \                number /= 10;\n            }\n        }\n    }\n    count", " \
    \   let mut count = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            let mut num = i;\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1;\n               \
    \ }\n                num /= 10;\n            }\n        }\n    }\n    count",
  '    unimplemented!()', '    unimplemented!()', "    // your code here\n    let\
    \ mut count = 0;\n    let mut s = String::new();\n    for i in 1..n {\n      \
    \  s = format!(\"{}\", i);\n        if (i % 11 == 0 || i % 13 == 0) && s.contains(\"\
    7\") {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!()']
stop_tokens:
- "\n}"
