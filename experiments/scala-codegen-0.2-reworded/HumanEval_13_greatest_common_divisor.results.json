{
  "name": "HumanEval_13_greatest_common_divisor",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    result = result.updated(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    result = result.updated(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293358,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp075odrv3.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp075odrv3.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp075odrv3.scala:45:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    result = result.updated(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter elem of \u001b[33mmethod\u001b[0m \u001b[35mupdated\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m: (index: Int, elem: B): List[B]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp075odrv3.scala:48:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp075odrv3.scala:57:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp075odrv3.scala:63:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m                    result = result.updated(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n                if (i <= m) {\n                    val p = i\n                    while (p * p <= n) {\n                        p = p + 1\n                    }\n                    result = result.updated(p)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n                if (i <= m) {\n                    val p = i\n                    while (p * p <= n) {\n                        p = p + 1\n                    }\n                    result = result.updated(p)\n                }\n            }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293358,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwpo8swbs.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwpo8swbs.scala:43:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2L\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwpo8swbs.scala:65:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2L\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwpo8swbs.scala:82:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpwpo8swbs.scala:75:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m75 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> list(range(5))\n    // [0, 1, 2, 3, 4]\n    def list(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) yield (i + 1)\n    }\n\n    // Return a list of the even integers from 1 to n\n    // >>> evens(5)\n    // [2, 4]\n    def evens(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) if (i % 2 == 0) yield (i + 1)\n    }\n\n    // Return a list of the odd integers from 1 to n\n    // >>> odds(5)\n    // [1, 3, 5]\n    def odds(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) if (i % 2 != 0) yield (i + 1)\n    }\n\n    // Return a list of the multiples of 3 from 1 to n\n    // >>> multiples(5)\n    // [3, 6, 9, 12, 15]\n    def multiples(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) if (i % 3 == 0) yield (i + 1)\n    }\n\n    // Return a list of the multiples of 5 from 1 to n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz_cxdsch.scala:45:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      'then' expected, but 'yield' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz_cxdsch.scala:52:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m != \u001b[31m0\u001b[0m) \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      'then' expected, but 'yield' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz_cxdsch.scala:59:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33mif\u001b[0m (i % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m) \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      'then' expected, but 'yield' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz_cxdsch.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz_cxdsch.scala:38:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz_cxdsch.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n        } else {\n            return (1 to n).toSeq.map(x => x)\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> evens(5)\n    // [2, 4]\n    def evens(n : Int) : Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n        } else {\n            return (2 to n).filter(x => x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the primes less than n\n    // >>> primes(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primes(n : Int) : Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n        } else {\n            return (2 to n).filter(x => x > 1 && all(y => x % y != 0\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293358,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6b1qhsi1.scala:64:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6b1qhsi1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6b1qhsi1.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6b1qhsi1.scala:41:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq.map(\u001b[36mx\u001b[0m => x)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6b1qhsi1.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6b1qhsi1.scala:52:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m to n).filter(\u001b[36mx\u001b[0m => x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n                if (i <= m) {\n                    val p = i\n                    while (p * p <= n) {\n                        p = p + 1L\n                    }\n                    result = result.updated(p)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n                if (i <= m) {\n                    val p = i\n                    while (p * p <= n) {\n                        p = p + 1L\n                    }\n                    result = result.updated(p)\n                }\n            \n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293358,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm1qfn1nq.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm1qfn1nq.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm1qfn1nq.scala:43:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2L\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm1qfn1nq.scala:52:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm1qfn1nq.scala:61:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm1qfn1nq.scala:65:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2L\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Err",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = new Vector[Long](n)\n            val m = n >> 1\n            for (i <- 0 until m) {\n                val p = 2 * i + 3\n                if (p <= n) {\n                    result(p - 1) = p\n                }\n                for (j <- i + 1 until m) {\n                    val q = p * j\n                    if (q <= n && result(q - 1) == 0) {\n                        result(q - 1) = p\n                    }\n                }\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = new Vector[Long](n)\n            val m = n >> 1\n            for (i <- 0 until m) {\n                val p = 2 * i + 3\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293359,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1uijw7ww.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uijw7ww.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1uijw7ww.scala:41:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mVector\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mconstructor\u001b[0m \u001b[35mVector\u001b[0m cannot be accessed as a member of Vector[Long] from module class Problem$.\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uijw7ww.scala:43:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (m : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uijw7ww.scala:48:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m                \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uijw7ww.scala:64:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        return greatestCommonDivisor(a, b % a)\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n        if (a < b) return leastCommonMultiple(b, a % b)\n        return leastCommonMultiple(a, b % a)\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 1) return Nil\n        return (1l << n) - 1l\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> evenRange(5)\n    // [2, 4]\n    def evenRange(n : Int) : Seq[Long] = {\n        if (n < 2) return Nil\n        return filter(range(n), (_ % 2 == 0))\n    }\n\n    // Return a list of all the primes less than n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 2) return Nil\n        if (n == 2) return [2]\n        if (n == 3) return [2, 3]\n        sieve := [true] * (n / 2)\n        i := 3\n        while (i < n) {\n            if (sieve[i / 2] == true) {\n                // we found a prime\n                for (j := i * i; j < n; j += 2 * i) {\n                    sieve[j\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293358,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjpddwpp5.scala:49:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m2\u001b[0m) \u001b[33mreturn\u001b[0m [\u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                       an identifier expected, but integer literal found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjpddwpp5.scala:50:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m3\u001b[0m) \u001b[33mreturn\u001b[0m [\u001b[31m2\u001b[0m, \u001b[31m3\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m^^\u001b[0m\n\u001b[31m   |\u001b[0m'=>' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjpddwpp5.scala:50:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m3\u001b[0m) \u001b[33mreturn\u001b[0m [\u001b[31m2\u001b[0m, \u001b[31m3\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                       an identifier expected, but integer literal found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjpddwpp5.scala:50:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m3\u001b[0m) \u001b[33mreturn\u001b[0m [\u001b[31m2\u001b[0m, \u001b[31m3\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                       an identifier expected, but integer literal found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjpddwpp5.scala:51:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        sieve := [\u001b[31mtrue\u001b[0m] * (n / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m'=>' expected, but 'end of statement' found\n\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpjpddwpp5.scala:51:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        sieve := [\u001b[31mtrue\u001b[0m] * (n / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'['\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjpddwpp5.scala:56:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m                \u001b[33mfor\u001b[0m (j := i * i; j < n; j += \u001b[31m2\u001b[0m * i) ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a) / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    // >>> remainder((3l), (5l))\n    // (2l)\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293351,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0n2vk7al.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0n2vk7al.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0n2vk7al.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0n2vk7al.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0n2vk7al.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 until n) {\n            result = result.append(i)\n        }\n        return result\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> listRange(10, even=True)\n    // [2, 4, 6, 8, 10]\n    def listRange(n : Int, even : Boolean = False) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 2 until n) {\n            if (even and i % 2 == 0) {\n                result = result.append(i)\n            }\n        }\n        return result\n    }\n\n    // Return a list of all the primes from 2 to n\n    // >>> listRange(1000, prime=True)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293358,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_3a26y_q.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_3a26y_q.scala:40:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m            result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_3a26y_q.scala:51:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            \u001b[33mif\u001b[0m (even and i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value and is not a member of Boolean\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_3a26y_q.scala:52:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m                result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_3a26y_q.scala:48:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mlistRange\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m, \u001b[36meven\u001b[0m : \u001b[35mBoolean\u001b[0m = False) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Not found: False\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_3a26y_q.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_3a26y_q.scala:64:11 ------------------------\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    return Nil\n                }\n            }\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    return Nil\n                } else {\n                    result.append(i)\n                }\n            }\n            return result.toList\n        }\n    }\n\n    // Return the sum of all the primes less than or equal to n\n    // >>> sumPrimes(10)\n    // 29\n    def sumPrimes(n : Int) : Long = {\n        if (n < 2) {\n            return 0\n        } else {\n            val result = 0\n            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    return 0\n                }\n            }\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    return 0\n                \n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2w448fjb.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2w448fjb.scala:73:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Long\n\u001b[31m74 |\u001b[0m                \u001b[33mif\u001b[0m (n % i == \u001b[31m0\u001b[0m) {\n\u001b[31m75 |\u001b[0m                    \u001b[33mreturn\u001b[0m \u001b[31m0\u001b[0m\n\u001b[31m76 |\u001b[0m                \n\u001b[31m77 |\u001b[0m    }\n\u001b[31m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m79 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m80 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m81 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m82 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m84 |\u001b[0m}\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of two integers\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293351,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptwpvocvh.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptwpvocvh.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptwpvocvh.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptwpvocvh.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptwpvocvh.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a greatest common divisor of a list of integers\n    // >>> greatestCommonDivisor([3l, 5l, 25l])\n    // (1l)\n    // >>> greatestCommonDivisor([25l, 15l])\n    // (5l)\n    def greatestCommonDivisor(list : Array[Long]) : Long = {\n        if (list.length == 0) {\n            return 0\n        } else {\n            return greatestCommonDivisor(list[0], list[1])\n        }\n    }\n\n    // Return a least common multiple of a list of integers\n    // >>> leastCommonMultiple([3l, 5l, 25l])\n    // (15l)\n    // >>> leastCommonMultiple([25l, 15l])\n    // (75l)\n    def leastCommonMultiple(list : Array[Long]) : Long = {\n        if (list.length == 0) {\n            return 0\n        } else {\n            return leastCommonMultiple(list[0], list[1])\n        }\n    }\n\n    // Return a list of all the integers that are multiples of a given integer\n    // >>> multiples(5l)\n    // [0l, 5l, 10l, 15l, 20l, 25l, 30l, 35l, 40l, 45l, 50l]\n    def multiples(n : Long) : Array[Long] = {\n        var result\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293356,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmqym37zp.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmqym37zp.scala:43:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mreturn\u001b[0m greatestCommonDivisor(list[\u001b[31m0\u001b[0m], list[\u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmqym37zp.scala:43:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mreturn\u001b[0m greatestCommonDivisor(list[\u001b[31m0\u001b[0m], list[\u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmqym37zp.scala:56:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mreturn\u001b[0m leastCommonMultiple(list[\u001b[31m0\u001b[0m], list[\u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmqym37zp.scala:56:52 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mreturn\u001b[0m leastCommonMultiple(list[\u001b[31m0\u001b[0m], list[\u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmqym37zp.scala:65:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Array[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (100l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (50l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_5vib12.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7_5vib12.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7_5vib12.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7_5vib12.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7_5vib12.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplnw4ky4i.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplnw4ky4i.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplnw4ky4i.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplnw4ky4i.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplnw4ky4i.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val i = 2L\n            while (i <= n) {\n                if (isPrime(i)) {\n                    result.append(i)\n                }\n                i = i + 1L\n            }\n            return result.toList\n        }\n    }\n\n    // Return the sum of the squares of the first n natural numbers\n    // >>> sumOfSquares(10)\n    // 385\n    def sumOfSquares(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            return (n * (n + 1) * (2 * n + 1)) / 6\n        }\n    }\n\n    // Return the sum of the cubes of the first n natural numbers\n    // >>> sumOfCubes(10)\n    // 12586\n    def sumOfCubes(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            return\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293358,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdv2po4xw.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdv2po4xw.scala:44:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdv2po4xw.scala:47:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                i = i + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdv2po4xw.scala:71:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m            \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdv2po4xw.scala:80:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpdv2po4xw.scala:73:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m73 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (\n                Seq.range(2, n).filter(\n                    x => {\n                        if (x == 2) {\n                            return true\n                        } else if (x % 2 == 0) {\n                            return false\n                        } else {\n                            return true\n                        }\n                    }\n                ).toList\n            )\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (\n                Seq.range(2, n).filter(\n                    x => {\n                        if (x == 2) {\n                            return true\n                        } else if (x % 2 == 0) {\n                            return false\n                        } else {\n                            return true\n                        }\n                    }\n                ).toList\n            )\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293358,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy_mvmig7.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy_mvmig7.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy_mvmig7.scala:42:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                Seq.range(\u001b[31m2\u001b[0m, n).filter(\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy_mvmig7.scala:62:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy_mvmig7.scala:65:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                Seq.range(\u001b[31m2\u001b[0m, n).filter(\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy_mvmig7.scala:83:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Err",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    break\n                } else {\n                    result = result.updated(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    break\n                } else {\n                    result = result.updated(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293359,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr9l55nfc.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr9l55nfc.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr9l55nfc.scala:45:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr9l55nfc.scala:47:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = result.updated(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (i : Long)\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr9l55nfc.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr9l55nfc.scala:59:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n < 2) {\n            return List[Long](0)\n        } else {\n            val result = List[Long](0)\n            val i = 2L\n            while (i <= n) {\n                if (Problem.isPrime(i)) {\n                    result = result.append(i)\n                }\n                i = i + 1L\n            }\n            return result\n        }\n    }\n\n    // Return true if n is a prime number\n    // >>> isPrime(2)\n    // true\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n            return true\n        } else if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            return Problem.isPrime(n - 1)\n        }\n    }\n\n    // Return a list of the prime factors of a number\n    // >>> primeFactors(12)\n    // [2, 2, 3]\n    def primeFactors(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0)\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293358,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi1lpiql8.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi1lpiql8.scala:45:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpi1lpiql8.scala:47:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                i = i + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi1lpiql8.scala:82:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpi1lpiql8.scala:75:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m75 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqhnr1vy7.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        if (n < 1) {\n            return Nil\n        } else {\n            return (1 to n).toSeq\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> listRange(10)\n    // [2, 4, 6, 8, 10]\n    def listRange2(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (2 to n).filter(x => x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the primes from 2 to n\n    // >>> listRange(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def listRange3(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (2 to n).filter(x => !(x % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293359,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfnowiq4c.scala:64:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfnowiq4c.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnowiq4c.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnowiq4c.scala:41:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    scala.collection.immutable.Range.Inclusive\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnowiq4c.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnowiq4c.scala:52:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m to n).filter(\u001b[36mx\u001b[0m => x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n                if (i <= m) {\n                    val p = i\n                    while (p * p <= n) {\n                        val q = p\n                        while (q * q <= n) {\n                            if (n % q == 0) {\n                                break\n                            }\n                            q = q + 1\n                        }\n                        if (q * q > n) {\n                            result = result.append(p)\n                            break\n                        }\n                        p = p + 1\n                    }\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293358,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzb6la99z.scala:75:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzb6la99z.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzb6la99z.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzb6la99z.scala:43:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2L\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzb6la99z.scala:62:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzb6la99z.scala:71:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzb6la99z.scala:83:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = Nil\n            val i = 2l\n            while (i <= n) {\n                if (n % i == 0) {\n                    // skip\n                } else {\n                    result = result.prepend(i)\n                }\n                i = i + 1l\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = Nil\n            val i = 2l\n            while (i <= n) {\n                if (n % i == 0) {\n                    // skip\n                } else {\n                    result = result.prepend(i)\n                }\n                i = i + 1l\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppa423dto.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppa423dto.scala:47:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = result.prepend(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is not a member of object scala.collection.immutable.Nil - did you mean result.prepended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmppa423dto.scala:49:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m                i = i + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppa423dto.scala:68:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m                    result = result.prepend(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is not a member of object scala.collection.immutable.Nil - did you mean result.prepended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmppa423dto.scala:70:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m                i = i + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppa423dto.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppa423dto.scala:82:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    ass",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Int] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return filter(isPrime, range(2, n + 1))\n        }\n    }\n\n    // Return the sum of all the primes less than or equal to n\n    // >>> sum(primes(10))\n    // 23\n    def sum(n : Int) : Int = {\n        return foldLeft(0, (x, y) => x + y, primes(n))\n    }\n\n    // Return the product of all the primes less than or equal to n\n    // >>> product(primes(10))\n    // 120\n    def product(n : Int) : Int = {\n        return foldLeft(1, (x, y) => x * y, primes(n))\n    }\n\n    // Return the sum of the squares of all the primes less than or equal to n\n    // >>> sumSq(primes(10))\n    // 466\n    def sumSq(n : Int) : Int = {\n        return foldLeft(0, (x, y) => x + y * y, primes(n))\n    }\n\n    // Return the product of the squares\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy152om10.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy152om10.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Int]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy152om10.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: filter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy152om10.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy152om10.scala:41:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: range\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy152om10.scala:49:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mreturn\u001b[0m foldLeft(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y, primes(n))\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (\n                Seq.range(2, n)\n                    .filter(x -> x % 2 == 0)\n                    .filter(x -> x < n)\n                    .filter(x -> {\n                        for (i <- Seq.range(2, x / 2 + 1)) {\n                            if (x % i == 0) {\n                                return false\n                            }\n                        }\n                        return true\n                    })\n            )\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (\n                Seq.range(2, n)\n                    .filter(x -> x % 2 == 0)\n                    .filter(x -> x < n)\n                    .filter(x -> {\n                        for (i <- Seq.range(2, x / 2 + 1)) {\n                            if (x %\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpmb7k2bix.scala:70:35 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m                            \u001b[33mif\u001b[0m (x %\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmb7k2bix.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmb7k2bix.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmb7k2bix.scala:43:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                    .filter(x -> x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmb7k2bix.scala:44:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                    .filter(x -> x < n)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmb7k2bix.scala:45:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    .filter(x -> {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(0, 10)\n    // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    def listRange(n : Int) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (1 to n).toSeq\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> listRangeEven(10)\n    // [2, 4, 6, 8, 10]\n    def listRangeEven(n : Int) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (2 to n).filter(x -> x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> listRangeOdd(10)\n    // [1, 3, 5, 7, 9]\n    def listRangeOdd(n : Int) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (1 to n).filter(x -> x % 2 != 0).toSeq\n        }\n    }\n\n    // Return a list of all the multiples of 3 from 1 to\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9dguapby.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dguapby.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dguapby.scala:41:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    scala.collection.immutable.Range.Inclusive\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dguapby.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9dguapby.scala:52:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m to n).filter(x -> x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dguapby.scala:61:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvbjas923.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val i = 2L\n            while (i <= n) {\n                if (isPrime(i)) {\n                    result.append(i)\n                }\n                i = i + 1L\n            }\n            return result.toList\n        }\n    }\n\n    // Return the sum of all the primes less than or equal to n\n    // >>> sumPrimes(10)\n    // 29\n    def sumPrimes(n : Int) : Long = {\n        if (n < 2) {\n            return 0L\n        } else {\n            val result = 0L\n            val i = 2L\n            while (i <= n) {\n                if (isPrime(i)) {\n                    result = result + i\n                }\n                i = i + 1L\n            }\n            return result\n        }\n    }\n\n    // Return the product of all the primes less than or equal to n\n    // >>> productPrimes(10)\n    // 729\n    def productPrimes(n : Int) : Long = {\n        if (n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjkl9zzfq.scala:77:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjkl9zzfq.scala:44:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjkl9zzfq.scala:47:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                i = i + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjkl9zzfq.scala:63:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m                \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjkl9zzfq.scala:64:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m                    result = result + i\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjkl9zzfq.scala:66:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m                i = i + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkl9zzfq.scala:76:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m        \u001b[33mif\u001b[0m (",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        return greatestCommonDivisor(a, b % a)\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n        if (a < b) return leastCommonMultiple(b, a % b)\n        return leastCommonMultiple(a, b % a)\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsayr7479.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsayr7479.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsayr7479.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsayr7479.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsayr7479.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference between two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of two integers a and\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvy2trhsg.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvy2trhsg.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvy2trhsg.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvy2trhsg.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvy2trhsg.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a == 1) return 1\n        if (b == 1) return 1\n        if (a == b) return a\n        if (a % b == 0) return b\n        if (b % a == 0) return a\n        return greatestCommonDivisor(b, a % b)\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n        if (a == 1) return 1\n        if (b == 1) return 1\n        if (a == b) return a\n        if (a % b == 0) return b\n        if (b % a == 0) return a\n        return leastCommonMultiple(b, a % b)\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a == 1) return b\n        if (b == 1) return a\n        if (a == b) return a\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n        if (a == 1) return b\n        if (b == 1) return a\n        if (a == b) return a\n        return a * b\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return a + b\n        }\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b\n        }\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqo7hq0gn.scala:72:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m        } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (b == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    Unit\n\u001b[31m   |\u001b[0m               Required: Long\n\u001b[31m   |\u001b[0m               Maybe you are missing an else part for the conditional?\n\u001b[31m73 |\u001b[0m            \u001b[33mreturn\u001b[0m a\n\u001b[31m74 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val i = 2L\n            while (i <= n) {\n                if (n % i == 0) {\n                    // skip\n                } else {\n                    result = result.prepend(i)\n                }\n                i = i + 1L\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val i = 2L\n            while (i <= n) {\n                if (n % i == 0) {\n                    // skip\n                } else {\n                    result = result.prepend(i)\n                }\n                i = i + 1L\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes3\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu4uvh5wo.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu4uvh5wo.scala:47:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = result.prepend(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is not a member of object scala.collection.immutable.Nil - did you mean result.prepended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpu4uvh5wo.scala:49:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m                i = i + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu4uvh5wo.scala:68:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m                    result = result.prepend(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is not a member of object scala.collection.immutable.Nil - did you mean result.prepended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpu4uvh5wo.scala:70:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m                i = i + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4uvh5wo.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4uvh5wo.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    ass",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return a + b\n        }\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b\n        }\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (-2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbgpkas6.scala:72:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m        } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (b == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    Unit\n\u001b[31m   |\u001b[0m               Required: Long\n\u001b[31m   |\u001b[0m               Maybe you are missing an else part for the conditional?\n\u001b[31m73 |\u001b[0m            \u001b[33mreturn\u001b[0m a\n\u001b[31m74 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else if (n == 1) {\n            return List(1)\n        } else {\n            val p = 2L\n            val result = List.empty[Long]\n            while (p <= n) {\n                if (n % p == 0) {\n                    result = result.append(p)\n                    n = n / p\n                } else {\n                    p = p + 1\n                }\n            }\n            return result.reverse()\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else if (n == 1) {\n            return List(1)\n        } else {\n            val p = 2L\n            val result = List.empty[Long]\n            while (p <= n) {\n                if (n % p == 0) {\n                    result = result.append(p)\n                    n = n / p\n                \n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293369,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjwmidhql.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjwmidhql.scala:47:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = result.append(p)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjwmidhql.scala:48:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m                    n = n / p\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjwmidhql.scala:50:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m                    p = p + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val p\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjwmidhql.scala:53:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m            \u001b[33mreturn\u001b[0m result.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjwmidhql.scala:70:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m                    result = result.append(p)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjwmidhql.scala:71:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m                    n = n / p\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (primes(n - 2) ++ (1 until (n - 1) % 2 == 0)).takeWhile(x => x < n)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (Seq(2, (n - 1) / 2 + 1) ++ (1 until (n - 1) % 2 == 0)).takeWhile(x => x < n)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes3(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (Seq(2, (n - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1ec0rwv5.scala:64:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1ec0rwv5.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ec0rwv5.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ec0rwv5.scala:41:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (primes(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m1\u001b[0m until (n - \u001b[31m1\u001b[0m) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m)).takeWhile(\u001b[36mx\u001b[0m => x < n)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    Boolean\n\u001b[31m   |\u001b[0m                                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1ec0rwv5.scala:41:82 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (primes(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m1\u001b[0m until (n - \u001b[31m1\u001b[0m) % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m)).takeWhile(\u001b[36mx\u001b[0m => x < n)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue < is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m  import math.Ordering",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = new Vector[Long]()\n            val p = 2l\n            while (p <= n) {\n                if (n % p == 0) {\n                    result.add(p)\n                }\n                p = p + 1l\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = new Vector[Long]()\n            val p = 2l\n            while (p <= n) {\n                if (n % p == 0) {\n                    result.add(p)\n                }\n                p = p + 1l\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293369,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5gh4nxir.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gh4nxir.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5gh4nxir.scala:41:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mVector\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mconstructor\u001b[0m \u001b[35mVector\u001b[0m cannot be accessed as a member of Vector[Long] from module class Problem$.\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp5gh4nxir.scala:47:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                p = p + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val p\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gh4nxir.scala:58:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5gh4nxir.scala:60:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mVector\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mconstructor\u001b[0m \u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a)\n        if (b < a) return greatestCommonDivisor(a, b)\n        if (a % b == 0) return b\n        return greatestCommonDivisor(b, a % b)\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp_x1szfjp.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        else return greatestCommonDivisor(a, b % a)\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a number of the form 2^k * 5^j * 3^i\n    // >>> numberOfTheForm(2, 2, 2)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 3)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 4)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 5)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 6)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 7)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 8)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 9)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 10)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 11)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 12)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 13)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 14)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 15)\n    // (120l)\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj322gipf.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj322gipf.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj322gipf.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj322gipf.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj322gipf.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a number of permutations of a given number\n    // >>> permutations(5)\n    // 120\n    def permutations(n : Long) : Long = {\n        if (n == 0) {\n            return 1\n        } else {\n            return n * permutations(n - 1)\n        }\n    }\n\n    // Return a number of combinations of a given number\n    // >>> combinations(5)\n    // 10\n    def combinations(n : Long) : Long = {\n        if (n == 0) {\n            return 1\n        } else {\n            return n * combinations(n - 1)\n        }\n    }\n\n    // Return a number of combinations of a given number\n    // >>> combinations(5, 2)\n    // 10\n    def combinations(n : Long, k : Long) : Long = {\n        if (n == 0) {\n            return 0\n        } else {\n            return n * combinations(n - 1, k)\n        }\n    }\n\n    // Return a number of combinations of a given number\n    // >>> combinations(5, 2)\n    // 10\n    def combinations(n : Long, k : Long) : Long = {\n        if (n == 0) {\n            return 0\n        } else {\n            return n * combinations(n - 1, k)\n        }\n    }\n\n    // Return a number of combinations of a given number\n    // >>> combinations(5,\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3w4rmp9w.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp3w4rmp9w.scala:70:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcombinations\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mk\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef combinations(n: Long, k: Long): Long in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 59 and\n\u001b[31m   |\u001b[0mdef combinations(n: Long, k: Long): Long in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 70\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3w4rmp9w.scala:82:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3w4rmp9w.scala:83:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3w4rmp9w.scala:84:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqhnr1vy7.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = scala.math.max(0, n - 2)\n            for (i <- 0 until m) {\n                val p = scala.math.min(n, i + 1)\n                if (Problem.isPrime(p)) {\n                    result.append(p)\n                }\n            }\n            return result.toList\n        }\n    }\n\n    // Return true if n is prime, false otherwise\n    // >>> isPrime(2)\n    // true\n    // >>> isPrime(3)\n    // true\n    // >>> isPrime(4)\n    // false\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n            return true\n        } else if (n == 3) {\n            return true\n        } else if (n == 5) {\n            return true\n        } else if (n == 7) {\n            return true\n        } else if (n == 11) {\n            return true\n        } else if (n == 13) {\n            return true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnp6ygnq0.scala:71:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m        } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (n == \u001b[31m13\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    Unit\n\u001b[31m   |\u001b[0m               Required: Boolean\n\u001b[31m   |\u001b[0m               Maybe you are missing an else part for the conditional?\n\u001b[31m72 |\u001b[0m            \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m73 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n                if (i <= m) {\n                    if (n % i == 0) {\n                        result = result.updated(i)\n                    }\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n                if (i <= m) {\n                    if (n % i == 0) {\n                        result = result.updated(i)\n                    }\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293370,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp61wjrowg.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61wjrowg.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp61wjrowg.scala:43:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2L\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61wjrowg.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61wjrowg.scala:59:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp61wjrowg.scala:63:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2L\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Er",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a number of the form 2^k * 5^j * 3^i\n    // >>> numberOfTheForm(2, 3, 5)\n    // (120)\n    // >>> numberOfTheForm(2, 3, 5, 7)\n    // (5040)\n    def numberOfTheForm(a : Long, b : Long, c : Long, d : Long) : Long = {\n        return (a * b * c * d)\n    }\n\n    // Return a number of the form 2^k * 5^j * 3^i * 7^l\n    // >>> numberOfTheForm(2, 3, 5, 7)\n    // (5040)\n    // >>> numberOfTheForm(2, 3, 5, 7, 11)\n    // (40320)\n    def numberOfTheForm(a : Long, b : Long, c : Long, d : Long, e : Long) : Long = {\n        return (a * b * c * d * e)\n    }\n\n    // Return a number of the form 2^k * 5^j * 3^i * 7^l * 11^m\n    // >>> numberOfTheForm(2, 3, 5, 7, 11)\n    // (40320)\n    // >>> numberOfTheForm(2, 3, 5, 7, 11, 13)\n    // (362880)\n    def numberOfTheForm(a : Long, b :\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp90ve21r4.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp90ve21r4.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp90ve21r4.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp90ve21r4.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp90ve21r4.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp90ve21r4.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a greatest common divisor of a list of integers\n    // >>> greatestCommonDivisor([3l, 5l, 25l])\n    // (1l)\n    def greatestCommonDivisor(xs : Iterable[Long]) : Long = {\n        if (xs.isEmpty()) {\n            return 0\n        } else {\n            return greatestCommonDivisor(xs.head, xs.tail.head)\n        }\n    }\n\n    // Return a least common multiple of a list of integers\n    // >>> leastCommonMultiple([3l, 5l, 25l])\n    // (75l)\n    def leastCommonMultiple(xs : Iterable[Long]) : Long = {\n        if (xs.isEmpty()) {\n            return 0\n        } else {\n            return leastCommonMultiple(xs.head, xs.tail.head)\n        }\n    }\n\n    // Return a list of all the integers that are multiples of a given integer\n    // >>> multiples(5l)\n    // [0l, 5l, 10l, 15l, 20l, 25l, 30l, 35l, 40l, 45l, 50l]\n    def multiples(n : Long) : Iterable[Long] = {\n        for (i <- 0 until n) {\n            yield (i * n)\n        }\n    }\n\n    // Return a list of all the integers that are multiples of\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293369,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E103] Syntax Error: /tmp/tmpvcnx8fzd.scala:61:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33myield\u001b[0m (i * n)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Illegal start of statement\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcnx8fzd.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvcnx8fzd.scala:38:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mif\u001b[0m (xs.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIterableOnceOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvcnx8fzd.scala:49:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mif\u001b[0m (xs.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIterableOnceOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcnx8fzd.scala:60:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvcnx8fzd.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) yield i\n    }\n\n    // Return a list of all the even integers from 1 to n\n    // >>> listRangeEven(10)\n    // [2, 4, 6, 8, 10]\n    def listRangeEven(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) yield i if (i % 2 == 0)\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> listRangeOdd(10)\n    // [1, 3, 5, 7, 9]\n    def listRangeOdd(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) yield i if (i % 2 == 1)\n    }\n\n    // Return a list of all the multiples of 3 from 1 to n\n    // >>> listMultiplesOf3(10)\n    // [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n    def listMultiplesOf3(n : Int) : Seq[Long] = {\n        for (i <- 0 until n)\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpz4u14sx5.scala:45:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33myield\u001b[0m i \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                end of statement expected but 'if' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz4u14sx5.scala:52:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33myield\u001b[0m i \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                end of statement expected but 'if' found\n\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpz4u14sx5.scala:59:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz4u14sx5.scala:38:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz4u14sx5.scala:45:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33myield\u001b[0m i \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else {\n            return seq(1, n)\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def rangePositive(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else {\n            return seq(1, n)\n        }\n    }\n\n    // Return a list of the first n negative integers\n    // >>> range(5, 10)\n    // [-5, -4, -3, -2, -1]\n    def rangeNegative(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else {\n            return seq(-n, -1)\n        }\n    }\n\n    // Return a list of the first n even integers\n    // >>> range(4, 10)\n    // [\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbyjq8dxn.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbyjq8dxn.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m seq(\u001b[31m1\u001b[0m, n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: seq\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbyjq8dxn.scala:52:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m seq(\u001b[31m1\u001b[0m, n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: seq\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbyjq8dxn.scala:63:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mreturn\u001b[0m seq(-n, -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: seq\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbyjq8dxn.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbyjq8dxn.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbyjq8dxn.scala:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    return Nil\n                }\n            }\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    result.append(i)\n                }\n            }\n            return result.toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    return Nil\n                }\n            }\n            for (i <- 2 to m) {\n                if (n % i\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293378,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5y7yzvim.scala:73:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5y7yzvim.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5y7yzvim.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5y7yzvim.scala:43:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to m) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (m : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5y7yzvim.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                           Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5y7yzvim.scala:48:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to m) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (m : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a) / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else {\n            return (1 until n).toSeq\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> evens(5)\n    // [2, 4]\n    def evens(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else {\n            return (2 until n).filter(x -> x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the primes less than n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else {\n            return (2 until n).filter(x -> x < n).filter(x -> {\n                for (i <- (x - 1) / 2) {\n                    if (x % i == 0) {\n                        return false\n                    }\n                }\n                return true\n            }).toSeq\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293377,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa0jrkqsi.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0jrkqsi.scala:37:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m until n).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    Range\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa0jrkqsi.scala:48:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m until n).filter(x -> x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa0jrkqsi.scala:59:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m until n).filter(x -> x < n).filter(x -> {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa0jrkqsi.scala:59:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m until n).filter(x -> x < n).filter(x -> {\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0jrkqsi.scala:75:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of two integers a and\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp030e7mfd.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp030e7mfd.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp030e7mfd.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp030e7mfd.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp030e7mfd.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to n) {\n            result = result + List(i)\n        }\n        return result\n    }\n\n    // Return a list of all the even integers from 1 to n\n    // >>> listRangeEven(5)\n    // [2, 4]\n    def listRangeEven(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                result = result + List(i)\n            }\n        }\n        return result\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> listRangeOdd(5)\n    // [1, 3, 5]\n    def listRangeOdd(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to n) {\n            if (i % 2 == 1) {\n                result = result + List(i)\n            }\n        }\n        return result\n    }\n\n    // Return a list of all the multiples of 3 from 1 to n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293378,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp77a1hu8h.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp77a1hu8h.scala:40:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m            result = result + List(i)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp77a1hu8h.scala:52:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m                result = result + List(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp77a1hu8h.scala:65:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                result = result + List(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implic",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return filter(isPrime, range(2, n + 1))\n        }\n    }\n\n    // Return the sum of the primes less than or equal to n\n    // >>> sum(primes(10))\n    // 23\n    def sum(n : Long) : Long = {\n        return foldLeft(0, (x, y) => x + y, primes(n))\n    }\n\n    // Return the product of the primes less than or equal to n\n    // >>> product(primes(10))\n    // 120\n    def product(n : Long) : Long = {\n        return foldLeft(1, (x, y) => x * y, primes(n))\n    }\n\n    // Return the sum of the squares of the primes less than or equal to n\n    // >>> sumSq(primes(10))\n    // 529\n    def sumSq(n : Long) : Long = {\n        return foldLeft(0, (x, y) => x + y * y, primes(n))\n    }\n\n    // Return the product of the squares of the primes\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293376,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpq_rir30k.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq_rir30k.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq_rir30k.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: filter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq_rir30k.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq_rir30k.scala:41:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: range\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq_rir30k.scala:49:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mreturn\u001b[0m foldLeft(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y, primes(n))\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = n - 1\n            for (i <- 2 to m) {\n                if (m % i == 0) {\n                    return result\n                } else {\n                    result = (result + i).toSeq\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = n - 1\n            for (i <- 2 to m) {\n                if (m % i == 0) {\n                    return result\n                } else {\n                    result = (result + i).toSeq\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcd8qfnzy.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcd8qfnzy.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcd8qfnzy.scala:43:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to m) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (m : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcd8qfnzy.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcd8qfnzy.scala:47:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = (result + i).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of object scala.collection.immutable.Nil, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implici",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else if (n == 1) {\n            return List(1)\n        } else {\n            val result = List.empty()\n            val i = 2L\n            while (i <= n) {\n                if (n % i == 0) {\n                    // skip\n                } else {\n                    result = result.append(i)\n                    val j = i + 1L\n                    while (j <= n) {\n                        if (n % j == 0) {\n                            // skip\n                        } else {\n                            result = result.append(j)\n                            j = j + 1L\n                        }\n                    }\n                }\n                i = i + 1L\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else if (n == 1) {\n            return List(1)\n        } else {\n            val result\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293377,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp28ynt6rv.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp28ynt6rv.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp28ynt6rv.scala:43:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp28ynt6rv.scala:49:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m                    result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp28ynt6rv.scala:55:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m                            result = result.append(j)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp28ynt6rv.scala:56:30 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m                            j = j + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Reassignment to val j\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp28ynt6rv.scala:60:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m                i = i + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a greatest common divisor of two integers a and b\n    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((25l), (15l))\n    // (5l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return gcd(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((25l), (15l))\n    // (75l)\n    def lcm(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * lcm(b, a % b)\n        }\n    }\n\n    // Return a greatest common divisor of two integers a and b\n    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((25l), (15l))\n    // (5l)\n    def gcd(a : Long, b : Long) : Long\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyju7ov5f.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmpyju7ov5f.scala:69:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mgcd\u001b[0m(\u001b[36ma\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mb\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mgcd\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyju7ov5f.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyju7ov5f.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyju7ov5f.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyju7ov5f.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = n >> 1\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    return result\n                } else {\n                    result = result.prepend(i)\n                }\n            }\n            return result.prepend(n)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = n >> 1\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    return result\n                } else {\n                    result = result.prepend(i)\n                }\n            }\n            return result.prepend(n)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293378,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp58ana7we.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58ana7we.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58ana7we.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp58ana7we.scala:47:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = result.prepend(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is not a member of object scala.collection.immutable.Nil - did you mean result.prepended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp58ana7we.scala:50:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m result.prepend(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is not a member of object scala.collection.immutable.Nil - did you mean result.prepended?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58ana7we.scala:59:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.S",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (\n                Seq.range(2, n).filter(x => {\n                    return !Problem.isPrime(x)\n                }).toList\n            )\n        }\n    }\n\n    // Return true if n is prime, false otherwise\n    // >>> isPrime(2)\n    // true\n    // >>> isPrime(3)\n    // true\n    // >>> isPrime(4)\n    // false\n    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return false\n        } else if (n == 2) {\n            return true\n        } else if (n % 2 == 0) {\n            return false\n        } else {\n            return (\n                Seq.range(3, Math.sqrt(n), 2).exists(x => {\n                    return (n % x == 0)\n                })\n            )\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293379,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpfc8_ua7t.scala:75:14 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimes\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfc8_ua7t.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfc8_ua7t.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfc8_ua7t.scala:42:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                Seq.range(\u001b[31m2\u001b[0m, n).filter(\u001b[36mx\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfc8_ua7t.scala:65:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                Seq.range(\u001b[31m3\u001b[0m, Math.sqrt(n), \u001b[31m2\u001b[0m).exists(\u001b[36mx\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfc8_ua7t.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfc8_ua7t.scala:79:11 -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = new Vector[Long](n)\n            result.set(0, 2l)\n            result.set(1, 3l)\n            for (i <- 2l) until (n - 1) {\n                val p = result.get(i)\n                if (p * p > n) break\n                for (j <- (i + 1) until (n - 1)) {\n                    val q = result.get(j)\n                    if (q * q > n) break\n                    if (q % p == 0) {\n                        break\n                    } else {\n                        result.set(j, result.get(j) + 1)\n                    }\n                }\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = new Vector\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy6uqvaq9.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy6uqvaq9.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy6uqvaq9.scala:41:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mVector\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mconstructor\u001b[0m \u001b[35mVector\u001b[0m cannot be accessed as a member of Vector[Long] from module class Problem$.\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy6uqvaq9.scala:44:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2l\u001b[0m) until (n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy6uqvaq9.scala:66:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy6uqvaq9.scala:68:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mVector\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mconstructor\u001b[0m \u001b[35mVector\u001b[0m cannot be accessed as a member of Vector from ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    break\n                } else {\n                    result = result.prepend(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    break\n                } else {\n                    result = result.prepend(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwtvpy4q8.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwtvpy4q8.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwtvpy4q8.scala:45:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwtvpy4q8.scala:47:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = result.prepend(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is not a member of object scala.collection.immutable.Nil - did you mean result.prepended?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwtvpy4q8.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwtvpy4q8.scala:59:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return filter(primes(n - 1), (x -> x < n))\n        }\n    }\n\n    // Return the sum of all the primes less than or equal to n\n    // >>> sum(primes(10))\n    // 23\n    def sum(n : Long) : Long = {\n        if (n < 2) {\n            return 0\n        } else {\n            return foldLeft(0, primes(n), (x, y) -> x + y)\n        }\n    }\n\n    // Return the product of all the primes less than or equal to n\n    // >>> product(primes(10))\n    // 23\n    def product(n : Long) : Long = {\n        if (n < 2) {\n            return 1\n        } else {\n            return foldLeft(1, primes(n), (x, y) -> x * y)\n        }\n    }\n\n    // Return the sum of the squares of all the primes less than or equal to n\n    // >>> sumSq(primes(10))\n    // 466\n    def sumS\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmp0o9hjzz1.scala:70:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36msumS\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0o9hjzz1.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0o9hjzz1.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0o9hjzz1.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(primes(n - \u001b[31m1\u001b[0m), (x -> x < n))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: filter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0o9hjzz1.scala:41:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(primes(n - \u001b[31m1\u001b[0m), (x -> x < n))\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0o9hjzz1.scala:52:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m foldLeft(\u001b[31m0\u001b[0m, primes(n), (x, y) -> x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: foldLeft\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compil",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else {\n            return (1 until n).toSeq\n        }\n    }\n\n    // Return a list of the first n primes\n    // >>> primes(5)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else {\n            return (2 until n).filter(Problem.isPrime).toSeq\n        }\n    }\n\n    // Return true if an integer is prime\n    // >>> isPrime(2)\n    // true\n    // >>> isPrime(4)\n    // false\n    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return false\n        } else if (n == 2) {\n            return true\n        } else if (n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo5wfo40z.scala:67:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo5wfo40z.scala:41:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m until n).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    Range\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo5wfo40z.scala:52:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m until n).filter(Problem.isPrime).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo5wfo40z.scala:66:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (n\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                   Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return a + b\n        }\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b\n        }\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqo7hq0gn.scala:72:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m        } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (b == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    Unit\n\u001b[31m   |\u001b[0m               Required: Long\n\u001b[31m   |\u001b[0m               Maybe you are missing an else part for the conditional?\n\u001b[31m73 |\u001b[0m            \u001b[33mreturn\u001b[0m a\n\u001b[31m74 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    return Nil\n                }\n            }\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    result = Cons(i, result)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    return Nil\n                }\n            }\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    result = Cons\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi2vprv74.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi2vprv74.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi2vprv74.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                           Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2vprv74.scala:50:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m                    result = Cons(i, result)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: Cons\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi2vprv74.scala:53:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi2vprv74.scala:62:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 1 until n) yield i\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> listRange(10, even=True)\n    // [2, 4, 6, 8, 10]\n    def listRange(n : Int, even : Boolean = false) : Seq[Long] = {\n        for (i <- 2 until n) {\n            if (even) {\n                if (i % 2 == 0) yield i\n            } else {\n                yield i\n            }\n        }\n    }\n\n    // Return a list of all the primes from 2 to n\n    // >>> listRange(10, primes=True)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    def listRange(n : Int, primes : Boolean = false) : Seq[Long] = {\n        for (i <- 2 until n) {\n            if (primes) {\n                if (isPrime(i)) yield i\n            } else {\n                yield i\n            }\n        }\n    }\n\n    // Return a list of all the prime factors of n\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8kuh7q2d.scala:47:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                'then' expected, but 'yield' found\n\u001b[31m\u001b[31m-- [E103] Syntax Error: /tmp/tmp8kuh7q2d.scala:49:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m                \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Illegal start of statement\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8kuh7q2d.scala:60:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m                \u001b[33mif\u001b[0m (isPrime(i)) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                'then' expected, but 'yield' found\n\u001b[31m\u001b[31m-- [E103] Syntax Error: /tmp/tmp8kuh7q2d.scala:62:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m                \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Illegal start of statement\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8kuh7q2d.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8kuh7q2d.scala:38:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8kuh7q2d.scala:60:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m                \u001b[33mif",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) yield (i + 1)\n    }\n\n    // Return a list of the first n positive integers\n    // >>> listRange(5, True)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int, positiveOnly : Boolean) : Seq[Long] = {\n        for (i <- 0 until n) {\n            if (positiveOnly) {\n                yield (i + 1)\n            } else {\n                yield (i + 1)\n            }\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> listRange(5, True)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int, positiveOnly : Boolean, skip : Int) : Seq[Long] = {\n        for (i <- 0 until n) {\n            if (i >= skip) {\n                if (positiveOnly) {\n                    yield (i + 1)\n                } else {\n                    yield (i + 1)\n                }\n            }\n        }\n    }\n\n    // Return a list of the first n positive integers\n    \n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E103] Syntax Error: /tmp/tmp_h4_9tbx.scala:47:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Illegal start of statement\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E103] Syntax Error: /tmp/tmp_h4_9tbx.scala:49:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m                \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Illegal start of statement\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E103] Syntax Error: /tmp/tmp_h4_9tbx.scala:61:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m                    \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Illegal start of statement\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E103] Syntax Error: /tmp/tmp_h4_9tbx.scala:63:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m                    \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Illegal start of statement\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_h4_9tbx.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_h4_9tbx.scala:38:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = n - 1\n            for (i <- 2 to m) {\n                if (m % i == 0) {\n                    return result\n                } else {\n                    result = (result + i).toSeq\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = n - 1\n            for (i <- 2 to m) {\n                if (m % i == 0) {\n                    return result\n                } else {\n                    result = (result + i).toSeq\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes3(10)\n    // [2\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw8p3rfll.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw8p3rfll.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw8p3rfll.scala:43:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to m) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (m : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw8p3rfll.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw8p3rfll.scala:47:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = (result + i).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of object scala.collection.immutable.Nil, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implici",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    return result.toList\n                }\n            }\n            result.add(2)\n            for (i <- 3 to m) {\n                if (n % i == 0) {\n                    return result.toList\n                }\n            }\n            result.add(n)\n            return result.toList\n        }\n    }\n\n    // Return a list of the first n primes\n    // >>> firstPrimes(10)\n    // [2, 3, 5, 7]\n    def firstPrimes(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    return result.toList\n                }\n            }\n            result\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp520kvki2.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp520kvki2.scala:43:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to m) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (m : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp520kvki2.scala:48:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            result.add(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue add is not a member of scala.collection.mutable.ListBuffer[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.buffer AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.mutableSeq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.mutableSeq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.collection asJava\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp520kvki2.scala:49:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to m) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (m : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m long",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqhnr1vy7.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (primes(n - 1).tail.map(x => x + 2)).prepend(2)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Int) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (Seq(2, n).filter(x => x % 2 == 0)).map(x => x + 2).prepend(2)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes3(10)\n    // [2, 3, 5, 7]\n    def primes3(n : Int) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (Seq(2, n).filter(x => x % 2 == 0)).map(x => x + 2\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293386,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpetet_gzv.scala:64:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpetet_gzv.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetet_gzv.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpetet_gzv.scala:41:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (primes(n - \u001b[31m1\u001b[0m).tail.map(\u001b[36mx\u001b[0m => x + \u001b[31m2\u001b[0m)).prepend(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is not a member of scala.collection.mutable.Seq[Long] - did you mean scala.collection.mutable.Seq[Long].prepended?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetet_gzv.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpetet_gzv.scala:52:71 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (Seq(\u001b[31m2\u001b[0m, n).filter(\u001b[36mx\u001b[0m => x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m)).map(\u001b[36mx\u001b[0m => x + \u001b[31m2\u001b[0m).prepend(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue p",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    return result\n                } else {\n                    result = (result + i).updated(result.updated(i))\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    return result\n                } else {\n                    result = (result + i).updated(result.updated(i))\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293386,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgez08pl_.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgez08pl_.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgez08pl_.scala:43:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to m) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (m : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgez08pl_.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgez08pl_.scala:47:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = (result + i).updated(result.updated(i))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of object scala.collection.immutable.Nil, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (primes(n - 2) ++ (2 toSeq(2 to i while (i lt n)))).toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (2 toSeq(2 to i while (i lt n)) ++ (primes2(n - 2) ++ (2 toSeq(2 to i while (i lt n))))).toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes3(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (2 toSeq(2 to i while (i lt n)) ++ (primes3(n - 2) ++ (2 toSeq(2 to i while (i lt\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4amle9yz.scala:37:53 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            \u001b[33mreturn\u001b[0m (primes(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n)))).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         ')' expected, but 'while' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4amle9yz.scala:48:35 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n)) ++ (primes2(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n))))).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   ')' expected, but 'while' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4amle9yz.scala:48:89 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n)) ++ (primes2(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n))))).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         ')' expected, but 'while' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4amle9yz.scala:59:35 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n)) ++ (primes3(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   ')' expected, but 'while' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4amle9yz.scala:59:89 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n)) ++ (primes3(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    return result\n                } else {\n                    result = (result + i).updated(result.updated(i))\n                }\n            }\n            return result\n        }\n    }\n\n    // Return the sum of all the primes less than or equal to n\n    // >>> sumPrimes(10)\n    // 23\n    def sumPrimes(n : Int) : Long = {\n        if (n < 2) {\n            return 0\n        } else {\n            val result = 0\n            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    result = result + i\n                }\n            }\n            return result\n        }\n    }\n\n    // Return the product of all the primes less than or equal to n\n    // >>> productPrimes(10)\n    // 23\n    def productPrimes(n : Int) : Long\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt8qmy8iw.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt8qmy8iw.scala:47:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = (result + i).updated(result.updated(i))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of object scala.collection.immutable.Nil, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpt8qmy8iw.scala:65:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                    result = result + i\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmpt8qmy8iw.scala:75:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mproductPrimes\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m) : \u001b[35mLong\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mproductPrimes\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt8qmy8iw.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt8qmy8i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqhnr1vy7.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n <= 2) {\n            return List(2)\n        } else {\n            val result = List.empty[Long]\n            val isPrime = scala.math.isPrime[Long](n)\n            for (i <- 1 until n) {\n                if (isPrime(i)) {\n                    result = result.append(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n <= 2) {\n            return List(2)\n        } else {\n            val result = List.empty[Long]\n            val isPrime = scala.math.isPrime[Long](n)\n            for (i <- 1 until n) {\n                if (isPrime(i)) {\n                    result = result.append(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> pr\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeh15u9pv.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeh15u9pv.scala:42:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36misPrime\u001b[0m = scala.math.isPrime[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value isPrime is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeh15u9pv.scala:45:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeh15u9pv.scala:60:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36misPrime\u001b[0m = scala.math.isPrime[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value isPrime is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeh15u9pv.scala:63:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m                    result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpeh15u9pv.scala:55:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimes\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef primes(n: Int): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef primes(n: Int): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 55\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqhnr1vy7.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = scala.math.max(n, 2)\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    break\n                } else {\n                    result.append(i)\n                }\n            }\n            return result.toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = scala.math.max(n, 2)\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    break\n                } else {\n                    result.append(i)\n                }\n            }\n            return result.toList\n        }\n    }\n\n    // Return a list of all the prime numbers less\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293384,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpslai71uz.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpslai71uz.scala:45:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpslai71uz.scala:65:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpslai71uz.scala:57:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimes\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef primes(n: Int): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef primes(n: Int): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 57\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpslai71uz.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpslai71uz.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(0, 10)\n    // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    def listRange(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until n) {\n            result = result + List(i)\n        }\n        return result\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> listRange(0, 10, even=True)\n    // [0, 2, 4, 6, 8]\n    def listRange(n : Int, even : Boolean) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until n) {\n            if (even) {\n                result = result + List(i * 2)\n            } else {\n                result = result + List(i)\n            }\n        }\n        return result\n    }\n\n    // Return a list of all the primes from 2 to n\n    // >>> listRange(0, 100, prime=True)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293392,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw16g2bsq.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw16g2bsq.scala:40:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m            result = result + List(i)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw16g2bsq.scala:52:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m                result = result + List(i * \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw16g2bsq.scala:54:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m                result = result + List(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.N",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        return greatestCommonDivisor(a, b % a)\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n        if (a < b) return leastCommonMultiple(b, a % b)\n        return leastCommonMultiple(a, b % a)\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsayr7479.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsayr7479.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsayr7479.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsayr7479.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsayr7479.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return a + b\n        }\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b\n        }\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqo7hq0gn.scala:72:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m        } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (b == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    Unit\n\u001b[31m   |\u001b[0m               Required: Long\n\u001b[31m   |\u001b[0m               Maybe you are missing an else part for the conditional?\n\u001b[31m73 |\u001b[0m            \u001b[33mreturn\u001b[0m a\n\u001b[31m74 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return filter(Long.class, x -> {\n                if (x <= n) {\n                    return true\n                } else {\n                    return false\n                }\n            }, range(2, n + 1))\n        }\n    }\n\n    // Return the sum of all the primes less than or equal to n\n    // >>> sum(primes(10))\n    // 23\n    def sum(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n        } else {\n            return foldLeft(0l, (x, y) -> x + y, primes(n))\n        }\n    }\n\n    // Return the product of all the primes less than or equal to n\n    // >>> product(primes(10))\n    // 23\n    def product(n : Long) : Long = {\n        if (n == 0) {\n            return 1\n        } else {\n            return foldLeft(1l, (x, y) -> x * y, primes(n))\n        }\n    }\n\n    // Return the sum of the squares of all the\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293389,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxsqgqxm_.scala:41:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(Long.\u001b[33mclass\u001b[0m, x -> {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               an identifier expected, but 'class' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxsqgqxm_.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxsqgqxm_.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxsqgqxm_.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(Long.\u001b[33mclass\u001b[0m, x -> {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: filter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxsqgqxm_.scala:41:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(Long.\u001b[33mclass\u001b[0m, x -> {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxsqgqxm_.scala:47:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            }, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: range\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explan",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a number of the form 2^k * 5^j * 3^i\n    // >>> powerOfThree(3)\n    // (3l)\n    // >>> powerOfThree(5)\n    // (15l)\n    // >>> powerOfThree(15)\n    // (511l)\n    def powerOfThree(n : Long) : Long = {\n        if (n == 0) {\n            return 1\n        } else if (n == 1) {\n            return 3\n        } else if (n % 3 == 0) {\n            return powerOfThree(n / 3)\n        } else {\n            return powerOfThree(n / 3) * 3\n        }\n    }\n\n    // Return a number of the form 2^k * 5^j * 3^i * 7^l\n    // >>> powerOfSeven(3)\n    // (3l)\n    // >>> powerOfSeven(5)\n    // (15l)\n    // >>> powerOfSeven(15)\n    // (511l)\n    // >>> powerOfSeven(25)\n    // (2047l)\n    def powerOfSeven(n : Long) : Long = {\n        if (n == 0) {\n            return 1\n        } else if (n == 1) {\n            return 7\n        } else if (n % 7 == 0) {\n            return powerOfSeven(n / 7)\n        } else\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293386,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp2c46_r2r.scala:69:14 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m        } \u001b[33melse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (-2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n    // (2.0l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    // >>> remainder((3l), (5l))\n    // (2l)\n    // >>> remainder((25l\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293386,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplg8_9se1.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplg8_9se1.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplg8_9se1.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplg8_9se1.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplg8_9se1.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a number of the form 2^k * 5^j * 3^i\n    // >>> numberOfTheForm(2, 2, 2)\n    // (30)\n    // >>> numberOfTheForm(2, 2, 3)\n    // (120)\n    // >>> numberOfTheForm(2, 3, 2)\n    // (210)\n    // >>> numberOfTheForm(2, 3, 3)\n    // (210)\n    def numberOfTheForm(k : Int, j : Int, i : Int) : Int = {\n        if (k == 0 && j == 0 && i == 0) {\n            return 0\n        } else if (k == 0 && j == 0 && i != 0) {\n            return i\n        } else if (k == 0 && j != 0 && i == 0) {\n            return j\n        } else if (k == 0 && j != 0 && i != 0) {\n            return j * i\n        } else if (k != 0 && j == 0 && i == 0) {\n            return k\n        } else if (k != 0 && j == 0 && i != 0) {\n            return k * i\n        } else if (k != 0 && j != 0 && i == 0) {\n            return k * j\n        } else {\n            return k * j * i\n        }\n    }\n\n    // Return a number of the form 2^k * 5^j\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293387,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmlykdd6z.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmlykdd6z.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmlykdd6z.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmlykdd6z.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmlykdd6z.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (1.5l)\n    // >>> quotient((25l), (15l))\n    // (12l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    // >>> remainder((3l), (5l))\n    // (3l)\n    // >>> remainder((25l), (15l))\n    // (5l)\n    def remainder(a : Long, b : Long) : Long = {\n        return a % b\n    }\n\n    // Return a modulo of two integers\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293386,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr953981p.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr953981p.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr953981p.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr953981p.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr953981p.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a number of factors of a number n\n    // >>> numberOfFactors(2l)\n    // (2l)\n    // >>> numberOfFactors(6l)\n    // (1l, 2l, 3l)\n    def numberOfFactors(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 0) {\n            return List(0)\n        } else {\n            return numberOfFactors(n - 1).append(n)\n        }\n    }\n\n    // Return a sum of all numbers that are factors of a number n\n    // >>> sumOfFactors(2l)\n    // (2l)\n    // >>> sumOfFactors(6l)\n    // (2l, 3l)\n    def sumOfFactors(n : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 0) {\n            return List(0)\n        } else {\n            return sumOfFactors(n - 1).append(n)\n        }\n    }\n\n    // Return a product of all numbers that are factors of a number n\n    // >>> productOfFactors(2l)\n    // (2l)\n    // >>> productOfFactors(6l)\n    // (2l, 3l)\n    def productOfFactors(n : Long) : scala.\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293392,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbbpsqayu.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbbpsqayu.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbbpsqayu.scala:43:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mreturn\u001b[0m numberOfFactors(n - \u001b[31m1\u001b[0m).append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbbpsqayu.scala:56:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mreturn\u001b[0m sumOfFactors(n - \u001b[31m1\u001b[0m).append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmpbbpsqayu.scala:65:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mproductOfFactors\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : scala.\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mproductOfFactors\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbbpsqayu.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbbpsqayu.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (1 to n).toSeq.map(i => i + 1)\n        }\n    }\n\n    // Return a list of the first n primes\n    // >>> primes(5)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (2 to n).toSeq.filter(i => {\n                if (i == 2) {\n                    return true\n                } else if (i % 2 == 0) {\n                    return false\n                } else {\n                    return true\n                }\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293392,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphggbeyj2.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphggbeyj2.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphggbeyj2.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphggbeyj2.scala:43:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq.map(\u001b[36mi\u001b[0m => i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphggbeyj2.scala:54:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphggbeyj2.scala:58:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m                    \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (\u001b[31mtrue\u001b[0m : Boolean)\n\u001b[31m   |\u001b[0m                           Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-expla",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = scala.math.max(1, n / 2)\n            for (i <- 0 until m) {\n                if (n % i == 0) {\n                    break\n                } else {\n                    result.append(i)\n                }\n            }\n            return result.toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = scala.math.max(1, n / 2)\n            for (i <- 0 until m) {\n                if (n % i == 0) {\n                    break\n                } else {\n                    result.append(i)\n                }\n            }\n            return result.toList\n        }\n    }\n\n    // Return a list of all\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293389,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjw71wb1f.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjw71wb1f.scala:45:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjw71wb1f.scala:65:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpjw71wb1f.scala:57:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimes\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef primes(n: Int): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef primes(n: Int): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 57\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjw71wb1f.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjw71wb1f.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def listRange(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until n) {\n            result = result + List(i + 1)\n        }\n        return result\n    }\n\n    // Return a list of all the even integers from 1 to n\n    // >>> listRangeEven(10)\n    // [2, 4, 6, 8, 10]\n    def listRangeEven(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until n) {\n            if (i % 2 == 0) {\n                result = result + List(i)\n            }\n        }\n        return result\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> listRangeOdd(10)\n    // [1, 3, 5, 7, 9]\n    def listRangeOdd(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until n) {\n            if (i % 2 == 1) {\n                result = result + List(i)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293394,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp18zuj_sb.scala:40:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m            result = result + List(i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp18zuj_sb.scala:52:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m                result = result + List(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp18zuj_sb.scala:65:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                result = result + List(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            return (1 until n).toSeq\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> evens(5)\n    // [2, 4]\n    def evens(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            return (2 until n).filter(x -> x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> odds(5)\n    // [1, 3, 5]\n    def odds(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            return (1 until n).filter(x -> x % 2 != 0).toSeq\n        }\n    }\n\n    // Return a list of all the multiples of\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293393,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkxjlxe79.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkxjlxe79.scala:41:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m until n).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    Range\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkxjlxe79.scala:52:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m until n).filter(x -> x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkxjlxe79.scala:63:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m until n).filter(x -> x % \u001b[31m2\u001b[0m != \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkxjlxe79.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkxjlxe79.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = n >> 1\n            val i = 2\n            while (i <= m) {\n                if (n % i == 0) {\n                    return Nil\n                } else {\n                    result = (result + i).updated(result)\n                }\n                i = i + 1\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = n >> 1\n            val i = 2\n            while (i <= m) {\n                if (n % i == 0) {\n                    return Nil\n                } else {\n                    result = (result + i).updated(result)\n                }\n                i = i + 1\n            }\n            return result\n        }\n    }\n\n    // Return a list of all\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293395,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphhdks7b4.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhdks7b4.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhdks7b4.scala:46:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m                    \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                           Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphhdks7b4.scala:48:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m                    result = (result + i).updated(result)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of object scala.collection.immutable.Nil, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmphhdks7b4.scala:50:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m                i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when comp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val i = 2L\n            while (i <= n) {\n                if (isPrime(i)) {\n                    result.append(i)\n                }\n                i = i + 1L\n            }\n            return result.toList\n        }\n    }\n\n    // Return a list of the prime factors of a positive integer n\n    // >>> primeFactors(12)\n    // [2, 2, 3]\n    def primeFactors(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val i = 2L\n            while (i <= n) {\n                if (n % i == 0) {\n                    result.append(i)\n                    n = n / i\n                } else {\n                    i = i + 1L\n                }\n            }\n            return result.toList\n        }\n    }\n\n    // Return a list of the prime factors of a positive integer n\n    // >>> primeFactors(12)\n    \n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293390,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdqdrvfjs.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdqdrvfjs.scala:44:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdqdrvfjs.scala:47:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                i = i + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdqdrvfjs.scala:65:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                    n = n / i\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpdqdrvfjs.scala:67:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m                    i = i + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdqdrvfjs.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdqdrvfjs.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        if (b < a) return greatestCommonDivisor(a, b % a)\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293394,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:13)\n\tat Problem$.greatestCommonDivisor(tmpf_6q6ufg.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return filter(isPrime, range(2, n + 1))\n        }\n    }\n\n    // Return a list of the prime factors of a positive integer n\n    // >>> primeFactors(16)\n    // [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    def primeFactors(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return filter(isPrimeFactor, range(2, n + 1))\n        }\n    }\n\n    // Return a list of the divisors of a positive integer n\n    // >>> divisors(16)\n    // [1, 2, 4, 8, 16, 2, 4, 8, 16, 2, 4, 8, 16, 2, 4, 8, 16]\n    def divisors(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return filter(isDivisor,\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293396,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_7asaaw6.scala:64:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_7asaaw6.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_7asaaw6.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_7asaaw6.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: filter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_7asaaw6.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_7asaaw6.scala:41:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: range\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_7asaaw6.scala:50:19 ------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return a + b\n        }\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b\n        }\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (-2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbgpkas6.scala:72:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m        } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (b == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    Unit\n\u001b[31m   |\u001b[0m               Required: Long\n\u001b[31m   |\u001b[0m               Maybe you are missing an else part for the conditional?\n\u001b[31m73 |\u001b[0m            \u001b[33mreturn\u001b[0m a\n\u001b[31m74 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        else return greatestCommonDivisor(a, b % a)\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    return result\n                } else {\n                    result = (result + i).updated(result.updated(i))\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of the prime factors of a positive integer n\n    // >>> primeFactors(12)\n    // [2, 2, 3]\n    def primeFactors(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    result = (result + i).updated(result.updated(i))\n                }\n            }\n            return result\n        }\n    }\n\n    // Return the sum of all the positive integers less than or equal to n\n    // >>> sum(\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293398,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_z90bwrm.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_z90bwrm.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_z90bwrm.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_z90bwrm.scala:47:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = (result + i).updated(result.updated(i))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of object scala.collection.immutable.Nil, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_z90bwrm.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def listRange(n : Int) : Seq[Long] = {\n        if (n < 1) {\n            return Nil\n        } else {\n            return (1 to n).toSeq\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> listRangeEven(10)\n    // [2, 4, 6, 8, 10]\n    def listRangeEven(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (2 to n).filter(x -> x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> listRangeOdd(10)\n    // [1, 3, 5, 7, 9]\n    def listRangeOdd(n : Int) : Seq[Long] = {\n        if (n < 1) {\n            return Nil\n        } else {\n            return (1 to n).filter(x -> x % 2 != 0).toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers from 2 to n\n    // >>> list\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjp3l38gj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjp3l38gj.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjp3l38gj.scala:41:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    scala.collection.immutable.Range.Inclusive\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjp3l38gj.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjp3l38gj.scala:52:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m to n).filter(x -> x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjp3l38gj.scala:61:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        return greatestCommonDivisor(a, b % a)\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n        if (a < b) return leastCommonMultiple(b, a % b)\n        return leastCommonMultiple(a, b % a)\n    }\n\n    // Return a greatest common divisor of a list of integers\n    // >>> greatestCommonDivisor([3l, 5l, 25l])\n    // (1l)\n    // >>> greatestCommonDivisor([3l, 5l, 15l])\n    // (5l)\n    def greatestCommonDivisor(xs : List[Long]) : Long = {\n        if (xs.isEmpty()) return 0\n        return greatestCommonDivisor(xs.head, xs.tail.head)\n    }\n\n    // Return a least common multiple of a list of integers\n    // >>> leastCommonMultiple([3l, 5l, 25l])\n    // (75l)\n    // >>> leastCommonMultiple([3l, 5l, 15l])\n    // (15l)\n    def leastCommonMultiple(xs : List[Long]) : Long = {\n        if (xs.isEmpty()) return 0\n        return leastCommonMultiple(xs.head, xs.tail.head)\n    }\n\n    // Return a list of integers that are multiples of a given integer\n    // >>> multiples(3l)\n    // [3l, 6l, 9l, 12l, 15l, 18l, 21l, 24l, 27l, 30l, 33l, 36l, 39l, 42l, 45l,\n    // 48l, 51l, 54l, 57l, 60l\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293393,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwscy_d42.scala:60:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpwscy_d42.scala:34:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mif\u001b[0m (xs.isEmpty()) \u001b[33mreturn\u001b[0m \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpwscy_d42.scala:44:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mif\u001b[0m (xs.isEmpty()) \u001b[33mreturn\u001b[0m \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwscy_d42.scala:54:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwscy_d42.scala:55:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwscy_d42.scala:56:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        } else {\n            var result = mutable.List[Long]()\n            for (i <- 0 until n) {\n                result.append(i + 1)\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> rangeUpTo(5)\n    // [1, 2, 3, 4, 5]\n    def rangeUpTo(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        } else {\n            var result = mutable.List[Long]()\n            for (i <- 0 until n) {\n                result.append(i + 1)\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> rangeDownTo(5)\n    // [1, 2, 3, 4, 5]\n    def rangeDownTo(n : Int) : Seq[Long] = {\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8dp8vyp_.scala:41:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8dp8vyp_.scala:56:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8dp8vyp_.scala:67:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mrangeDownTo\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m) : \u001b[35mSeq\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Unit\n\u001b[31m   |\u001b[0m                                  Required: collection.mutable.Seq[Long]\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (\n                Seq.unfold(2, x -> x < n, (x, acc) -> {\n                    if (x % 2 == 0) {\n                        return acc\n                    } else {\n                        return Seq.append(acc, x)\n                    }\n                })\n            ).toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (\n                Seq.unfold(2, x -> x < n, (x, acc) -> {\n                    if (x % 2 == 0) {\n                        return acc\n                    } else {\n                        return Seq.append(acc, x)\n                    }\n                })\n            ).toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes3(10\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293398,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqizdlrqs.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqizdlrqs.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqizdlrqs.scala:42:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                Seq.unfold(\u001b[31m2\u001b[0m, x -> x < n, (x, acc) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqizdlrqs.scala:42:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                Seq.unfold(\u001b[31m2\u001b[0m, x -> x < n, (x, acc) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqizdlrqs.scala:42:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                Seq.unfold(\u001b[31m2\u001b[0m, x -> x < n, (x, acc) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Not found: acc\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqizdlrqs.scala:43:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                    \u001b[33mif\u001b[0m (x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a number of the form 2^n + 1\n    // >>> powerOfTwoPlusOne((3l))\n    // (4l)\n    // >>> powerOfTwoPlusOne((5l))\n    // (8l)\n    def powerOfTwoPlusOne(n : Long) : Long = {\n        if (n == 0) {\n            return 1\n        } else {\n            return 2 * powerOfTwoPlusOne(n - 1)\n        }\n    }\n\n    // Return a number of the form 2^n - 1\n    // >>> powerOfTwoMinusOne((3l))\n    // (2l)\n    // >>> powerOfTwoMinusOne((5l))\n    // (4l)\n    def powerOfTwoMinusOne(n : Long) : Long = {\n        if (n == 0) {\n            return 1\n        } else {\n            return 2 * powerOfTwoMinusOne(n - 1)\n        }\n    }\n\n    // Return a number of the form 2^n\n    // >>> powerOfTwo((3l))\n    // (8l)\n    // >>> powerOfTwo((5l))\n    // (32l)\n    def powerOfTwo(n : Long) : Long = {\n        if (n == 0) {\n            return 1\n        } else {\n            return 2 * powerOfTwo(n - 1)\n        }\n    }\n\n    // Return\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293393,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph35oyggs.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph35oyggs.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph35oyggs.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph35oyggs.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph35oyggs.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            return (1 until n).toSeq\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> evens(10)\n    // [2, 4, 6, 8, 10]\n    def evens(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            return (2 until n).filter(x -> x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> odds(10)\n    // [1, 3, 5, 7, 9]\n    def odds(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            return (1 until n).filter(x -> x % 2 != 0).toSeq\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293399,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6mcbhdad.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mcbhdad.scala:41:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m until n).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    Range\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6mcbhdad.scala:52:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m until n).filter(x -> x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6mcbhdad.scala:63:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m until n).filter(x -> x % \u001b[31m2\u001b[0m != \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mcbhdad.scala:72:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp6mcbhdad.scala:65:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m65 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(1, 5)\n    // [1, 2, 3, 4]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            var result = mutable.List[Long]()\n            for (i <- 0 until n) {\n                result.append(i + 1)\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of the first n primes\n    // >>> primes(10)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            var result = mutable.List[Long]()\n            var i = 2\n            while (i < n) {\n                if (isPrime(i)) {\n                    result.append(i)\n                }\n                i = i + 1\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return the sum of the squares of the first n primes\n    // >>> primesToThePowerOf2\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293395,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz8prvky6.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz8prvky6.scala:41:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz8prvky6.scala:56:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz8prvky6.scala:59:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m                \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz8prvky6.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz8prvky6.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation avail",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of two integers a and b\n    // >>> modulo((3l), (5l))\n    // (3l)\n    // >>> modulo((25l),\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293393,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4dba3byw.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4dba3byw.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4dba3byw.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4dba3byw.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4dba3byw.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a) / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (\n                Seq.range(2, n)\n                    .filter(x => x % 2 == 0)\n                    .filter(x => x < n)\n                    .filter(x => {\n                        if (x == 2) {\n                            return true\n                        } else {\n                            return (x - 1) % x == 0\n                        }\n                    })\n            )\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (\n                Seq.range(2, n)\n                    .filter(x => x % 2 == 0)\n                    .filter(x => x < n)\n                    .filter(x => {\n                        if (x == 2) {\n                            return true\n                        } else {\n                            return (x - 1) % x == 0\n                        }\n                    })\n            )\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293399,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphxvscp6o.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphxvscp6o.scala:35:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmphxvscp6o.scala:38:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m                Seq.range(\u001b[31m2\u001b[0m, n)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphxvscp6o.scala:57:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmphxvscp6o.scala:60:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m                Seq.range(\u001b[31m2\u001b[0m, n)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphxvscp6o.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphxvs",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val i = 2L\n            while (i <= n) {\n                if (n % i == 0) {\n                    result = result.append(i)\n                    i = i + 1\n                } else {\n                    i = i + 1\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val i = 2L\n            while (i <= n) {\n                if (n % i == 0) {\n                    result = result.append(i)\n                    i = i + 1\n                } else {\n                    i = i + 1\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293400,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzj2afrrn.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzj2afrrn.scala:45:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of object scala.collection.immutable.Nil - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzj2afrrn.scala:46:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m                    i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzj2afrrn.scala:48:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m                    i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzj2afrrn.scala:66:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m                    result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of object scala.collection.immutable.Nil - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzj2afrrn.scala:67:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m                    i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzj2afrrn.scala:69:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m                    i = i + \u001b[31m1\u001b[0m\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(1, n / 2)\n            for (i <- 1 until m) {\n                if (n % i == 0) {\n                    return result\n                } else {\n                    result = result.prepend(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(1, n / 2)\n            for (i <- 1 until m) {\n                if (n % i == 0) {\n                    return result\n                } else {\n                    result = result.prepend(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293400,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjlx00zb5.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjlx00zb5.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjlx00zb5.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjlx00zb5.scala:47:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = result.prepend(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is not a member of object scala.collection.immutable.Nil - did you mean result.prepended?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjlx00zb5.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjlx00zb5.scala:59:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val isPrime = scala.math.Numeric$.MODULE$.isPrime(n)\n            for (i <- 2 to n) {\n                if (isPrime(i)) {\n                    result = result.updated(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val isPrime = scala.math.Numeric$.MODULE$.isPrime(n)\n            for (i <- 2 to n) {\n                if (isPrime(i)) {\n                    result = result.updated(i)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293404,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptb2cspnp.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptb2cspnp.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptb2cspnp.scala:42:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36misPrime\u001b[0m = scala.math.Numeric$.MODULE$.isPrime(n)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value Numeric is not a member of math - did you mean math.Numeric?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptb2cspnp.scala:43:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to n) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (n : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmptb2cspnp.scala:45:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    result = result.updated(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter elem of \u001b[33mmethod\u001b[0m \u001b[35mupdated\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m: (index: Int, elem: B): List[B]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptb2cspnp.scala:48:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return filter(Long.class, range(2, n + 1).toSeq(), (x) => {\n                if (x == 2) {\n                    return true\n                } else if (x % 2 == 0) {\n                    return false\n                } else {\n                    return true\n                }\n            })\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return filter(Long.class, range(2, n + 1).toSeq(), (x) => {\n                if (x == 2) {\n                    return true\n                } else if (x % 2 == 0) {\n                    return false\n                } else {\n                    return true\n                }\n            })\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293403,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuvg8edvn.scala:41:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(Long.\u001b[33mclass\u001b[0m, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m).toSeq(), (\u001b[36mx\u001b[0m) => {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               an identifier expected, but 'class' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuvg8edvn.scala:60:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(Long.\u001b[33mclass\u001b[0m, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m).toSeq(), (\u001b[36mx\u001b[0m) => {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               an identifier expected, but 'class' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuvg8edvn.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuvg8edvn.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvg8edvn.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(Long.\u001b[33mclass\u001b[0m, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m).toSeq(), (\u001b[36mx\u001b[0m) => {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: filter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvg8edvn.scala:41:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to n) {\n            result = result.append(i)\n        }\n        return result\n    }\n\n    // Return a list of all the primes from 2 to n\n    // >>> listPrimes(10)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    def listPrimes(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 2 to n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n            }\n        }\n        return result\n    }\n\n    // Return a list of all the prime factors of a number\n    // >>> primeFactors(25)\n    // [5, 5]\n    def primeFactors(n : Long) : List[Long] = {\n        var result = List[Long]()\n        var i = 2\n        while (n > 1) {\n            if (n % i == 0) {\n                result = result.append(i)\n                n = n / i\n            } else {\n                i =\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293403,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpj31396yi.scala:69:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m                i =\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj31396yi.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj31396yi.scala:40:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m            result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj31396yi.scala:51:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj31396yi.scala:52:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m                result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj31396yi.scala:66:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m                result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpj31396yi.scala:67:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m                n = n / i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation av",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = n >> 1\n            val i = 2\n            while (i <= m) {\n                if (n % i == 0) {\n                    return Nil\n                } else {\n                    result.append(i)\n                    i = i + 1\n                }\n            }\n            result.append(n)\n            return result.toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = n >> 1\n            val i = 2\n            while (i <= m) {\n                if (n % i == 0) {\n                    return Nil\n                } else {\n                    result.append(i)\n                    i = i + 1\n                }\n            }\n            result.append(n)\n            return result.toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293400,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp333tix3w.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp333tix3w.scala:45:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp333tix3w.scala:68:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m                    i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp333tix3w.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp333tix3w.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp333tix3w.scala:82:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n    // (2.0l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of two integers a and b\n    // >>> modulo((3l), (5l))\n    // (2l)\n    // >>> modulo\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293400,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgoj30mal.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgoj30mal.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgoj30mal.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgoj30mal.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgoj30mal.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2l\n            for (i <- 2l to m) {\n                if (n % i == 0) {\n                    return Nil\n                } else {\n                    result = (result + i).updated(result)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2l\n            for (i <- 2l to m) {\n                if (n % i == 0) {\n                    return Nil\n                } else {\n                    result = (result + i).updated(result)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptw2_e4by.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptw2_e4by.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptw2_e4by.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                           Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptw2_e4by.scala:47:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = (result + i).updated(result)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of object scala.collection.immutable.Nil, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptw2_e4by.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (-2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n    // (2.5l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293400,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj2ce0r8q.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj2ce0r8q.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj2ce0r8q.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj2ce0r8q.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj2ce0r8q.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val i = 2L\n            while (i <= n) {\n                if (isPrime(i)) {\n                    result.append(i)\n                }\n                i = i + 1L\n            }\n            return result.toList\n        }\n    }\n\n    // Return the sum of all the primes less than or equal to n\n    // >>> sumPrimes(10)\n    // 29\n    def sumPrimes(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n        } else {\n            return foldLeft(0L, primes(n))\n        }\n    }\n\n    // Return the product of all the primes less than or equal to n\n    // >>> productPrimes(10)\n    // 629\n    def productPrimes(n : Long) : Long = {\n        if (n == 0) {\n            return 1\n        } else {\n            return foldLeft(1L, primes(n))\n        }\n    }\n\n    // Return the sum of all the even-valued primes\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293401,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmcylu4jd.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmcylu4jd.scala:44:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpmcylu4jd.scala:47:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                i = i + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmcylu4jd.scala:60:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m            \u001b[33mreturn\u001b[0m foldLeft(\u001b[31m0L\u001b[0m, primes(n))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: foldLeft\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmcylu4jd.scala:71:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m            \u001b[33mreturn\u001b[0m foldLeft(\u001b[31m1L\u001b[0m, primes(n))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: foldLeft\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmcylu4jd.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmcylu4jd.scala:79:11 --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = (n - 1) / 2l\n            for (i <- 2l to m) {\n                if (n % i == 0) {\n                    return Nil\n                }\n            }\n            for (i <- 2l to m) {\n                result.append(i)\n            }\n            return result.toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = (n - 1) / 2l\n            for (i <- 2l to m) {\n                if (n % i == 0) {\n                    return Nil\n                }\n            }\n            for (i <- 2l to m) {\n                result.append(i)\n            }\n            return result.\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293404,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa9am0d68.scala:73:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa9am0d68.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa9am0d68.scala:81:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpa9am0d68.scala:74:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m74 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqhnr1vy7.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n < 2) {\n            return List.empty()\n        } else {\n            val result = List.empty()\n            val i = 2L\n            while (i <= n) {\n                if (isPrime(i)) {\n                    result = result.append(i)\n                }\n                i = i + 1L\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n < 2) {\n            return List.empty()\n        } else {\n            val result = List.empty()\n            val i = 2L\n            while (i <= n) {\n                if (isPrime(i)) {\n                    result = result.append(i)\n                }\n                i = i + 1L\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293403,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp60g5ik0k.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp60g5ik0k.scala:39:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- Error: /tmp/tmp60g5ik0k.scala:41:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp60g5ik0k.scala:44:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp60g5ik0k.scala:45:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp60g5ik0k.scala:47:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                i = i + \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp60g5ik0k.scala:58:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        return greatestCommonDivisor(a, b % a)\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n        if (a < b) return leastCommonMultiple(b, a % b)\n        return leastCommonMultiple(a, b % a)\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference between two integers a and b\n    // >>> difference((3l), (5l))\n    // (-2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n    // (2.5l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    \n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293401,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpukm3oh94.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpukm3oh94.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpukm3oh94.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpukm3oh94.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpukm3oh94.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a) / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a sum of integers from 1 to n\n    // >>> sum(10)\n    // 45\n    def sum(n : Int) : Int = {\n        return (1 + n) * (n + 1) / 2\n    }\n\n    // Return a product of integers from 1 to n\n    // >>> product(10)\n    // 3628800\n    def product(n : Int) : Int = {\n        return n * (n + 1) / 2\n    }\n\n    // Return a list of all prime numbers from 2 to n\n    // >>> primes(20)\n    // [2, 3, 5, 7, 11, 13, 17, 19]\n    def primes(n : Int) : Seq[Int] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return filter(isPrime, range(2, n + 1))\n        }\n    }\n\n    // Return a list of all prime numbers from 2 to n\n    // >>> primes2(20)\n    // [2, 3, 5, 7, 11, 13, 17, 19]\n    def primes2(n : Int) : Seq[Int] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return filter(isPrime2, range(2, n + 1))\n        }\n    }\n\n    // Return a list of all prime numbers from 2 to n\n    // >>> primes3(20)\n    // [2, 3, 5,\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa5uulqsr.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa5uulqsr.scala:49:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Int]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa5uulqsr.scala:51:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: filter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa5uulqsr.scala:51:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa5uulqsr.scala:51:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            \u001b[33mreturn\u001b[0m filter(isPrime, range(\u001b[31m2\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: range\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa5uulqsr.scala:60:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (-2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n    // (2.0l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293402,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpem7nqluv.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpem7nqluv.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpem7nqluv.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpem7nqluv.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpem7nqluv.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n        } else {\n            return (1 to n).toSeq\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> evens(5)\n    // [2, 4]\n    def evens(n : Int) : Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n        } else {\n            return (2 to n).filter(x => x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> odds(5)\n    // [1, 3, 5]\n    def odds(n : Int) : Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n        } else {\n            return (1 to n).filter(x => x % 2 != 0).toSeq\n        }\n    }\n\n    // Return a list of all the multiples of 3 from 1 to n\n    // >>> multiples(5)\n    // [3, 6, 9, 12, 15]\n    def multiples(n :\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmbmv8gym.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmbmv8gym.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmbmv8gym.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmbmv8gym.scala:41:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    scala.collection.immutable.Range.Inclusive\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmbmv8gym.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmbmv8gym.scala:52:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m to n).filter(\u001b[36mx\u001b[0m => x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        return greatestCommonDivisor(a, b % a)\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp75w8u26w.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293404,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpee4wziwk.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpee4wziwk.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpee4wziwk.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpee4wziwk.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpee4wziwk.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (1 to n).toSeq.map(_.toLong)\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> range(5, 10)\n    // [5, 6, 7, 8, 9]\n    def range(n : Int, start : Long) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (start to (start + n - 1)).toSeq.map(_.toLong)\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> range(5, 10, 2)\n    // [5, 7, 9]\n    def range(n : Int, start : Long, step : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphs90gr3y.scala:65:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m            \u001b[33mthrow\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphs90gr3y.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs90gr3y.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphs90gr3y.scala:43:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq.map(_.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Long]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs90gr3y.scala:54:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphs90gr3y.scala:56:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mreturn\u001b[0m (start to (start + n - \u001b[31m1\u001b[0m)).toSeq.map(_.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Long]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = new Vector[Long](n)\n            val m = scala.math.max(1, n - 1)\n            for (i <- 1 until m) {\n                val p = scala.math.min(n, i)\n                if (p % 2 == 0) {\n                    p = p / 2\n                }\n                if (p == i) {\n                    result(i) = i\n                } else {\n                    for (j <- 1 until p) {\n                        result(i * j) = p\n                    }\n                }\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = new Vector[Long](n)\n            val m = scala.math.max(1, n - 1)\n            \n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptyvwe64v.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptyvwe64v.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmptyvwe64v.scala:41:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mVector\u001b[0m[\u001b[35mLong\u001b[0m](n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mconstructor\u001b[0m \u001b[35mVector\u001b[0m cannot be accessed as a member of Vector[Long] from module class Problem$.\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptyvwe64v.scala:43:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (m : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmptyvwe64v.scala:46:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m                    p = p / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val p\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptyvwe64v.scala:51:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m                    \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m until p) {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = n >> 1\n            val i = 2\n            while (i <= m) {\n                if (n % i == 0) {\n                    return Nil\n                } else {\n                    result.append(i)\n                    i = i + 1\n                }\n            }\n            result.append(n)\n            return result.toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = n >> 1\n            val i = 2\n            while (i <= m) {\n                if (n % i == 0) {\n                    return Nil\n                } else {\n                    result.append(i)\n                    i = i + 1\n                }\n            }\n            result.append(n)\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpag7we5br.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpag7we5br.scala:49:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m                    i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpag7we5br.scala:72:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m                    i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpag7we5br.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpag7we5br.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a number of the form 2^n + k, where k is an integer\n    // >>> numberOfForm(2, (3l))\n    // (7l)\n    // >>> numberOfForm(2, (5l))\n    // (11l)\n    def numberOfForm(n : Int, k : Long) : Long = {\n        if (n == 0) {\n            return k\n        } else {\n            return numberOfForm(n - 1, k * 2 + 1)\n        }\n    }\n\n    // Return a number of the form 2^n - k, where k is an integer\n    // >>> numberOfForm(2, (7l))\n    // (3l)\n    // >>> numberOfForm(2, (11l))\n    // (5l)\n    def numberOfForm2(n : Int, k : Long) : Long = {\n        if (n == 0) {\n            return k\n        } else {\n            return numberOfForm2(n - 1, k * 2 - 1)\n        }\n    }\n\n    // Return a number of the form 2^n + k, where k is an integer\n    // >>> numberOfForm2(2, (3l))\n    // (5l)\n    // >>> numberOfForm2(2, (5l))\n    // (11l)\n    def numberOfForm3(n : Int, k : Long)\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293405,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpc8srx_ja.scala:65:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mnumberOfForm3\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m, \u001b[36mk\u001b[0m : \u001b[35mLong\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpc8srx_ja.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8srx_ja.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8srx_ja.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8srx_ja.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8srx_ja.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def listRange(n : Int) : List[Long] = {\n        val result = mutable.List[Long]()\n        for (i <- 1 until n) {\n            result.append(i)\n        }\n        return result\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> listRange(10, even=True)\n    // [2, 4, 6, 8, 10]\n    def listRange(n : Int, even : Boolean = false) : List[Long] = {\n        val result = mutable.List[Long]()\n        for (i <- 2 until n) {\n            if (even && (i % 2 == 0)) {\n                result.append(i)\n            } else if (!even && (i % 2 != 0)) {\n                result.append(i)\n            }\n        }\n        return result\n    }\n\n    // Return a list of all the primes from 2 to n\n    // >>> listRange(10, primes=True)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    def listRange(n : Int, primes : Boolean = false) : List[Long\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphg7r5hc1.scala:64:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphg7r5hc1.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphg7r5hc1.scala:38:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphg7r5hc1.scala:49:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmphg7r5hc1.scala:63:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mlistRange\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m, \u001b[36mprimes\u001b[0m : \u001b[35mBoolean\u001b[0m = \u001b[31mfalse\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mlistRange\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphg7r5hc1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphg7r5hc1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to n) {\n            result = result.append(i)\n        }\n        return result\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> evenRange(5)\n    // [2, 4]\n    def evenRange(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 2 to n) {\n            if (i % 2 == 0) {\n                result = result.append(i)\n            }\n        }\n        return result\n    }\n\n    // Return a list of all the primes less than n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 2 to n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n            }\n        }\n        return result\n    }\n\n    // Return the sum of all the primes less than n\n    // >>> sumPrimes(10)\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293412,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps2q49z06.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps2q49z06.scala:40:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m            result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps2q49z06.scala:52:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m                result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps2q49z06.scala:64:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps2q49z06.scala:65:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps2q49z06.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps2q49z06.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        if (n < 1) {\n            return Nil\n        } else {\n            return (1 to n).toSeq\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> listRangeEven(5)\n    // [2, 4]\n    def listRangeEven(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (2 to n).filter(x -> x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> listRangeOdd(5)\n    // [1, 3]\n    def listRangeOdd(n : Int) : Seq[Long] = {\n        if (n < 1) {\n            return Nil\n        } else {\n            return (1 to n).filter(x -> x % 2 != 0).toSeq\n        }\n    }\n\n    // Return a list of all the multiples of 3 from 1 to n\n    // >>> listRangeMultiplesOf3(5)\n    // [3, 3, 3, 6,\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfnm9zlg6.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnm9zlg6.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnm9zlg6.scala:41:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    scala.collection.immutable.Range.Inclusive\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnm9zlg6.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfnm9zlg6.scala:52:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m to n).filter(x -> x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnm9zlg6.scala:61:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        else return greatestCommonDivisor(a, b % a)\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:13)\n\tat Problem$.greatestCommonDivisor(tmp4xzd9040.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = new Vector[Long]()\n            val m = scala.math.max(n, 2)\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    break\n                } else {\n                    result.add(i)\n                }\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = new Vector[Long]()\n            val m = scala.math.max(n, 2)\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n                    break\n                } else {\n                    result.add(i)\n                }\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293412,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi4qwbgp7.scala:74:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi4qwbgp7.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi4qwbgp7.scala:35:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi4qwbgp7.scala:37:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mVector\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mconstructor\u001b[0m \u001b[35mVector\u001b[0m cannot be accessed as a member of Vector[Long] from module class Problem$.\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi4qwbgp7.scala:39:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to m) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (m : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi4qwbgp7.scala:41:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi4qwbgp7.scala:55:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n    // (2.0l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzcb567r9.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzcb567r9.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzcb567r9.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzcb567r9.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzcb567r9.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference between two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj7syfqha.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj7syfqha.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj7syfqha.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj7syfqha.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj7syfqha.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n        } else {\n            return (1 to n).toSeq.map(x => x)\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> range(5, 10)\n    // [5, 6, 7, 8, 9]\n    def range(n : Int, start : Long) : Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n        } else {\n            return (start to (start + n - 1)).toSeq.map(x => x)\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> range(5, 10, 2)\n    // [5, 7, 9]\n    def range(n : Int, start : Long, step : Int) : Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n        } else {\n            return (start to (start + n - 1)).toSeq.map(x => x)\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> range(5, 10\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw2m00_ic.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw2m00_ic.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw2m00_ic.scala:41:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq.map(\u001b[36mx\u001b[0m => x)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw2m00_ic.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw2m00_ic.scala:52:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (start to (start + n - \u001b[31m1\u001b[0m)).toSeq.map(\u001b[36mx\u001b[0m => x)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Long]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw2m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (1 to n).toSeq.map(x => x + 1)\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> evens(5)\n    // [2, 4]\n    def evens(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (2 to n).filter(x => x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> odds(5)\n    // [1, 3, 5]\n    def odds(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp60qp3h88.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp60qp3h88.scala:43:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp60qp3h88.scala:54:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp60qp3h88.scala:56:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m to n).filter(\u001b[36mx\u001b[0m => x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp60qp3h88.scala:64:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m        \u001b[33mif\u001b[0m (n < \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m65 |\u001b[0m            \u001b[33mthrow\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (1 to n).toSeq.map(i => i + 1)\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> range(5, 10)\n    // [5, 6, 7, 8, 9]\n    def range(n : Int, start : Long) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (start to (start + n - 1)).toSeq.map(i => i + 1)\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> range(5, 10, 2)\n    // [5, 7, 9]\n    def range(n : Int, start : Long, step : Int) : Seq[Long] = {\n        if (n <\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpelpjxl22.scala:64:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m        \u001b[33mif\u001b[0m (n <\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelpjxl22.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpelpjxl22.scala:43:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq.map(\u001b[36mi\u001b[0m => i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpelpjxl22.scala:54:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpelpjxl22.scala:56:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mreturn\u001b[0m (start to (start + n - \u001b[31m1\u001b[0m)).toSeq.map(\u001b[36mi\u001b[0m => i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Long]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of two integers a and\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8n3kjfrl.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8n3kjfrl.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8n3kjfrl.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8n3kjfrl.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8n3kjfrl.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp28a_3xon.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp28a_3xon.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp28a_3xon.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp28a_3xon.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp28a_3xon.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a)\n        if (b < a) return greatestCommonDivisor(a, b)\n        if (a % b == 0) return b\n        return greatestCommonDivisor(b, a % b)\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n        if (a < b) return leastCommonMultiple(b, a)\n        if (b < a) return leastCommonMultiple(a, b)\n        return a * b / greatestCommonDivisor(a, b)\n    }\n\n    // Return a list of all the integers from a to b (inclusive)\n    // >>> listRange(1, 10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def listRange(a : Int, b : Int) : Seq[Int] = {\n        if (a > b) {\n            throw new IllegalArgumentException(\"a must be <= b\")\n        }\n        return seq(a, b + 1)\n    }\n\n    // Return a list of all the even integers from a to b (inclusive)\n    // >>> listRangeEven(1, 10)\n    // [2, 4, 6, 8, 10]\n    def listRangeEven(a : Int, b : Int) : Seq[Int] = {\n        if (a > b) {\n            throw new IllegalArgumentException(\"a must be <= b\")\n        }\n        return seq(a, b + 1).filter(i -> i % 2 == 0)\n    }\n\n    // Return a list of all the odd integers from a to b (inclusive)\n    // >>> listRangeOdd(1, 10)\n    // [1, 3\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1uajdayo.scala:62:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uajdayo.scala:38:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mreturn\u001b[0m seq(a, b + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: seq\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uajdayo.scala:48:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mreturn\u001b[0m seq(a, b + \u001b[31m1\u001b[0m).filter(i -> i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: seq\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uajdayo.scala:56:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uajdayo.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uajdayo.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        return greatestCommonDivisor(a, b % a)\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n        if (a < b) return leastCommonMultiple(b, a % b)\n        return leastCommonMultiple(a, b % a)\n    }\n\n    // Return a greatest common divisor of a list of integers\n    // >>> greatestCommonDivisor([3l, 5l, 25l])\n    // (1l)\n    def greatestCommonDivisor(a : List[Long]) : Long = {\n        if (a.length == 0) return 0\n        if (a.length == 1) return a.head\n        return greatestCommonDivisor(a.tail.map(_.head).toSeq())\n    }\n\n    // Return a least common multiple of a list of integers\n    // >>> leastCommonMultiple([3l, 5l, 25l])\n    // (75l)\n    def leastCommonMultiple(a : List[Long]) : Long = {\n        if (a.length == 0) return 0\n        if (a.length == 1) return a.head\n        return leastCommonMultiple(a.tail.map(_.head).toSeq())\n    }\n\n    // Return a list of integers that are multiples of a given integer\n    // >>> multiples(5l)\n    // [0l, 5l, 10l, 15l, 20l, 25l, 30l, 35l, 40l, 45l, 50l]\n    def multiples(n : Long) : List[Long] = {\n        if (n == 0) return Nil\n        return Cons(0l, multiples(n + 1).map(x\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmput_2fh05.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmput_2fh05.scala:34:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m greatestCommonDivisor(a.tail.map(_.head).toSeq())\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value head is not a member of Long @uncheckedVariance\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmput_2fh05.scala:43:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mreturn\u001b[0m leastCommonMultiple(a.tail.map(_.head).toSeq())\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value head is not a member of Long @uncheckedVariance\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmput_2fh05.scala:51:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mreturn\u001b[0m Cons(\u001b[31m0l\u001b[0m, multiples(n + \u001b[31m1\u001b[0m).map(x\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: Cons\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmput_2fh05.scala:51:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mreturn\u001b[0m Cons(\u001b[31m0l\u001b[0m, multiples(n + \u001b[31m1\u001b[0m).map(x\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (1 to n).toSeq.map(i => i + 1)\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> range(5, 10)\n    // [5, 6, 7, 8, 9]\n    def range(n : Int, start : Long) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (start to (start + n - 1)).toSeq.map(i => i + 1)\n        }\n    }\n\n    // Return a list of the first n positive integers\n    // >>> range(5, 10, 2)\n    // [5, 7, 9]\n    def range(n : Int, start : Long, step : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpu_jp4nev.scala:65:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m            \u001b[33mthrow\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu_jp4nev.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_jp4nev.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu_jp4nev.scala:43:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq.map(\u001b[36mi\u001b[0m => i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_jp4nev.scala:54:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu_jp4nev.scala:56:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mreturn\u001b[0m (start to (start + n - \u001b[31m1\u001b[0m)).toSeq.map(\u001b[36mi\u001b[0m => i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Long]\n\u001b[31m   |\u001b[0m        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def listRange(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            return (Seq[Long]((0..n).toIterator.map(_.toLong)))\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> listRange(10, even=True)\n    // [2, 4, 6, 8, 10]\n    def listRange(n : Int, even : Boolean = false) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\")\n        } else {\n            return (Seq[Long]((0..n).toIterator.filter(_.isEven).toIterator.map(_.toLong)))\n        }\n    }\n\n    // Return a list of all the primes from 2 to n\n    // >>> listRange(10, prime=True)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    def listRange(n : Int, prime : Boolean = false) : Se\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpithpv9_n.scala:41:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (Seq[\u001b[35mLong\u001b[0m]((\u001b[31m0\u001b[0m..n).toIterator.map(_.toLong)))\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 an identifier expected, but '.' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpithpv9_n.scala:52:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (Seq[\u001b[35mLong\u001b[0m]((\u001b[31m0\u001b[0m..n).toIterator.filter(_.isEven).toIterator.map(_.toLong)))\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 an identifier expected, but '.' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpithpv9_n.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpithpv9_n.scala:59:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mlistRange\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m, \u001b[36mprime\u001b[0m : \u001b[35mBoolean\u001b[0m = \u001b[31mfalse\u001b[0m) : \u001b[35mSe\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: type Se\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmpithpv9_n.scala:59:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mlistRange\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m, \u001b[36mprime\u001b[0m : \u001b[35mBoolean\u001b[0m = \u001b[31mfalse\u001b[0m) : \u001b[35mSe\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mlistRange\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpithpv9_n.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 1 until n) yield i\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 1 until n) yield i\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 1 until n) yield i\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 1 until n) yield i\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi0k8tf55.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi0k8tf55.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0k8tf55.scala:38:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0k8tf55.scala:45:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0k8tf55.scala:52:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0k8tf55.scala:59:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqhnr1vy7.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2f0d7i8d.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2f0d7i8d.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2f0d7i8d.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2f0d7i8d.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2f0d7i8d.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    return result\n                } else {\n                    result = (result + i).updated(result.updated(i))\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    return result\n                } else {\n                    result = (result + i).updated(result.updated(i))\n                }\n            }\n            return result\n        }\n    }\n\n    // Return the sum of the squares of the first n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293421,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3i77zgoa.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3i77zgoa.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3i77zgoa.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3i77zgoa.scala:47:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = (result + i).updated(result.updated(i))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of object scala.collection.immutable.Nil, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3i77zgoa.scala:50:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqhnr1vy7.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a) / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (primes(n - 1).tail.map(_.next).append(n)).toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (Seq(2, n).filter(_.isPrime)).toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes3(10)\n    // [2, 3, 5, 7]\n    def primes3(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (Seq(2, n).filter(_.isPrime)).toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes4(10)\n    // [2, 3, 5, 7]\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293421,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxc37488i.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxc37488i.scala:35:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxc37488i.scala:37:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            \u001b[33mreturn\u001b[0m (primes(n - \u001b[31m1\u001b[0m).tail.map(_.next).append(n)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value next is not a member of Long @uncheckedVariance\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxc37488i.scala:46:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxc37488i.scala:48:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m (Seq(\u001b[31m2\u001b[0m, n).filter(_.isPrime)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value isPrime is not a member of Int\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxc37488i.scala:57:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return a + b\n        }\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b\n        }\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqo7hq0gn.scala:72:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m        } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (b == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    Unit\n\u001b[31m   |\u001b[0m               Required: Long\n\u001b[31m   |\u001b[0m               Maybe you are missing an else part for the conditional?\n\u001b[31m73 |\u001b[0m            \u001b[33mreturn\u001b[0m a\n\u001b[31m74 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of two integers a and\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp030e7mfd.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp030e7mfd.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp030e7mfd.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp030e7mfd.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp030e7mfd.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = scala.math.max(1, n / 2)\n            for (i <- 1 until m) {\n                val p = 2 * i + 1\n                if (p <= n) {\n                    result.append(p)\n                }\n                for (j <- 1 until m) {\n                    val q = p * j\n                    if (q <= n && greatestCommonDivisor(q, p) == 1) {\n                        result.append(q)\n                    }\n                }\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n            val m = scala.math.max(1, n / 2)\n            for (i <- 1 until\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293421,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp131dq1kn.scala:68:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp131dq1kn.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp131dq1kn.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp131dq1kn.scala:43:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (m : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp131dq1kn.scala:48:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m                \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (m : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp131dq1kn.scala:55:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m            \u001b[33mreturn\u001b[0m result.toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 0 until m) {\n                if (n % i == 0) {\n                    continue\n                }\n                val p = i\n                result = result.updated(p)\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 0 until m) {\n                if (n % i == 0) {\n                    continue\n                }\n                val p = i\n                result = result.updated(p)\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcqp1hzva.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcqp1hzva.scala:43:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (m : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcqp1hzva.scala:45:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    continue\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcqp1hzva.scala:48:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m                result = result.updated(p)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter elem of \u001b[33mmethod\u001b[0m \u001b[35mupdated\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m: (index: Int, elem: B): List[B]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcqp1hzva.scala:63:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (m : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcqp1hzva.scala:65:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                    continue\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when comp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n    // (2.5l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpupi2doli.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpupi2doli.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpupi2doli.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpupi2doli.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpupi2doli.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqhnr1vy7.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Int] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = new Vector[Int]()\n            val m = scala.math.max(1, n / 2 - 1)\n            for (i <- 1 until m) {\n                val p = 2 * i + 1\n                if (p <= n) {\n                    result.add(p)\n                }\n                for (j <- 1 until m) {\n                    val q = p * j\n                    if (q <= n && greatestCommonDivisor(q, p) == 1) {\n                        result.add(q)\n                    }\n                }\n            }\n            return result.toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Int) : Seq[Int] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = new Vector[Int]()\n            val m = scala.math.max(1, n / 2 - 1)\n            for\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293422,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpgiorktkc.scala:68:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m            \u001b[33mfor\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgiorktkc.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgiorktkc.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Int]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgiorktkc.scala:41:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mVector\u001b[0m[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mconstructor\u001b[0m \u001b[35mVector\u001b[0m cannot be accessed as a member of Vector[Int] from module class Problem$.\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgiorktkc.scala:64:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Int]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgiorktkc.scala:66:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mVector\u001b[0m[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m\u001b[33mconstructor\u001b[0m \u001b[35mVector\u001b[0m cannot be accessed as a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 1 until n) yield i\n    }\n\n    // Return a list of all the even integers from 1 to n\n    // >>> listRangeEven(5)\n    // [2, 4]\n    def listRangeEven(n : Int) : Seq[Long] = {\n        for (i <- 1 until n) {\n            if (i % 2 == 0) yield i\n        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> listRangeOdd(5)\n    // [1, 3, 5]\n    def listRangeOdd(n : Int) : Seq[Long] = {\n        for (i <- 1 until n) {\n            if (i % 2 == 1) yield i\n        }\n    }\n\n    // Return a list of all the multiples of 3 from 1 to n\n    // >>> listMultiplesOf3(5)\n    // [3, 6, 9, 12, 15]\n    def listMultiplesOf3(n : Int) : Seq[Long] = {\n        for (i <- 1 until n) {\n            if (i % 3 == 0) yield i\n        }\n    \n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293421,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpysmcq405.scala:46:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m            \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            'then' expected, but 'yield' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpysmcq405.scala:55:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m            \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            'then' expected, but 'yield' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpysmcq405.scala:64:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m            \u001b[33mif\u001b[0m (i % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            'then' expected, but 'yield' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpysmcq405.scala:38:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) \u001b[33myield\u001b[0m i\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- [E129] Potential Issue Warning: /tmp/tmpysmcq405.scala:47:8 -----------------\u001b[0m\u001b[0m\n\u001b[33m46 |\u001b[0m            \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) \u001b[33myield\u001b[0m i\n\u001b[33m47 |\u001b[0m        }\n\u001b[33m\u001b[33m   |\u001b[0m                                   ^\u001b[0m\n\u001b[33m   |\u001b[0mA pure expression does nothing in statement position; you may be omitting necessary parentheses\n\u001b[33m   |\u001b[0m\n\u001b[33m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- [E129] Potential Issue Warning: /tmp/tmpysmcq405.scala:56:8 -----------------\u001b[0m\u001b[0m\n\u001b[33m55 |\u001b[0m            \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) \u001b[33myield\u001b[0m i\n\u001b[33m56 |\u001b[0m        }\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a greatest common divisor of a list of integers\n    // >>> greatestCommonDivisor([3l, 5l, 25l])\n    // (5l)\n    def greatestCommonDivisor(a : List[Long]) : Long = {\n        if (a.isEmpty()) {\n            return 0\n        } else {\n            return greatestCommonDivisor(a.head(), a.tail().head())\n        }\n    }\n\n    // Return a least common multiple of a list of integers\n    // >>> leastCommonMultiple([3l, 5l, 25l])\n    // (75l)\n    def leastCommonMultiple(a : List[Long]) : Long = {\n        if (a.isEmpty()) {\n            return 0\n        } else {\n            return leastCommonMultiple(a.head(), a.tail().head())\n        }\n    }\n\n    // Return a list of all the integers that are multiples of the input integer\n    // >>> multiples(5l)\n    // [0l, 5l, 10l, 15l, 20l, 25l, 30l, 35l, 40l, 45l, 50l, 55l, 60l, 65l, 70l, 75l, 80l, 85l, 90l, 95l, 100l]\n    def multiples(a : Long) : List[Long] = {\n        if (a == 0) {\n            return List[Long](\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293422,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp9bedbs0r.scala:61:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m List[\u001b[35mLong\u001b[0m](\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9bedbs0r.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp9bedbs0r.scala:38:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mif\u001b[0m (a.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp9bedbs0r.scala:41:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m greatestCommonDivisor(a.head(), a.tail().head())\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mhead\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIterableOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9bedbs0r.scala:41:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m greatestCommonDivisor(a.head(), a.tail().head())\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): Long @uncheckedVariance\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp9bedbs0r.scala:49:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mif\u001b[0m (a.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    return Nil\n                }\n            }\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    result = Cons(i, result)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = (n - 1) / 2\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    return Nil\n                }\n            }\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n                    \n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293423,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzh847q9h.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzh847q9h.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzh847q9h.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                           Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzh847q9h.scala:50:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m                    result = Cons(i, result)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: Cons\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzh847q9h.scala:53:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzh847q9h.scala:62:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n                if (i <= m) {\n                    val p = i\n                    while (p * p <= n) {\n                        p = p + 1\n                    }\n                    result = result.updated(p)\n                }\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n                if (i <= m) {\n                    val p = i\n                    while (p * p <= n) {\n                        p = p + 1\n                    }\n                    result = result.updated(p)\n                }\n\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuexse5s9.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuexse5s9.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuexse5s9.scala:43:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2L\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuexse5s9.scala:52:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuexse5s9.scala:61:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuexse5s9.scala:65:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2L\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Err",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a) / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        } else {\n            return (1 to n)\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> evens(5)\n    // [2, 4]\n    def evens(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        } else {\n            return (2 to n).filter(_.mod(2) == 0)\n        }\n    }\n\n    // Return a list of all the primes from 2 to n\n    // >>> primes(5)\n    // [2, 3, 5]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        } else {\n            return (2 to n).filter(_.isPrime())\n        }\n    }\n\n    // Return a list of all the permutations of the elements of the list\n    // >>> permutations([1, 2, 3])\n    // [[1, 2, 3], [1, 3, 2\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293423,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpad8xzmrr.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpad8xzmrr.scala:37:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    scala.collection.immutable.Range.Inclusive\n\u001b[31m   |\u001b[0m                    Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpad8xzmrr.scala:48:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m to n).filter(_.mod(\u001b[31m2\u001b[0m) == \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue mod is not a member of Int, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigInt.int2bigInt\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpad8xzmrr.scala:59:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m to n).filter(_.isPrime())\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value isPrime is not a member of Int\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpad8xzmrr.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpad8xzmrr.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (1 to n).toSeq.map(i => i)\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> evens(5)\n    // [2, 4]\n    def evens(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n        } else {\n            return (2 to n).filter(i => i % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n    // >>> odds(5)\n    // [1, 3, 5]\n    def odds(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293423,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwvp76gi.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwvp76gi.scala:43:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m to n).toSeq.map(\u001b[36mi\u001b[0m => i)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwvp76gi.scala:54:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil$()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Nil\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwvp76gi.scala:56:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m to n).filter(\u001b[36mi\u001b[0m => i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwvp76gi.scala:64:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m        \u001b[33mif\u001b[0m (n < \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m65 |\u001b[0m            \u001b[33mthrow\u001b[0m \u001b[33mnew\u001b[0m \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvbjas923.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = n - 1\n            for (i <- 2 to m) {\n                if (m % i == 0) {\n                    return result\n                } else {\n                    result = result.prepend(i)\n                }\n            }\n            result = result.prepend(n)\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val m = n - 1\n            for (i <- 2 to m) {\n                if (m % i == 0) {\n                    return result\n                } else {\n                    result = result.prepend(i)\n                }\n            }\n            result = result.prepend(n)\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0ws6yqek.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ws6yqek.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ws6yqek.scala:43:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to m) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (m : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ws6yqek.scala:45:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0ws6yqek.scala:47:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = result.prepend(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is not a member of object scala.collection.immutable.Nil - did you mean result.prepended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0ws6yqek.scala:50:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            result = result.prepend(n)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val i = 2L\n            while (i <= n) {\n                if (n % i == 0) {\n                    // skip\n                } else {\n                    result = result.prepend(i)\n                }\n                i = i + 1\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            val result = Nil\n            val i = 2L\n            while (i <= n) {\n                if (n % i == 0) {\n                    // skip\n                } else {\n                    result = result.prepend(i)\n                }\n                i = i + 1\n            }\n            return result\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes3(10\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps5h2swao.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps5h2swao.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps5h2swao.scala:47:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                    result = result.prepend(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue prepend is not a member of object scala.collection.immutable.Nil - did you mean result.prepended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmps5h2swao.scala:49:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m                i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps5h2swao.scala:51:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    (result : scala.collection.immutable.Nil.type)\n\u001b[31m   |\u001b[0m                Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps5h2swao.scala:60:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (Seq.range(2, n).filter(x => {\n                return x % 2 == 0 && x != 2 && x != 3\n            })).toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (Seq.range(2, n).filter(x => {\n                return x % 2 == 0 && x != 2 && x != 3\n            })).toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return (Seq.range(2\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi1fh0toy.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi1fh0toy.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi1fh0toy.scala:39:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi1fh0toy.scala:42:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                \u001b[33mreturn\u001b[0m x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && x != \u001b[31m2\u001b[0m && x != \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Boolean\n\u001b[31m   |\u001b[0m                       Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi1fh0toy.scala:52:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    collection.immutable.Nil.type\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi1fh0toy.scala:55:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m                \u001b[33mreturn\u001b[0m x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && x != \u001b[31m2\u001b[0m && x != \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Bo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n    // (2.0l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a mod\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv9vi_vdv.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9vi_vdv.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9vi_vdv.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9vi_vdv.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9vi_vdv.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) yield (i + 1)\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> listRangeEven(5)\n    // [2, 4, 6, 8, 10]\n    def listRangeEven(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) {\n            if (i % 2 == 0) yield (i + 1)\n        }\n    }\n\n    // Return a list of all the primes from 2 to n\n    // >>> listRangePrime(5)\n    // [2, 3, 5, 7]\n    def listRangePrime(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) {\n            if (isPrime(i)) yield (i + 1)\n        }\n    }\n\n    // Return a list of all the primes from 2 to n\n    // >>> listRangePrime(5)\n    // [2, 3, 5, 7]\n    def listRangePrime2(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) {\n            if (is\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcvagc2k.scala:46:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m            \u001b[33mif\u001b[0m (i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            'then' expected, but 'yield' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcvagc2k.scala:55:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            'then' expected, but 'yield' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcvagc2k.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcvagc2k.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcvagc2k.scala:38:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    IndexedSeq[Int]\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvcvagc2k.scala:55:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) \u001b[33myield\u001b[0m (i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvcvagc2k.scala:64:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m            \u001b[33mif\u001b[0m (is\n\u001b[31m\u001b[31m   |\u001b[0m                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a)\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (primes(n - 2) ++ (2 toSeq(2 to i while (i lt n)))).toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (2 toSeq(2 to i while (i lt n)) ++ (primes2(n - 2) ++ (2 toSeq(2 to i while (i lt n))))).toList\n        }\n    }\n\n    // Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes3(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else {\n            return (2 toSeq(2 to i while (i lt n)) ++ (primes3(n - 2) ++ (2 toSeq(2 to i while (i lt\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4amle9yz.scala:37:53 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            \u001b[33mreturn\u001b[0m (primes(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n)))).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         ')' expected, but 'while' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4amle9yz.scala:48:35 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n)) ++ (primes2(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n))))).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   ')' expected, but 'while' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4amle9yz.scala:48:89 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n)) ++ (primes2(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n))))).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         ')' expected, but 'while' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4amle9yz.scala:59:35 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n)) ++ (primes3(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   ')' expected, but 'while' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4amle9yz.scala:59:89 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile\u001b[0m (i lt n)) ++ (primes3(n - \u001b[31m2\u001b[0m) ++ (\u001b[31m2\u001b[0m toSeq(\u001b[31m2\u001b[0m to i \u001b[33mwhile",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqhnr1vy7.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else {\n            return (1 until n).toSeq\n        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>> evens(10)\n    // [2, 4, 6, 8, 10]\n    def evens(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else {\n            return (2 until n).filter(x -> x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the primes less than n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else {\n            return (2 until n).filter(x -> x < n).filter(x -> {\n                for (i <- (x - 2) / 2) {\n                    if\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpe57jiib5.scala:65:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                    \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe57jiib5.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe57jiib5.scala:41:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m1\u001b[0m until n).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    Range\n\u001b[31m   |\u001b[0m                   Required: collection.mutable.Seq[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe57jiib5.scala:52:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m until n).filter(x -> x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe57jiib5.scala:63:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m until n).filter(x -> x < n).filter(x -> {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe57jiib5.scala:63:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mreturn\u001b[0m (\u001b[31m2\u001b[0m until n).filter(x -> x < n).filter(x -> {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvbjas923.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbjas923.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two integers a and b\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqhnr1vy7.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m3l\u001b[0m), (\u001b[31m7l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m10l\u001b[0m), (\u001b[31m15l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m49l\u001b[0m), (\u001b[31m14l\u001b[0m)) == (\u001b[31m7l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqhnr1vy7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(greatestCommonDivisor((\u001b[31m144l\u001b[0m), (\u001b[31m60l\u001b[0m)) == (\u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: greatestCommonDivisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n        } else if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}