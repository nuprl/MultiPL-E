{
  "name": "HumanEval_16_count_distinct_characters",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n    def countDistinctCharacters(string : String) : Long = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n",
  "completions": [
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1\n            }\n        }\n        result",
    "        val result = new HashSet[String]()\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            result.add(c.toLowerCase())\n            result.add(c.toUpperCase())\n        }\n        result.length",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t -> (t._1, t._2)).toMap\n        counts.forEach(t -> {\n            if (t._2 > 1) {\n                throw new RuntimeException(\"Duplicate character \" + t._1)\n            }\n        })\n        counts.size",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._2).toMap\n        val result = counts.values.reduce(0, (a, b) => a + b)\n        return result",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            result += 1L\n            if (c.isUpperCase()) {\n                result += 1L\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"Character \" + k + \" occurs \" + v + \" times\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 1) {\n                println(\"Character \" + k + \" occurs \" + v + \" time\")\n            }\n        })\n        counts.foreach((k, v) => {\n            println(\"Character \" + k + \" occurs \" + v + \" times\")\n        })\n        println(\"Total characters: \" + chars.length)\n        println(\"Total distinct characters: \" + counts.size())\n        return counts.size()",
    "        val chars = string.toLowerCase.chars\n        val result = mutable.Set.empty[Char]\n        for (i <- 0 until chars.length) {\n            val c = chars.apply(i)\n            result = result.add(c)\n        }\n        result.length",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isLowerCase()) {\n                result += 1L\n            } else if (c.isUpperCase()) {\n                result += 1L\n            } else if (c.isDigit()) {\n                result += 1L\n            } else {\n                result += 1L\n            }\n        }\n        result",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1\n            }\n        }\n        result",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isLowerCase()) {\n                result += 1\n            } else if (c.isUpperCase()) {\n                result += 1\n            } else if (c.isDigit()) {\n                result += 1\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1).toMap\n        counts.values.reduce(0, (a, b) => a + b)",
    "        val result = new AtomicLong(0)\n        for(i <- 0 until string.length) {\n            val c = string.charAt(i)\n            val c2 = c.toLowerCase()\n            if(c2 == c) {\n                result.incrementAndGet()\n            }\n        }\n        result.get()",
    "        var result = 0l\n        for (var i = 0; i < string.length(); i++) {\n            var ch = string.charAt(i)\n            result += 1l\n        }\n        return result",
    "        val s = string.toLowerCase\n        val chars = s.toCharArray\n        val counts = mutable.HashMap[String]()\n        for (i <- 0 until chars.length) {\n            val c = chars[i]\n            counts.put(c, counts.getOrElse(c, 0) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v == 1) {\n                println(k)\n            }\n        })",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isLowerCase()) c = c.toUpperCase()\n            if (c.isUpperCase()) c = c.toLowerCase()\n            if (c.isLetter()) result += 1\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct().toList\n        counts.length",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1).distinct.toSeq\n        counts.length",
    "        val chars = string.toLowerCase.chars\n        val distinctChars = chars.distinct\n        val count = distinctChars.length\n        return count",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toChar).distinct.toSeq\n        counts.length",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.toLowerCase() == c) {\n                result += 1\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toChar).distinct.toSeq\n        counts.length",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[String]()\n        for (i <- 0 until chars.length) {\n            val c = chars[i]\n            counts.put(c.toString, counts.getOrElse(c.toString, 0) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1)",
    "        var result = 0l\n        for (var i = 0; i < string.length(); i++) {\n            result += 1l\n        }\n        return result",
    "        val chars = string.toLowerCase.chars\n        val count = chars.map(c => c.toLowerCase).distinct().length\n        count",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(tuple => tuple._1).distinct().toSeq\n        counts.length",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            result += 1\n            var c = string.charAt(i)\n            if (c.toLowerCase() != c) {\n                result += 1\n            }\n        }\n        result",
    "        var count = 0l\n        for (i <- 0 until string.length) {\n            count += 1l\n        }\n        return count",
    "        val chars = string.toLowerCase.chars\n        val result = chars.map(c => c.toLowerCase).distinct.count\n        result",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            result += 1l\n        }\n        return result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.count\n        counts",
    "        val s = string.toLowerCase\n        val chars = s.map(_.toChar).distinct\n        val count = chars.length\n        return count",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(tuple => tuple._1).distinct.toSeq\n        counts.length",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toChar).distinct.count\n        counts",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            result += 1L\n            if (c.isUpper()) {\n                result += 1L\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toChar).distinct\n        counts.length",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toChar).distinct\n        counts.length",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1.toLowerCase).toMap\n        counts.forEach(t => {\n            val count = counts.get(t)\n            counts.put(t, count + 1)\n        })\n        counts.keys().toList.sort(Comparator.comparing(t => counts.get(t)))\n        counts.keys().toList.map(t => t.toString).toList.sort(Comparator.comparing(t => t.length()))\n        counts.keys().toList.map(t => t.toString).toList.map(t => t.length()).toList.sort(Comparator.comparing(t => t))\n        counts.keys().toList.map(t => t.toString).toList.map(t => t.length()).toList.map(t => t).sum()",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1.toLowerCase).toMap\n        counts.keys.toList",
    "        val s = string.toLowerCase\n        val counts = mutable.HashMap[String]()\n        for (i <- 0 until s.length) {\n            counts.put(s.apply(i), 1 + counts.get(s.apply(i)))\n        }\n        counts.foreach((k, v) => {\n            if (v == 1) {\n                counts.remove(k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k,",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isLowerCase()) c = c.toUpperCase()\n            result += 1L\n        }\n        result",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            val c = chars[i]\n            counts.put(c, counts.getOrElse(c, 0l) + 1)\n        }\n        counts.foreach((c, count) => {\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach((c, count) => {\n            println(c + \" occurs \" + count + \" times\")\n        })\n        counts.foreach",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t -> t._1.toLowerCase).toMap\n        counts.forEach(t -> t._2)",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap.empty()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":",
    "        var count = 0l\n        for(i <- 0 until string.length) {\n            count = count + 1l\n        }\n        return count",
    "        val chars = string.toLowerCase.chars\n        val distinct = new HashSet[Char]()\n        for (i <- 0 until chars.length) {\n            val c = chars(i)\n            if (!distinct.contains(c)) {\n                distinct.add(c)\n            }\n        }\n        distinct.length",
    "        var result = 0l\n        for(i <- 0 until string.length) {\n            result += 1l\n        }\n        return result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct().count()\n        counts",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1.toLowerCase).toMap\n        counts.forEach(t => {\n            if(t._2 > 1) {\n                throw new RuntimeException(\"Duplicate character found: \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if(t._2 == 0) {\n                throw new RuntimeException(\"Character not found: \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if(t._2 > 1) {\n                throw new RuntimeException(\"Duplicate character found: \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if(t._2 == 0) {\n                throw new RuntimeException(\"Character not found: \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if(t._2 > 1) {\n                throw new RuntimeException(\"Duplicate character found: \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if(t._2 == 0) {\n                throw new RuntimeException(\"Character not found: \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if(t._2 > 1) {\n                throw new RuntimeException(\"Duplicate character found: \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if(t._2 == 0) {\n                throw new RuntimeException(\"Character not found: \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if(t._2 > 1) {\n                throw new RuntimeException(\"Duplicate character found: \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if(t._2 == 0) {\n                throw new RuntimeException(\"Character not found: \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if(",
    "        val chars = string.toLowerCase.chars\n        val count = chars.map(c => c.toLowerCase).distinct.count\n        count",
    "        val result = new HashSet<String>()\n        for (i <- 0 until string.length) {\n            val character = string.charAt(i)\n            result.add(character.toLowerCase())\n            result.add(character.toUpperCase())\n        }\n        result.size",
    "        val chars = string.toLowerCase.chars\n        val distinct = chars.distinctUntilChanged(chars)\n        val count = distinct.length\n        return count",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct().count()\n        counts",
    "        val s = string.toLowerCase\n        val chars = s.chars\n        val counts = chars.map(c => c.toLowerCase).distinct\n        counts.length",
    "        var result = 0L\n        for(var i = 0; i < string.length(); i++) {\n            var char = string.charAt(i)\n            var lower = char.toLowerCase()\n            var upper = char.toUpperCase()\n            if(lower == upper) {\n                result += 1L\n            } else {\n                result += 2L\n            }\n        }\n        return result",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Char, Int]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], 1 + counts.get(chars[i]))\n        }\n        return counts.keys().length",
    "        val chars = string.toLowerCase.chars\n        val distinct = new HashSet[Char]()\n        for (i <- 0 until chars.length) {\n            val c = chars(i)\n            if (!distinct.contains(c)) {\n                distinct.add(c)\n            }\n        }\n        distinct.length",
    "        val s = string.toLowerCase\n        val chars = s.chars\n        val counts = mutable.HashMap[Char, Int]()\n        for (c <- chars) counts.put(c, 0)\n        for (c <- chars) counts.put(c, counts.get(c) + 1)\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) - 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) + 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) - 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) + 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) - 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) + 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) - 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) + 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) - 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) + 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) - 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c) + 1))\n        counts.filter(c -> c.isLetter).forEach(c -> counts.put(c, counts.get(c)",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct().toList\n        counts.length",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1l\n            }\n        }\n        return result",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            result += 1L\n            if (c.isUpper()) {\n                result += 1L\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toChar).distinct.toList\n        counts.length",
    "        val s = string.toLowerCase\n        val count = new scala.collection.mutable.HashMap[Char, Int]()\n        for (i <- 0 until s.length) {\n            count.put(s.charAt(i), 1)\n        }\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach(e -> {\n            if (e._2 == 1) {\n                count.remove(e._1)\n            }\n        })\n        count.foreach",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n            if (c.toLowerCase() == c) {\n                result += 1\n            }\n        }\n        return result",
    "        val result = new java.util.HashSet()\n        for (i <- 0 until string.length) {\n            result.add(string.charAt(i))\n        }\n        result.size()",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            var character = string.charAt(i)\n            if (character.toLowerCase() == character) {\n                result += 1\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t -> (t._1, t._2)).toMap\n        val result = counts.values.reduce(0l, (a, b) -> a + b)\n        return result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toChar).distinct.toList\n        counts.length",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            result += 1l\n        }\n        return result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t -> (t._1, t._2)).toMap\n        counts.values.reduce(0, (a, b) -> a + b)",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n            if (c.toLowerCase == c) {\n                result += 1\n            }\n        }\n        return result",
    "        var chars = new java.util.HashSet()\n        for (i <- 0 until string.length) {\n            chars.add(string.charAt(i))\n        }\n        chars.size()\n    }\n\n    // Given a string, find out how many times does it repeat itself\n    // >>> countRepeats((\"xyzXYZ\"))\n    // (3l)\n    // >>> countRepeats((\"Jerry\"))\n    // (0l)\n    def countRepeats(string : String) : Long = {\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string.charAt(i) == string.charAt(count)) {\n                count += 1\n            }\n        }\n        count\n    }\n\n    // Given a string, find out how many times does it contain a substring\n    // >>> countSubstrings((\"xyzXYZ\"))\n    // (3l)\n    // >>> countSubstrings((\"Jerry\"))\n    // (1l)\n    def countSubstrings(string : String) : Long = {\n        var count = 0\n        for (i <- 0 until string.length) {\n            for (j <- 0 until string.length) {\n                if (i + j <= string.length && string.charAt(i) == string.charAt(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n\n    // Given a string, find out how many times does it contain a substring that is a palindrome\n    // >>> countPalindromes((\"xyzXYZ\"))\n    // (3l)\n    // >>> countPalindromes((\"Jerry\"))\n    // (0l)\n    def countPalindromes(string : String) : Long = {\n        var count = 0\n        for (i <- 0 until string.length) {\n            for (j <- 0 until string.length) {\n                if (i + j <= string.length && string.charAt(i) == string.charAt(j) && isPalindrome(string.substring(i, j + 1))) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n\n",
    "        var count = 0l\n        for(i <- 0 until string.length) {\n            count = count + 1l\n        }\n        return count",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            var ch = string.charAt(i)\n            if (ch.isUpper()) {\n                result += 1l\n            } else if (ch.isLower()) {\n                result += 1l\n            } else if (ch.isDigit()) {\n                result += 1l\n            } else {\n                result += 1l\n            }\n        }\n        return result",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.toLowerCase == c) {\n                result += 1\n            }\n        }\n        result",
    "        var result = 0L\n        for(var i = 0; i < string.length; i++) {\n            var c = string.charAt(i)\n            if(!Character.isLetter(c)) {\n                result += 1\n            }\n        }\n        return result",
    "        val result = new HashSet[String]()\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            result.add(c.toLowerCase())\n            result.add(c.toUpperCase())\n        }\n        result.size",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1).toMap\n        val result = counts.values.reduce(0, (a, b) => a + b)\n        return result",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[String]()\n        for (i <- 0 until chars.length) {\n            val c = chars[i]\n            counts.put(c, counts.getOrElse(c, 0) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"No character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"No character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"No character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"No character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"No character \" + k)\n            }\n        })\n        counts.foreach((",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.toLowerCase() == c) {\n                result += 1\n            }\n        }\n        result",
    "        var chars = Set.empty[String]\n        for (i <- 0 until string.length) {\n            chars = chars.insert(string.charAt(i))\n        }\n        chars.length",
    "        val result = new HashSet[String]()\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            result.add(c.toLowerCase())\n            result.add(c.toUpperCase())\n        }\n        result.size",
    "        var result = 0l\n        for (var i = 0; i < string.length(); i++) {\n            var c = string.charAt(i)\n            var lower = c.toLowerCase()\n            var upper = c.toUpperCase()\n            if (lower != upper) {\n                result += 1\n            }\n        }\n        return result",
    "        val result = new AtomicLong(0)\n        string.chars().forEach(c -> {\n            if (Character.isLetter(c)) {\n                result.incrementAndGet()\n            }\n        })\n        return result.get()",
    "        val s = string.toLowerCase\n        val chars = s.chars\n        val counts = mutable.HashMap.empty\n        for (i <- 0 until chars.length) {\n            counts.put(chars.apply(i).toChar, 1l)\n        }\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x => println(x.toString + \": \" + counts.get(x)))\n        counts.keys.foreach(x",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1.toLowerCase).toMap\n        counts.forEach(t => {\n            val count = counts.get(t)\n            counts.put(t, count + 1)\n        })\n        counts.keys().forEach(t => {\n            if (counts.get(t) == 1) {\n                counts.remove(t)\n            }\n        })\n        counts.keys().forEach(t => {\n            if (counts.get(t) == 1) {\n                counts.remove(t)\n            }\n        })\n        counts.keys().forEach(t => {\n            if (counts.get(t) == 1) {\n                counts.remove(t)\n            }\n        })\n        counts.keys().forEach(t => {\n            if (counts.get(t) == 1) {\n                counts.remove(t)\n            }\n        })\n        counts.keys().forEach(t => {\n            if (counts.get(t) == 1) {\n                counts.remove(t)\n            }\n        })\n        counts.keys().forEach(t => {\n            if (counts.get(t) == 1) {\n                counts.remove(t)\n            }\n        })\n        counts.keys().forEach(t => {\n            if (counts.get(t) == 1) {\n                counts.remove(t)\n            }\n        })\n        counts.keys().forEach(t => {\n            if (counts.get(t) == 1) {\n                counts.remove(t)\n            }\n        })\n        counts.keys().forEach(t => {\n            if (counts.get(t) == 1) {\n                counts.remove(t)\n            }\n        })\n        counts.keys().forEach(t => {\n            if (counts.get(t) == 1) {\n                counts.remove(t)\n            }\n        })\n        counts.keys().",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1\n            }\n        }\n        result",
    "        val s = string.toLowerCase()\n        val count = s.length()\n        val chars = s.toCharArray()\n        val chars2 = new java.util.HashSet<Character>(count)\n        for (i <- 0 until count) {\n            chars2.add(chars[i])\n        }\n        val result = chars2.size()\n        return result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1.toLowerCase).toMap\n        counts.keys.foreach(k => counts.remove(k))\n        counts.size",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            result += 1\n        }\n        return result",
    "        var result = 0l\n        for (var i = 0; i < string.length(); i++) {\n            var c = string.charAt(i)\n            if (Character.isLetter(c)) {\n                result += 1l\n            }\n        }\n        return result",
    "        val chars = string.toLowerCase.chars\n        val distinctChars = chars.distinct\n        val count = distinctChars.length\n        return count",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t -> (t._1, t._2)).toMap\n        counts.forEach(t -> {\n            val count = counts.get(t._1)\n            counts.put(t._1, count + 1)\n        })\n        counts.forEach(t -> {\n            if (t._2 > 1) {\n                counts.put(t._1, t._2 - 1)\n            }\n        })\n        counts.forEach(t -> {\n            if (t._2 == 0) {\n                counts.remove(t._1)\n            }\n        })\n        counts.forEach(t -> {\n            if (t._2 == 0) {\n                counts.remove(t._1)\n            }\n        })\n        counts.forEach(t -> {\n            if (t._2 == 0) {\n                counts.remove(t._1)\n            }\n        })\n        counts.forEach(t -> {\n            if (t._2 == 0) {\n                counts.remove(t._1)\n            }\n        })\n        counts.forEach(t -> {\n            if (t._2 == 0) {\n                counts.remove(t._1)\n            }\n        })\n        counts.forEach(t -> {\n            if (t._2 == 0) {\n                counts.remove(t._1)\n            }\n        })\n        counts.forEach(t -> {\n            if (t._2 == 0) {\n                counts.remove(t._1)\n            }\n        })\n        counts.forEach(t -> {\n            if (t._2 == 0) {\n                counts.remove(t._1)\n            }\n        })\n        counts.forEach(t -> {\n            if (t._2 == 0) {\n                counts.remove(t._1)\n            }\n        })\n        counts.forEach(t -> {\n            if (t._2 == 0) {\n                counts.remove(t._1)\n            }",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val distinct = mutable.Set[Char]()\n        for (i <- 0 until chars.length) {\n            val c = chars(i)\n            if (distinct.contains(c)) continue\n            distinct.add(c)\n        }\n        distinct.foreach(c => println(c.toString()))\n        distinct.foreach(c => println(c.toString()))\n        return distinct.size",
    "        val result = string.toLowerCase.map(s => s.toCharArray).map(s => s.length).foldLeft(0, (acc, s) => acc + s)\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => (t._1, t._2)).toMap\n        counts.keys.foreach(k => counts.remove(k))\n        counts.size",
    "        val s = string.toLowerCase()\n        val s2 = s.replaceAll(\"[^a-z]\", \"\")\n        val s3 = s2.replaceAll(\"[^a-zA-Z]\", \"\")\n        val s4 = s3.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s5 = s4.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s6 = s5.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s7 = s6.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s8 = s7.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s9 = s8.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s10 = s9.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s11 = s10.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s12 = s11.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s13 = s12.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s14 = s13.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s15 = s14.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s16 = s15.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s17 = s16.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s18 = s17.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s19 = s18.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val s20 = s19.replaceAll(\"[^a-zA-Z0-9]\", \"",
    "        val result = string.toLowerCase.map(s => s.toCharArray).flatMap(xs => xs.map(x => x.toLowerCase)).distinct().count()\n        result",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap.empty[Char]\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.get(chars[i]).getOrElse(0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v == 1) {\n                counts.remove(k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        ",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toString).distinct.count\n        counts",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.toList\n        counts.length",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            result += 1L\n            if (c.isUpperCase()) {\n                result += 1L\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = new HashMap[String]()\n        for (i <- 0 until chars.length) {\n            val c = chars[i]\n            if (!counts.contains(c)) {\n                counts.put(c, 1)\n            } else {\n                counts.put(c, counts.get(c) + 1)\n            }\n        }\n        counts.forEach((k, v) -> v)",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            result += 1L\n            if (c.isUpper()) {\n                result += 1L\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toChar).distinct.count\n        counts",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            result += 1L\n            if (c.toLowerCase() != c) {\n                result += 1L\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.toList\n        counts.length",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \" occurs \" + v + \" times\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 1) {\n                println(k + \" occurs \" + v + \" time\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                println(k + \" does not occur\")\n            }\n        })\n        counts.foreach((k, v) => {\n            println(k + \" occurs \" + v + \" times\")\n        })\n        counts.foreach((k, v) => {\n            println(k + \" occurs \" + v + \" time\")\n        })\n        counts.foreach((k, v) => {\n            println(k + \" does not occur\")\n        })\n        counts.foreach((k, v) => {\n            println(k + \" occurs \" + v + \" times\")\n        })\n        counts.foreach((k, v) => {\n            println(k + \" occurs \" + v + \" time\")\n        })\n        counts.foreach((k, v) => {\n            println(k + \" does not occur\")\n        })\n        counts.foreach((k, v) => {\n            println(k + \" occurs \" + v + \" times\")\n        })\n        counts.foreach((k, v) => {\n            println(k + \" occurs \" + v + \" time\")\n        })\n        counts.foreach((k, v) => {\n            println(k + \" does not occur\")\n        })\n        counts.foreach((k, v) => {\n            println(k + \" occurs \" + v + \" times\")\n        })\n        ",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1.toLowerCase).toMap\n        counts.forEach(t => {\n            val count = counts.get(t)\n            counts.put(t, count + 1)\n        })\n        counts.keys().toList.map(t => t.toString).reduce(0, (a, b) => a + b)",
    "        var result = 0L\n        for (var i = 0; i < string.length; i++) {\n            var c = string.charAt(i)\n            if (c.toLowerCase() == c) {\n                result += 1\n            }\n        }\n        return result",
    "        val s = string.toLowerCase\n        val chars = s.chars\n        val counts = mutable.HashMap.empty\n        for (i <- 0 until chars.length) {\n            counts.put(chars.charAt(i), counts.getOrElse(chars.charAt(i), 0l) + 1)\n        }\n        counts.foreach { (c, count) =>\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n        }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(it) }\n        counts.keys.foreach { println(it) }\n        counts.values.foreach { println(",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => (c.toLowerCase.toChar)).distinct\n        counts.length",
    "        val s = string.toLowerCase\n        val counts = mutable.HashMap[Char, Int]()\n        for (i <- 0 until s.length) {\n            counts.put(s.charAt(i), 1 + counts.get(s.charAt(i)))\n        }\n        counts.foreach((k, v) => {\n            if (v == 1) {\n                counts.remove(k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.fore",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1.toLowerCase).toMap\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.foreach(counts)\n        counts.values.foreach(counts)\n        counts.keys.",
    "        val chars = string.toLowerCase.chars\n        val result = chars.map(c => c.toChar).distinct.count\n        result",
    "        val result = new HashSet<String>()\n        for (i <- 0 until string.length) {\n            result.add(string.substring(i, i + 1))\n        }\n        result.size",
    "        val s = string.toLowerCase\n        val counts = mutable.HashMap[Char, Int]()\n        for (i <- 0 until s.length) {\n            counts.put(s.charAt(i), 1 + counts.get(s.charAt(i)))\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"Character \" + k + \" not found\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"Character \" + k + \" not found\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"Character \" + k + \" not found\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"Character \" + k + \" not found\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"Character \" + k + \" not found\")\n            }\n        ",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1\n            }\n        }\n        result",
    "        var chars = Set.empty[String]\n        for (i <- 0 until string.length) {\n            chars = chars.add(string.charAt(i).toLowerCase)\n        }\n        chars",
    "        val result = new java.util.HashSet<String>()\n        for (i <- 0 until string.length) {\n            result.add(string.charAt(i) + \"\")\n        }\n        result.size()",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.toList\n        counts.length",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.toList\n        counts.length",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t -> (t._1, t._2)).toMap\n        val result = counts.values.reduce(0l, (a, b) -> a + b)\n        return result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1.toLowerCase).toSeq\n        counts.sort(Comparator.comparing(t => t._2))\n        counts.takeWhile(t => t._2 < string.length - 1).map(t => t._1).distinct().length",
    "        val chars = string.toLowerCase.chars\n        val result = mutable.Set.empty[Char]\n        for (i <- 0 until chars.length) {\n            result = result.add(chars[i])\n        }\n        result.length",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1\n            } else if (c.isLower()) {\n                result += 1\n            } else if (c.isDigit()) {\n                result += 1\n            }\n        }\n        result",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            var ch = string.charAt(i)\n            if (ch.toUpperCase() == ch) {\n                result += 1\n            }\n        }\n        return result",
    "        val chars = string.toLowerCase.chars\n        val distinctChars = chars.distinct\n        val count = distinctChars.length\n        return count",
    "        val s = string.toLowerCase\n        val chars = s.toCharArray\n        val counts = mutable.HashMap[Character, Int]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \" occurs \" + v + \" times\")\n            }\n        })\n        counts.foreach((k, v) => {\n            println(k + \" occurs \" + v + \" times\")\n        })\n        println(counts.size())\n        counts.foreach((k, v) => {\n            println(k + \" occurs \" + v + \" times\")\n        })\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n        println(counts.size())\n",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1L\n            } else if (c.isLower()) {\n                result += 1L\n            } else if (c.isDigit()) {\n                result += 1L\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.toList\n        counts.length",
    "        val s = string.toLowerCase()\n        val count = s.length()\n        val chars = s.toCharArray()\n        val set = new HashSet<Char>()\n        for (i <- 0 until count) {\n            set.add(chars[i])\n        }\n        return set.size()",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.toList\n        counts.length",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.toLowerCase() == c) {\n                result += 1\n            }\n        }\n        result",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (result.contains(c)) {\n                result -= 1\n            } else {\n                result += 1\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t -> (t._1, t._2)).toMap\n        val result = counts.values.reduce(0l, (a, b) -> a + b)\n        result",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v == 1) {\n                counts.remove(k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                counts.put(k, v)\n            }\n        })",
    "        val chars = string.toLowerCase.chars\n        val count = chars.map(_.toChar).distinct.count\n        count",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1L\n            } else if (c.isLower()) {\n                result += 1L\n            } else if (c.isDigit()) {\n                result += 1L\n            } else {\n                result += 1L\n            }\n        }\n        result",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isLowerCase()) {\n                result += 1L\n            } else if (c.isUpperCase()) {\n                result += 1L\n            } else if (c.isDigit()) {\n                result += 1L\n            } else {\n                result += 1L\n            }\n        }\n        result",
    "        val result = string.toLowerCase.map(c => c).distinct.count\n        if (result == 0) {\n            throw new RuntimeException(\"String is empty\")\n        }\n        return result",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (result.isEmpty()) {\n                result = 1L\n            } else {\n                result = result + 1L\n            }\n        }\n        result",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n            var lower = c.toLowerCase\n            var upper = c.toUpperCase\n            if (lower == upper) {\n                result += 1l\n            }\n        }\n        return result",
    "        val result = new HashSet[Char]()\n        for (i <- 0 until string.length) {\n            result.add(string.charAt(i))\n        }\n        result.size",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct().count\n        counts",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toChar).distinct.count\n        counts",
    "        var result = 0l\n        for (var i = 0; i < string.length(); i++) {\n            var c = string.charAt(i)\n            if (Character.isLetter(c)) {\n                result += 1l\n            }\n        }\n        return result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1.toLowerCase).toMap\n        counts.forEach((c, i) => counts.put(c, i + 1))\n        counts.keys().toList.sort((a, b) => a.compareTo(b))\n        counts.keys().toList.map(c => counts.get(c)).toList.length",
    "        val chars = string.toLowerCase.chars\n        val distinct = chars.map(c => c.toLowerCase).distinct\n        distinct.length",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpperCase()) {\n                result += 1\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val distinct = chars.distinctUntilChanged(chars)\n        return distinct.length",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.toList\n        counts.length",
    "        val result = string.toLowerCase.map(x => x).distinct.count\n        if (result == 0) {\n            throw new RuntimeException(\"No distinct characters found\")\n        }\n        return result",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((c, cnt) => {\n            if (cnt > 1) {\n                println(cnt)\n            }\n        })\n        counts.foreach((c, cnt) => {\n            if (cnt > 1) {\n                println(cnt)\n            }\n        })\n        counts.foreach((c, cnt) => {\n            if (cnt > 1) {\n                println(cnt)\n            }\n        })\n        counts.foreach((c, cnt) => {\n            if (cnt > 1) {\n                println(cnt)\n            }\n        })\n        counts.foreach((c, cnt) => {\n            if (cnt > 1) {\n                println(cnt)\n            }\n        })\n        counts.foreach((c, cnt) => {\n            if (cnt > 1) {\n                println(cnt)\n            }\n        })\n        counts.foreach((c, cnt) => {\n            if (cnt > 1) {\n                println(cnt)\n            }\n        })\n        counts.foreach((c, cnt) => {\n            if (cnt > 1) {\n                println(cnt)\n            }\n        })\n        counts.foreach((c, cnt) => {\n            if (cnt > 1) {\n                println(cnt)\n            }\n        })\n        counts.foreach((c, cnt) => {\n            if (cnt > 1) {\n                println(cnt)\n            }\n        })\n        counts.foreach((c, cnt) => {\n            if (cnt > 1) {\n                println(cnt)\n            }\n        })\n        counts.foreach((c, cnt) => {\n            if (c",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => (t._1, t._2)).toMap\n        counts.keys.foreach(k => counts.remove(k))\n        counts.size",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            result += 1L\n            if (c.toLowerCase() != c) {\n                result += 1L\n            }\n        }\n        result",
    "        var chars = new HashSet[String]()\n        for (i <- 0 until string.length) {\n            chars.add(string.charAt(i))\n        }\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach(println(chars.size()))\n        chars.foreach",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isLowerCase()) {\n                result += 1L\n            } else if (c.isUpperCase()) {\n                result += 1L\n            } else if (c.isDigit()) {\n                result += 1L\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = mutable.HashMap.empty()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"Character \" + k + \" not found\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"Character \" + k + \" not found\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"Character \" + k + \" not found\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"Character \" + k + \" not found\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new RuntimeException(\"Duplicate character \" + k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new RuntimeException(\"Character \" + k + \" not found\")\n            }",
    "        val chars = string.toLowerCase.chars\n        val count = chars.map(_.toChar).distinct.count\n        count",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.toList\n        counts.length",
    "        val s = string.toLowerCase\n        val chars = s.map(_.toChar).distinct\n        chars.length",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1\n            }\n        }\n        result",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            result += 1l\n            for (j <- 0 until string.length) {\n                if (string[i] == string[j]) {\n                    result -= 1l\n                }\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.toList\n        counts.length",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((c, count) => {\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n        })\n        counts.foreach((c, count) => {\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n        })\n        counts.foreach((c, count) => {\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n        })\n        counts.foreach((c, count) => {\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n        })\n        counts.foreach((c, count) => {\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n        })\n        counts.foreach((c, count) => {\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n        })\n        counts.foreach((c, count) => {\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n        })\n        counts.foreach((c, count) => {\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n        })\n        counts.foreach((c, count) => {\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n        })\n        counts.foreach((c, count) => {\n            if (count > 1) {\n                println(c + \" occurs \" + count + \" times\")\n            }\n",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.toList\n        counts.length",
    "        val result = new HashSet[Char]()\n        for (i <- 0 until string.length) {\n            result.add(string.charAt(i))\n        }\n        result.size",
    "        val chars = string.toLowerCase.chars\n        val result = mutable.Set.empty[Char]\n        for (i <- 0 until chars.length) {\n            val c = chars(i)\n            result = result.add(c)\n        }\n        result.length",
    "        val s = string.toLowerCase\n        val chars = s.chars\n        val counts = mutable.HashMap.empty[Char]\n        for (i <- 0 until s.length) {\n            counts.put(chars[i], counts.get(chars[i]).updated(1))\n        }\n        counts.keys.foreach(println(counts.get(chars)))\n        counts.keys.foreach(println(counts.get(chars).toString))\n        counts.keys.foreach(println(counts.get(chars).toString.replaceAll(\"\\\\[|\\\\]|\\\\(|\\\\)|\\\\s\", \"\")))\n        counts.keys.foreach(println(counts.get(chars).toString.replaceAll(\"\\\\[|\\\\]|\\\\(|\\\\)|\\\\s\", \"\")))\n        counts.keys.foreach(println(counts.get(chars).toString.replaceAll(\"\\\\[|\\\\]|\\\\(|\\\\)|\\\\s\", \"\")))\n        counts.keys.foreach(println(counts.get(chars).toString.replaceAll(\"\\\\[|\\\\]|\\\\(|\\\\)|\\\\s\", \"\")))\n        counts.keys.foreach(println(counts.get(chars).toString.replaceAll(\"\\\\[|\\\\]|\\\\(|\\\\)|\\\\s\", \"\")))\n        counts.keys.foreach(println(counts.get(chars).toString.replaceAll(\"\\\\[|\\\\]|\\\\(|\\\\)|\\\\s\", \"\")))\n        counts.keys.foreach(println(counts.get(chars).toString.replaceAll(\"\\\\[|\\\\]|\\\\(|\\\\)|\\\\s\", \"\")))\n        counts.keys.foreach(println(counts.get(chars).toString.replaceAll(\"\\\\[|\\\\]|\\\\(|\\\\)|\\\\s\", \"\")))\n        counts.keys.foreach(println(counts.get(chars).toString.replaceAll(\"\\\\[|\\\\]|\\\\(|\\\\)|\\\\s\", \"\")))\n        counts.keys.foreach(println(counts.get(",
    "        val result = new HashSet<String>()\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            result.add(c.toLowerCase())\n            result.add(c.toUpperCase())\n        }\n        result.size",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toChar).distinct.count\n        counts",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.toList\n        counts.length",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct.count\n        counts",
    "        val s = string.toLowerCase\n        val chars = s.chars\n        val counts = chars.map(c => (c.toLowerCase)).distinct\n        counts.length",
    "        val s = string.toLowerCase\n        val chars = s.chars\n        val counts = mutable.HashMap.empty\n        for (i <- 0 until chars.length) {\n            counts.put(chars.underlying[i], counts.getOrElse(chars.underlying[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v, k)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(\"(%d) %s\", v",
    "        val result = new HashSet[Char]()\n        for (i <- 0 until string.length) {\n            result.add(string.charAt(i))\n        }\n        result.size",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":\" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":\" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":\" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":\" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":\" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":\" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":\" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":\" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":\" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":\" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \":\" + v)\n            }\n",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k + \": \" + v)\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                println(k",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.toLowerCase() == c) {\n                result += 1\n            }\n        }\n        result",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1.toLowerCase).toSeq\n        counts.reduce((a, b) => a + b)",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1\n            }\n        }\n        result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(c => c.toLowerCase).distinct().toList\n        counts.length",
    "        var result = 0L\n        for (var i = 0; i < string.length(); i++) {\n            var ch = string.charAt(i)\n            result += (1 + (ch.toLowerCase() == ch ? 0 : 1))\n        }\n        return result",
    "        val chars = string.toLowerCase.chars\n        val result = new HashSet[Long]()\n        for (i <- 0 until chars.length) {\n            val c = chars(i)\n            if (result.contains(c)) {\n                result.remove(c)\n            } else {\n                result.add(c)\n            }\n        }\n        result.length",
    "        val chars = string.toLowerCase.chars\n        val result = mutable.Set.empty[Char]\n        for (i <- 0 until chars.length) {\n            val c = chars(i)\n            if (result.contains(c)) {\n                result = result.remove(c)\n            } else {\n                result = result.add(c)\n            }\n        }\n        result.length",
    "        val chars = string.toLowerCase.chars\n        val count = chars.map(c => c.toLowerCase).distinct().length\n        count",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => (t._1, t._2)).toMap\n        val result = counts.values.map(t => t.length).reduce(0, (a, b) => a + b)\n        return result",
    "        val result = 0L\n        for (i <- 0 until string.length) {\n            result += 1\n        }\n        return result",
    "        val chars = string.toLowerCase.toCharArray\n        val counts = mutable.HashMap[Character, Long]()\n        for (i <- 0 until chars.length) {\n            counts.put(chars[i], counts.getOrElse(chars[i], 0l) + 1)\n        }\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new IllegalArgumentException(k + \" occurs \" + v + \" times\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new IllegalArgumentException(k + \" does not occur\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new IllegalArgumentException(k + \" occurs \" + v + \" times\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new IllegalArgumentException(k + \" does not occur\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new IllegalArgumentException(k + \" occurs \" + v + \" times\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new IllegalArgumentException(k + \" does not occur\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new IllegalArgumentException(k + \" occurs \" + v + \" times\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v == 0) {\n                throw new IllegalArgumentException(k + \" does not occur\")\n            }\n        })\n        counts.foreach((k, v) => {\n            if (v > 1) {\n                throw new IllegalArgumentException(k + \" occurs \" + v + \" times\")\n            }\n        })\n        counts.foreach((k, v) =>",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.zipWithIndex.map(t => t._1.toLowerCase).toMap\n        counts.forEach(t => {\n            if (t._2 > 1) {\n                throw new RuntimeException(\"Duplicate character \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if (t._2 == 0) {\n                throw new RuntimeException(\"Character \" + t._1 + \" not found\")\n            }\n        })\n        counts.forEach(t => {\n            if (t._2 > 1) {\n                throw new RuntimeException(\"Duplicate character \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if (t._2 == 0) {\n                throw new RuntimeException(\"Character \" + t._1 + \" not found\")\n            }\n        })\n        counts.forEach(t => {\n            if (t._2 > 1) {\n                throw new RuntimeException(\"Duplicate character \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if (t._2 == 0) {\n                throw new RuntimeException(\"Character \" + t._1 + \" not found\")\n            }\n        })\n        counts.forEach(t => {\n            if (t._2 > 1) {\n                throw new RuntimeException(\"Duplicate character \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if (t._2 == 0) {\n                throw new RuntimeException(\"Character \" + t._1 + \" not found\")\n            }\n        })\n        counts.forEach(t => {\n            if (t._2 > 1) {\n                throw new RuntimeException(\"Duplicate character \" + t._1)\n            }\n        })\n        counts.forEach(t => {\n            if (t._2 == 0) {\n                throw new RuntimeException(\"Character \" + t._1 + \" not found\")\n            }\n        })\n        counts.forEach(t => {\n            if (t._2 > 1",
    "        var result = 0l\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n            if (c.isUpper()) {\n                result += 1l\n            } else if (c.isLower()) {\n                result += 1l\n            } else if (c.isDigit()) {\n                result += 1l\n            }\n        }\n        return result",
    "        val result = string.toLowerCase.map(s => s.charCodeAt(0)).distinct.count\n        if (result == 0) {\n            throw new RuntimeException(\"No characters found\")\n        }\n        return result",
    "        val chars = string.toLowerCase.chars\n        val counts = chars.map(_.toChar).distinct.toList\n        counts.length"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}