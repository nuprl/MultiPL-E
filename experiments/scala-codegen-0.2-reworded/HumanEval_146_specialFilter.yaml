name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a list of numbers as input and returns \n  \
  \  // the number of elements in the list that are greater than 10 and both \n  \
  \  // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n\
  \    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong,\
  \ 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ["        var result = 0l\n        for (i <- 0 until nums.length) {\n\
    \            if (nums[i] > 10) {\n                if (nums[i] % 2 == 1 && nums[i]\
    \ % 10 == 1) {\n                    result += 1\n                }\n         \
    \   }\n        }\n        return result", "        var result = 0l\n        for\
    \ (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 ==\
    \ 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n              \
    \  result += 1\n            }\n        }\n        return result", "        var\
    \ result = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10l) {\n                if (nums[i] % 2 == 1 && nums[i] % 10 == 1) {\n   \
    \                 result += 1l\n                }\n            }\n        }\n\
    \        return result", "        var result = 0L\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n \
    \               result += 1\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] %\
    \ 100 != nums[i]) {\n                result += 1\n            }\n        }\n \
    \       return result", "        var result = 0L\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n    \
    \            result += 1\n            }\n        }\n        return result", " \
    \       var result = 0\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10) {\n                if (nums[i] % 2 == 1 && nums[i] % 10 ==\
    \ nums[i] / 10) {\n                    result += 1\n                }\n      \
    \      }\n        }\n        return result", "        var result = 0l\n      \
    \  for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] %\
    \ 2 == 1 && nums[i] % 10 == nums[i]) {\n                result += 1\n        \
    \    }\n        }\n        return result", "        var result = 0l\n        for\
    \ (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 ==\
    \ 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n              \
    \  result += 1\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10) {\n                if (nums[i] % 2 == 1 && nums[i] % 10 ==\
    \ 1) {\n                    result += 1\n                }\n            }\n  \
    \      }\n        return result", "        var result = 0\n        for (i <- 0\
    \ until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i]\
    \ % 10 == nums[i] && nums[i] != 1) {\n                result += 1\n          \
    \  }\n        }\n        return result", "        var result = 0L\n        for\
    \ (i <- 0 until nums.length) {\n            if (nums[i] > 10) {\n            \
    \    if (nums[i] % 2 == 1 && nums[i] % 10 == 1) {\n                    result\
    \ += 1\n                }\n            }\n        }\n        return result", " \
    \       var result = 0\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n \
    \               result += 1\n            }\n        }\n        return result",
  "        var nums_copy = nums.toSeq()\n        var nums_len = nums_copy.length\n\
    \        var result = 0l\n        for (i <- 0 until nums_len) {\n            var\
    \ num = nums_copy.apply(i)\n            if (num > 10) {\n                if ((num\
    \ % 2) == 1) {\n                    if ((num % 10) == 1) {\n                 \
    \       result += 1\n                    }\n                }\n            }\n\
    \        }\n        return result", "        var result = 0\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i] % 100) {\n                result += 1\n            }\n\
    \        }\n        return result", "        var result = 0l\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100\
    \ != nums[i]) {\n                result += 1\n            }\n        }\n     \
    \   return result", "        var result = 0\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10) {\n                if (nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i] % 100) {\n                    result += 1\n        \
    \        }\n            }\n        }\n        return result", "        var result\
    \ = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result +=\
    \ 1\n            }\n        }\n        return result", "        var result = 0\n\
    \        for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n       \
    \         result += 1\n            }\n        }\n        return result", "   \
    \     val nums_ = nums.toLong\n        val nums_len = nums.length\n        val\
    \ nums_len_ = nums_len\n        val nums_len__ = nums_len_\n        val nums__\
    \ = nums_\n        val nums__len = nums__.length\n        val nums__len_ = nums__len\n\
    \        val nums__len__ = nums__len_\n        val nums__len___ = nums__len__\n\
    \        val nums__len____ = nums__len___\n        val nums__len____$ = nums__len____\n\
    \        val nums__len____$len = nums__len____$\n        val nums__len____$len_\
    \ = nums__len____$len\n        val nums__len____$len__ = nums__len____$len_\n\
    \        val nums__len____$len___ = nums__len____$len__\n        val nums__len____$len____\
    \ = nums__len____$len___\n        val nums__len____$len____$ = nums__len____$len____\n\
    \        val nums__len____$len____$len = nums__len____$len____$\n        val nums__len____$len____$len_\
    \ = nums__len____$len____$len\n        val nums__len____$len____$len__ = nums__len____$len____$len_\n\
    \        val nums__len____$len____$len___ = nums__len____$len____$len__\n    \
    \    val nums__len____$len____$len____ = nums__len____$len____$len___\n      \
    \  val nums__len____$len____$len____$ = nums__len____$len____$len____\n      \
    \  val nums__len____$len____$len____$len = nums__len____$len____$len____$\n  \
    \      val nums__len____$len____$len____$len_ = nums__len____$len____$len____$len\n\
    \        val nums__len____$len____$len____$len__ = nums__len____$len____$len____$len_\n\
    \        val nums__len", "        var result = 0L\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n    \
    \            result += 1\n            }\n        }\n        return result", " \
    \       var result = 0l\n        for(var i = 0; i < nums.size(); i++) {\n    \
    \        var num = nums.apply(i)\n            if(num > 10l && num % 2 == 1 &&\
    \ num % 10 == num.toInt) {\n                result += 1l\n            }\n    \
    \    }\n        return result", "        var result = 0\n        for (i <- 0 until\
    \ nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i]\
    \ % 10 == nums[i] % 100) {\n                result += 1\n            }\n     \
    \   }\n        return result", "        val result = 0\n        for (i <- 0 until\
    \ nums.size) {\n            if (nums.apply(i).toLong > 10 && nums.apply(i).toLong\
    \ % 2 == 1 && nums.apply(i).toLong % 10 == 1) {\n                result += 1\n\
    \            }\n        }\n        return result", "        var result = 0\n \
    \       for (i <- 0 until nums.length) {\n            if (nums[i] > 10) {\n  \
    \              if (nums[i] % 2 == 1 && nums[i] % 10 == 1) {\n                \
    \    result += 1\n                }\n            }\n        }\n        return\
    \ result", "        var result = 0l\n        for (i <- 0 until nums.length) {\n\
    \            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] &&\
    \ nums[i] % 100 != nums[i]) {\n                result += 1\n            }\n  \
    \      }\n        return result", "        var result = 0l\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10l) {\n                if\
    \ (nums[i] % 2 == 1 && nums[i] % 10 == 1) {\n                    result += 1l\n\
    \                }\n            }\n        }\n        return result", "      \
    \  var result = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        val numsLen\
    \ = nums.length\n        if (numsLen == 0) return 0l\n        val numsCopy = nums.toSeq().toVector()\n\
    \        val numsCopyLen = numsCopy.length\n        val numsCopyCopy = numsCopy.copyToArray()\n\
    \        val numsCopyCopyLen = numsCopyCopy.length\n        val numsCopyCopyCopy\
    \ = numsCopyCopy.copyToArray()\n        val numsCopyCopyCopyLen = numsCopyCopyCopy.length\n\
    \        val numsCopyCopyCopyCopy = numsCopyCopyCopy.copyToArray()\n        val\
    \ numsCopyCopyCopyCopyLen = numsCopyCopyCopyCopy.length\n        val numsCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopy.copyToArray()\n        val numsCopyCopyCopyCopyCopyLen\
    \ = numsCopyCopyCopyCopyCopy.length\n        val numsCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopy.copyToArray()\n        val numsCopyCopyCopyCopyCopyCopyLen\
    \ = numsCopyCopyCopyCopyCopyCopy.length\n        val numsCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopy.copyToArray()\n        val numsCopyCopyCopyCopyCopyCopyCopyLen\
    \ = numsCopyCopyCopyCopyCopyCopyCopy.length\n        val numsCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopy.copyToArray()\n        val numsCopyCopyCopyCopyCopyCopyCopyCopyLen\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopy.length\n        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopy.copyToArray()\n        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyLen\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopy.length\n        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopy.copyToArray()\n        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyLen\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.length\n        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.copyToArray()", "       \
    \ var result = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n             \
    \   result += 1\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n          \
    \      result += 1\n            }\n        }\n        return result", "      \
    \  var result = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n    \
    \            result += 1\n            }\n        }\n        return result", " \
    \       var result = 0\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n \
    \               result += 1\n            }\n        }\n        return result",
  "        var result = 0l\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n \
    \               result += 1\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n       \
    \         result += 1\n            }\n        }\n        return result", "   \
    \     var result = 0L\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n          \
    \      result += 1\n            }\n        }\n        return result", "      \
    \  var result = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result +=\
    \ 1l\n            }\n        }\n        return result", "        var result =\
    \ 0\n        for(i <- 0 until nums.length) {\n            if(nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] != 1 && nums[i] != 3 && nums[i]\
    \ != 5 && nums[i] != 7 && nums[i] != 9) {\n                result += 1\n     \
    \       }\n        }\n        return result", "        var result = 0\n      \
    \  for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] %\
    \ 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n                result += 1\n  \
    \          }\n        }\n        return result", "        var result = 0\n   \
    \     for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result += 1\n      \
    \      }\n        }\n        return result", "        var result = 0l\n      \
    \  for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] %\
    \ 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n                result += 1\n  \
    \          }\n        }\n        return result", "        var result = 0L\n  \
    \      for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] != 1) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0l\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n \
    \               result += 1\n            }\n        }\n        return result",
  "        val numsLen = nums.length\n        val result = 0\n        for (i <- 0\
    \ until numsLen) {\n            val num = nums[i]\n            if (num > 10) {\n\
    \                if (num.toInt % 2 == 1 && num.toInt % 10 == num.toInt) {\n  \
    \                  result += 1\n                }\n            }\n        }\n\
    \        return result", "        var result = 0\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n    \
    \            result += 1\n            }\n        }\n        return result", " \
    \       var result = 0L\n        for (i <- 0 until nums.length) {\n          \
    \  if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n\
    \                result += 1\n            }\n        }\n        return result",
  "        var result : Long = 0L\n        for (i <- 0 until nums.length) {\n    \
    \        if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100)\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        val numsList = nums.toSeq\n        val numsSeq = numsList.toSeq\n     \
    \   val numsSeqIterator = numsSeq.iterator\n        val numsIterator = numsSeqIterator.toIterator\n\
    \        val numsIteratorIterator = numsIterator.toIterator\n        val numsIteratorIteratorIterator\
    \ = numsIteratorIterator.toIterator\n        val numsIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIterator.toIterator\n        val numsIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIterator.toIterator\n        val numsIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.to",
  "        var result = 0L\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n       \
    \         result += 1\n            }\n        }\n        return result", "   \
    \     var nums_copy = nums.toSeq\n        var nums_len = nums_copy.length\n  \
    \      var nums_copy_iter = nums_copy.iterator\n        var nums_copy_iter_next\
    \ = nums_copy_iter.next\n        var nums_copy_iter_hasNext = nums_copy_iter.hasNext\n\
    \        var nums_copy_iter_next_next = nums_copy_iter_next.next\n        var\
    \ nums_copy_iter_next_next_next = nums_copy_iter_next_next.next\n        var nums_copy_iter_next_next_next_next\
    \ = nums_copy_iter_next_next_next.next\n        var nums_copy_iter_next_next_next_next_next\
    \ = nums_copy_iter_next_next_next_next.next\n        var nums_copy_iter_next_next_next_next_next_next\
    \ = nums_copy_iter_next_next_next_next_next.next\n        var nums_copy_iter_next_next_next_next_next_next_next\
    \ = nums_copy_iter_next_next_next_next_next_next.next\n        var nums_copy_iter_next_next_next_next_next_next_next_next\
    \ = nums_copy_iter_next_next_next_next_next_next_next.next\n        var nums_copy_iter_next_next_next_next_next_next_next_next_next\
    \ = nums_copy_iter_next_next_next_next_next_next_next_next.next\n        var nums_copy_iter_next_next_next_next_next_next_next_next_next_next\
    \ = nums_copy_iter_next_next_next_next_next_next_next_next_next.next\n       \
    \ var nums_copy_iter_next_next_next_next_next_next_next_next_next_next_next =\
    \ nums_copy_iter_next_next_next_next_next_next_next_next_next_next.next\n    \
    \    var nums_copy", "        var result = 0L\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]\
    \ && nums[i] % 100 != nums[i]) {\n                result += 1\n            }\n\
    \        }\n        return result", "        var result = 0\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i]) {\n                result += 1\n            }\n   \
    \     }\n        return result", "        var result = 0\n        for (i <- 0\
    \ until nums.length) {\n            if (nums[i] > 10) {\n                if (nums[i]\
    \ % 2 == 1 && nums[i] % 10 == 1) {\n                    result += 1\n        \
    \        }\n            }\n        }\n        return result", "        val nums2\
    \ = nums.toSeq\n        val nums3 = nums2.map(x => x.toLong)\n        val nums4\
    \ = nums3.filter(x => x > 10 && x % 2 == 1 && x % 10 == 1)\n        val nums5\
    \ = nums4.map(x => x + 1)\n        val nums6 = nums5.toSeq\n        val nums7\
    \ = nums6.map(x => x.toLong)\n        val nums8 = nums7.filter(x => x % 2 == 1)\n\
    \        val nums9 = nums8.map(x => x + 1)\n        val nums10 = nums9.toSeq\n\
    \        val nums11 = nums10.map(x => x.toLong)\n        val nums12 = nums11.filter(x\
    \ => x % 2 == 1)\n        val nums13 = nums12.map(x => x + 1)\n        val nums14\
    \ = nums13.toSeq\n        val nums15 = nums14.map(x => x.toLong)\n        val\
    \ nums16 = nums15.filter(x => x % 2 == 1)\n        val nums17 = nums16.map(x =>\
    \ x + 1)\n        val nums18 = nums17.toSeq\n        val nums19 = nums18.map(x\
    \ => x.toLong)\n        val nums20 = nums19.filter(x => x % 2 == 1)\n        val\
    \ nums21 = nums20.map(x => x + 1)\n        val nums22 = nums21.toSeq\n       \
    \ val nums23 = nums22.map(x => x.toLong)\n        val nums24 = nums23.filter(x\
    \ => x % 2 == 1)\n        val nums25 = nums24.map(x => x + 1)\n        val nums26\
    \ = nums25.toSeq\n        val nums27 = nums26.map(x => x.toLong)\n        val\
    \ nums28 = nums27.filter(x => x % 2 == 1)\n        val nums", "        var result\
    \ = 0L\n        for (i <- 0 until nums.size) {\n            if (nums[i] > 10 &&\
    \ nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until nums.size) {\n            if (nums[i] > 10 &&\
    \ nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n\
    \                result += 1\n            }\n        }\n        return result",
  "        var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n    \
    \            result += 1\n            }\n        }\n        return result", '        nums.filter(x
    => x > 10 && x % 2 == 1 && x % 10 == 1 || x % 2 == 1 && x % 10 == 3 || x % 2 ==
    1 && x % 10 == 5 || x % 2 == 1 && x % 10 == 7 || x % 2 == 1 && x % 10 == 9)',
  "        var result = 0L\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n       \
    \         result += 1\n            }\n        }\n        return result", "   \
    \     var result = 0L\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100\
    \ != nums[i]) {\n                result += 1\n            }\n        }\n     \
    \   return result", "        val nums = nums.toLong\n        val result = 0L\n\
    \        for (i <- 0 until nums.length) {\n            val num = nums[i]\n   \
    \         if (num > 10 && num % 2 == 1 && num % 10 == num.mod(10)) {\n       \
    \         result += 1\n            }\n        }\n        return result", "   \
    \     var result = 0\n        for(i <- 0 until nums.length) {\n            if(nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result +=\
    \ 1\n            }\n        }\n        return result", "        var result = 0\n\
    \        for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result += 1\n      \
    \      }\n        }\n        return result", "        var result = 0L\n      \
    \  for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] %\
    \ 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n         \
    \       result += 1\n            }\n        }\n        return result", "     \
    \   val result = 0\n        for (i <- 0 until nums.length) {\n            val\
    \ num = nums[i]\n            if (num > 10 && num % 2 == 1 && num % 10 == num.toInt\
    \ % 10) {\n                result += 1\n            }\n        }\n        return\
    \ result", "        val nums1 = nums.filter(x => x > 10 && x % 2 == 1 && x % 10\
    \ == 1)\n        val nums2 = nums.filter(x => x > 10 && x % 2 == 1 && x % 10 ==\
    \ 3)\n        val nums3 = nums.filter(x => x > 10 && x % 2 == 1 && x % 10 == 5)\n\
    \        val nums4 = nums.filter(x => x > 10 && x % 2 == 1 && x % 10 == 7)\n \
    \       val nums5 = nums.filter(x => x > 10 && x % 2 == 1 && x % 10 == 9)\n  \
    \      val nums6 = nums.filter(x => x > 10 && x % 2 == 3 && x % 10 == 1)\n   \
    \     val nums7 = nums.filter(x => x > 10 && x % 2 == 3 && x % 10 == 3)\n    \
    \    val nums8 = nums.filter(x => x > 10 && x % 2 == 3 && x % 10 == 5)\n     \
    \   val nums9 = nums.filter(x => x > 10 && x % 2 == 3 && x % 10 == 7)\n      \
    \  val nums10 = nums.filter(x => x > 10 && x % 2 == 3 && x % 10 == 9)\n      \
    \  val nums11 = nums.filter(x => x > 10 && x % 2 == 5 && x % 10 == 1)\n      \
    \  val nums12 = nums.filter(x => x > 10 && x % 2 == 5 && x % 10 == 3)\n      \
    \  val nums13 = nums.filter(x => x > 10 && x % 2 == 5 && x % 10 == 5)\n      \
    \  val nums14 = nums.filter(x => x > 10 && x % 2 == 5 && x % 10 == 7)\n      \
    \  val nums15 = nums.filter(x => x > 10 && x % 2 == 5 && x % 10 == 9)\n      \
    \  val nums16 = nums.filter(x => x > 10 && x % 2 == 7 && x % 10 == 1)\n      \
    \  val nums17 = nums.filter(x => x > 10 && x % 2 == 7 && x % 10 == 3)\n      \
    \  val", "        var result = 0l\n        for (i <- 0 until nums.length) {\n\
    \            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] &&\
    \ nums[i] % 100 != nums[i]) {\n                result += 1\n            }\n  \
    \      }\n        return result", "        var result = 0l\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i] && nums[i] != 1 && nums[i] != 3 && nums[i] != 5 && nums[i]\
    \ != 7 && nums[i] != 9) {\n                result += 1\n            }\n      \
    \  }\n        return result", "        var result = 0L\n        for (i <- 0 until\
    \ nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i]\
    \ % 10 == nums[i]) {\n                result += 1\n            }\n        }\n\
    \        return result", "        var result = 0L\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]\
    \ && nums[i] != 1 && nums[i] != 3 && nums[i] != 5 && nums[i] != 7 && nums[i] !=\
    \ 9) {\n                result += 1\n            }\n        }\n        return\
    \ result", "        var result = 0\n        for (i <- 0 until nums.length) {\n\
    \            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] %\
    \ 100 != nums[i]) {\n                result += 1\n            }\n        }\n \
    \       return result", "        var result = 0l\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10l) {\n                if (nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == 1) {\n                    result += 1l\n                }\n\
    \            }\n        }\n        return result", "        var result = 0l\n\
    \        for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n       \
    \         result += 1\n            }\n        }\n        return result", "   \
    \     var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n    \
    \            result += 1\n            }\n        }\n        return result", " \
    \       var result = 0l\n        for (i <- 0 until nums.length) {\n          \
    \  if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i]\
    \ != 1) {\n                result += 1\n            }\n        }\n        return\
    \ result", "        var result = 0\n        for (i <- 0 until nums.length) {\n\
    \            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n    \
    \            result += 1\n            }\n        }\n        return result", " \
    \       var result = 0L\n        for (i <- 0 until nums.length) {\n          \
    \  if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n\
    \                result += 1\n            }\n        }\n        return result",
  "        val nums = nums.toLong\n        val result = 0\n        for (i <- 0 until\
    \ nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i]\
    \ % 10 == nums[i]) {\n                result += 1\n            }\n        }\n\
    \        return result", "        var result = 0\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]\
    \ % 100) {\n                result += 1\n            }\n        }\n        return\
    \ result", "        var result = 0\n        for (i <- 0 until nums.length) {\n\
    \            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] %\
    \ 100) {\n                result += 1\n            }\n        }\n        return\
    \ result", "        var result = 0\n        for (i <- 0 until nums.length) {\n\
    \            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] %\
    \ 100) {\n                result += 1\n            }\n        }\n        return\
    \ result", "        var result = 0L\n        for (i <- 0 until nums.length) {\n\
    \            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] &&\
    \ nums[i] % 100 != nums[i]) {\n                result += 1\n            }\n  \
    \      }\n        return result", "        val nums1 = nums.toSeq\n        val\
    \ nums2 = nums.toSeq\n        val nums3 = nums.toSeq\n        val nums4 = nums.toSeq\n\
    \        val nums5 = nums.toSeq\n        val nums6 = nums.toSeq\n        val nums7\
    \ = nums.toSeq\n        val nums8 = nums.toSeq\n        val nums9 = nums.toSeq\n\
    \        val nums10 = nums.toSeq\n        val nums11 = nums.toSeq\n        val\
    \ nums12 = nums.toSeq\n        val nums13 = nums.toSeq\n        val nums14 = nums.toSeq\n\
    \        val nums15 = nums.toSeq\n        val nums16 = nums.toSeq\n        val\
    \ nums17 = nums.toSeq\n        val nums18 = nums.toSeq\n        val nums19 = nums.toSeq\n\
    \        val nums20 = nums.toSeq\n        val nums21 = nums.toSeq\n        val\
    \ nums22 = nums.toSeq\n        val nums23 = nums.toSeq\n        val nums24 = nums.toSeq\n\
    \        val nums25 = nums.toSeq\n        val nums26 = nums.toSeq\n        val\
    \ nums27 = nums.toSeq\n        val nums28 = nums.toSeq\n        val nums29 = nums.toSeq\n\
    \        val nums30 = nums.toSeq\n        val nums31 = nums.toSeq\n        val\
    \ nums32 = nums.toSeq\n        val nums33 = nums.toSeq\n        val nums34 = nums.toSeq\n\
    \        val nums35 = nums.toSeq\n        val nums36 = nums.toSeq\n        val\
    \ nums37 = nums.toSeq\n        val nums38 = nums.toSeq\n        val nums39 = nums.toSeq\n\
    \        val nums40", "        var result = 0L\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0l\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] !=\
    \ nums[i] / 10) {\n                result += 1\n            }\n        }\n   \
    \     return result", "        var result = 0l\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]\
    \ && nums[i] != 1) {\n                result += 1\n            }\n        }\n\
    \        return result", "        var result = 0L\n        for(i <- nums.size\
    \ - 1) {\n            if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]\
    \ && nums[i] % 100 != nums[i]) {\n                result += 1\n            }\n\
    \        }\n        return result", "        var result = 0l\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i] % 100) {\n                result += 1\n            }\n\
    \        }\n        return result", '        nums.filter(x -> x > 10 && (x % 2
    == 1 && x % 10 == 1 || x % 2 == 1 && x % 10 == 3 || x % 2 == 1 && x % 10 == 5
    || x % 2 == 1 && x % 10 == 7 || x % 2 == 1 && x % 10 == 9)).length', "       \
    \ var result = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        val numsList\
    \ = nums.toSeq\n        val numsSeq = numsList.toSeq\n        val numsSeqIterator\
    \ = numsSeq.iterator\n        val numsIterator = numsSeqIterator.toIterator\n\
    \        val numsIteratorIterator = numsIterator.toIterator\n        val numsIteratorIteratorIterator\
    \ = numsIteratorIterator.toIterator\n        val numsIteratorIteratorIterator\
    \ = numsIteratorIterator.toIterator\n        val numsIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIterator.toIterator\n        val numsIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIterator.toIterator\n        val numsIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIterator.toIterator\n        val numsIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n        val\
    \ numsIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.toIterator\n\
    \        val numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator",
  "        var result = 0L\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10) {\n                if ((nums[i] % 2) == 1 && (nums[i] % 10)\
    \ == 1) {\n                    result += 1\n                }\n            }\n\
    \        }\n        return result", "        var result = 0l\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result +=\
    \ 1\n            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result += 1\n      \
    \      }\n        }\n        return result", "        var result = 0\n       \
    \ for(i <- 0 until nums.length) {\n            if(nums[i] > 10 && nums[i] % 2\
    \ == 1 && nums[i] % 10 == nums[i]) {\n                result += 1\n          \
    \  }\n        }\n        return result", "        var result = 0l\n        for\
    \ (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 ==\
    \ 1 && nums[i] % 10 == nums[i] % 100) {\n                result += 1\n       \
    \     }\n        }\n        return result", "        var result = 0L\n       \
    \ for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] %\
    \ 2 == 1 && nums[i] % 10 == nums[i]) {\n                result += 1\n        \
    \    }\n        }\n        return result", "        var result = 0\n        for\
    \ (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 ==\
    \ 1 && nums[i] % 10 == nums[i] % 100) {\n                result += 1\n       \
    \     }\n        }\n        return result", "        val nums2 = nums.toSeq\n\
    \        val nums3 = nums2.filter(x => x > 10)\n        val nums4 = nums3.map(x\
    \ => x.toLong)\n        val nums5 = nums4.filter(x => x % 2 == 1 && x % 10 ==\
    \ 1)\n        val nums6 = nums5.map(x => x + 1)\n        val nums7 = nums6.toSeq\n\
    \        val nums8 = nums7.toList\n        val nums9 = nums8.length\n        val\
    \ nums10 = nums9\n        return nums10", "        var result = 0L\n        for\
    \ (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 ==\
    \ 1 && nums[i] % 10 == nums[i] % 100) {\n                result += 1\n       \
    \     }\n        }\n        return result", "        var result = 0l\n       \
    \ for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] %\
    \ 2 == 1 && nums[i] % 10 == nums[i]) {\n                result += 1\n        \
    \    }\n        }\n        return result", "        var nums_ = nums\n       \
    \ var nums_len = nums_.length\n        var nums_len_ = nums_len\n        var nums_len_1\
    \ = nums_len - 1\n        var nums_len_2 = nums_len - 2\n        var nums_len_3\
    \ = nums_len - 3\n        var nums_len_4 = nums_len - 4\n        var nums_len_5\
    \ = nums_len - 5\n        var nums_len_6 = nums_len - 6\n        var nums_len_7\
    \ = nums_len - 7\n        var nums_len_8 = nums_len - 8\n        var nums_len_9\
    \ = nums_len - 9\n        var nums_len_10 = nums_len - 10\n        var nums_len_11\
    \ = nums_len - 11\n        var nums_len_12 = nums_len - 12\n        var nums_len_13\
    \ = nums_len - 13\n        var nums_len_14 = nums_len - 14\n        var nums_len_15\
    \ = nums_len - 15\n        var nums_len_16 = nums_len - 16\n        var nums_len_17\
    \ = nums_len - 17\n        var nums_len_18 = nums_len - 18\n        var nums_len_19\
    \ = nums_len - 19\n        var nums_len_20 = nums_len - 20\n        var nums_len_21\
    \ = nums_len - 21\n        var nums_len_22 = nums_len - 22\n        var nums_len_23\
    \ = nums_len - 23\n        var nums_len_24 = nums_len - 24\n        var nums_len_25\
    \ = nums_len - 25\n        var nums_len_26 = nums_len - 26\n        var nums_len_27\
    \ = nums_len - 27\n        var nums_len_28 = nums_len - 28\n        var nums_len_29\
    \ = nums_len - 29\n        var nums_len_30 = nums_len -", "        var result\
    \ = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result +=\
    \ 1\n            }\n        }\n        return result", "        var result = 0l\n\
    \        for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n                result += 1\n\
    \            }\n        }\n        return result", "        var nums_ = nums\n\
    \        var nums_len = nums_.length\n        var nums_len_ = nums_len\n     \
    \   var nums_len_1 = nums_len - 1\n        var nums_len_2 = nums_len - 2\n   \
    \     var nums_len_3 = nums_len - 3\n        var nums_len_4 = nums_len - 4\n \
    \       var nums_len_5 = nums_len - 5\n        var nums_len_6 = nums_len - 6\n\
    \        var nums_len_7 = nums_len - 7\n        var nums_len_8 = nums_len - 8\n\
    \        var nums_len_9 = nums_len - 9\n        var nums_len_10 = nums_len - 10\n\
    \        var nums_len_11 = nums_len - 11\n        var nums_len_12 = nums_len -\
    \ 12\n        var nums_len_13 = nums_len - 13\n        var nums_len_14 = nums_len\
    \ - 14\n        var nums_len_15 = nums_len - 15\n        var nums_len_16 = nums_len\
    \ - 16\n        var nums_len_17 = nums_len - 17\n        var nums_len_18 = nums_len\
    \ - 18\n        var nums_len_19 = nums_len - 19\n        var nums_len_20 = nums_len\
    \ - 20\n        var nums_len_21 = nums_len - 21\n        var nums_len_22 = nums_len\
    \ - 22\n        var nums_len_23 = nums_len - 23\n        var nums_len_24 = nums_len\
    \ - 24\n        var nums_len_25 = nums_len - 25\n        var nums_len_26 = nums_len\
    \ - 26\n        var nums_len_27 = nums_len - 27\n        var nums_len_28 = nums_len\
    \ - 28\n        var nums_len_29 = nums_len - 29\n        var nums_len_30 = nums_len\
    \ -", "        val nums2 = nums.toSeq\n        val nums3 = nums2.filter(x => x\
    \ > 10 && x % 2 == 1 && x % 10 == 1)\n        val nums4 = nums2.filter(x => x\
    \ > 10 && x % 2 == 1 && x % 10 == 3)\n        val nums5 = nums2.filter(x => x\
    \ > 10 && x % 2 == 1 && x % 10 == 5)\n        val nums6 = nums2.filter(x => x\
    \ > 10 && x % 2 == 1 && x % 10 == 7)\n        val nums7 = nums2.filter(x => x\
    \ > 10 && x % 2 == 1 && x % 10 == 9)\n        val nums8 = nums2.filter(x => x\
    \ > 10 && x % 2 == 3 && x % 10 == 1)\n        val nums9 = nums2.filter(x => x\
    \ > 10 && x % 2 == 3 && x % 10 == 3)\n        val nums10 = nums2.filter(x => x\
    \ > 10 && x % 2 == 3 && x % 10 == 5)\n        val nums11 = nums2.filter(x => x\
    \ > 10 && x % 2 == 3 && x % 10 == 7)\n        val nums12 = nums2.filter(x => x\
    \ > 10 && x % 2 == 3 && x % 10 == 9)\n        val nums13 = nums2.filter(x => x\
    \ > 10 && x % 2 == 5 && x % 10 == 1)\n        val nums14 = nums2.filter(x => x\
    \ > 10 && x % 2 == 5 && x % 10 == 3)\n        val nums15 = nums2.filter(x => x\
    \ > 10 && x % 2 == 5 && x % 10 == 5)\n        val nums16 = nums2.filter(x => x\
    \ > 10 && x % 2 == 5 && x % 10 == 7)\n        val nums17 = nums2.filter(x => x\
    \ > 10 && x % 2 == 5 && x % 10 == 9)\n        val nums18 = nums2.filter(x => x\
    \ > 10 && x % 2 == 7 && x % 10 == 1)\n        val num", "        var result =\
    \ 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10 &&\
    \ nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n                result\
    \ += 1\n            }\n        }\n        return result", '        nums.filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1 || x > 10 && x % 2 == 1 && x % 10 == 3
    || x > 10 && x % 2 == 1 && x % 10 == 5 || x > 10 && x % 2 == 1 && x % 10 == 7
    || x > 10 && x % 2 == 1 && x % 10 == 9)', "        var result = 0l\n        for\
    \ (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 ==\
    \ 1 && nums[i] % 10 == nums[i]) {\n                result += 1\n            }\n\
    \        }\n        return result", "        var result = 0l\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i] && nums[i] != 1 && nums[i] != 3 && nums[i] != 5 && nums[i]\
    \ != 7 && nums[i] != 9) {\n                result += 1\n            }\n      \
    \  }\n        return result", "        var result = 0L\n        for (i <- 0 until\
    \ nums.length) {\n            if (nums[i] > 10) {\n                if (nums[i]\
    \ % 2 == 1 && nums[i] % 10 == 1) {\n                    result += 1\n        \
    \        }\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for(i <- 0 until nums.length) {\n            if(nums[i] > 10 &&\
    \ nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n\
    \                result += 1\n            }\n        }\n        return result",
  "        var result = 0l\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n       \
    \         result += 1\n            }\n        }\n        return result", "   \
    \     var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n          \
    \      result += 1\n            }\n        }\n        return result", "      \
    \  var result = 0L\n        for(i <- 0 until nums.length) {\n            if(nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] != 1 && nums[i]\
    \ != 3 && nums[i] != 5 && nums[i] != 7 && nums[i] != 9) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until nums.size) {\n            if (nums.apply(i).toLong\
    \ > 10L) {\n                if (nums.apply(i).toLong % 2 == 1 && nums.apply(i).toLong\
    \ % 10 == 1) {\n                    result += 1L\n                }\n        \
    \    }\n        }\n        return result", "        var result = 0\n        for\
    \ (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 ==\
    \ 1 && nums[i] % 10 == nums[i] % 100) {\n                result += 1\n       \
    \     }\n        }\n        return result", "        val result = 0\n        for\
    \ (i <- 0 until nums.length) {\n            val num = nums[i]\n            if\
    \ (num > 10 && num % 2 == 1 && num % 10 == num.toInt % 10) {\n               \
    \ result += 1\n            }\n        }\n        return result", "        var\
    \ result = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10l)\
    \ {\n                if (nums[i] % 2 == 1 && nums[i] % 10 == 1) {\n          \
    \          result += 1l\n                }\n            }\n        }\n       \
    \ return result", "        var result = 0L\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]\
    \ && nums[i] % 100 != nums[i]) {\n                result += 1\n            }\n\
    \        }\n        return result", "        var result = 0L\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10) {\n                if\
    \ (nums[i] % 2 == 1 && nums[i] % 10 == 1) {\n                    result += 1\n\
    \                }\n            }\n        }\n        return result", "      \
    \  var result = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n             \
    \   result += 1\n            }\n        }\n        return result", "        var\
    \ result = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] != 1 && nums[i] !=\
    \ 3 && nums[i] != 5 && nums[i] != 7 && nums[i] != 9) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        val result\
    \ = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        val nums2 =\
    \ nums.toSeq\n        val nums3 = nums2.filter(x => x > 10)\n        val nums4\
    \ = nums3.filter(x => x % 2 == 1 && x % 10 == 1)\n        val nums5 = nums4.filter(x\
    \ => x % 2 == 1 && x % 10 == 3)\n        val nums6 = nums5.filter(x => x % 2 ==\
    \ 1 && x % 10 == 5)\n        val nums7 = nums6.filter(x => x % 2 == 1 && x % 10\
    \ == 7)\n        val nums8 = nums7.filter(x => x % 2 == 1 && x % 10 == 9)\n  \
    \      val nums9 = nums8.filter(x => x % 2 == 1 && x % 10 == 1)\n        val nums10\
    \ = nums9.filter(x => x % 2 == 1 && x % 10 == 3)\n        val nums11 = nums10.filter(x\
    \ => x % 2 == 1 && x % 10 == 5)\n        val nums12 = nums11.filter(x => x % 2\
    \ == 1 && x % 10 == 7)\n        val nums13 = nums12.filter(x => x % 2 == 1 &&\
    \ x % 10 == 9)\n        val nums14 = nums13.filter(x => x % 2 == 1 && x % 10 ==\
    \ 1)\n        val nums15 = nums14.filter(x => x % 2 == 1 && x % 10 == 3)\n   \
    \     val nums16 = nums15.filter(x => x % 2 == 1 && x % 10 == 5)\n        val\
    \ nums17 = nums16.filter(x => x % 2 == 1 && x % 10 == 7)\n        val nums18 =\
    \ nums17.filter(x => x % 2 == 1 && x % 10 == 9)\n        val nums19 = nums18.filter(x\
    \ => x % 2 == 1 && x % 10 == 1)\n        val nums20 = nums19.filter(x => x % 2\
    \ == 1 && x % 10 == 3)\n        val nums21 = nums20.filter(x => x % 2 == 1 &&\
    \ x", "        var result = 0l\n        for (i <- 0 until nums.length) {\n   \
    \         if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100)\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n          \
    \      result += 1\n            }\n        }\n        return result", "      \
    \  var result = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n             \
    \   result += 1\n            }\n        }\n        return result", "        var\
    \ result = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n       \
    \         result += 1\n            }\n        }\n        return result", "   \
    \     var nums_len = nums.length\n        var odd_first_odd_last = false\n   \
    \     var odd_first_odd_last_count = 0\n        var odd_first_odd_last_index =\
    \ 0\n        var odd_first_odd_last_index_count = 0\n        var odd_first_odd_last_index_index\
    \ = 0\n        var odd_first_odd_last_index_index_count = 0\n        var odd_first_odd_last_index_index_index\
    \ = 0\n        var odd_first_odd_last_index_index_index_count = 0\n        var\
    \ odd_first_odd_last_index_index_index_index = 0\n        var odd_first_odd_last_index_index_index_index_count\
    \ = 0\n        var odd_first_odd_last_index_index_index_index_index = 0\n    \
    \    var odd_first_odd_last_index_index_index_index_index_count = 0\n        var\
    \ odd_first_odd_last_index_index_index_index_index_index = 0\n        var odd_first_odd_last_index_index_index_index_index_index_count\
    \ = 0\n        var odd_first_odd_last_index_index_index_index_index_index_index\
    \ = 0\n        var odd_first_odd_last_index_index_index_index_index_index_index_count\
    \ = 0\n        var odd_first_odd_last_index_index_index_index_index_index_index_index\
    \ = 0\n        var odd_first_odd_last_index_index_index_index_index_index_index_index_count\
    \ = 0\n        var odd_first_odd_last_index_index_index_index_index_index_index_index_index\
    \ = 0\n        var odd_first_odd_last_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n        var odd_first_odd_last_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        var odd_first_odd_last_index_index_index_index_index_index_index_index_index_",
  "        var result = 0\n        for(i <- 0 until nums.length) {\n            if(nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var count = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n    \
    \            count += 1\n            }\n        }\n        return count", "  \
    \      var result = 0L\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] %\
    \ 100 != nums[i]) {\n                result += 1\n            }\n        }\n \
    \       return result", "        var result : Long = 0L\n        for(i <- 0 until\
    \ nums.length) {\n            if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] %\
    \ 10 == nums[i] && nums[i] % 100 != nums[i]) {\n                result += 1\n\
    \            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n                result += 1\n\
    \            }\n        }\n        return result", "        var result = 0\n \
    \       for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result += 1\n      \
    \      }\n        }\n        return result", "        val nums1 = nums.toSeq\n\
    \        val nums2 = nums1.map(x => x.toLong)\n        val nums3 = nums2.filter(x\
    \ => x > 10 && x % 2 == 1 && x % 10 == 1)\n        val nums4 = nums3.map(x =>\
    \ x + 10)\n        val nums5 = nums4.filter(x => x % 2 == 1)\n        val nums6\
    \ = nums5.map(x => x - 10)\n        val nums7 = nums6.filter(x => x > 10 && x\
    \ % 2 == 1 && x % 10 == 1)\n        val nums8 = nums7.map(x => x + 10)\n     \
    \   val nums9 = nums8.filter(x => x % 2 == 1)\n        val nums10 = nums9.map(x\
    \ => x - 10)\n        val nums11 = nums10.filter(x => x > 10 && x % 2 == 1 &&\
    \ x % 10 == 1)\n        val nums12 = nums11.map(x => x + 10)\n        val nums13\
    \ = nums12.filter(x => x % 2 == 1)\n        val nums14 = nums13.map(x => x - 10)\n\
    \        val nums15 = nums14.filter(x => x > 10 && x % 2 == 1 && x % 10 == 1)\n\
    \        val nums16 = nums15.map(x => x + 10)\n        val nums17 = nums16.filter(x\
    \ => x % 2 == 1)\n        val nums18 = nums17.map(x => x - 10)\n        val nums19\
    \ = nums18.filter(x => x > 10 && x % 2 == 1 && x % 10 == 1)\n        val nums20\
    \ = nums19.map(x => x + 10)\n        val nums21 = nums20.filter(x => x % 2 ==\
    \ 1)\n        val nums22 = nums21.map(x => x - 10)\n        val nums23 = nums22.filter(x\
    \ => x > 10 && x % 2 == 1 && x % 10 == 1", "        val nums_ = nums.toLong\n\
    \        val nums_len = nums.length\n        val result = 0l\n        for (i <-\
    \ 0 until nums_len) {\n            if (nums_[i] > 10l) {\n                if (nums_[i]\
    \ % 2 == 1 && nums_[i] % 10 == nums_[i]) {\n                    result += 1l\n\
    \                }\n            }\n        }\n        return result", "      \
    \  var result = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0l\n        for(i <- 0 until nums.length) {\n            if(nums[i] > 10 &&\
    \ nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n\
    \                result += 1\n            }\n        }\n        return result",
  "        val result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n          \
    \      result += 1\n            }\n        }\n        return result", "      \
    \  var result = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10)\
    \ {\n                if ((nums[i] % 2) == 1 && (nums[i] % 10) == 1) {\n      \
    \              result += 1\n                }\n            }\n        }\n    \
    \    return result", "        var nums_copy = nums.toSeq()\n        var nums_len\
    \ = nums_copy.length\n        var nums_i = 0\n        var nums_j = nums_len -\
    \ 1\n        var nums_result = 0l\n        while(nums_i < nums_len) {\n      \
    \      var num = nums_copy.apply(nums_i)\n            if(num > 10) {\n       \
    \         if(num % 2 == 1 && num % 10 == num.toInt) {\n                    nums_result\
    \ += 1\n                }\n            }\n            nums_i += 1\n        }\n\
    \        return nums_result", "        var result = 0\n        for (i <- 0 until\
    \ nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i]\
    \ % 10 == nums[i] % 100) {\n                result += 1\n            }\n     \
    \   }\n        return result", "        var result = 0l\n        for (i <- 0 until\
    \ nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i]\
    \ % 10 == nums[i]) {\n                result += 1\n            }\n        }\n\
    \        return result", "        var nums_ = nums\n        var nums_len = nums_.length\n\
    \        var nums_len_ = nums_len\n        var nums_len_1 = nums_len - 1\n   \
    \     var nums_len_2 = nums_len - 2\n        var nums_len_3 = nums_len - 3\n \
    \       var nums_len_4 = nums_len - 4\n        var nums_len_5 = nums_len - 5\n\
    \        var nums_len_6 = nums_len - 6\n        var nums_len_7 = nums_len - 7\n\
    \        var nums_len_8 = nums_len - 8\n        var nums_len_9 = nums_len - 9\n\
    \        var nums_len_10 = nums_len - 10\n        var nums_len_11 = nums_len -\
    \ 11\n        var nums_len_12 = nums_len - 12\n        var nums_len_13 = nums_len\
    \ - 13\n        var nums_len_14 = nums_len - 14\n        var nums_len_15 = nums_len\
    \ - 15\n        var nums_len_16 = nums_len - 16\n        var nums_len_17 = nums_len\
    \ - 17\n        var nums_len_18 = nums_len - 18\n        var nums_len_19 = nums_len\
    \ - 19\n        var nums_len_20 = nums_len - 20\n        var nums_len_21 = nums_len\
    \ - 21\n        var nums_len_22 = nums_len - 22\n        var nums_len_23 = nums_len\
    \ - 23\n        var nums_len_24 = nums_len - 24\n        var nums_len_25 = nums_len\
    \ - 25\n        var nums_len_26 = nums_len - 26\n        var nums_len_27 = nums_len\
    \ - 27\n        var nums_len_28 = nums_len - 28\n        var nums_len_29 = nums_len\
    \ - 29\n        var nums_len_30 = nums_len -", "        val result = 0\n     \
    \   for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result += 1\n      \
    \      }\n        }\n        return result", "        var result = 0l\n      \
    \  for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] %\
    \ 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n         \
    \       result += 1\n            }\n        }\n        return result", "     \
    \   var result = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i]\
    \ > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        val nums_len\
    \ = nums.length\n        val result = 0l\n        for (i <- 0 until nums_len)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i])\
    \ {\n                result += 1l\n            }\n        }\n        return result",
  "        var result = 0l\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] %\
    \ 100 != nums[i]) {\n                result += 1\n            }\n        }\n \
    \       return result", "        var result = 0l\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]\
    \ % 100) {\n                result += 1\n            }\n        }\n        return\
    \ result", "        var result = 0l\n        for (i <- 0 until nums.length) {\n\
    \            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        val nums2 = nums.toSeq\n        val nums3 = nums2.map(_.toLong)\n     \
    \   val nums4 = nums3.filter(x => x > 10 && x % 2 == 1 && x % 10 == 1)\n     \
    \   val nums5 = nums4.toSeq\n        val nums6 = nums5.map(_.toLong)\n       \
    \ val nums7 = nums6.filter(x => x % 2 == 1 && x % 10 == 1)\n        val nums8\
    \ = nums7.toSeq\n        val nums9 = nums8.map(_.toLong)\n        val nums10 =\
    \ nums9.filter(x => x > 10 && x % 2 == 1 && x % 10 == 1)\n        val nums11 =\
    \ nums10.toSeq\n        val nums12 = nums11.map(_.toLong)\n        val nums13\
    \ = nums12.filter(x => x % 2 == 1 && x % 10 == 1)\n        val nums14 = nums13.toSeq\n\
    \        val nums15 = nums14.map(_.toLong)\n        val nums16 = nums15.filter(x\
    \ => x > 10 && x % 2 == 1 && x % 10 == 1)\n        val nums17 = nums16.toSeq\n\
    \        val nums18 = nums17.map(_.toLong)\n        val nums19 = nums18.filter(x\
    \ => x % 2 == 1 && x % 10 == 1)\n        val nums20 = nums19.toSeq\n        val\
    \ nums21 = nums20.map(_.toLong)\n        val nums22 = nums21.filter(x => x > 10\
    \ && x % 2 == 1 && x % 10 == 1)\n        val nums23 = nums22.toSeq\n        val\
    \ nums24 = nums23.map(_.toLong)\n        val nums25 = nums24.filter(x => x % 2\
    \ == 1 && x % 10 == 1)\n        val nums26 = nums25.toSeq\n        val nums27\
    \ = nums26.map(_.toLong)\n        val", "        val result = 0\n        for (i\
    \ <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1\
    \ && nums[i] % 10 == nums[i]) {\n                result += 1\n            }\n\
    \        }\n        return result", "        var result = 0\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i] % 100) {\n                result += 1\n            }\n\
    \        }\n        return result", "        val result = 0\n        for (i <-\
    \ 0 until nums.size) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i]\
    \ % 10 == nums[i]) {\n                result += 1\n            }\n        }\n\
    \        return result", "        var result = 0l\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0l\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n \
    \               result += 1\n            }\n        }\n        return result",
  "        var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10) {\n                if (nums[i] % 2 == 1 && nums[i] % 10 == 1)\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n        return result", "        var result = 0\n        for (i <- 0 until\
    \ nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i]\
    \ % 10 == nums[i] % 100) {\n                result += 1\n            }\n     \
    \   }\n        return result", "        var result = 0l\n        for (i <- 0 until\
    \ nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i]\
    \ % 10 == nums[i] % 100) {\n                result += 1\n            }\n     \
    \   }\n        return result", "        var result = 0L\n        for (i <- 0 until\
    \ nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i]\
    \ % 10 == nums[i]) {\n                result += 1\n            }\n        }\n\
    \        return result", "        val nums1 = nums.toSeq\n        val nums2 =\
    \ nums1.map(x => x.toLong)\n        val nums3 = nums2.filter(x => x > 10 && x\
    \ % 2 == 1 && x % 10 == 1)\n        val nums4 = nums3.map(x => x + 1)\n      \
    \  val nums5 = nums4.toSeq\n        val nums6 = nums5.map(x => x.toLong)\n   \
    \     val nums7 = nums6.filter(x => x % 2 == 1)\n        val nums8 = nums7.map(x\
    \ => x + 1)\n        val nums9 = nums8.toSeq\n        val nums10 = nums9.map(x\
    \ => x.toLong)\n        val nums11 = nums10.filter(x => x % 2 == 1)\n        val\
    \ nums12 = nums11.map(x => x + 1)\n        val nums13 = nums12.toSeq\n       \
    \ val nums14 = nums13.map(x => x.toLong)\n        val nums15 = nums14.filter(x\
    \ => x % 2 == 1)\n        val nums16 = nums15.map(x => x + 1)\n        val nums17\
    \ = nums16.toSeq\n        val nums18 = nums17.map(x => x.toLong)\n        val\
    \ nums19 = nums18.filter(x => x % 2 == 1)\n        val nums20 = nums19.map(x =>\
    \ x + 1)\n        val nums21 = nums20.toSeq\n        val nums22 = nums21.map(x\
    \ => x.toLong)\n        val nums23 = nums22.filter(x => x % 2 == 1)\n        val\
    \ nums24 = nums23.map(x => x + 1)\n        val nums25 = nums24.toSeq\n       \
    \ val nums26 = nums25.map(x => x.toLong)\n        val nums27 = nums26.filter(x\
    \ => x % 2 == 1)\n        val nums", "        var result = 0\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i] % 100) {\n                result += 1\n            }\n\
    \        }\n        return result", "        var result = 0l\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10) {\n                if (nums[i] % 2 == 1 && nums[i] % 10 == 1)\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n        return result", "        var result = 0L\n        for (i <- 0 until\
    \ nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i]\
    \ % 10 == nums[i]) {\n                result += 1\n            }\n        }\n\
    \        return result", "        val result = 0\n        for (i <- 0 until nums.length)\
    \ {\n            val num = nums[i]\n            if (num > 10 && num % 2 == 1 &&\
    \ num % 10 == num.toInt % 10) {\n                result += 1\n            }\n\
    \        }\n        return result", "        var result = 0L\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] % 2 == 1 &&\
    \ nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0l\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] && nums[i] != 1 && nums[i] !=\
    \ 3 && nums[i] != 5 && nums[i] != 7 && nums[i] != 9) {\n                result\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i] > 10\
    \ && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result +=\
    \ 1\n            }\n        }\n        return result", "        var result = 0l\n\
    \        for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i] % 10 == nums[i]) {\n                result += 1\n      \
    \      }\n        }\n        return result", "        var result = 0l\n      \
    \  for (i <- 0 until nums.length) {\n            if (nums[i] > 10 && nums[i] %\
    \ 2 == 1 && nums[i] % 10 == nums[i] && nums[i] % 100 != nums[i]) {\n         \
    \       result += 1\n            }\n        }\n        return result", "     \
    \   val nums1 = nums.map(_.toLong)\n        val nums2 = nums1.filter(x => x >\
    \ 10 && x % 2 == 1 && x % 10 == 1)\n        val nums3 = nums2.map(x => x + 10)\n\
    \        val nums4 = nums3.filter(x => x % 2 == 1 && x % 10 == 1)\n        val\
    \ nums5 = nums4.map(x => x - 10)\n        val nums6 = nums5.filter(x => x > 10\
    \ && x % 2 == 1 && x % 10 == 1)\n        val nums7 = nums6.map(x => x + 10)\n\
    \        val nums8 = nums7.filter(x => x % 2 == 1 && x % 10 == 1)\n        val\
    \ nums9 = nums8.map(x => x - 10)\n        val nums10 = nums9.filter(x => x > 10\
    \ && x % 2 == 1 && x % 10 == 1)\n        val nums11 = nums10.map(x => x + 10)\n\
    \        val nums12 = nums11.filter(x => x % 2 == 1 && x % 10 == 1)\n        val\
    \ nums13 = nums12.map(x => x - 10)\n        val nums14 = nums13.filter(x => x\
    \ > 10 && x % 2 == 1 && x % 10 == 1)\n        val nums15 = nums14.map(x => x +\
    \ 10)\n        val nums16 = nums15.filter(x => x % 2 == 1 && x % 10 == 1)\n  \
    \      val nums17 = nums16.map(x => x - 10)\n        val nums18 = nums17.filter(x\
    \ => x > 10 && x % 2 == 1 && x % 10 == 1)\n        val nums19 = nums18.map(x =>\
    \ x + 10)\n        val nums20 = nums19.filter(x => x % 2 == 1 && x % 10 == 1)\n\
    \        val nums21 = nums20.map(x => x - 10)\n        val nums22 = nums21.filter(x\
    \ => x >", "        var result = 0L\n        for (i <- 0 until nums.length) {\n\
    \            if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i])\
    \ {\n                result += 1\n            }\n        }\n        return result",
  "        var result = 0l\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i]) {\n       \
    \         result += 1\n            }\n        }\n        return result", "   \
    \     var result = 0l\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums[i] > 10l) {\n                if (nums[i] % 2 == 1 && nums[i] % 10 == 1)\
    \ {\n                    result += 1l\n                }\n            }\n    \
    \    }\n        return result"]
stop_tokens:
- "\n    }\n"
