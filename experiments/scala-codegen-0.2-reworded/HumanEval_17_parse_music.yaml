name: HumanEval_17_parse_music
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n    // Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n    // not last.\n    // Here is a\
  \ legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts\
  \ two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"\
  o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n\
  \    def parseMusic(music_string : String) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
  )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o\
  \ o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o|\
  \ o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
completions: ["        def parseNote(note_string : String) : Long {\n            if\
    \ (note_string == \".\") {\n                return 0l\n            } else if (note_string\
    \ == \"o\") {\n                return 4l\n            } else if (note_string ==\
    \ \"o|\") {\n                return 2l\n            } else {\n               \
    \ throw new RuntimeException(\"Invalid note: \" + note_string)\n            }\n\
    \        }\n        def parseMusic(music_string : String) : List[Long] {\n   \
    \         var result = List[Long]()\n            var note_count = 0\n        \
    \    var note_string = \"\"\n            for (i <- 0 until music_string.length)\
    \ {\n                if (music_string[i] == ' ') {\n                    note_count\
    \ = note_count + parseNote(note_string)\n                    note_string = \"\"\
    \n                } else {\n                    note_string = note_string + music_string[i]\n\
    \                }\n            }\n            note_count = note_count + parseNote(note_string)\n\
    \            for (i <- 0 until note_count) {\n                result = result\
    \ + i\n            }\n            return result\n        }\n        return parseMusic(music_string)",
  "        def parseNote(note_string : String) : Long = {\n            if note_string.contains(\"\
    o\") {\n                return 4L\n            } else if note_string.contains(\"\
    o|\") {\n                return 2L\n            } else if note_string.contains(\"\
    .|\") {\n                return 1L\n            } else {\n                return\
    \ 0L\n            }\n        }\n        def parseBeat(beat_string : String) :\
    \ Long = {\n            if beat_string.contains(\".\") {\n                return\
    \ 1L\n            } else if beat_string.contains(\"|\") {\n                return\
    \ 2L\n            } else {\n                return 4L\n            }\n       \
    \ }\n        def parseMusic(music_string : String) : List[Long] = {\n        \
    \    var beat_counts = mutable.List[Long]()\n            var note_counts = mutable.List[Long]()\n\
    \            var beat_index = 0\n            var note_index = 0\n            for(i\
    \ <- 0 until music_string.length) {\n                if music_string[i] == 'o'\
    \ {\n                    note_counts = note_counts.append(parseNote(music_string[note_index:i]))\n\
    \                    note_index = i + 1\n                } else if music_string[i]\
    \ == 'o|' {\n                    note_counts = note_counts.append(parseNote(music_string[note_index:i]))\n\
    \                    note_counts = note_counts.append(parseNote(music_string[i+1:i+2]))\n\
    \                    note_index = i + 2\n                } else if music_string[i]\
    \ == '.' {\n                    note_counts = note_counts.append(parseNote(music_string[note_index:i]))\n\
    \                    note_counts = note_counts.append(parseNote(music_string[i+1:i+2]))\n\
    \                    note_counts = note_counts.append(parseNote(music_string[i+2:i+3]))\n\
    \                    note_counts = note_counts.append(parseNote(music_string[i+3:i+4]))\n\
    \                    ", "        val music_list = List[String]()\n        for\
    \ (i <- 0 until music_string.length) {\n            if (music_string[i] == '.')\
    \ {\n                music_list = music_list.append(0l)\n            } else if\
    \ (music_string[i] == '|') {\n                music_list = music_list.append(1l)\n\
    \            } else if (music_string[i] == 'o') {\n                music_list\
    \ = music_list.append(4l)\n            } else if (music_string[i] == 'o|') {\n\
    \                music_list = music_list.append(2l)\n            }\n        }\n\
    \        val result = List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            if (music_list[i] == 0) {\n                result = result.append(4l.toLong)\n\
    \            } else if (music_list[i] == 1) {\n                result = result.append(2l.toLong)\n\
    \            } else if (music_list[i] == 2) {\n                result = result.append(1l.toLong)\n\
    \            }\n        }\n        return result", "        def parseNote(note_string\
    \ : String) : Long = {\n            if (note_string.contains(\"o\")) {\n     \
    \           return 4l\n            } else if (note_string.contains(\"o|\")) {\n\
    \                return 2l\n            } else if (note_string.contains(\".|\"\
    )) {\n                return 1l\n            } else {\n                return\
    \ 0l\n            }\n        }\n        def parseDuration(note_string : String)\
    \ : Long = {\n            if (note_string.contains(\"o\")) {\n               \
    \ return 4l\n            } else if (note_string.contains(\"o|\")) {\n        \
    \        return 2l\n            } else if (note_string.contains(\".|\")) {\n \
    \               return 1l\n            } else {\n                return 0l\n \
    \           }\n        }\n        def parseMusic(note_string : String) : List[Long]\
    \ = {\n            var notes = note_string.split(\" \")\n            var result\
    \ = List[Long]()\n            for (i <- 0 until notes.length) {\n            \
    \    result = result.append(parseNote(notes[i]))\n                result = result.append(parseDuration(notes[i]))\n\
    \            }\n            return result\n        }\n        return parseMusic(music_string)",
  "        val music_list = scala.collection.JavaConversions.asScalaBuffer(music_string.split(\"\
    \ \")).toList\n        val result = mutable.List[Long]()\n        for (i <- 0\
    \ until music_list.length) {\n            val note = music_list(i)\n         \
    \   if (note.contains(\"o\")) {\n                result.append(4l)\n         \
    \   } else if (note.contains(\"o|\")) {\n                result.append(2l)\n \
    \           } else if (note.contains(\".|\")) {\n                result.append(1l)\n\
    \            } else {\n                result.append(0l)\n            }\n    \
    \    }\n        return result", "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.equals(\".\"))\
    \ {\n                beats.append(1l)\n            } else if (note.equals(\"o\"\
    )) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            }\n        }\n       \
    \ return beats", "        val notes = music_string.split(\" \")\n        val beats\
    \ = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\"))\n        val result\
    \ = beats.map(_.toLong).toList\n        return result", "        val notes = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = notes.map(note -> {\n            val note_parts =\
    \ note.split(\"|\")\n            val note_length = note_parts[0].length()\n  \
    \          val note_type = note_parts[0].charAt(note_length - 1)\n           \
    \ return note_length - 1\n        }).toList\n        val beats_count = beats.map(beat_count\
    \ -> beat_count + 1).toList\n        return beats_count", "        var music_list\
    \ = mutable.List[Long]()\n        var current_note = mutable.StringBuilder()\n\
    \        var current_duration = mutable.StringBuilder()\n        var current_duration_count\
    \ = mutable.Long()\n        var current_duration_count_temp = mutable.Long()\n\
    \        var current_duration_count_temp_temp = mutable.Long()\n        var current_duration_count_temp_temp_temp\
    \ = mutable.Long()\n        var current_duration_count_temp_temp_temp_temp = mutable.Long()\n\
    \        var current_duration_count_temp_temp_temp_temp_temp = mutable.Long()\n\
    \        var current_duration_count_temp_temp_temp_temp_temp_temp = mutable.Long()\n\
    \        var current_duration_count_temp_temp_temp_temp_temp_temp_temp = mutable.Long()\n\
    \        var current_duration_count_temp_temp_temp_temp_temp_temp_temp_temp =\
    \ mutable.Long()\n        var current_duration_count_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = mutable.Long()\n        var current_duration_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = mutable.Long()\n        var current_duration_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = mutable.Long()\n        var current_duration_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = mutable.Long()\n        var current_duration_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = mutable.Long()\n        var current_duration_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = mutable.Long()\n        var current_duration_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = mutable.Long()\n        var current_duration_count", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string.contains(\"o\") {\n       \
    \         return 4l\n            } else if note_string.contains(\"o|\") {\n  \
    \              return 2l\n            } else if note_string.contains(\".|\") {\n\
    \                return 1l\n            } else {\n                return 0l\n\
    \            }\n        }\n        def parseBeat(note_string : String) : Long\
    \ = {\n            if note_string.contains(\"o\") {\n                return 4l\n\
    \            } else if note_string.contains(\"o|\") {\n                return\
    \ 2l\n            } else if note_string.contains(\".|\") {\n                return\
    \ 1l\n            } else {\n                return 0l\n            }\n       \
    \ }\n        def parseMusic(music_string : String) : List[Long] = {\n        \
    \    var beat_counts = mutable.List[Long]()\n            var note_counts = mutable.List[Long]()\n\
    \            var beat_index = 0\n            var note_index = 0\n            for(i\
    \ <- 0 until music_string.length) {\n                if music_string[i] == '.'\
    \ {\n                    beat_counts.append(parseBeat(music_string[beat_index:i]))\n\
    \                    beat_index = i + 1\n                } else if music_string[i]\
    \ == '|' {\n                    note_counts.append(parseNote(music_string[note_index:i]))\n\
    \                    note_index = i + 1\n                }\n            }\n  \
    \          beat_counts.append(parseBeat(music_string[beat_index:]))\n        \
    \    note_counts.append(parseNote(music_string[note_index:]))\n            return\
    \ beat_counts.toSeq().toList()\n        }\n        return parseMusic(music_string)",
  "        def parseNote(note_string : String) : Long = {\n            if note_string.charAt(0)\
    \ == 'o' {\n                return 4l\n            } else if note_string.charAt(0)\
    \ == 'o|' {\n                return 2l\n            } else if note_string.charAt(0)\
    \ == '.' {\n                return 1l\n            } else {\n                return\
    \ 0l\n            }\n        }\n        def parseBeat(beat_string : String) :\
    \ Long = {\n            if beat_string.charAt(0) == 'o' {\n                return\
    \ 4l\n            } else if beat_string.charAt(0) == 'o|' {\n                return\
    \ 2l\n            } else if beat_string.charAt(0) == '.' {\n                return\
    \ 1l\n            } else {\n                return 0l\n            }\n       \
    \ }\n        def parseMusic(music_string : String) : List[Long] = {\n        \
    \    var beat_counts = mutable.List[Long]()\n            var note_counts = mutable.List[Long]()\n\
    \            var beat_index = 0\n            var note_index = 0\n            for(i\
    \ <- 0 until music_string.length) {\n                if music_string.charAt(i)\
    \ == ' ' {\n                    beat_index += 1\n                    note_index\
    \ += 1\n                } else {\n                    beat_counts += beat_index\
    \ * parseBeat(music_string.substring(beat_index, i))\n                    note_counts\
    \ += note_index * parseNote(music_string.substring(note_index, i))\n         \
    \           beat_index = i\n                    note_index = i\n             \
    \   }\n            }\n            beat_counts += beat_index * parseBeat(music_string.substring(beat_index,\
    \ music_string.length))\n            note_counts += note_index * parseNote(music_string.substring(note_index,\
    \ music_string.length))\n            return beat_counts + note_counts\n      \
    \  }\n        return parseMusic(music_string)", "        def parseNote(note_string\
    \ : String) : Long = {\n            if (note_string.contains(\"o\")) {\n     \
    \           return 4l\n            } else if (note_string.contains(\"o|\")) {\n\
    \                return 2l\n            } else if (note_string.contains(\".|\"\
    )) {\n                return 1l\n            } else {\n                return\
    \ 0l\n            }\n        }\n        def parseMusic(music_string : String)\
    \ : List[Long] = {\n            var result = List[Long]()\n            var note_count\
    \ = 0\n            var note_index = 0\n            var note_string = \"\"\n  \
    \          for (i <- 0 until music_string.length) {\n                if (music_string[i]\
    \ == '.') {\n                    note_count += parseNote(note_string)\n      \
    \              note_string = \"\"\n                } else {\n                \
    \    note_string += music_string[i]\n                }\n                if (music_string[i]\
    \ == '|') {\n                    note_count += parseNote(note_string)\n      \
    \              note_string = \"\"\n                }\n                if (music_string[i]\
    \ == 'o') {\n                    note_count += parseNote(note_string)\n      \
    \              note_string = \"\"\n                }\n                if (music_string[i]\
    \ == 'o') {\n                    note_count += parseNote(note_string)\n      \
    \              note_string = \"\"\n                }\n                if (music_string[i]\
    \ == 'o') {\n                    note_count += parseNote(note_string)\n      \
    \              note_string = \"\"\n                }\n                if (music_string[i]\
    \ == 'o') {\n                    note_count += parseNote(note_string)\n      \
    \              note_string = \"\"\n                }\n                if (music_string[i]\
    \ == 'o') {\n                    note_count += parseNote(note_string)\n      \
    \              note_string = \"\"\n                }\n                if (music_string[i]\
    \ == 'o') {\n                    note_count += parseNote(note_string)\n      \
    \              note_string = \"\"\n                }\n                if (music_string[i]\
    \ == 'o') {\n                    note_count += parseNote(note_string)\n", "  \
    \      val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val result = mutable.List[Long]()\n        for (i <- 0 until music_list.length\
    \ - 1) {\n            val note = music_list.get(i)\n            if (note.equals(\"\
    .\")) {\n                result.append(1l)\n            } else if (note.equals(\"\
    o\")) {\n                result.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                result.append(2l)\n            } else {\n          \
    \      result.append(0l)\n            }\n        }\n        return result", " \
    \       def parseNote(note_string : String) : Long = {\n            if note_string.endsWith(\"\
    |\") {\n                return note_string.substring(0, note_string.length() -\
    \ 1).toLong\n            } else {\n                return note_string.toLong\n\
    \            }\n        }\n        def parseBeat(beat_string : String) : Long\
    \ = {\n            if beat_string.endsWith(\"|\") {\n                return beat_string.substring(0,\
    \ beat_string.length() - 1).toLong\n            } else {\n                return\
    \ beat_string.toLong\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var beat_counts = mutable.List[Long]()\n\
    \            var note_counts = mutable.List[Long]()\n            var beat_index\
    \ = 0\n            var note_index = 0\n            var beat_count = 0\n      \
    \      var note_count = 0\n            var note_count_in_beat = 0\n          \
    \  var beat_count_in_note = 0\n            for (i <- 0 until music_string.length)\
    \ {\n                if (music_string[i] == '.') {\n                    note_count_in_beat\
    \ = note_count_in_beat + 1\n                    note_count = note_count + 1\n\
    \                    note_counts = note_counts + note_count_in_beat\n        \
    \            beat_count = beat_count + beat_count_in_note\n                  \
    \  beat_counts = beat_counts + beat_count_in_beat\n                    note_index\
    \ = note_index + 1\n                    beat_index = beat_index + 1\n        \
    \            note_count_in_beat = 0\n                    note_count = 0\n    \
    \                beat_count = 0\n                } else if (music_string[i] ==\
    \ 'o') {\n                    note_count_in_beat = note_count_in_beat + 1\n  \
    \                  note_count = note_count + 1\n                    note_counts\
    \ = note_counts + note_count_in_beat\n                    beat_count = beat_count\
    \ + beat_count_in_note\n                    beat_counts = beat_counts + beat_count_in",
  "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            if (music_list(i).equals(\".\")) {\n                beats.append(0l)\n\
    \            } else if (music_list(i).equals(\"o\")) {\n                beats.append(4l)\n\
    \            } else if (music_list(i).equals(\"o|\")) {\n                beats.append(2l)\n\
    \            } else {\n                beats.append(1l)\n            }\n     \
    \   }\n        return beats", "        val notes = music_string.split(\" \")\n\
    \        val beats = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\")).map(_.toLong).toList\n\
    \        val result = beats.map(b -> b.toLong)\n        return result", "    \
    \    var result = mutable.List[Long]()\n        var current_note = \"\"\n    \
    \    var current_duration = 0\n        var current_beat = 0\n        var current_note_count\
    \ = 0\n        for (i <- 0 until music_string.length) {\n            if (music_string[i]\
    \ == '.') {\n                current_note = current_note + music_string[i]\n \
    \               current_note_count += 1\n                if (current_note_count\
    \ == 1) {\n                    current_duration = 4\n                } else if\
    \ (current_note_count == 2) {\n                    current_duration = 2\n    \
    \            } else if (current_note_count == 3) {\n                    current_duration\
    \ = 1\n                }\n                current_note_count = 0\n           \
    \ } else if (music_string[i] == '|') {\n                current_note = current_note\
    \ + music_string[i]\n                current_note_count += 1\n               \
    \ if (current_note_count == 1) {\n                    current_duration = 2\n \
    \               } else if (current_note_count == 2) {\n                    current_duration\
    \ = 1\n                }\n                current_note_count = 0\n           \
    \ } else if (music_string[i] == 'o') {\n                current_note = current_note\
    \ + music_string[i]\n                current_note_count += 1\n               \
    \ if (current_note_count == 1) {\n                    current_duration = 4\n \
    \               } else if (current_note_count == 2) {\n                    current_duration\
    \ = 2\n                } else if (current_note_count == 3) {\n               \
    \     current_duration = 1\n                }\n                current_note_count\
    \ = 0\n            } else if (music_string[i] == 'o') {\n                current_note\
    \ = current_note + music_string[i]\n                current_note_count += 1\n\
    \                if (current_note_count == 1) {\n                    current_duration\
    \ = 4\n                } else if (current_note_count == 2) {\n               \
    \     current_duration = 2\n                } else if (current_note_count == 3)\
    \ {\n                    current_duration = 1\n                }\n           \
    \     current_note_count = 0\n            }", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string.contains(\".\") {\n       \
    \         return note_string.replace(\".\", \"\").replace(\"|\", \"\").replace(\"\
    o\", \"\").toLong\n            } else {\n                return note_string.replace(\"\
    o\", \"\").replace(\"|\", \"\").toLong\n            }\n        }\n        def\
    \ parseBeat(beat_string : String) : Long = {\n            if beat_string.contains(\"\
    .\") {\n                return beat_string.replace(\".\", \"\").replace(\"|\"\
    , \"\").toLong\n            } else {\n                return beat_string.toLong\n\
    \            }\n        }\n        def parseMusic(music_string : String) : List[Long]\
    \ = {\n            var beat_counts = mutable.List[Long]()\n            var beat_count\
    \ = 0\n            for (i <- 0 until music_string.length) {\n                if\
    \ (music_string[i] == \".\") {\n                    beat_count += 1\n        \
    \        } else if (music_string[i] == \"|\") {\n                    beat_count\
    \ += 1\n                } else if (music_string[i] == \"o\") {\n             \
    \       beat_count += 4\n                } else {\n                    beat_count\
    \ += 1\n                }\n                if (beat_count > beat_counts.length)\
    \ {\n                    beat_counts.append(beat_count)\n                } else\
    \ {\n                    beat_counts[beat_count] += 1\n                }\n   \
    \             beat_count = 0\n            }\n            return beat_counts\n\
    \        }\n        return parseMusic(music_string)", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string.length() == 1 {\n         \
    \       return _.toLong(note_string)\n            } else {\n                return\
    \ _.toLong(note_string.substring(0, note_string.length() - 1))\n            }\n\
    \        }\n        def parseBeat(beat_string : String) : Long = {\n         \
    \   if beat_string.length() == 1 {\n                return _.toLong(beat_string)\n\
    \            } else {\n                return _.toLong(beat_string.substring(0,\
    \ beat_string.length() - 1))\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var beat_counts = List[Long]()\n   \
    \         var beat_count = 0\n            var note_count = 0\n            var\
    \ note_counts = List[Long]()\n            var note_counts_count = 0\n        \
    \    var note_counts_counts = List[Long]()\n            var note_counts_counts_count\
    \ = 0\n            var note_counts_counts_counts = List[Long]()\n            var\
    \ note_counts_counts_counts_count = 0\n            var note_counts_counts_counts_counts\
    \ = List[Long]()\n            var note_counts_counts_counts_counts_count = 0\n\
    \            var note_counts_counts_counts_counts_counts = List[Long]()\n    \
    \        var note_counts_counts_counts_counts_counts_count = 0\n            var\
    \ note_counts_counts_counts_counts_counts_counts = List[Long]()\n            var\
    \ note_counts_counts_counts_counts_counts_counts_count = 0\n            var note_counts_counts_counts_counts_counts_counts_counts\
    \ = List[Long]()\n            for (i <- 0 until music_string.length) {\n     \
    \           if (music_string[i] == '.') {\n                    note_counts_counts_counts_counts_",
  "        def parseNote(note_string : String) : Long = {\n            if (note_string\
    \ == \".\") {\n                return 0l\n            } else if (note_string ==\
    \ \"o\") {\n                return 4l\n            } else if (note_string == \"\
    o|\") {\n                return 2l\n            } else {\n                return\
    \ 1l\n            }\n        }\n        def parseMusic(note_string : String) :\
    \ List[Long] = {\n            var result = List[Long]()\n            var note\
    \ = parseNote(note_string)\n            for (i <- 0 until note) {\n          \
    \      result = result.append(note)\n            }\n            return result\n\
    \        }\n        return parseMusic(music_string)", "        val notes = music_string.split(\"\
    \ \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\"\
    )).map(_.toLong).toList\n        val result = beats.map(_.toLong).toList\n   \
    \     return result", "        var result = mutable.List[Long]()\n        var\
    \ current_note = mutable.List[String]()\n        var current_duration = mutable.List[Long]()\n\
    \        var current_duration_index = mutable.List[Long]()\n        var current_duration_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index = mutable.List[Long]()\n\
    \        var current_duration_index_index_index_index = mutable.List[Long]()\n\
    \        var current_duration_index_index_index_index_index = mutable.List[Long]()\n\
    \        var current_duration_index_index_index_index_index_index = mutable.List[Long]()\n\
    \        var current_duration_index_index_index_index_index_index_index = mutable.List[Long]()\n\
    \        var current_duration_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_", "        var result = mutable.List[Long]()\n\
    \        var current_note = mutable.List[String]()\n        var current_duration\
    \ = mutable.List[Long]()\n        var current_duration_index = mutable.List[Long]()\n\
    \        var current_duration_index_index = mutable.List[Long]()\n        var\
    \ current_duration_index_index_index = mutable.List[Long]()\n        var current_duration_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string.equals(\".\") {\n         \
    \       return 0l\n            } else if note_string.equals(\"o\") {\n       \
    \         return 4l\n            } else if note_string.equals(\"o|\") {\n    \
    \            return 2l\n            } else {\n                return 1l\n    \
    \        }\n        }\n        def parseMusic(music_string : String) : List[Long]\
    \ = {\n            var result = List[Long]()\n            var note_count = 0\n\
    \            var note_index = 0\n            for (i <- 0 until music_string.length)\
    \ {\n                if (music_string[i] == '.') {\n                    note_count\
    \ = note_count + parseNote(music_string[note_index:i])\n                    note_index\
    \ = i + 1\n                }\n            }\n            note_count = note_count\
    \ + parseNote(music_string[note_index:])\n            for (i <- 0 until note_count)\
    \ {\n                result = result + i\n            }\n            return result\n\
    \        }", "        var result = mutable.List[Long]()\n        var note_count\
    \ = mutable.List[String]()\n        var note_duration = mutable.List[Long]()\n\
    \        var note_duration_count = mutable.List[Long]()\n        var note_duration_count_sum\
    \ = mutable.List[Long]()\n        var note_duration_count_sum_sum = mutable.List[Long]()\n\
    \        var note_duration_count_sum_sum_sum = mutable.List[Long]()\n        var\
    \ note_duration_count_sum_sum_sum_sum = mutable.List[Long]()\n        var note_duration_count_sum_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_duration_count_sum_sum_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_duration_count_sum_sum_sum_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_duration_count_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_duration_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_duration_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_duration_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_duration_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_duration_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_duration_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_", "        val music_list = scala.collection.JavaConversions.asScalaBuffer(music_string.split(\"\
    \ \")).toList\n        val result = mutable.List[Long]()\n        for (i <- 0\
    \ until music_list.length) {\n            val note = music_list(i)\n         \
    \   if (note.contains(\"o\")) {\n                result.append(4l)\n         \
    \   } else if (note.contains(\"o|\")) {\n                result.append(2l)\n \
    \           } else if (note.contains(\".|\")) {\n                result.append(1l)\n\
    \            } else {\n                result.append(0l)\n            }\n    \
    \    }\n        return result", "        val music_list = scala.collection.JavaConversions.asScalaBuffer(music_string.split(\"\
    \ \")).toList\n        val beats = mutable.List[Long]()\n        for (i <- 0 until\
    \ music_list.size) {\n            val note = music_list.get(i).replaceAll(\"[^o|.|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|",
  "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val result = new ArrayList[Long]()\n        for (i <- 0 until\
    \ music_list.size()) {\n            val note = music_list.get(i)\n           \
    \ if (note.equals(\".\")) {\n                result.add(0l)\n            } else\
    \ if (note.equals(\"o\")) {\n                result.add(4l)\n            } else\
    \ if (note.equals(\"o|\")) {\n                result.add(2l)\n            } else\
    \ {\n                result.add(1l)\n            }\n        }\n        return\
    \ result", "        var result = mutable.List[Long]()\n        var current_note\
    \ = \"\"\n        var current_duration = 0\n        var current_beat = 0\n   \
    \     var current_beat_duration = 0\n        var current_beat_duration_count =\
    \ 0\n        var current_beat_duration_count_max = 0\n        var current_beat_duration_count_min\
    \ = 0\n        var current_beat_duration_count_sum = 0\n        var current_beat_duration_count_sum_max\
    \ = 0\n        var current_beat_duration_count_sum_min = 0\n        var current_beat_duration_count_sum_sum\
    \ = 0\n        var current_beat_duration_count_sum_sum_max = 0\n        var current_beat_duration_count_sum_sum_min\
    \ = 0\n        var current_beat_duration_count_sum_sum_sum = 0\n        var current_beat_duration_count_sum_sum_sum_max\
    \ = 0\n        var current_beat_duration_count_sum_sum_sum_min = 0\n        var\
    \ current_beat_duration_count_sum_sum_sum_sum = 0\n        var current_beat_duration_count_sum_sum_sum_sum_max\
    \ = 0\n        var current_beat_duration_count_sum_sum_sum_sum_min = 0\n     \
    \   var current_beat_duration_count_sum_sum_sum_sum_sum = 0\n        var current_beat_duration_count_sum_sum_sum_sum_sum_max\
    \ = 0\n        var current_beat_duration_count_sum_sum_sum_sum_sum_min = 0\n \
    \       var current_beat_duration_count_sum_sum_sum_sum_sum_sum = 0\n        var\
    \ current_beat_duration_count_sum_sum_sum_sum_sum_sum_max = 0\n        var current_beat_duration_count_sum_sum_sum_sum_sum_sum_min\
    \ = 0\n        var current_beat_duration_count_sum_sum_sum_sum_sum_sum_sum = 0\n\
    \        var current_beat_duration_count_sum_sum_sum_sum_sum_sum_sum_max = 0\n\
    \        var current_beat", "        def parseNote(note_string : String) : Long\
    \ = {\n            if note_string.contains(\"o\") {\n                return 4L\n\
    \            } else if note_string.contains(\"o|\") {\n                return\
    \ 2L\n            } else if note_string.contains(\".|\") {\n                return\
    \ 1L\n            } else {\n                return 0L\n            }\n       \
    \ }\n        def parseBeat(note_string : String) : Long = {\n            if note_string.contains(\"\
    .\") {\n                return 1L\n            } else {\n                return\
    \ 0L\n            }\n        }\n        def parse(note_string : String) : Long\
    \ = {\n            return note_string.length() * parseNote(note_string) + parseBeat(note_string)\n\
    \        }\n        def parseMusic(note_string : String) : List[Long] = {\n  \
    \          var beat_counts = mutable.List[Long]()\n            for (i <- 0 until\
    \ note_string.length) {\n                beat_counts = beat_counts.append(parse(note_string.substring(i,\
    \ i + 1)))\n            }\n            return beat_counts\n        }\n       \
    \ return parseMusic(music_string)", "        def parseNote(note_string : String)\
    \ : Long = {\n            if note_string.charAt(0) == 'o' {\n                return\
    \ 4L\n            } else if note_string.charAt(0) == 'o|' {\n                return\
    \ 2L\n            } else if note_string.charAt(0) == '.' {\n                return\
    \ 1L\n            } else {\n                return 0L\n            }\n       \
    \ }\n        def parseMusic(music_string : String) : List[Long] = {\n        \
    \    var beat_counts = mutable.List[Long]()\n            var current_beat = 0L\n\
    \            var current_note = 0L\n            for i in range(0, len(music_string))\
    \ {\n                if music_string.charAt(i) == 'o' {\n                    current_note\
    \ = parseNote(music_string.substring(i, i + 2))\n                    current_beat\
    \ += current_note\n                } else if music_string.charAt(i) == 'o|' {\n\
    \                    current_note = parseNote(music_string.substring(i, i + 2))\n\
    \                    current_beat += current_note\n                } else if music_string.charAt(i)\
    \ == '.' {\n                    current_note = parseNote(music_string.substring(i,\
    \ i + 1))\n                    current_beat += current_note\n                }\n\
    \                beat_counts.append(current_beat)\n                current_beat\
    \ = 0L\n                current_note = 0L\n            }\n            return beat_counts\n\
    \        }\n        return parseMusic(music_string)", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string.equals(\".\") {\n         \
    \       return 0l\n            } else if note_string.equals(\"o\") {\n       \
    \         return 4l\n            } else if note_string.equals(\"o|\") {\n    \
    \            return 2l\n            } else {\n                return 1l\n    \
    \        }\n        }\n        def parseMusic(music_string : String) : List[Long]\
    \ = {\n            var result = List[Long]()\n            var note_count = 0\n\
    \            var note_index = 0\n            var note_string = \"\"\n        \
    \    for(i <- 0 until music_string.length) {\n                if(music_string[i]\
    \ == ' ') {\n                    note_count += parseNote(note_string)\n      \
    \              note_string = \"\"\n                    note_index = 0\n      \
    \          } else {\n                    note_string += music_string[i]\n    \
    \                note_index += 1\n                }\n            }\n         \
    \   note_count += parseNote(note_string)\n            for(i <- 0 until note_count)\
    \ {\n                result = append(result, note_count - i)\n            }\n\
    \            return result\n        }\n        return parseMusic(music_string)",
  "        var notes = List[String]()\n        var beats = List[Long]()\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var\
    \ m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var\
    \ q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var\
    \ u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var\
    \ y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var\
    \ c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var\
    \ g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var\
    \ o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var\
    \ s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var\
    \ w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var\
    \ a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var\
    \ e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var\
    \ m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var\
    \ q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var\
    \ u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var\
    \ y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var\
    \ c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var\
    \ g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var l = 0\n", "        val notes = music_string.split(\" \")\n\
    \        val beats = notes.map(note -> {\n            val note_parts = note.split(\"\
    |\")\n            val note_length = note_parts[0].length()\n            val note_beats\
    \ = note_parts.length - 1\n            return note_length * note_beats\n     \
    \   }).toList\n        return beats", "        val music_list = music_string.split(\"\
    \ \")\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            if (music_list[i].equals(\".\")) {\n                beats.append(0l)\n\
    \            } else if (music_list[i].equals(\"o\")) {\n                beats.append(4l)\n\
    \            } else if (music_list[i].equals(\"o|\")) {\n                beats.append(2l)\n\
    \            } else {\n                beats.append(1l)\n            }\n     \
    \   }\n        return beats", "        def parseNote(note_string : String) : Long\
    \ = {\n            if note_string.contains(\"o\") {\n                return 4l\n\
    \            } else if note_string.contains(\"o|\") {\n                return\
    \ 2l\n            } else if note_string.contains(\".|\") {\n                return\
    \ 1l\n            } else {\n                return 0l\n            }\n       \
    \ }\n        def parseMusic(music_string : String) : List[Long] = {\n        \
    \    var result = mutable.List[Long]()\n            var note_count = 0\n     \
    \       var note_index = 0\n            for (i <- 0 until music_string.length)\
    \ {\n                if (music_string[i] == '.') {\n                    note_count\
    \ += 1\n                    note_index = i\n                } else if (music_string[i]\
    \ == '|') {\n                    note_count += 1\n                    note_index\
    \ = i\n                } else if (music_string[i] == 'o') {\n                \
    \    note_count += 1\n                    note_index = i\n                } else\
    \ if (music_string[i] == 'o|') {\n                    note_count += 1\n      \
    \              note_index = i\n                } else if (music_string[i] == '.'|')\
    \ {\n                    note_count += 1\n                    note_index = i\n\
    \                } else if (music_string[i] == 'o.') {\n                    note_count\
    \ += 1\n                    note_index = i\n                } else if (music_string[i]\
    \ == 'o|.') {\n                    note_count += 1\n                    note_index\
    \ = i\n                } else if (music_string[i] == 'o|o') {\n              \
    \      note_count += 1\n                    note_index = i\n                }\
    \ else if (music_string[i] == 'o|o|') {\n                    note_count += 1\n\
    \                    note_index = i\n                } else if (music_string[i]\
    \ == 'o|o|.') {\n                    note_count += 1\n                    note_index\
    \ = i\n                } else if (music_string[i] == 'o|o|o') {\n            \
    \        note_count += 1\n                    note_index = i\n", "        def\
    \ parseNote(note_string : String) : Long = {\n            if note_string == \"\
    o\" {\n                return 4l\n            } else if note_string == \"o|\"\
    \ {\n                return 2l\n            } else if note_string == \".|\" {\n\
    \                return 1l\n            } else {\n                throw new RuntimeException(\"\
    Invalid note string: \" + note_string)\n            }\n        }\n        def\
    \ parseDuration(note_string : String) : Long = {\n            if note_string ==\
    \ \"o\" {\n                return 4l\n            } else if note_string == \"\
    o|\" {\n                return 2l\n            } else if note_string == \".|\"\
    \ {\n                return 1l\n            } else {\n                throw new\
    \ RuntimeException(\"Invalid note string: \" + note_string)\n            }\n \
    \       }\n        def parseBeat(note_string : String) : Long = {\n          \
    \  if note_string == \"o\" {\n                return 4l\n            } else if\
    \ note_string == \"o|\" {\n                return 2l\n            } else if note_string\
    \ == \".|\" {\n                return 1l\n            } else {\n             \
    \   throw new RuntimeException(\"Invalid note string: \" + note_string)\n    \
    \        }\n        }\n        def parseMusic(note_string : String) : List[Long]\
    \ = {\n            def parseNote(note_string : String) : Long = {\n          \
    \      if note_string == \"o\" {\n                    return 4l\n            \
    \    } else if note_string == \"o|\" {\n                    return 2l\n      \
    \          } else if note_string == \".|\" {\n                    return 1l\n\
    \                } else {\n                    throw new RuntimeException(\"Invalid\
    \ note string: \" + note_string)\n                }\n            }\n         \
    \   def parseDuration(note_string : String) : Long = {\n                if note_string\
    \ == \"o\" {\n                    return 4l\n                } else if note_string\
    \ == \"o|\" {\n                    return 2l\n                } else if note_string\
    \ == \".|\" {\n                    return 1l\n                } else {\n     \
    \               throw new RuntimeException(\"Invalid note string: \" + note_string)\n\
    \                }\n            }\n            def parseBeat(note_string", " \
    \       val notes = music_string.split(\" \")\n        val beats = notes.map(note\
    \ => {\n            val note_parts = note.split(\"|\")\n            val note_length\
    \ = note_parts.length\n            val note_beats = note_length - 1\n        \
    \    return note_beats\n        })\n        val beats_list = beats.toList\n  \
    \      return beats_list", "        def parseNote(note_string : String) : Long\
    \ = {\n            if note_string.endsWith(\"|\") {\n                return note_string.substring(0,\
    \ note_string.length() - 1).toLong\n            } else {\n                return\
    \ note_string.toLong\n            }\n        }\n        def parseBeat(beat_string\
    \ : String) : Long = {\n            if beat_string.endsWith(\"|\") {\n       \
    \         return beat_string.substring(0, beat_string.length() - 1).toLong\n \
    \           } else {\n                return beat_string.toLong\n            }\n\
    \        }\n        def parseMusic(music_string : String) : List[Long] = {\n \
    \           var beat_counts = mutable.List[Long]()\n            var beat_count\
    \ = 0\n            var note_count = 0\n            var note_count_prev = 0\n \
    \           for (i <- 0 until music_string.length) {\n                if (music_string[i]\
    \ == '.') {\n                    beat_count += parseBeat(music_string[i + 1])\n\
    \                    note_count_prev = note_count\n                    note_count\
    \ = 0\n                } else if (music_string[i] == 'o') {\n                \
    \    beat_count += parseBeat(music_string[i + 1])\n                    note_count\
    \ += parseNote(music_string[i + 1])\n                }\n                beat_counts\
    \ += beat_count\n                beat_count = 0\n            }\n            beat_counts\
    \ += beat_count\n            beat_counts += note_count_prev\n            return\
    \ beat_counts\n        }\n        return parseMusic(music_string)", "        val\
    \ music_list = scala.collection.JavaConversions.asScalaBuffer(Arrays.asList(music_string.split(\"\
    \ \")))\n        val result = mutable.ListBuffer[Long]()\n        for (i <- 0\
    \ until music_list.length) {\n            val note = music_list.get(i).toLowerCase()\n\
    \            if (note.equals(\".\")) {\n                result.append(1l)\n  \
    \          } else if (note.equals(\"o\")) {\n                result.append(4l)\n\
    \            } else if (note.equals(\"o|\")) {\n                result.append(2l)\n\
    \            } else {\n                throw new IllegalArgumentException(\"Invalid\
    \ note: \" + note)\n            }\n        }\n        return result.toList()",
  "        val notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\")).map(_.toLong).toList\n        val result = beats.map(b => b.toLong)\n\
    \        return result", "        val music_list = scala.collection.JavaConversions.asScalaBuffer(music_string.split(\"\
    \ \")).toList\n        val beats = scala.collection.mutable.ArrayBuffer.empty()\n\
    \        for (i <- 0 until music_list.length) {\n            val note = music_list(i)\n\
    \            if (note.equals(\".\")) {\n                beats.append(0l)\n   \
    \         } else if (note.equals(\"o\")) {\n                beats.append(4l)\n\
    \            } else if (note.equals(\"o|\")) {\n                beats.append(2l)\n\
    \            } else {\n                throw new IllegalArgumentException(\"Invalid\
    \ note: \" + note)\n            }\n        }\n        return scala.collection.JavaConversions.asJavaList(beats.toList)",
  "        def parseNote(note_string : String) : Long = {\n            if note_string\
    \ == \"o\" {\n                return 4L\n            } else if note_string ==\
    \ \"o|\" {\n                return 2L\n            } else if note_string == \"\
    .|\" {\n                return 1L\n            } else {\n                throw\
    \ new IllegalArgumentException(\"Invalid note string: \" + note_string)\n    \
    \        }\n        }\n        def parseDuration(note_string : String) : Long\
    \ = {\n            if note_string == \"o\" {\n                return 4L\n    \
    \        } else if note_string == \"o|\" {\n                return 2L\n      \
    \      } else if note_string == \".|\" {\n                return 1L\n        \
    \    } else {\n                throw new IllegalArgumentException(\"Invalid note\
    \ string: \" + note_string)\n            }\n        }\n        def parseBeat(note_string\
    \ : String) : Long = {\n            if note_string == \"o\" {\n              \
    \  return 4L\n            } else if note_string == \"o|\" {\n                return\
    \ 2L\n            } else if note_string == \".|\" {\n                return 1L\n\
    \            } else {\n                throw new IllegalArgumentException(\"Invalid\
    \ note string: \" + note_string)\n            }\n        }\n        def parseMusic(note_string\
    \ : String) : List[Long] = {\n            if note_string == \"o\" {\n        \
    \        return List(4L)\n            } else if note_string == \"o|\" {\n    \
    \            return List(2L)\n            } else if note_string == \".|\" {\n\
    \                return List(1L)\n            } else {\n                throw\
    \ new IllegalArgumentException(\"Invalid note string: \" + note_string)\n    \
    \        }\n        }\n        def parseMusic(note_string : String) : List[Long]\
    \ = {\n            if note_string == \"o\" {\n                return List(4L)\n\
    \            } else if note_string == \"o|\" {\n                return List(2L)\n\
    \            } else if note_string == \".|\" {\n                return List(1L)\n\
    \            } else {\n                throw new IllegalArgumentException(\"Invalid\
    \ note string: \" + note_string)", "        def parseNote(note_string : String)\
    \ : Long = {\n            if note_string.endsWith(\"|\") {\n                return\
    \ note_string.substring(0, note_string.length() - 1).toLong\n            } else\
    \ {\n                return note_string.toLong\n            }\n        }\n   \
    \     def parseDuration(note_string : String) : Long = {\n            if note_string.endsWith(\"\
    |\") {\n                return note_string.substring(0, note_string.length() -\
    \ 1).toLong\n            } else {\n                return note_string.toLong\n\
    \            }\n        }\n        def parseBeat(note_string : String) : Long\
    \ = {\n            if note_string.endsWith(\"|\") {\n                return note_string.substring(0,\
    \ note_string.length() - 1).toLong\n            } else {\n                return\
    \ note_string.toLong\n            }\n        }\n        def parseMusic(note_string\
    \ : String) : List[Long] = {\n            var beat_count = 0\n            var\
    \ note_count = 0\n            var note_duration = 0\n            var note_beat\
    \ = 0\n            var note_note = 0\n            var note_index = 0\n       \
    \     var note_list = []\n            for (i <- 0 until note_string.length) {\n\
    \                if note_string[i] == '.' {\n                    note_duration\
    \ = parseDuration(note_string[note_index:i])\n                    note_index =\
    \ i + 1\n                } else if note_string[i] == 'o' {\n                 \
    \   note_note = parseNote(note_string[note_index:i])\n                    note_index\
    \ = i + 1\n                    note_beat = parseBeat(note_string[note_index:i])\n\
    \                    note_index = i + 1\n                    note_count += 1\n\
    \                    note_list.append(note_note * note_duration * note_beat)\n\
    \                }\n            }\n            note_count += 1\n            note_list.append(note_note\
    \ * note_duration * note_beat)\n            return note_list\n        }\n    \
    \    return parseMusic(music_string)", "        def parseNote(note_string : String)\
    \ : Long = {\n            if (note_string.charAt(0) == 'o') {\n              \
    \  return 4l\n            } else if (note_string.charAt(0) == 'o|') {\n      \
    \          return 2l\n            } else if (note_string.charAt(0) == '.') {\n\
    \                return 1l\n            } else {\n                return 0l\n\
    \            }\n        }\n        def parseBeat(beat_string : String) : Long\
    \ = {\n            if (beat_string.charAt(0) == 'o') {\n                return\
    \ 4l\n            } else if (beat_string.charAt(0) == 'o|') {\n              \
    \  return 2l\n            } else if (beat_string.charAt(0) == '.') {\n       \
    \         return 1l\n            } else {\n                return 0l\n       \
    \     }\n        }\n        def parseMusic(music_string : String) : List[Long]\
    \ = {\n            var beat_counts = mutable.List[Long]()\n            var note_counts\
    \ = mutable.List[Long]()\n            var beat_index = 0\n            var note_index\
    \ = 0\n            var beat_count = 0\n            var note_count = 0\n      \
    \      for (i <- 0 until music_string.length) {\n                if (music_string.charAt(i)\
    \ == 'o') {\n                    note_counts.append(note_count)\n            \
    \        note_count = 0\n                    note_index = i\n                }\
    \ else if (music_string.charAt(i) == 'o|') {\n                    note_counts.append(note_count)\n\
    \                    note_count = 0\n                    note_index = i\n    \
    \            } else if (music_string.charAt(i) == '.') {\n                   \
    \ note_counts.append(note_count)\n                    note_count = 0\n       \
    \             note_index = i\n                } else if (music_string.charAt(i)\
    \ == '|') {\n                    beat_counts.append(beat_count)\n            \
    \        beat_count = 0\n                    beat_index = i\n                }\
    \ else {\n                    beat_count += parseBeat(music_", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string == \"o\" {\n              \
    \  return 4l\n            } else if note_string == \"o|\" {\n                return\
    \ 2l\n            } else if note_string == \".|\" {\n                return 1l\n\
    \            } else {\n                throw new RuntimeException(\"Invalid note\
    \ string: \" + note_string)\n            }\n        }\n        def parseDuration(note_string\
    \ : String) : Long = {\n            if note_string == \"o\" {\n              \
    \  return 4l\n            } else if note_string == \"o|\" {\n                return\
    \ 2l\n            } else if note_string == \".|\" {\n                return 1l\n\
    \            } else {\n                throw new RuntimeException(\"Invalid note\
    \ string: \" + note_string)\n            }\n        }\n        def parseMusic(note_string\
    \ : String) : List[Long] = {\n            def parseNote(note_string : String)\
    \ : Long = {\n                if note_string == \"o\" {\n                    return\
    \ 4l\n                } else if note_string == \"o|\" {\n                    return\
    \ 2l\n                } else if note_string == \".|\" {\n                    return\
    \ 1l\n                } else {\n                    throw new RuntimeException(\"\
    Invalid note string: \" + note_string)\n                }\n            }\n   \
    \         def parseDuration(note_string : String) : Long = {\n               \
    \ if note_string == \"o\" {\n                    return 4l\n                }\
    \ else if note_string == \"o|\" {\n                    return 2l\n           \
    \     } else if note_string == \".|\" {\n                    return 1l\n     \
    \           } else {\n                    throw new RuntimeException(\"Invalid\
    \ note string: \" + note_string)\n                }\n            }\n         \
    \   def parseMusic(note_string : String) : List[Long] = {\n                def\
    \ parseNote(note_string : String) : Long = {\n                    if note_string\
    \ == \"o\" {\n                        return 4l\n                    } else if\
    \ note_string == \"o|\" {\n                        return 2l\n               \
    \     } else if note_string == \".|\" {\n                        return 1l\n \
    \                   } else {\n                        throw new RuntimeException(\"\
    Invalid note string: \" +", "        def parseNote(note_string : String) : Long\
    \ = {\n            if note_string == \".\" {\n                return 0l\n    \
    \        } else if note_string == \"o\" {\n                return 4l\n       \
    \     } else if note_string == \"o|\" {\n                return 2l\n         \
    \   } else {\n                return 1l\n            }\n        }\n        def\
    \ parseDuration(duration_string : String) : Long = {\n            if duration_string\
    \ == \".\" {\n                return 0l\n            } else if duration_string\
    \ == \"o\" {\n                return 4l\n            } else if duration_string\
    \ == \"o|\" {\n                return 2l\n            } else {\n             \
    \   return 1l\n            }\n        }\n        def parseBeat(beat_string : String)\
    \ : Long = {\n            if beat_string == \".\" {\n                return 0l\n\
    \            } else if beat_string == \"o\" {\n                return 4l\n   \
    \         } else if beat_string == \"o|\" {\n                return 2l\n     \
    \       } else {\n                return 1l\n            }\n        }\n      \
    \  def parseMusic(music_string : String) : List[Long] = {\n            var beat_counts\
    \ = mutable.List[Long]()\n            var note_counts = mutable.List[Long]()\n\
    \            var beat_count = 0l\n            var note_count = 0l\n          \
    \  for i in range(0, len(music_string)) {\n                var note = music_string[i]\n\
    \                var duration = parseDuration(music_string[i + 1])\n         \
    \       var beat = parseBeat(music_string[i + 2])\n                if note ==\
    \ \".\" {\n                    note_count += 1\n                } else if note\
    \ == \"o\" {\n                    note_count += 1\n                    beat_count\
    \ += 1\n                } else if note == \"o|\" {\n                    note_count\
    \ += 1\n                    beat_count += 1\n                } else {\n      \
    \              note_count += 1\n                }\n                beat_counts\
    \ += beat\n                note_counts += note_count\n            }\n        \
    \    return beat_counts\n        }\n        return parseMusic(music_string)",
  "        var result = mutable.List[Long]()\n        var current_note = mutable.List[String]()\n\
    \        var current_duration = mutable.List[Long]()\n        var current_duration_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count = mutable.List[Long]()\n\
    \        var current_duration_count_count_count = mutable.List[Long]()\n     \
    \   var current_duration_count_count_count_count = mutable.List[Long]()\n    \
    \    var current_duration_count_count_count_count_count = mutable.List[Long]()\n\
    \        var current_duration_count_count_count_count_count_count = mutable.List[Long]()\n\
    \        var current_duration_count_count_count_count_count_count_count = mutable.List[Long]()\n\
    \        var current_duration_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string.equals(\".\") {\n         \
    \       return 0l\n            } else if note_string.equals(\"o\") {\n       \
    \         return 4l\n            } else if note_string.equals(\"o|\") {\n    \
    \            return 2l\n            } else {\n                return 1l\n    \
    \        }\n        }\n        def parseMusic(note_list : List[String]) : List[Long]\
    \ = {\n            var result = List[Long]()\n            for (note_string <-\
    \ note_list) {\n                result = result.append(parseNote(note_string))\n\
    \            }\n            return result\n        }\n        return parseMusic(music_string.split(\"\
    \ \"))", "        def parseNote(note_string : String) : Long = {\n           \
    \ if note_string.length() == 1 {\n                return 1l\n            } else\
    \ if note_string.length() == 2 {\n                return 2l\n            } else\
    \ if note_string.length() == 3 {\n                return 4l\n            } else\
    \ {\n                throw new RuntimeException(\"Invalid note string: \" + note_string)\n\
    \            }\n        }\n        def parseBeat(beat_string : String) : Long\
    \ = {\n            if beat_string.length() == 1 {\n                return 1l\n\
    \            } else if beat_string.length() == 2 {\n                return 2l\n\
    \            } else if beat_string.length() == 3 {\n                return 4l\n\
    \            } else {\n                throw new RuntimeException(\"Invalid beat\
    \ string: \" + beat_string)\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var result = List[Long]()\n        \
    \    var current_beat = 1l\n            var current_note = 1l\n            var\
    \ current_note_string = \"\"\n            var current_beat_string = \"\"\n   \
    \         for (i <- 0 until music_string.length) {\n                if (music_string[i]\
    \ == '.') {\n                    current_note_string += music_string[i]\n    \
    \                current_note = parseNote(current_note_string)\n             \
    \       current_note_string = \"\"\n                } else if (music_string[i]\
    \ == '|') {\n                    current_beat_string += music_string[i]\n    \
    \                current_beat = parseBeat(current_beat_string)\n             \
    \       current_beat_string = \"\"\n                } else {\n               \
    \     current_note_string += music_string[i]\n                }\n            \
    \    if (i == music_string.length - 1) {\n                    result = append(result,\
    \ current_note * current_beat)\n                }\n            }\n           \
    \ return result\n        }\n        return parseMusic(music_string)", "      \
    \  def parseNote(note_string : String) : Long = {\n            if note_string.contains(\"\
    .\") {\n                def parseQuater(note_string : String) : Long = {\n   \
    \                 if note_string.contains(\"|\") {\n                        return\
    \ 1l\n                    } else {\n                        return 0l\n      \
    \              }\n                }\n                return 4l * parseQuater(note_string)\n\
    \            } else if note_string.contains(\"|\") {\n                return 2l\n\
    \            } else {\n                return 1l\n            }\n        }\n \
    \       return List(0l).map(i => parseNote(music_string.substring(i, i + 1)))",
  "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.equals(\".\"))\
    \ {\n                beats.append(1l)\n            } else if (note.equals(\"o\"\
    )) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            } else {\n           \
    \     throw new IllegalArgumentException(\"Invalid note: \" + note)\n        \
    \    }\n        }\n        return beats", "        val notes = music_string.split(\"\
    \ \")\n        val beats = notes.map(_.trim).map(_.toLong).toList\n        val\
    \ result = beats.map(b -> b / 4).toList\n        return result", "        def\
    \ parseNote(note_string : String) : Long {\n            if note_string.length()\
    \ == 0 {\n                return 0l\n            }\n            if note_string.charAt(0)\
    \ == 'o' {\n                return 4l\n            }\n            if note_string.charAt(0)\
    \ == 'o' {\n                return 2l\n            }\n            if note_string.charAt(0)\
    \ == '.' {\n                return 1l\n            }\n            return 0l\n\
    \        }\n        def parseBeat(beat_string : String) : Long {\n           \
    \ if beat_string.length() == 0 {\n                return 0l\n            }\n \
    \           if beat_string.charAt(0) == 'o' {\n                return 4l\n   \
    \         }\n            if beat_string.charAt(0) == 'o' {\n                return\
    \ 2l\n            }\n            if beat_string.charAt(0) == '.' {\n         \
    \       return 1l\n            }\n            return 0l\n        }\n        def\
    \ parseMusic(music_string : String) : List[Long] {\n            var result = mutable.List[Long]()\n\
    \            var beat_count = 0l\n            var note_count = 0l\n          \
    \  for (i <- 0 until music_string.length) {\n                if music_string.charAt(i)\
    \ == '.' {\n                    beat_count += parseBeat(music_string.substring(i\
    \ + 1, i + 2))\n                    note_count += parseNote(music_string.substring(i\
    \ + 1, i + 2))\n                    i += 2\n                } else if music_string.charAt(i)\
    \ == '|' {\n                    beat_count += parseBeat(music_string.substring(i\
    \ + 1, i + 2))\n                    note_count += parseNote(music_string.substring(i\
    \ + 1, i + 2))\n                    i += 2\n                } else {\n       \
    \             beat_count += parseBeat(music_string.substring(i, i + 1))\n    \
    \                note_count += parseNote(music_string.substring(i, i + 1))\n \
    \                   i += 1\n                }\n                result += note_count\
    \ * beat_count\n                note_count =", "        var result = mutable.List[Long]()\n\
    \        var current_note = mutable.StringBuilder()\n        var current_duration\
    \ = mutable.StringBuilder()\n        var current_duration_count = mutable.StringBuilder()\n\
    \        var current_duration_count_count = mutable.StringBuilder()\n        var\
    \ current_duration_count_count_count = mutable.StringBuilder()\n        var current_duration_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.StringBuilder()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ =", "        val music_list = List[String]()\n        val music_string_list\
    \ = List[String](music_string.split(\" \"))\n        for (i <- 0 until music_string_list.length)\
    \ {\n            val note = music_string_list[i]\n            if (note.equals(\"\
    .\")) {\n                music_list = append(music_list, 0l)\n            } else\
    \ if (note.equals(\"o\")) {\n                music_list = append(music_list, 4l)\n\
    \            } else if (note.equals(\"o|\")) {\n                music_list = append(music_list,\
    \ 2l)\n            } else {\n                music_list = append(music_list, 1l)\n\
    \            }\n        }\n        return music_list.map(x -> x.toLong).toList",
  "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.equals(\".\"))\
    \ {\n                beats.append(0l)\n            } else if (note.equals(\"o\"\
    )) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            } else {\n           \
    \     throw new IllegalArgumentException(\"Invalid note: \" + note)\n        \
    \    }\n        }\n        return beats", "        val notes = music_string.split(\"\
    \ \")\n        val beats = notes.map(note -> {\n            val note_string =\
    \ note.replaceAll(\"[^o|.]\", \"\")\n            val note_count = note_string.split(\"\
    \").length\n            return note_count\n        })\n        val beats_list\
    \ = beats.toList\n        val beats_list_length = beats_list.length\n        val\
    \ beats_list_last = beats_list.last\n        val beats_list_last_value = beats_list_last.get\n\
    \        val beats_list_last_value_as_long = beats_list_last_value.toLong\n  \
    \      val beats_list_length_as_long = beats_list_length.toLong\n        val beats_list_last_as_long\
    \ = beats_list_last_value_as_long\n        val beats_list_last_as_long_as_long\
    \ = beats_list_last_as_long.toLong\n        val beats_list_last_as_long_as_long_as_long\
    \ = beats_list_last_as_long_as_long.toLong\n        val beats_list_last_as_long_as_long_as_long_as_long\
    \ = beats_list_last_as_long_as_long_as_long.toLong\n        val beats_list_last_as_long_as_long_as_long_as_long_as_long\
    \ = beats_list_last_as_long_as_long_as_long_as_long.toLong\n        val beats_list_last_as_long_as_long_as_long_as_long_as_long_as_long\
    \ = beats_list_last_as_long_as_long_as_long_as_long_as_long.toLong\n        val\
    \ beats_list_last_as_long_as_long_as_long_as_long_as_long_as_long_as_long = beats_list_last_as_long_as_long_as_long_as_long_as_long_as_long.toLong\n\
    \        val beats_list_last_as_long_as_long_as_long_as_", "        val notes\
    \ = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\")).map(_.toLong).toList\n        val result = beats.map(b -> b.toLong).toList\n\
    \        return result", "        def parseNote(note_string : String) : Long =\
    \ {\n            if note_string.equals(\".\") {\n                return 0l\n \
    \           } else if note_string.equals(\"o\") {\n                return 4l\n\
    \            } else if note_string.equals(\"o|\") {\n                return 2l\n\
    \            } else {\n                return 1l\n            }\n        }\n \
    \       def parseMusic(music_string : String) : List[Long] = {\n            def\
    \ parseNote(note_string : String) : Long = {\n                if note_string.equals(\"\
    .\") {\n                    return 0l\n                } else if note_string.equals(\"\
    o\") {\n                    return 4l\n                } else if note_string.equals(\"\
    o|\") {\n                    return 2l\n                } else {\n           \
    \         return 1l\n                }\n            }\n            def parseMusic(music_string\
    \ : String) : List[Long] = {\n                def parseNote(note_string : String)\
    \ : Long = {\n                    if note_string.equals(\".\") {\n           \
    \             return 0l\n                    } else if note_string.equals(\"o\"\
    ) {\n                        return 4l\n                    } else if note_string.equals(\"\
    o|\") {\n                        return 2l\n                    } else {\n   \
    \                     return 1l\n                    }\n                }\n  \
    \              def parseMusic(music_string : String) : List[Long] = {\n      \
    \              def parseNote(note_string : String) : Long = {\n              \
    \          if note_string.equals(\".\") {\n                            return\
    \ 0l\n                        } else if note_string.equals(\"o\") {\n        \
    \                    return 4l\n                        } else if note_string.equals(\"\
    o|\") {\n                            return 2l\n                        } else\
    \ {\n                            return 1l\n                        }\n      \
    \              }\n                    def parseMusic(music_string : String) :\
    \ List[Long] = {\n                        def parseNote(note_string : String)\
    \ : Long = {\n                            if note_string.equals(\".\") {\n   \
    \                             return 0l\n                            } else if\
    \ note_string.equals(\"o\") {\n                                return 4l\n   \
    \                         } else if note_string.equals(\"o|\") {\n           \
    \                     return 2l\n                            }", "        val\
    \ notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\"))\n        val beats_list = beats.map(_.toLong).toList\n     \
    \   return beats_list", "        val notes = music_string.split(\" \")\n     \
    \   val beats = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\"))\n     \
    \   val beats_list = beats.map(Long.parseLong).toList\n        return beats_list",
  "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val result = mutable.List[Long]()\n        for (i <- 0 until music_list.size())\
    \ {\n            val note = music_list.get(i)\n            if (note.equals(\"\
    .\")) {\n                result.append(1l)\n            } else if (note.equals(\"\
    |\")) {\n                result.append(2l)\n            } else if (note.equals(\"\
    o\")) {\n                result.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                result.append(2l)\n            } else {\n          \
    \      result.append(0l)\n            }\n        }\n        return result", " \
    \       def parseNote(note_string : String) : Long = {\n            if note_string\
    \ == \".\" {\n                return 0l\n            } else if note_string ==\
    \ \"o\" {\n                return 4l\n            } else if note_string == \"\
    o|\" {\n                return 2l\n            } else {\n                return\
    \ 1l\n            }\n        }\n        def parseDuration(note_string : String)\
    \ : Long = {\n            if note_string == \"o\" {\n                return 4l\n\
    \            } else if note_string == \"o|\" {\n                return 2l\n  \
    \          } else if note_string == \".|\" {\n                return 1l\n    \
    \        } else {\n                return 0l\n            }\n        }\n     \
    \   def parseBeat(note_string : String) : Long = {\n            if note_string\
    \ == \"o\" {\n                return 4l\n            } else if note_string ==\
    \ \"o|\" {\n                return 2l\n            } else if note_string == \"\
    .|\" {\n                return 1l\n            } else {\n                return\
    \ 0l\n            }\n        }\n        def parseMusic(music_string : String)\
    \ : List[Long] = {\n            var result = List[Long]()\n            var current_note\
    \ = \"\"\n            var current_duration = 0l\n            var current_beat\
    \ = 0l\n            for i in range(0, len(music_string)) {\n                if\
    \ music_string[i] == \"o\" {\n                    current_note = current_note\
    \ + \"o\"\n                    current_duration = current_duration + parseDuration(current_note)\n\
    \                    current_beat = current_beat + parseBeat(current_note)\n \
    \                   current_note = \"\"\n                } else if music_string[i]\
    \ == \"o|\" {\n                    current_note = current_note + \"o|\"\n    \
    \                current_duration = current_duration + parseDuration(current_note)\n\
    \                    current_beat = current_beat + parseBeat(current_note)\n \
    \                   current_note = \"\"\n                } else if music_string[i]\
    \ == \".|\" {\n                    current_note = current_note + \".|\"\n    \
    \                current_duration = current_duration + parseDuration(current_note)\n\
    \                    ", "        def parseNote(note_string : String) : Long =\
    \ {\n            if note_string.length() == 1 {\n                return note_string.charAt(0)\
    \ - '0'\n            } else if note_string.length() == 2 {\n                return\
    \ note_string.charAt(0) - '0' + (note_string.charAt(1) - '0') * 2\n          \
    \  } else {\n                return note_string.charAt(0) - '0' + (note_string.charAt(1)\
    \ - '0') * 2 + (note_string.charAt(2) - '0') * 4\n            }\n        }\n \
    \       def parseBeat(beat_string : String) : Long = {\n            if beat_string.length()\
    \ == 1 {\n                return beat_string.charAt(0) - '0'\n            } else\
    \ if beat_string.length() == 2 {\n                return beat_string.charAt(0)\
    \ - '0' + (beat_string.charAt(1) - '0') * 2\n            } else {\n          \
    \      return beat_string.charAt(0) - '0' + (beat_string.charAt(1) - '0') * 2\
    \ + (beat_string.charAt(2) - '0') * 4\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var result = List[Long]()\n        \
    \    var current_beat = 0\n            var current_note = 0\n            var current_note_string\
    \ = \"\"\n            var current_note_string_length = 0\n            var current_note_string_index\
    \ = 0\n            for (i <- 0 until music_string.length) {\n                if\
    \ (music_string.charAt(i) == ' ') {\n                    current_note_string_length\
    \ = current_note_string_length + 1\n                    if (current_note_string_length\
    \ == 1) {\n                        current_note_string_index = i + 1\n       \
    \             } else if (current_note_string_length == 2) {\n                \
    \        current_note_string_index = i + 1\n                        current_note_string\
    \ = current_note_string + \" \"\n                    } else", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string == \".\" {\n              \
    \  return 0l\n            } else if note_string == \"o\" {\n                return\
    \ 4l\n            } else if note_string == \"o|\" {\n                return 2l\n\
    \            } else {\n                return 1l\n            }\n        }\n \
    \       def parseMusic(note_list : List[String]) : List[Long] = {\n          \
    \  if note_list == nil {\n                return nil\n            } else {\n \
    \               return note_list.map(parseNote).toList\n            }\n      \
    \  }\n        return parseMusic(music_string.split(\" \"))", "        val music_list\
    \ = scala.collection.JavaConversions.asScalaBuffer(Arrays.asList(music_string.split(\"\
    \ \")))\n        val music_seq = scala.collection.mutable.Seq.apply(music_list.size())\n\
    \        for (i <- 0 until music_list.size()) {\n            val note = music_list.apply(i)\n\
    \            if (note.contains(\"o\")) {\n                val note_list = note.split(\"\
    o\")\n                val note_seq = scala.collection.mutable.Seq.apply(note_list.length())\n\
    \                for (j <- 0 until note_list.length()) {\n                   \
    \ val note_part = note_list.apply(j)\n                    if (note_part.contains(\"\
    |\")) {\n                        val note_part_list = note_part.split(\"|\")\n\
    \                        val note_part_seq = scala.collection.mutable.Seq.apply(note_part_list.length())\n\
    \                        for (k <- 0 until note_part_list.length()) {\n      \
    \                      val note_part_part = note_part_list.apply(k)\n        \
    \                    if (note_part_part.contains(\".\")) {\n                 \
    \               val note_part_part_list = note_part_part.split(\".\")\n      \
    \                          val note_part_part_seq = scala.collection.mutable.Seq.apply(note_part_part_list.length())\n\
    \                                for (l <- 0 until note_part_part_list.length())\
    \ {\n                                    val note_part_part_part = note_part_part_list.apply(l)\n\
    \                                    note_part_part_seq.apply(l) = note_part_part_part.toLong\n\
    \                                }\n                                note_part_seq.apply(k)\
    \ = note_part_part_seq\n                            } else {\n               \
    \                 note_part_seq.apply(k) = note_part_part.toLong\n           \
    \                 }\n                        }\n                        note_seq.apply(j)\
    \ = note_part_seq\n                    } else {\n                        note_seq.apply(j)\
    \ = note_part.toLong\n                    }\n                }\n             \
    \   music_seq.", "        val notes = music_string.split(\" \")\n        val beats\
    \ = notes.map(note => {\n            val note_parts = note.split(\"|\")\n    \
    \        val note_len = note_parts.length\n            val note_len_str = note_len.toString()\n\
    \            val note_len_int = note_len_str.replace(\"1\", \"\").replace(\"2\"\
    , \"\").replace(\"3\", \"\").replace(\"4\", \"\").replace(\"5\", \"\").replace(\"\
    6\", \"\").replace(\"7\", \"\").replace(\"8\", \"\").replace(\"9\", \"\").replace(\"\
    10\", \"\").replace(\"11\", \"\").replace(\"12\", \"\").replace(\"13\", \"\").replace(\"\
    14\", \"\").replace(\"15\", \"\").replace(\"16\", \"\").replace(\"17\", \"\").replace(\"\
    18\", \"\").replace(\"19\", \"\").replace(\"20\", \"\").replace(\"21\", \"\").replace(\"\
    22\", \"\").replace(\"23\", \"\").replace(\"24\", \"\").replace(\"25\", \"\").replace(\"\
    26\", \"\").replace(\"27\", \"\").replace(\"28\", \"\").replace(\"29\", \"\").replace(\"\
    30\", \"\").replace(\"31\", \"\").replace(\"32\", \"\").replace(\"33\", \"\").replace(\"\
    34\", \"\").replace(\"35\", \"\").replace(\"36\", \"\").replace(\"37\", \"\").replace(\"\
    38\", \"\").replace(\"39\", \"\").replace(\"40\", \"\").replace(\"41\", \"\").replace(\"\
    42\", \"\").replace(\"43\", \"\").replace(\"44\", \"\").replace(\"45\", \"\").replace(\"\
    46\", \"\").replace(\"47\", \"\").replace(\"48\", \"\").replace(\"49\", \"\").replace(\"\
    50\", \"\").replace(\"51\", \"\").replace(\"52\", \"\").replace(\"53\", \"\").replace(\"\
    54\", \"\").replace(\"55\", \"\").replace(\"56\", \"\").replace(\"57\", \"\").replace(\"\
    58\", \"\").replace(\"59\", \"\").replace(\"60\", \"\").replace(\"61\", \"\").replace(\"\
    62\", \"\").replace(\"63\", \"\").replace(\"64\", \"\").replace(\"65\", \"\").replace(\"\
    66\", \"\").replace(\"67\", \"\").replace(\"68\", \"\").replace(\"69\", \"\").replace(\"\
    70\", \"\").replace(\"71\", \"\").replace(\"72\", \"\").", "        val notes\
    \ = music_string.split(\" \")\n        val beats = notes.map(_.trim).filter(_.nonEmpty).map(_.toLong).toList\n\
    \        val result = beats.map(_.toLong).toList\n        return result", "  \
    \      def parseNote(note_string : String) : Long = {\n            if note_string.endsWith(\"\
    |\") {\n                return note_string.substring(0, note_string.length() -\
    \ 1).toLong\n            } else {\n                return note_string.toLong\n\
    \            }\n        }\n        def parseBeat(beat_string : String) : Long\
    \ = {\n            if beat_string.endsWith(\"|\") {\n                return beat_string.substring(0,\
    \ beat_string.length() - 1).toLong\n            } else {\n                return\
    \ beat_string.toLong\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var beat_counts : List[Long] = List.empty\n\
    \            var beat_count : Long = 0\n            for (i <- 0 until music_string.length)\
    \ {\n                if (music_string[i] == '.') {\n                    beat_count\
    \ += 1\n                } else if (music_string[i] == 'o') {\n               \
    \     beat_count += 4\n                } else if (music_string[i] == 'o|') {\n\
    \                    beat_count += 2\n                }\n                if (beat_count\
    \ > beat_counts.length) {\n                    beat_counts = beat_counts.append(beat_count)\n\
    \                } else {\n                    beat_counts = beat_counts.update(beat_count)\n\
    \                }\n            }\n            return beat_counts\n        }\n\
    \        return parseMusic(music_string)", "        val notes = music_string.split(\"\
    \ \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\"\
    ))\n        val result = beats.map(_.toLong).toList\n        return result", " \
    \       val music_list = scala.collection.JavaConversions.asScalaBuffer(music_string.split(\"\
    \ \")).toList\n        val result = mutable.List.empty[Long]\n        for (i <-\
    \ 0 until music_list.size) {\n            val note = music_list.get(i)\n     \
    \       if (note.contains(\"o\")) {\n                result = result.append(4l)\n\
    \            } else if (note.contains(\"o|\")) {\n                result = result.append(2l)\n\
    \            } else if (note.contains(\".|\")) {\n                result = result.append(1l)\n\
    \            } else {\n                result = result.append(0l)\n          \
    \  }\n        }\n        return result", "        val notes = music_string.split(\"\
    \ \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\"\
    )).map(_.toLong).toList\n        val result = beats.map(b -> b.toLong)\n     \
    \   return result", "        var result = mutable.List[Long]()\n        var current_note\
    \ = mutable.StringBuilder()\n        var current_duration = mutable.StringBuilder()\n\
    \        var current_duration_count = 0\n        var current_duration_value =\
    \ 0\n        var current_duration_type = 0\n        var current_note_value = 0\n\
    \        var current_note_type = 0\n        var current_note_count = 0\n     \
    \   var current_note_count_value = 0\n        var current_note_count_type = 0\n\
    \        var current_note_count_count = 0\n        var current_note_count_count_value\
    \ = 0\n        var current_note_count_count_type = 0\n        var current_note_count_count_count\
    \ = 0\n        var current_note_count_count_count_value = 0\n        var current_note_count_count_count_type\
    \ = 0\n        var current_note_count_count_count_count = 0\n        var current_note_count_count_count_count_value\
    \ = 0\n        var current_note_count_count_count_count_type = 0\n        var\
    \ current_note_count_count_count_count_count = 0\n        var current_note_count_count_count_count_count_value\
    \ = 0\n        var current_note_count_count_count_count_count_type = 0\n     \
    \   var current_note_count_count_count_count_count_count = 0\n        var current_note_count_count_count_count_count_count_value\
    \ = 0\n        var current_note_count_count_count_count_count_count_type = 0\n\
    \        var current_note_count_count_count_count_count_count_count = 0\n    \
    \    var current_note_count_count_count_count_count_count_count_value = 0\n  \
    \      var current_note_count_count_count_count_count_count_count_type = 0\n \
    \       var current_note_count_count_count_count_count_count_count_count = 0\n\
    \        var current_note_count_count_count_count_count_count_count_count_value\
    \ = 0\n        var current_note_count_count", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string == \"o\" {\n              \
    \  return 4L\n            } else if note_string == \"o|\" {\n                return\
    \ 2L\n            } else if note_string == \".|\" {\n                return 1L\n\
    \            } else {\n                throw new IllegalArgumentException(\"Invalid\
    \ note string: \" + note_string)\n            }\n        }\n        def parseDuration(duration_string\
    \ : String) : Long = {\n            if duration_string == \"o\" {\n          \
    \      return 4L\n            } else if duration_string == \"o|\" {\n        \
    \        return 2L\n            } else if duration_string == \".|\" {\n      \
    \          return 1L\n            } else {\n                throw new IllegalArgumentException(\"\
    Invalid note string: \" + duration_string)\n            }\n        }\n       \
    \ def parseBeat(beat_string : String) : Long = {\n            if beat_string ==\
    \ \"o\" {\n                return 1L\n            } else if beat_string == \"\
    o|\" {\n                return 2L\n            } else if beat_string == \".|\"\
    \ {\n                return 4L\n            } else {\n                throw new\
    \ IllegalArgumentException(\"Invalid note string: \" + beat_string)\n        \
    \    }\n        }\n        def parseMusic(music_string : String) : List[Long]\
    \ = {\n            def parseNote(note_string : String) : Long = {\n          \
    \      if note_string == \"o\" {\n                    return 4L\n            \
    \    } else if note_string == \"o|\" {\n                    return 2L\n      \
    \          } else if note_string == \".|\" {\n                    return 1L\n\
    \                } else {\n                    throw new IllegalArgumentException(\"\
    Invalid note string: \" + note_string)\n                }\n            }\n   \
    \         def parseDuration(duration_string : String) : Long = {\n           \
    \     if duration_string == \"o\" {\n                    return 4L\n         \
    \       } else if duration_string == \"o|\" {\n                    return 2L\n\
    \                } else if duration_string == \".|\" {\n                    return\
    \ 1L\n                } else {\n                    throw new IllegalArgumentException(\"\
    Invalid note string: \" + duration_string)\n                }\n            ",
  "        var notes = scala.collection.mutable.ListBuffer[Long]()\n        var current_note\
    \ = 0\n        var current_beat = 0\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string[i] == '.') {\n                current_beat +=\
    \ 1\n            } else if (music_string[i] == '|') {\n                current_beat\
    \ += 2\n            } else if (music_string[i] == 'o') {\n                current_beat\
    \ += 4\n            } else if (music_string[i] == 'o|') {\n                current_beat\
    \ += 2\n            } else {\n                current_note += 1\n            }\n\
    \            if (current_beat == 4) {\n                notes.append(current_note)\n\
    \                current_note = 0\n                current_beat = 0\n        \
    \    }\n        }\n        notes.append(current_note)\n        return notes.toList",
  "        def parseNote(note_string : String) : Long = {\n            if (note_string.length()\
    \ == 0) {\n                return 0l\n            } else {\n                var\
    \ note_char = note_string.charAt(0)\n                if (note_char == 'o') {\n\
    \                    return 4l\n                } else if (note_char == 'o|')\
    \ {\n                    return 2l\n                } else if (note_char == '.')\
    \ {\n                    return 1l\n                } else {\n               \
    \     throw new IllegalArgumentException(\"Unknown note character: \" + note_char)\n\
    \                }\n            }\n        }\n        var notes = music_string.split(\"\
    \ \")\n        var beats = notes.map(note -> parseNote(note)).toList\n       \
    \ return beats", "        val notes = music_string.split(\" \")\n        val beats\
    \ = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\"))\n        val result\
    \ = beats.map(_.toLong).toList\n        return result", "        var result =\
    \ mutable.List[Long]()\n        var note_count = mutable.List[String]()\n    \
    \    var note_duration = mutable.List[String]()\n        var note_beat = mutable.List[String]()\n\
    \        var note_beat_count = mutable.List[Long]()\n        var note_beat_count_sum\
    \ = mutable.List[Long]()\n        var note_beat_count_sum_sum = mutable.List[Long]()\n\
    \        var note_beat_count_sum_sum_sum = mutable.List[Long]()\n        var note_beat_count_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_beat_count_sum_sum_sum_sum_sum = mutable.List[Long]()\n\
    \        var note_beat_count_sum_sum_sum_sum_sum_sum = mutable.List[Long]()\n\
    \        var note_beat_count_sum_sum_sum_sum_sum_sum_sum = mutable.List[Long]()\n\
    \        var note_beat_count_sum_sum_sum_sum_sum_sum_sum_sum = mutable.List[Long]()\n\
    \        var note_beat_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = mutable.List[Long]()\n\
    \        var note_beat_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = mutable.List[Long]()\n\
    \        var note_beat_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = mutable.List[Long]()\n\
    \        var note_beat_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum =\
    \ mutable.List[Long]()\n        var note_beat_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = mutable.List[Long]()\n        var note_beat_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_",
  "        val music_list = scala.collection.JavaConversions.asScalaBuffer(music_string.split(\"\
    \ \")).toList\n        val beats_list = scala.collection.JavaConversions.asScalaBuffer(music_list.map(x\
    \ => x.replaceAll(\"[^0-9.]\", \"\"))).toList\n        val beats_count = scala.collection.JavaConversions.asScalaBuffer(music_list.map(x\
    \ => x.replaceAll(\"[^0-9.]\", \"\"))).toList\n        val beats_count_list =\
    \ scala.collection.JavaConversions.asScalaBuffer(beats_count.map(x => x.toLong)).toList\n\
    \        val beats_count_list_sorted = scala.collection.JavaConversions.asScalaBuffer(beats_count_list.sorted()).toList\n\
    \        val beats_count_list_sorted_sorted = scala.collection.JavaConversions.asScalaBuffer(beats_count_list_sorted.sorted()).toList\n\
    \        val beats_count_list_sorted_sorted_sorted = scala.collection.JavaConversions.asScalaBuffer(beats_count_list_sorted_sorted.sorted()).toList\n\
    \        val beats_count_list_sorted_sorted_sorted_sorted = scala.collection.JavaConversions.asScalaBuffer(beats_count_list_sorted_sorted_sorted.sorted()).toList\n\
    \        val beats_count_list_sorted_sorted_sorted_sorted_sorted = scala.collection.JavaConversions.asScalaBuffer(beats_count_list_sorted_sorted_sorted_sorted.sorted()).toList\n\
    \        val beats_count_list_sorted_sorted_sorted_sorted_sorted_sorted = scala.collection.JavaConversions.asScalaBuffer(beats_count_list_sorted_sorted_sorted_sorted_sorted.sorted()).toList\n\
    \        val beats_count_list_sorted_sorted_sorted_sorted_sorted_sorted_", " \
    \       var result = mutable.List[Long]()\n        var i = 0\n        while (i\
    \ < music_string.length) {\n            var note = music_string[i]\n         \
    \   var count = 1\n            if (note == '.') {\n                count = 2\n\
    \            } else if (note == '|') {\n                count = 4\n          \
    \  }\n            result = result.append(count.toLong)\n            i += 1\n \
    \       }\n        return result", "        var notes = music_string.split(\"\
    \ \")\n        var beats = []\n        for (i <- 0 until notes.length) {\n   \
    \         var note = notes[i]\n            if (note.equals(\".\")) {\n       \
    \         beats.append(1l)\n            } else if (note.equals(\"o\")) {\n   \
    \             beats.append(4l)\n            } else if (note.equals(\"o|\")) {\n\
    \                beats.append(2l)\n            } else {\n                throw\
    \ new RuntimeException(\"Unknown note \" + note)\n            }\n        }\n \
    \       return beats", "        var notes = new ArrayList[String]()\n        var\
    \ beats = new ArrayList[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            var note = music_string[i]\n            if (note == '.') {\n\
    \                i += 1\n                continue\n            }\n           \
    \ if (note == '|') {\n                i += 1\n                continue\n     \
    \       }\n            if (note == 'o') {\n                i += 1\n          \
    \      beats.add(4l)\n                continue\n            }\n            if\
    \ (note == 'o|') {\n                i += 1\n                beats.add(2l)\n  \
    \              continue\n            }\n            if (note == '.'|') {\n   \
    \             i += 1\n                beats.add(1l)\n                continue\n\
    \            }\n            notes.add(note)\n            i += 1\n        }\n \
    \       var result = new ArrayList[Long]()\n        for (var note : notes) {\n\
    \            result.add(beats.get(notes.indexOf(note)))\n        }\n        return\
    \ result", "        def parseNote(note_string : String) : Long = {\n         \
    \   if note_string.endsWith(\"|\") {\n                return note_string.substring(0,\
    \ note_string.length() - 1).toLong\n            } else {\n                return\
    \ note_string.toLong\n            }\n        }\n        def parseBeat(beat_string\
    \ : String) : Long = {\n            if beat_string.endsWith(\"|\") {\n       \
    \         return beat_string.substring(0, beat_string.length() - 1).toLong\n \
    \           } else {\n                return beat_string.toLong\n            }\n\
    \        }\n        def parseMusic(music_string : String) : List[Long] = {\n \
    \           var beat_counts = mutable.List[Long]()\n            var beat_count\
    \ = 0\n            for(i <- 0 until music_string.length) {\n                if(music_string[i]\
    \ == '.') {\n                    beat_count += 1\n                } else if(music_string[i]\
    \ == 'o') {\n                    beat_count += 4\n                } else if(music_string[i]\
    \ == 'o|') {\n                    beat_count += 2\n                }\n       \
    \         if(beat_count > beat_counts.length) {\n                    beat_counts.append(beat_count)\n\
    \                } else {\n                    beat_counts[beat_count] += 1\n\
    \                }\n                beat_count = 0\n            }\n          \
    \  return beat_counts\n        }\n        return parseMusic(music_string)", " \
    \       def parseNote(note_string : String) : Long = {\n            if note_string\
    \ == \".\" {\n                return 0l\n            }\n            if note_string\
    \ == \"o\" {\n                return 4l\n            }\n            if note_string\
    \ == \"o|\" {\n                return 2l\n            }\n            throw new\
    \ RuntimeException(\"Unknown note \" + note_string)\n        }\n        def parseBeat(beat_string\
    \ : String) : Long = {\n            if beat_string == \".\" {\n              \
    \  return 0l\n            }\n            if beat_string == \"o\" {\n         \
    \       return 1l\n            }\n            if beat_string == \"o|\" {\n   \
    \             return 2l\n            }\n            throw new RuntimeException(\"\
    Unknown beat \" + beat_string)\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var result = mutable.List[Long]()\n\
    \            var current_beat = 0l\n            var current_note = 0l\n      \
    \      var current_note_string = \"\"\n            for i in range(0, len(music_string))\
    \ {\n                if music_string[i] == '.' {\n                    current_note_string\
    \ = current_note_string + music_string[i]\n                    current_note =\
    \ parseNote(current_note_string)\n                    current_note_string = \"\
    \"\n                    current_beat += current_note\n                    result.append(current_beat)\n\
    \                    current_beat = 0l\n                } else if music_string[i]\
    \ == 'o' {\n                    current_note_string = current_note_string + music_string[i]\n\
    \                    current_note = parseNote(current_note_string)\n         \
    \           current_note_string = \"\"\n                    current_beat += current_note\n\
    \                    result.append(current_beat)\n                    current_beat\
    \ = 0l\n                } else if music_string[i] == '|' {\n                 \
    \   current_note_string = current_note_string + music_string[i]\n            \
    \        current_note = parseNote(current_note_string)\n                    current_note_string\
    \ = \"\"\n                    current_beat += current_note\n                 \
    \   result.append(current_beat)\n                    current_beat", "        def\
    \ parseNote(note_string : String) : Long = {\n            if note_string.endsWith(\"\
    |\") {\n                return note_string.substring(0, note_string.length() -\
    \ 1).toLong\n            } else {\n                return note_string.toLong\n\
    \            }\n        }\n        def parseBeat(beat_string : String) : Long\
    \ = {\n            if beat_string.endsWith(\"|\") {\n                return beat_string.substring(0,\
    \ beat_string.length() - 1).toLong\n            } else {\n                return\
    \ beat_string.toLong\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var result = mutable.List[Long]()\n\
    \            var beat_count = 0\n            for (i <- 0 until music_string.length)\
    \ {\n                var note_count = 0\n                var note_string = music_string[i]\n\
    \                while (note_string.startsWith(\"o\") && note_count < 4) {\n \
    \                   note_count += 1\n                    note_string = music_string[i\
    \ + note_count]\n                }\n                if note_string.startsWith(\"\
    .\") {\n                    note_count += 1\n                    note_string =\
    \ music_string[i + note_count]\n                }\n                if note_string.startsWith(\"\
    o\") {\n                    note_count += 1\n                    note_string =\
    \ music_string[i + note_count]\n                }\n                result = result.append(parseNote(note_string)\
    \ * beat_count)\n                beat_count += parseBeat(music_string[i + note_count])\n\
    \            }\n            return result\n        }\n        return parseMusic(music_string)",
  "        val music_list = List[String]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string[i] == '.') {\n                music_list = music_list.append(0l)\n\
    \            } else if (music_string[i] == '|') {\n                music_list\
    \ = music_list.append(1l)\n            } else if (music_string[i] == 'o') {\n\
    \                music_list = music_list.append(4l)\n            } else {\n  \
    \              music_list = music_list.append(2l)\n            }\n        }\n\
    \        val result = List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            if (music_list[i] == 0) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result", "        val music_list = scala.collection.JavaConversions.asScalaBuffer(Arrays.asList(music_string.split(\"\
    \ \")))\n        val music_list_as_scala_collection_mutable_ = scala.collection.mutable.Buffer[String]()\n\
    \        music_list.foreach(x => music_list_as_scala_collection_mutable_.append(x))\n\
    \        val music_list_as_scala_collection_mutable_as_scala_collection_mutable_\
    \ = scala.collection.mutable.Buffer[scala.collection.mutable.StringBuilder]()\n\
    \        music_list_as_scala_collection_mutable_.foreach(x => {\n            val\
    \ sb = x.toStringBuilder()\n            val sb_as_scala_collection_mutable_ =\
    \ scala.collection.mutable.Buffer[scala.collection.mutable.StringBuilder]()\n\
    \            sb.append(\" \")\n            sb.append(\" \")\n            sb.append(\"\
    \ \")\n            sb.append(\" \")\n            sb.append(\" \")\n          \
    \  sb.append(\" \")\n            sb.append(\" \")\n            sb.append(\" \"\
    )\n            sb.append(\" \")\n            sb.append(\" \")\n            sb.append(\"\
    \ \")\n            sb.append(\" \")\n            sb.append(\" \")\n          \
    \  sb.append(\" \")\n            sb.append(\" \")\n            sb.append(\" \"\
    )\n            sb.append(\" \")\n            sb.append(\" \")\n            sb.append(\"\
    \ \")\n            sb.append(\" \")\n            sb.append(\" \")\n          \
    \  sb.append(\" \")\n            sb.append(\" \")\n            sb.append(\" \"\
    )\n            sb.append(\" \")\n            sb.append(\" \")\n            sb.append(\"\
    \ \")\n            sb.append(\" \")\n            sb.append(\" \")\n          \
    \  sb.append(\" \")\n            sb.append(\" \")\n            sb.append(\" \"\
    )\n            sb.append(\" \")\n            sb.append(\" \")\n            sb.append(\"\
    \ \")\n            sb.append(\" \")\n            sb.append(\" \"", "        def\
    \ parseNote(note_string : String) : Long = {\n            if note_string == \"\
    o\" {\n                return 4l\n            } else if note_string == \"o|\"\
    \ {\n                return 2l\n            } else if note_string == \".\" {\n\
    \                return 1l\n            } else {\n                throw new IllegalArgumentException(\"\
    Invalid note string: \" + note_string)\n            }\n        }\n        def\
    \ parseMusic(note_string : String) : List[Long] = {\n            var note_count\
    \ = 0l\n            var note_beats = List[Long]()\n            for note_string\
    \ in note_string.split(\" \") {\n                note_count += parseNote(note_string)\n\
    \                note_beats = note_beats.append(note_count)\n            }\n \
    \           return note_beats\n        }\n        return parseMusic(music_string)",
  "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val result = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.equals(\".\"))\
    \ {\n                result.append(1l)\n            } else if (note.equals(\"\
    o\")) {\n                result.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                result.append(2l)\n            } else {\n          \
    \      result.append(0l)\n            }\n        }\n        return result", " \
    \       val music = music_string.split(\" \")\n        val result = mutable.List[Long]()\n\
    \        for (i <- 0 until music.length) {\n            val note = music[i]\n\
    \            if (note.equals(\".\")) {\n                result.append(1l)\n  \
    \          } else if (note.equals(\"o\")) {\n                result.append(4l)\n\
    \            } else if (note.equals(\"o|\")) {\n                result.append(2l)\n\
    \            } else {\n                result.append(0l)\n            }\n    \
    \    }\n        return result", "        val notes = scala.collection.JavaConversions.asScalaBuffer(Arrays.asList(music_string.split(\"\
    \ \")))\n        val result = notes.map(note -> {\n            val note_str =\
    \ note.toString()\n            val note_len = note_str.length()\n            val\
    \ note_len_int = note_len.toInt\n            val note_len_long = note_len_int.toLong\n\
    \            return note_len_long\n        }).toList\n        return result",
  "        val notes = music_string.split(\" \")\n        val beats = notes.map(note\
    \ => {\n            val note_string = note.replace(\".\", \"\")\n            val\
    \ note_length = note_string.length()\n            val note_value = note_string.charAt(note_length\
    \ - 1)\n            if (note_value == \"o\") {\n                return 4l\n  \
    \          } else if (note_value == \"o|\") {\n                return 2l\n   \
    \         } else if (note_value == \".|\") {\n                return 1l\n    \
    \        } else {\n                throw new RuntimeException(\"Invalid note:\
    \ \" + note)\n            }\n        }).toList\n        return beats.map(beat\
    \ => beat.toLong)", "        val notes = music_string.split(\" \")\n        val\
    \ beats = notes.map(note => {\n            val note_parts = note.split(\"|\")\n\
    \            val note_length = note_parts.length\n            val note_beats =\
    \ note_length - 1\n            val note_beat_count = note_beats.toLong\n     \
    \       return note_beat_count\n        }).toList\n        return beats", "  \
    \      val music_list = scala.collection.JavaConversions.asScalaBuffer(music_string.split(\"\
    \ \")).toList\n        val beats = mutable.List[Long]()\n        for (i <- 0 until\
    \ music_list.length) {\n            val note = music_list(i)\n            if (note.equals(\"\
    .\")) {\n                beats.append(0l)\n            } else if (note.equals(\"\
    |\")) {\n                beats.append(1l)\n            } else if (note.equals(\"\
    o\")) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            } else {\n           \
    \     throw new IllegalArgumentException(\"Invalid note: \" + note)\n        \
    \    }\n        }\n        return beats.toList", "        val music_list = List.of(music_string.split(\"\
    \ \"))\n        val result = List.empty[Long]\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.contains(\".\"\
    )) {\n                val note_list = note.split(\".\")\n                val note_length\
    \ = note_list[1].length()\n                val note_count = note_length.toLong\n\
    \                result = result.append(note_count)\n            } else {\n  \
    \              val note_count = note.length().toLong\n                result =\
    \ result.append(note_count)\n            }\n        }\n        return result",
  "        val music_list = scala.collection.JavaConversions.asScalaBuffer(music_string.split(\"\
    \ \")).toList\n        val result = mutable.List.empty()\n        for (i <- 0\
    \ until music_list.length) {\n            val note = music_list(i)\n         \
    \   if (note.contains(\"o\")) {\n                result = result.append(4l)\n\
    \            } else if (note.contains(\"o|\")) {\n                result = result.append(2l)\n\
    \            } else if (note.contains(\".|\")) {\n                result = result.append(1l)\n\
    \            } else {\n                result = result.append(0l)\n          \
    \  }\n        }\n        return result.toList", "        val music_list = List.ofAll(music_string.split(\"\
    \ \"))\n        val beats = List.ofAll(music_list.map(Problem.parseMusicString).toList)\n\
    \        return beats\n    }\n\n    // This function parses a string representing\
    \ a musical note.\n    // Your task is to parse this string and return a tuple\
    \ representing the note.\n    // Here is a legend:\n    // 'o' - whole note, lasts\
    \ four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note,\
    \ lasts one beat\n    // >>> parseMusicString(\"o o| .| o| o| .| .| .| .| o o\"\
    )\n    // (Tuple2(Tuple2(1l.toLong, 4l.toLong), Tuple2(1l.toLong, 2l.toLong)))\n\
    \    def parseMusicString(music_string : String) : Tuple2[Tuple2[Long, Long],\
    \ Tuple2[Long, Long]] = {\n        val note_list = List.ofAll(music_string.split(\"\
    \ \"))\n        val note_tuple = Tuple2(Tuple2(note_list.map(Problem.parseNote).toList.head,\
    \ note_list.map(Problem.parseNote).toList.tail.head), Tuple2(note_list.map(Problem.parseNote).toList.tail.tail.head,\
    \ note_list.map(Problem.parseNote).toList.tail.tail.tail.head))\n        return\
    \ note_tuple\n    }\n\n    // This function parses a string representing a musical\
    \ note.\n    // Your task is to parse this string and return a tuple representing\
    \ the note.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseNote(\"o o| .| o| o| .| .| .| .| o o\")\n    // (Tuple2(1l.toLong,\
    \ 4l.toLong))\n    def parseNote(note_string : String) : Tuple2[Long, Long] =",
  "        def parseNote(note_string : String) : Long {\n            if (note_string\
    \ == \".\") {\n                return 0l\n            } else if (note_string ==\
    \ \"o\") {\n                return 4l\n            } else if (note_string == \"\
    o|\") {\n                return 2l\n            } else {\n                throw\
    \ new RuntimeException(\"Unknown note: \" + note_string)\n            }\n    \
    \    }\n        def parseDuration(note_string : String) : Long {\n           \
    \ if (note_string == \"o\") {\n                return 4l\n            } else if\
    \ (note_string == \"o|\") {\n                return 2l\n            } else if\
    \ (note_string == \".|\") {\n                return 1l\n            } else {\n\
    \                throw new RuntimeException(\"Unknown note: \" + note_string)\n\
    \            }\n        }\n        def parseMusic(note_string : String) : List[Long]\
    \ {\n            var result = List[Long]()\n            var note = parseNote(note_string)\n\
    \            var duration = parseDuration(note_string)\n            for (i <-\
    \ 0 until note) {\n                result = result.append(duration)\n        \
    \    }\n            return result\n        }\n        return parseMusic(music_string)",
  "        val notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\")).map(_.toLong).toList\n        val result = beats.map(b => b.toLong)\n\
    \        return result", "        val music_list = music_string.split(\" \")\n\
    \        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.equals(\".\"))\
    \ {\n                beats.append(1l)\n            } else if (note.equals(\"o\"\
    )) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            } else {\n           \
    \     throw new IllegalArgumentException(\"Invalid note: \" + note)\n        \
    \    }\n        }\n        return beats", "        def parseNote(note_string :\
    \ String) : Long = {\n            if note_string.contains(\".\") {\n         \
    \       return (note_string.replace(\".\", \"\")).toLong\n            } else {\n\
    \                return (note_string.replace(\"o\", \"\")).toLong\n          \
    \  }\n        }\n        def parseDuration(note_string : String) : Long = {\n\
    \            if note_string.contains(\"|\") {\n                return (note_string.replace(\"\
    |\", \"\")).toLong\n            } else {\n                return (note_string.replace(\"\
    o\", \"\")).toLong\n            }\n        }\n        def parseBeat(note_string\
    \ : String) : Long = {\n            if note_string.contains(\".\") {\n       \
    \         return (note_string.replace(\".\", \"\")).toLong\n            } else\
    \ {\n                return (note_string.replace(\"o\", \"\")).toLong\n      \
    \      }\n        }\n        def parseMusic(note_string : String) : List[Long]\
    \ = {\n            if note_string.contains(\".\") {\n                return List(parseNote(note_string.replace(\"\
    .\", \"\")), parseDuration(note_string.replace(\".\", \"\")), parseBeat(note_string.replace(\"\
    .\", \"\")))\n            } else {\n                return List(parseNote(note_string.replace(\"\
    o\", \"\")), parseDuration(note_string.replace(\"o\", \"\")), parseBeat(note_string.replace(\"\
    o\", \"\")))\n            }\n        }\n        def parseMusic(note_string : String)\
    \ : List[Long] = {\n            if note_string.contains(\".\") {\n           \
    \     return List(parseNote(note_string.replace(\".\", \"\")), parseDuration(note_string.replace(\"\
    .\", \"\")), parseBeat(note_string.replace(\".\", \"\")))\n            } else\
    \ {\n                return List(parseNote(note_string.replace(\"o\", \"\")),\
    \ parseDuration(note_string.replace(\"o\", \"\")), parseBeat(note_string.replace(\"\
    o\", \"\")))\n            }\n        }\n        def parseMusic(note_string : String)\
    \ : List[Long] = {\n            if note_string.contains(\".\") {\n           \
    \     ", "        val music_list = scala.collection.JavaConversions.asScalaBuffer(List.of(music_string.split(\"\
    \ \")))\n        val music_string_list = scala.collection.JavaConversions.asScalaBuffer(List.of(music_string.split(\"\
    \ \")))\n        val music_list_length = music_list.length()\n        val music_string_list_length\
    \ = music_string_list.length()\n        val music_list_iterator = scala.collection.JavaConversions.asScalaIterator(music_list.iterator())\n\
    \        val music_string_list_iterator = scala.collection.JavaConversions.asScalaIterator(music_string_list.iterator())\n\
    \        val music_list_iterator_length = music_list_iterator.length()\n     \
    \   val music_string_list_iterator_length = music_string_list_iterator.length()\n\
    \        val music_list_iterator_index = 0\n        val music_string_list_iterator_index\
    \ = 0\n        val music_list_iterator_index_max = music_list_iterator_length\
    \ - 1\n        val music_string_list_iterator_index_max = music_string_list_iterator_length\
    \ - 1\n        val music_list_iterator_index_min = 0\n        val music_string_list_iterator_index_min\
    \ = 0\n        val music_list_iterator_index_min_max = music_list_iterator_index_max\
    \ - 1\n        val music_string_list_iterator_index_min_max = music_string_list_iterator_index_max\
    \ - 1\n        val music_list_iterator_index_min_min = 0\n        val music_string_list_iterator_index_min_min\
    \ = 0\n        val music_list_iterator_index_min_min_max = music_list_iterator_index_min_max\
    \ - 1\n        val music_string_list_iterator_index_min_min_max = music_string_list_iterator_index_min_max\
    \ - 1\n        val music_list_iterator_index_min_min_min = 0\n        val music_string_list_iterator_index_min_min_min\
    \ = 0\n        val music_list_iterator_index_", "        val music_list = scala.collection.JavaConversions.asScalaBuffer(Arrays.asList(music_string.split(\"\
    \ \")))\n        val result = mutable.List[Long]()\n        for (i <- 0 until\
    \ music_list.length) {\n            val note = music_list.get(i)\n           \
    \ if (note.equals(\".\")) {\n                result.append(1l)\n            }\
    \ else if (note.equals(\"|\")) {\n                result.append(2l)\n        \
    \    } else if (note.equals(\"o\")) {\n                result.append(4l)\n   \
    \         } else {\n                result.append(0l)\n            }\n       \
    \ }\n        return result", "        val notes = music_string.split(\" \")\n\
    \        val beats = notes.map(note -> {\n            val note_parts = note.split(\"\
    |\")\n            val note_len = note_parts.length\n            val note_len_int\
    \ = note_len.toInt\n            val note_len_long = note_len_int.toLong\n    \
    \        return note_len_long\n        }).toList\n        val beats_list = beats.map(beat\
    \ -> beat.toLong).toList\n        return beats_list", "        val music_list\
    \ = scala.collection.JavaConversions.asJavaList(music_string.split(\" \"))\n \
    \       val result = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.equals(\".\"))\
    \ {\n                result.append(1l)\n            } else if (note.equals(\"\
    o\")) {\n                result.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                result.append(2l)\n            } else {\n          \
    \      result.append(0l)\n            }\n        }\n        return result", " \
    \       val music_list = List.ofAll(music_string.split(\" \"))\n        val beats\
    \ = List.ofAll(music_list.map(Problem.parseMusic_).toJavaList)\n        return\
    \ beats\n    }\n\n    // Parses one note from the music string.\n    // Here is\
    \ a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note,\
    \ lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic_(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    // (Long(4l.toLong), Long(2l.toLong), Long(1l.toLong),\
    \ Long(2l.toLong), Long(2l.toLong), Long(1l.toLong), Long(1l.toLong), Long(1l.toLong),\
    \ Long(1l.toLong), Long(4l.toLong), Long(4l.toLong))\n    def parseMusic_ (note\
    \ : String) : Long = {\n        val note_list = List.ofAll(note.split(\"\\\\|\"\
    ))\n        val note_duration = note_list.map(Problem.parseMusic_).toJavaList\n\
    \        return note_duration.reduce(0l)", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string == \"o\" {\n              \
    \  return 4l\n            } else if note_string == \"o|\" {\n                return\
    \ 2l\n            } else if note_string == \".|\" {\n                return 1l\n\
    \            } else {\n                throw new RuntimeException(\"Unknown note:\
    \ \" + note_string)\n            }\n        }\n        def parseBeat(beat_string\
    \ : String) : Long = {\n            if beat_string == \"o\" {\n              \
    \  return 4l\n            } else if beat_string == \"o|\" {\n                return\
    \ 2l\n            } else if beat_string == \".|\" {\n                return 1l\n\
    \            } else {\n                throw new RuntimeException(\"Unknown beat:\
    \ \" + beat_string)\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var beat_counts = mutable.List[Long]()\n\
    \            for (i <- 0 until music_string.length) {\n                var note_count\
    \ = parseNote(music_string[i])\n                var beat_count = parseBeat(music_string[i\
    \ + 1])\n                beat_counts = beat_counts.append(beat_count)\n      \
    \          i += 2\n            }\n            return beat_counts\n        }\n\
    \        return parseMusic(music_string)", "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            if (music_list(i).equals(\".\")) {\n                beats.append(0l)\n\
    \            } else if (music_list(i).equals(\"o\")) {\n                beats.append(4l)\n\
    \            } else if (music_list(i).equals(\"o|\")) {\n                beats.append(2l)\n\
    \            } else {\n                beats.append(1l)\n            }\n     \
    \   }\n        return beats", "        val music_list = scala.collection.JavaConversions.asScalaBuffer(Arrays.asList(music_string.split(\"\
    \ \")))\n        val music_seq = scala.collection.mutable.Buffer[String]()\n \
    \       for (i <- 0 until music_list.length) {\n            if (music_list(i).equals(\"\
    .\")) {\n                music_seq += music_list(i)\n            } else {\n  \
    \              music_seq += music_list(i) + \" \"\n            }\n        }\n\
    \        val music_seq_list = scala.collection.JavaConversions.asScalaBuffer(music_seq.toList())\n\
    \        val music_seq_seq = scala.collection.mutable.Buffer[String]()\n     \
    \   for (i <- 0 until music_seq_list.length) {\n            if (music_seq_list(i).equals(\"\
    .\")) {\n                music_seq_seq += music_seq_list(i)\n            } else\
    \ {\n                music_seq_seq += music_seq_list(i) + \" \"\n            }\n\
    \        }\n        val music_seq_seq_list = scala.collection.JavaConversions.asScalaBuffer(music_seq_seq.toList())\n\
    \        val music_seq_seq_seq = scala.collection.mutable.Buffer[String]()\n \
    \       for (i <- 0 until music_seq_seq_list.length) {\n            if (music_seq_seq_list(i).equals(\"\
    .\")) {\n                music_seq_seq_seq += music_seq_seq_list(i)\n        \
    \    } else {\n                music_seq_seq_seq += music_seq_seq_list(i) + \"\
    \ \"\n            }\n        }\n        val music_seq_seq_seq_list = scala.collection.JavaConversions.asScalaBuffer(music_seq_seq_seq.toList())\n\
    \        val music_seq_seq_seq_seq = scala.collection.mutable.Buffer[String]()\n\
    \        for (i <- 0 until music_seq_seq_seq_list.length) {\n            if (music_seq_seq_seq_list(i).equals(\"\
    .\"", "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val result = mutable.List.empty[Long]\n        for (i <- 0 until\
    \ music_list.length) {\n            val note = music_list.get(i)\n           \
    \ if (note.equals(\".\")) {\n                result = result.append(1l)\n    \
    \        } else if (note.equals(\"o\")) {\n                result = result.append(4l)\n\
    \            } else if (note.equals(\"o|\")) {\n                result = result.append(2l)\n\
    \            } else {\n                result = result.append(0l)\n          \
    \  }\n        }\n        return result", "        def parseNote(note_string :\
    \ String) : Long = {\n            if note_string.equals(\".\") {\n           \
    \     return 0l\n            } else if note_string.equals(\"o\") {\n         \
    \       return 4l\n            } else if note_string.equals(\"o|\") {\n      \
    \          return 2l\n            } else {\n                return 1l\n      \
    \      }\n        }\n        def parseDuration(note_string : String) : Long =\
    \ {\n            if note_string.equals(\".\") {\n                return 0l\n \
    \           } else if note_string.equals(\"o\") {\n                return 4l\n\
    \            } else if note_string.equals(\"o|\") {\n                return 2l\n\
    \            } else {\n                return 1l\n            }\n        }\n \
    \       def parseMusic(note_string : String) : List[Long] = {\n            def\
    \ parseNote(note_string : String) : Long = {\n                if note_string.equals(\"\
    .\") {\n                    return 0l\n                } else if note_string.equals(\"\
    o\") {\n                    return 4l\n                } else if note_string.equals(\"\
    o|\") {\n                    return 2l\n                } else {\n           \
    \         return 1l\n                }\n            }\n            def parseDuration(note_string\
    \ : String) : Long = {\n                if note_string.equals(\".\") {\n     \
    \               return 0l\n                } else if note_string.equals(\"o\"\
    ) {\n                    return 4l\n                } else if note_string.equals(\"\
    o|\") {\n                    return 2l\n                } else {\n           \
    \         return 1l\n                }\n            }\n            def parseMusic(note_string\
    \ : String) : List[Long] = {\n                def parseNote(note_string : String)\
    \ : Long = {\n                    if note_string.equals(\".\") {\n           \
    \             return 0l\n                    } else if note_string.equals(\"o\"\
    ) {\n                        return 4l\n                    } else if note_string.equals(\"\
    o|\") {\n                        return 2l\n                    } else {\n   \
    \                     return 1l\n                    }\n                }\n  \
    \              def parseDuration(note_string : String) : Long = {\n          \
    \          if note_string.equals", "        def parseNote(note_string : String)\
    \ : Long = {\n            if note_string == \"o\" {\n                return 4l\n\
    \            } else if note_string == \"o|\" {\n                return 2l\n  \
    \          } else if note_string == \".|\" {\n                return 1l\n    \
    \        } else {\n                throw new RuntimeException(\"Invalid note string:\
    \ \" + note_string)\n            }\n        }\n        def parseBeat(beat_string\
    \ : String) : Long = {\n            if beat_string == \".\" {\n              \
    \  return 1l\n            } else if beat_string == \"o\" {\n                return\
    \ 4l\n            } else if beat_string == \"o|\" {\n                return 2l\n\
    \            } else {\n                throw new RuntimeException(\"Invalid beat\
    \ string: \" + beat_string)\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var beat_counts = mutable.List[Long]()\n\
    \            var beat_index = 0\n            var note_index = 0\n            for(i\
    \ <- 0 until music_string.length) {\n                if music_string[i] == \"\
    .\" {\n                    beat_counts.append(parseBeat(music_string[beat_index:i]))\n\
    \                    beat_index = i + 1\n                } else if music_string[i]\
    \ == \"o\" {\n                    beat_counts.append(parseBeat(music_string[beat_index:i]))\n\
    \                    beat_counts.append(parseBeat(music_string[i+1:i+4]))\n  \
    \                  beat_index = i + 4\n                } else if music_string[i]\
    \ == \"o|\" {\n                    beat_counts.append(parseBeat(music_string[beat_index:i]))\n\
    \                    beat_counts.append(parseBeat(music_string[i+1:i+2]))\n  \
    \                  beat_index = i + 2\n                }\n            }\n    \
    \        beat_counts.append(parseBeat(music_string[beat_index:]))\n          \
    \  return beat_counts\n        }\n        return parseMusic(music_string)", " \
    \       val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list.get(i)\n            if (note.equals(\"\
    .\")) {\n                beats.append(1l)\n            } else if (note.equals(\"\
    o\")) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            } else {\n           \
    \     throw new IllegalArgumentException(\"Invalid note: \" + note)\n        \
    \    }\n        }\n        return beats", "        def parseNote(note_string :\
    \ String) : Long = {\n            if note_string.contains(\"o\") {\n         \
    \       return 4l\n            } else if note_string.contains(\"o|\") {\n    \
    \            return 2l\n            } else if note_string.contains(\".|\") {\n\
    \                return 1l\n            } else {\n                return 0l\n\
    \            }\n        }\n        def parseBeat(note_string : String) : Long\
    \ = {\n            if note_string.contains(\"o\") {\n                return 4l\n\
    \            } else if note_string.contains(\"o|\") {\n                return\
    \ 2l\n            } else if note_string.contains(\".|\") {\n                return\
    \ 1l\n            } else {\n                return 0l\n            }\n       \
    \ }\n        def parseMusic(music_string : String) : List[Long] = {\n        \
    \    var beat_list : List[Long] = List[Long]()\n            var note_list : List[Long]\
    \ = List[Long]()\n            var beat_count : Long = 0l\n            var note_count\
    \ : Long = 0l\n            var beat_index : Long = 0l\n            var note_index\
    \ : Long = 0l\n            var beat_string : String = \"\"\n            var note_string\
    \ : String = \"\"\n            for (i <- 0 until music_string.length) {\n    \
    \            if (music_string[i] == \" \") {\n                    if (note_count\
    \ > 0) {\n                        note_list = note_list.append(note_count)\n \
    \                       note_count = 0l\n                    }\n             \
    \       if (beat_count > 0) {\n                        beat_list = beat_list.append(beat_count)\n\
    \                        beat_count = 0l\n                    }\n            \
    \        beat_index = i + 1\n                } else if (music_string[i] == \"\
    .\") {\n                    note_count = note_count + parseNote(note_string)\n\
    \                    note_string = \"\"\n                    note_index = i +\
    \ 1\n                } else if (music_string[i] == \"|\") {\n                \
    \    beat_count = beat_count + parseBeat(beat_string)\n                    beat_string\
    \ = \"\"\n                    beat_index = i", "        val notes = music_string.split(\"\
    \ \")\n        val beats = notes.map(_.trim).map(_.toLong).toList\n        val\
    \ result = beats.map(b -> b.toLong)\n        return result", "        val notes\
    \ = music_string.split(\" \")\n        val beats = notes.map(_.trim).filter(_.nonEmpty).map(_.toLong).toList\n\
    \        val result = beats.map(b => b / 4).toList\n        return result", " \
    \       def parseNote(note_string : String) : Long = {\n            if note_string.contains(\"\
    .\") {\n                return _.toLong(note_string.replace(\".\", \"\"))\n  \
    \          } else {\n                return _.toLong(note_string)\n          \
    \  }\n        }\n        def parseBeat(beat_string : String) : Long = {\n    \
    \        if beat_string.contains(\"|\") {\n                return _.toLong(beat_string.replace(\"\
    |\", \"\"))\n            } else {\n                return _.toLong(beat_string)\n\
    \            }\n        }\n        def parseMusic(music_string : String) : List[Long]\
    \ = {\n            def parseNote(note_string : String) : Long = {\n          \
    \      if note_string.contains(\".\") {\n                    return _.toLong(note_string.replace(\"\
    .\", \"\"))\n                } else {\n                    return _.toLong(note_string)\n\
    \                }\n            }\n            def parseBeat(beat_string : String)\
    \ : Long = {\n                if beat_string.contains(\"|\") {\n             \
    \       return _.toLong(beat_string.replace(\"|\", \"\"))\n                } else\
    \ {\n                    return _.toLong(beat_string)\n                }\n   \
    \         }\n            def parseMusic(music_string : String) : List[Long] =\
    \ {\n                def parseNote(note_string : String) : Long = {\n        \
    \            if note_string.contains(\".\") {\n                        return\
    \ _.toLong(note_string.replace(\".\", \"\"))\n                    } else {\n \
    \                       return _.toLong(note_string)\n                    }\n\
    \                }\n                def parseBeat(beat_string : String) : Long\
    \ = {\n                    if beat_string.contains(\"|\") {\n                \
    \        return _.toLong(beat_string.replace(\"|\", \"\"))\n                 \
    \   } else {\n                        return _.toLong(beat_string)\n         \
    \           }\n                }\n                def parseMusic(music_string\
    \ : String) : List[Long] = {\n                    def parseNote(note_string :\
    \ String) : Long = {\n                        if note_string.contains(\".\") {\n\
    \                            return _.toLong(note_string.replace(\"", "      \
    \  val notes = music_string.split(\" \")\n        val beats = notes.map(note ->\
    \ {\n            val note_parts = note.split(\"|\")\n            val note_length\
    \ = note_parts[0].length()\n            val note_beats = note_parts[0].count(\"\
    .\")\n            val note_beat_length = note_parts[0].replaceAll(\"[o.]\", \"\
    \").length()\n            val note_beats_count = note_beats * note_beat_length\n\
    \            return note_length * note_beats_count\n        }).toList\n      \
    \  val beats_count = beats.map(beat -> beat.toLong).toList\n        return beats_count",
  "        var beat_counts = mutable.List[Long]()\n        var beat_count = 0\n  \
    \      var note_count = 0\n        var note_count_prev = 0\n        var note_count_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev = 0\n        var note_count_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev = 0\n        var note_count_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev = 0\n       \
    \ var note_count_prev_prev_prev_prev_prev_prev_prev_prev = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_",
  "        var result = mutable.List[Long]()\n        var current_note = mutable.List[String]()\n\
    \        var current_duration = mutable.List[String]()\n        var current_duration_count\
    \ = mutable.List[Long]()\n        var current_duration_count_index = mutable.List[Long]()\n\
    \        var current_duration_count_index_index = mutable.List[Long]()\n     \
    \   var current_duration_count_index_index_index = mutable.List[Long]()\n    \
    \    var current_duration_count_index_index_index_index = mutable.List[Long]()\n\
    \        var current_duration_count_index_index_index_index_index = mutable.List[Long]()\n\
    \        var current_duration_count_index_index_index_index_index_index = mutable.List[Long]()\n\
    \        var current_duration_count_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_", "        val music_list = List.of(music_string.split(\"\
    \ \"))\n        val beats = List.of(0l)\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.contains(\".\"\
    )) {\n                val note_list = note.split(\".\")\n                val note_length\
    \ = note_list[1].length()\n                val note_beats = note_length.toLong\
    \ * 4\n                beats = beats.append(note_beats)\n            } else if\
    \ (note.contains(\"|\")) {\n                val note_list = note.split(\"|\")\n\
    \                val note_length = note_list[1].length()\n                val\
    \ note_beats = note_length.toLong * 2\n                beats = beats.append(note_beats)\n\
    \            } else {\n                val note_length = note.length()\n     \
    \           val note_beats = note_length.toLong * 1\n                beats = beats.append(note_beats)\n\
    \            }\n        }\n        return beats", "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val result = mutable.List[Long]()\n        for (i <- 0 until music_list.size())\
    \ {\n            val note = music_list.apply(i)\n            if (note.contains(\"\
    .\")) {\n                result.append(1l.toLong)\n            } else if (note.contains(\"\
    |\")) {\n                result.append(2l.toLong)\n            } else if (note.contains(\"\
    o\")) {\n                result.append(4l.toLong)\n            } else {\n    \
    \            result.append(0l.toLong)\n            }\n        }\n        return\
    \ result", "        val notes = music_string.split(\" \")\n        val result\
    \ = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\")).map(_.toLong).toList\n\
    \        return result", "        var result = mutable.List[Long]()\n        var\
    \ note_count = mutable.List[String]()\n        var note_duration = mutable.List[Long]()\n\
    \        var note_index = mutable.List[Long]()\n        var note_index_count =\
    \ mutable.List[Long]()\n        var note_index_duration = mutable.List[Long]()\n\
    \        var note_index_index = mutable.List[Long]()\n        var note_index_index_count\
    \ = mutable.List[Long]()\n        var note_index_index_duration = mutable.List[Long]()\n\
    \        var note_index_index_index = mutable.List[Long]()\n        var note_index_index_index_count\
    \ = mutable.List[Long]()\n        var note_index_index_index_duration = mutable.List[Long]()\n\
    \        var note_index_index_index_index = mutable.List[Long]()\n        var\
    \ note_index_index_index_index_count = mutable.List[Long]()\n        var note_index_index_index_index_duration\
    \ = mutable.List[Long]()\n        var note_index_index_index_index_index = mutable.List[Long]()\n\
    \        var note_index_index_index_index_index_count = mutable.List[Long]()\n\
    \        var note_index_index_index_index_index_duration = mutable.List[Long]()\n\
    \        var note_index_index_index_index_index_index = mutable.List[Long]()\n\
    \        var note_index_index_index_index_index_index_count = mutable.List[Long]()\n\
    \        var note_index_index_index_index_index_index_duration = mutable.List[Long]()\n\
    \        var note_index_index_index_index_index_index_index = mutable.List[Long]()\n\
    \        var note_index_index_index_index_index_index_index_count = mutable.List[Long]()\n\
    \        var note_index_index_index_index_index_index_index_duration = mutable.List[Long]()\n",
  "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.equals(\".\"))\
    \ {\n                beats.append(1l)\n            } else if (note.equals(\"o\"\
    )) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            } else {\n           \
    \     throw new IllegalArgumentException(\"Invalid note: \" + note)\n        \
    \    }\n        }\n        return beats", "        def parseNote(note_string :\
    \ String) : Long = {\n            if note_string.length() == 0 {\n           \
    \     return 0l\n            }\n            if note_string.charAt(0) == 'o' {\n\
    \                return 4l\n            }\n            if note_string.charAt(0)\
    \ == '.' {\n                return 1l\n            }\n            if note_string.charAt(0)\
    \ == '|' {\n                return 2l\n            }\n            return 0l\n\
    \        }\n        def parseDuration(note_string : String) : Long = {\n     \
    \       if note_string.length() == 0 {\n                return 0l\n          \
    \  }\n            if note_string.charAt(0) == 'o' {\n                return 4l\n\
    \            }\n            if note_string.charAt(0) == '.' {\n              \
    \  return 1l\n            }\n            if note_string.charAt(0) == '|' {\n \
    \               return 2l\n            }\n            return 0l\n        }\n \
    \       def parseMusic(note_string : String) : List[Long] = {\n            if\
    \ note_string.length() == 0 {\n                return List[Long]()\n         \
    \   }\n            if note_string.charAt(0) == 'o' {\n                return List[Long](parseDuration(note_string.substring(1)),\
    \ parseDuration(note_string.substring(1)))\n            }\n            if note_string.charAt(0)\
    \ == '.' {\n                return List[Long](parseDuration(note_string.substring(1)))\n\
    \            }\n            if note_string.charAt(0) == '|' {\n              \
    \  return List[Long](parseDuration(note_string.substring(1)))\n            }\n\
    \            return List[Long](parseDuration(note_string))\n        }\n      \
    \  return List[Long](parseNote(music_string.substring(0, music_string.length()\
    \ - 1)),\n                          parseMusic(music_string.substring(music_string.length()\
    \ - 1)))", "        var notes = music_string.split(\" \")\n        var beats =\
    \ List[Long]()\n        for (i <- 0 until notes.length) {\n            var note\
    \ = notes[i]\n            var note_count = 0\n            var note_length = 0\n\
    \            if (note.contains(\"o\")) {\n                note_count = 4\n   \
    \             note_length = 4\n            } else if (note.contains(\"o|\")) {\n\
    \                note_count = 2\n                note_length = 2\n           \
    \ } else if (note.contains(\".|\")) {\n                note_count = 1\n      \
    \          note_length = 1\n            }\n            beats = beats.append(note_count\
    \ * note_length)\n        }\n        return beats", "        def parseNote(note_string\
    \ : String) : Long = {\n            if (note_string.length() == 0) {\n       \
    \         return 0l\n            }\n            if (note_string.charAt(0) == '.')\
    \ {\n                return 1l\n            }\n            if (note_string.charAt(0)\
    \ == '|') {\n                return 2l\n            }\n            if (note_string.charAt(0)\
    \ == 'o') {\n                return 4l\n            }\n            return 0l\n\
    \        }\n        def parseDuration(note_string : String) : Long = {\n     \
    \       if (note_string.length() == 0) {\n                return 0l\n        \
    \    }\n            if (note_string.charAt(0) == '.') {\n                return\
    \ 1l\n            }\n            if (note_string.charAt(0) == '|') {\n       \
    \         return 2l\n            }\n            if (note_string.charAt(0) == 'o')\
    \ {\n                return 4l\n            }\n            return 0l\n       \
    \ }\n        def parseBeat(note_string : String) : Long = {\n            if (note_string.length()\
    \ == 0) {\n                return 0l\n            }\n            if (note_string.charAt(0)\
    \ == '.') {\n                return 1l\n            }\n            if (note_string.charAt(0)\
    \ == '|') {\n                return 2l\n            }\n            if (note_string.charAt(0)\
    \ == 'o') {\n                return 4l\n            }\n            return 0l\n\
    \        }\n        def parseMusic(note_string : String) : List[Long] = {\n  \
    \          var beat_count : Long = 0l\n            var note_count : Long = 0l\n\
    \            var note_duration : Long = 0l\n            var note_beat : Long =\
    \ 0l\n            var note_string_copy : String = note_string\n            while\
    \ (note_string_copy.length() > 0) {\n                note_count += 1\n       \
    \         note_duration = parseDuration(note_string_copy)\n                note_beat\
    \ = parseBeat(note_string_copy)\n                beat_count += note_beat\n   \
    \             ", "        var beat_counts = mutable.List[Long]()\n        var\
    \ beat_count = 0\n        var note_count = 0\n        var note_count_prev = 0\n\
    \        var note_count_prev_prev = 0\n        var note_count_prev_prev_prev =\
    \ 0\n        var note_count_prev_prev_prev_prev = 0\n        var note_count_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  \
    \      var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n     \
    \   var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n   \
    \     var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev =\
    \ 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_",
  "        def parseNote(note_string : String) : Long = {\n            if note_string\
    \ == \"o\" {\n                return 4l\n            } else if note_string ==\
    \ \"o|\" {\n                return 2l\n            } else if note_string == \"\
    .|\" {\n                return 1l\n            } else {\n                return\
    \ 0l\n            }\n        }\n        def parseBeat(beat_string : String) :\
    \ Long = {\n            if beat_string == \"o\" {\n                return 4l\n\
    \            } else if beat_string == \"o|\" {\n                return 2l\n  \
    \          } else if beat_string == \".|\" {\n                return 1l\n    \
    \        } else {\n                return 0l\n            }\n        }\n     \
    \   def parseMusic(music_string : String) : List[Long] = {\n            var beat_counts\
    \ : List[Long] = List.empty()\n            var beat_count : Long = 0l\n      \
    \      var note_count : Long = 0l\n            var note_count_prev : Long = 0l\n\
    \            var note_count_prev_prev : Long = 0l\n            for(i <- 0 until\
    \ music_string.length) {\n                var note_count_prev_prev_prev : Long\
    \ = note_count_prev_prev\n                var note_count_prev : Long = note_count\n\
    \                var note_count : Long = parseNote(music_string[i])\n        \
    \        if note_count > 0 {\n                    beat_count += note_count\n \
    \                   note_count_prev = note_count\n                }\n        \
    \        if note_count_prev_prev_prev > 0 {\n                    beat_count +=\
    \ note_count_prev_prev_prev\n                    note_count_prev_prev = note_count_prev\n\
    \                }\n                if beat_count > beat_counts.last {\n     \
    \               beat_counts = beat_counts.append(beat_count)\n               \
    \ }\n            }\n            return beat_counts\n        }\n        return\
    \ parseMusic(music_string)", "        def parseNote(note_string : String) : Long\
    \ = {\n            if note_string.contains(\".\") {\n                def parseQuater(note_string\
    \ : String) : Long = {\n                    if note_string.contains(\"|\") {\n\
    \                        return 1l\n                    } else {\n           \
    \             return 0l\n                    }\n                }\n          \
    \      return 4l * parseQuater(note_string)\n            } else if note_string.contains(\"\
    |\") {\n                return 2l\n            } else {\n                return\
    \ 1l\n            }\n        }\n        return List(music_string.split(\" \").map(note_string\
    \ => parseNote(note_string)).toSeq.toList)", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string.equals(\".\") {\n         \
    \       return 0l\n            } else if note_string.equals(\"o\") {\n       \
    \         return 4l\n            } else if note_string.equals(\"o|\") {\n    \
    \            return 2l\n            } else {\n                return 1l\n    \
    \        }\n        }\n        def parseMusic(note_list : List[String]) : List[Long]\
    \ = {\n            var beats = List[Long]()\n            for (note_string : note_list)\
    \ {\n                beats = beats.append(parseNote(note_string))\n          \
    \  }\n            return beats\n        }\n        return parseMusic(music_string.split(\"\
    \ \"))", "        def parseNote(note_string : String) : Long = {\n           \
    \ if (note_string.length() == 1) {\n                return 1l\n            } else\
    \ if (note_string.charAt(1) == '|') {\n                return 2l\n           \
    \ } else if (note_string.charAt(1) == '.') {\n                return 4l\n    \
    \        } else {\n                return 1l\n            }\n        }\n     \
    \   def parseDuration(note_string : String) : Long = {\n            if (note_string.charAt(0)\
    \ == 'o') {\n                return 4l\n            } else if (note_string.charAt(0)\
    \ == 'o') {\n                return 2l\n            } else if (note_string.charAt(0)\
    \ == '.') {\n                return 1l\n            } else {\n               \
    \ return 1l\n            }\n        }\n        def parseBeat(note_string : String)\
    \ : Long = {\n            return note_string.length() / 2\n        }\n       \
    \ def parseMusic(note_string : String) : List[Long] = {\n            var notes\
    \ = note_string.split(\" \")\n            var beats = notes.map(parseNote).toSeq.toList\n\
    \            var durations = notes.map(parseDuration).toSeq.toList\n         \
    \   var beats_and_durations = zip(beats, durations).toSeq.toList\n           \
    \ var beats_and_durations_and_beat = zip(beats_and_durations, beats).toSeq.toList\n\
    \            var beats_and_durations_and_beat_and_beat = zip(beats_and_durations_and_beat,\
    \ beats_and_durations).toSeq.toList\n            var beats_and_durations_and_beat_and_beat_and_beat\
    \ = zip(beats_and_durations_and_beat_and_beat, beats_and_durations_and_beat).toSeq.toList\n\
    \            var beats_and_durations_and_beat_and_beat_and_beat_and_beat = zip(beats_and_durations_and_beat_and_beat_and_beat,\
    \ beats_", "        def parseNote(note_string : String) : Long = {\n         \
    \   if (note_string == \".\") {\n                return 0l\n            } else\
    \ if (note_string == \"o\") {\n                return 4l\n            } else if\
    \ (note_string == \"o|\") {\n                return 2l\n            } else {\n\
    \                throw new IllegalArgumentException(\"Invalid note: \" + note_string)\n\
    \            }\n        }\n        def parseBeat(beat_string : String) : Long\
    \ = {\n            if (beat_string == \".\") {\n                return 0l\n  \
    \          } else if (beat_string == \"o\") {\n                return 1l\n   \
    \         } else if (beat_string == \"o|\") {\n                return 2l\n   \
    \         } else {\n                throw new IllegalArgumentException(\"Invalid\
    \ beat: \" + beat_string)\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var result = List[Long]()\n        \
    \    var beat_count = 0\n            var note_count = 0\n            var note_index\
    \ = 0\n            var beat_index = 0\n            for (i <- 0 until music_string.length)\
    \ {\n                if (music_string[i] == '.') {\n                    result\
    \ = append(result, note_count)\n                    note_count = 0\n         \
    \           beat_count += 1\n                    note_index = i + 1\n        \
    \            beat_index = 0\n                } else if (music_string[i] == 'o')\
    \ {\n                    note_count += 1\n                    beat_count += 1\n\
    \                    beat_index = i + 1\n                } else if (music_string[i]\
    \ == 'o|') {\n                    note_count += 1\n                    beat_count\
    \ += 2\n                    beat_index = i + 1\n                }\n          \
    \  }\n            result = append(result, note_count)\n            return result\n\
    \        }\n        return parseMusic(music_string)", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string.equals(\".\") {\n         \
    \       return 0l\n            } else if note_string.equals(\"o\") {\n       \
    \         return 4l\n            } else if note_string.equals(\"o|\") {\n    \
    \            return 2l\n            } else {\n                return 1l\n    \
    \        }\n        }\n        def parseDuration(note_string : String) : Long\
    \ = {\n            if note_string.equals(\".\") {\n                return 0l\n\
    \            } else if note_string.equals(\"o\") {\n                return 4l\n\
    \            } else if note_string.equals(\"o|\") {\n                return 2l\n\
    \            } else {\n                return 1l\n            }\n        }\n \
    \       def parseMusic(note_string : String) : List[Long] = {\n            def\
    \ parseNote(note_string : String) : Long = {\n                if note_string.equals(\"\
    .\") {\n                    return 0l\n                } else if note_string.equals(\"\
    o\") {\n                    return 4l\n                } else if note_string.equals(\"\
    o|\") {\n                    return 2l\n                } else {\n           \
    \         return 1l\n                }\n            }\n            def parseDuration(note_string\
    \ : String) : Long = {\n                if note_string.equals(\".\") {\n     \
    \               return 0l\n                } else if note_string.equals(\"o\"\
    ) {\n                    return 4l\n                } else if note_string.equals(\"\
    o|\") {\n                    return 2l\n                } else {\n           \
    \         return 1l\n                }\n            }\n            def parseMusic(note_string\
    \ : String) : List[Long] = {\n                def parseNote(note_string : String)\
    \ : Long = {\n                    if note_string.equals(\".\") {\n           \
    \             return 0l\n                    } else if note_string.equals(\"o\"\
    ) {\n                        return 4l\n                    } else if note_string.equals(\"\
    o|\") {\n                        return 2l\n                    } else {\n   \
    \                     return 1l\n                    }\n                }\n  \
    \              def parseDuration(note_string : String) : Long = {\n          \
    \          if note_string.equals", "        var result = mutable.List[Long]()\n\
    \        var current_note = mutable.List[String]()\n        var current_duration\
    \ = mutable.List[Long]()\n        var current_duration_count = mutable.List[Long]()\n\
    \        var current_duration_count_count = mutable.List[Long]()\n        var\
    \ current_duration_count_count_count = mutable.List[Long]()\n        var current_duration_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_", "        val music_list = scala.collection.JavaConversions.asScalaBuffer(music_string.split(\"\
    \ \")).toList\n        val beats = mutable.List[Long]()\n        for (i <- 0 until\
    \ music_list.size) {\n            val note = music_list(i)\n            if (note.contains(\"\
    o\")) {\n                beats.append(4l)\n            } else if (note.contains(\"\
    o|\")) {\n                beats.append(2l)\n            } else if (note.contains(\"\
    .|\")) {\n                beats.append(1l)\n            } else {\n           \
    \     beats.append(0l)\n            }\n        }\n        return beats", "   \
    \     val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            if (music_list[i].equals(\".\")) {\n                beats.append(1l)\n\
    \            } else if (music_list[i].equals(\"o\")) {\n                beats.append(4l)\n\
    \            } else if (music_list[i].equals(\"o|\")) {\n                beats.append(2l)\n\
    \            } else {\n                beats.append(0l)\n            }\n     \
    \   }\n        return beats", "        val notes = music_string.split(\" \")\n\
    \        val beats = notes.map(_.trim).map(_.replaceAll(\"[^0-9]\", \"\")).map(_.toLong).toList\n\
    \        val result = beats.map(b -> b / 4).toList\n        return result", " \
    \       val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.equals(\".\"))\
    \ {\n                beats.append(1l)\n            } else if (note.equals(\"o\"\
    )) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            } else {\n           \
    \     throw new RuntimeException(\"Invalid note: \" + note)\n            }\n \
    \       }\n        return beats.toSeq().toList()", "        var result = mutable.List[Long]()\n\
    \        var current_note = \"\"\n        var current_duration = 0\n        var\
    \ current_duration_count = 0\n        var current_duration_count_start = 0\n \
    \       var current_duration_count_end = 0\n        var current_duration_count_start_end\
    \ = 0\n        var current_duration_count_start_end_end = 0\n        var current_duration_count_start_end_end_end\
    \ = 0\n        var current_duration_count_start_end_end_end_end = 0\n        var\
    \ current_duration_count_start_end_end_end_end_end = 0\n        var current_duration_count_start_end_end_end_end_end_end\
    \ = 0\n        var current_duration_count_start_end_end_end_end_end_end_end =\
    \ 0\n        var current_duration_count_start_end_end_end_end_end_end_end_end\
    \ = 0\n        var current_duration_count_start_end_end_end_end_end_end_end_end_end\
    \ = 0\n        var current_duration_count_start_end_end_end_end_end_end_end_end_end_end\
    \ = 0\n        var current_duration_count_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0\n        var current_duration_count_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0\n        var current_duration_count_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0\n        var current_duration_count_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0\n        var current_duration_count_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0\n        var current_duration_count_start_end_end_end_end_end_end_end_end_end_end",
  "        var result = mutable.List[Long]()\n        var current_note = mutable.StringBuilder()\n\
    \        var current_duration = mutable.StringBuilder()\n        var current_duration_count\
    \ = 0\n        var current_duration_value = 0\n        var current_duration_value_count\
    \ = 0\n        var current_duration_value_value = 0\n        var current_duration_value_value_count\
    \ = 0\n        var current_duration_value_value_value = 0\n        var current_duration_value_value_value_count\
    \ = 0\n        var current_duration_value_value_value_value = 0\n        var current_duration_value_value_value_value_count\
    \ = 0\n        var current_duration_value_value_value_value_value = 0\n      \
    \  var current_duration_value_value_value_value_value_count = 0\n        var current_duration_value_value_value_value_value_value\
    \ = 0\n        var current_duration_value_value_value_value_value_value_count\
    \ = 0\n        var current_duration_value_value_value_value_value_value_value\
    \ = 0\n        var current_duration_value_value_value_value_value_value_value_count\
    \ = 0\n        var current_duration_value_value_value_value_value_value_value_value\
    \ = 0\n        var current_duration_value_value_value_value_value_value_value_value_count\
    \ = 0\n        var current_duration_value_value_value_value_value_value_value_value_value\
    \ = 0\n        var current_duration_value_value_value_value_value_value_value_value_value_count\
    \ = 0\n        var current_duration_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        var current_duration_value_value_value_value_value_value_value_value_value_value_count\
    \ = 0\n        var current_duration_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        var current_duration_value_value_value_value_value_value_value_value_value_value_value_count\
    \ = 0\n        ", "        val notes = music_string.split(\" \")\n        val\
    \ beats = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\"))\n        val\
    \ beats_list = beats.map(Long.parseLong).toList\n        return beats_list", " \
    \       val notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).filter(_.nonEmpty).map(_.toLong).toList\n\
    \        val result = beats.map(_.toLong).toList\n        return result", "  \
    \      val notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\"))\n        val result = beats.map(noteToBeats).reduce(_.add)\n\
    \        return result\n    }\n\n    // Converts note to number of beats\n   \
    \ def noteToBeats(note : String) : Long = {\n        val note_parts = note.split(\"\
    .\")\n        val note_part_1 = note_parts[0]\n        val note_part_2 = note_parts.length\
    \ > 1 ? note_parts[1] : \"\"\n        val note_part_3 = note_parts.length > 2\
    \ ? note_parts[2] : \"\"\n        val note_part_4 = note_parts.length > 3 ? note_parts[3]\
    \ : \"\"\n        val note_part_5 = note_parts.length > 4 ? note_parts[4] : \"\
    \"\n        val note_part_6 = note_parts.length > 5 ? note_parts[5] : \"\"\n \
    \       val note_part_7 = note_parts.length > 6 ? note_parts[6] : \"\"\n     \
    \   val note_part_8 = note_parts.length > 7 ? note_parts[7] : \"\"\n        val\
    \ note_part_9 = note_parts.length > 8 ? note_parts[8] : \"\"\n        val note_part_10\
    \ = note_parts.length > 9 ? note_parts[9] : \"\"\n        val note_part_11 = note_parts.length\
    \ > 10 ? note_parts[10] : \"\"\n        val note_part_12 = note_parts.length >\
    \ 11 ? note_parts[11] : \"\"\n        val note_part_13 = note_parts.length > 12\
    \ ? note_parts[12] : \"\"\n        val note_part_14 = note_parts.length > 13 ?\
    \ note_parts[13] : \"\"\n        val note_part_15 = note_parts.length > 14 ? note_parts[14]\
    \ : \"\"\n        val note_part_16 = note_parts.length > 15 ? note_parts[15] :\
    \ \"\"\n        val note_part_17 = note_parts.length > 16 ?", "        var notes\
    \ = scala.collection.immutable.List.empty\n        for (i <- 0 until music_string.length)\
    \ {\n            var note = music_string.charAt(i)\n            if (note == 'o')\
    \ {\n                notes = notes.append(4l)\n            } else if (note ==\
    \ 'o|') {\n                notes = notes.append(2l)\n            } else if (note\
    \ == '.') {\n                notes = notes.append(1l)\n            }\n       \
    \ }\n        return notes.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\"\
    )).map(_.toLong).toList\n        val result = beats.map(b -> b / 4).toList\n \
    \       return result", "        def parseNote(note_string : String) : Long =\
    \ {\n            if note_string.contains(\"o\") {\n                return 4L\n\
    \            } else if note_string.contains(\"o|\") {\n                return\
    \ 2L\n            } else if note_string.contains(\".|\") {\n                return\
    \ 1L\n            } else {\n                return 0L\n            }\n       \
    \ }\n        def parseBeat(note_string : String) : Long = {\n            if note_string.contains(\"\
    o\") {\n                return 4L\n            } else if note_string.contains(\"\
    o|\") {\n                return 2L\n            } else if note_string.contains(\"\
    .|\") {\n                return 1L\n            } else {\n                return\
    \ 0L\n            }\n        }\n        def parseMusic(music_string : String)\
    \ : List[Long] = {\n            var beat_counts : List[Long] = List.empty()\n\
    \            var beat_count : Long = 0L\n            var note_count : Long = 0L\n\
    \            var note_count_in_beat : Long = 0L\n            var note_count_in_beat_in_beat\
    \ : Long = 0L\n            var note_count_in_beat_in_beat_in_beat : Long = 0L\n\
    \            var note_count_in_beat_in_beat_in_beat_in_beat : Long = 0L\n    \
    \        var note_count_in_beat_in_beat_in_beat_in_beat_in_beat : Long = 0L\n\
    \            var note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat :\
    \ Long = 0L\n            var note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat\
    \ : Long = 0L\n            var note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat\
    \ : Long = 0L\n            var note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_",
  "        val notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\")).map(_.toLong).toList\n        val result = beats.map(b -> b.toLong)\n\
    \        return result", "        def parseNote(note_string : String) : Long =\
    \ {\n            if note_string.charAt(0) == 'o' {\n                return 4l\n\
    \            } else if note_string.charAt(0) == 'o|' {\n                return\
    \ 2l\n            } else if note_string.charAt(0) == '.' {\n                return\
    \ 1l\n            } else {\n                return 0l\n            }\n       \
    \ }\n        def parseBeat(beat_string : String) : Long = {\n            if beat_string.charAt(0)\
    \ == 'o' {\n                return 4l\n            } else if beat_string.charAt(0)\
    \ == 'o|' {\n                return 2l\n            } else if beat_string.charAt(0)\
    \ == '.' {\n                return 1l\n            } else {\n                return\
    \ 0l\n            }\n        }\n        def parseMusic(music_string : String)\
    \ : List[Long] = {\n            var beat_counts : List[Long] = List.empty()\n\
    \            var beat_count : Long = 0l\n            var note_count : Long = 0l\n\
    \            var note_count_prev : Long = 0l\n            var note_count_prev_prev\
    \ : Long = 0l\n            var note_count_prev_prev_prev : Long = 0l\n       \
    \     var note_count_prev_prev_prev_prev : Long = 0l\n            var note_count_prev_prev_prev_prev_prev\
    \ : Long = 0l\n            var note_count_prev_prev_prev_prev_prev_prev : Long\
    \ = 0l\n            var note_count_prev_prev_prev_prev_prev_prev_prev : Long =\
    \ 0l\n            var note_count_prev_prev_prev_prev_prev_prev_prev_prev : Long\
    \ = 0l\n            var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ : Long = 0l\n            var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ : Long = 0l\n            var note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ : Long =", "        val notes = music_string.split(\" \")\n        val beats\
    \ = notes.map(note -> {\n            val note_chars = note.split(\"|\")\n    \
    \        val note_length = note_chars.length\n            val note_beats = note_length\
    \ - 1\n            val note_beat_length = note_chars[note_length - 1]\n      \
    \      return note_beat_length.toLong\n        })\n        return beats", "  \
    \      def parseNote(note_string : String) : Long = {\n            if note_string.equals(\"\
    .\") {\n                return 0l\n            } else if note_string.equals(\"\
    o\") {\n                return 4l\n            } else if note_string.equals(\"\
    o|\") {\n                return 2l\n            } else {\n                return\
    \ 1l\n            }\n        }\n        def parseMusic(note_list : List[String])\
    \ : List[Long] = {\n            if note_list.length == 0 {\n                return\
    \ List[Long]()\n            } else {\n                return List[Long](parseNote(note_list[0]),\
    \ parseMusic(note_list[1:]))\n            }\n        }\n        return parseMusic(music_string.split(\"\
    \ \"))", "        val music_list = scala.collection.JavaConversions.asScalaBuffer(List.of(music_string.split(\"\
    \ \")))\n        val music_scala = scala.collection.mutable.Buffer[String]()\n\
    \        for (i <- 0 until music_list.length) {\n            val note = music_list.get(i)\n\
    \            if (note.contains(\".\")) {\n                val note_list = note.split(\"\
    \\\\.\")\n                val note_scala = scala.collection.mutable.Buffer[String]()\n\
    \                for (j <- 0 until note_list.length) {\n                    note_scala.append(note_list[j])\n\
    \                }\n                music_scala.append(note_scala.toList())\n\
    \            } else {\n                music_scala.append(note)\n            }\n\
    \        }\n        val music_scala_list = scala.collection.JavaConversions.asScalaBuffer(music_scala.toList())\n\
    \        val music_list_scala = scala.collection.mutable.Buffer[Long]()\n    \
    \    for (i <- 0 until music_scala_list.length) {\n            val note_scala\
    \ = music_scala_list.get(i)\n            val note_list = note_scala.toList()\n\
    \            val note_list_scala = scala.collection.mutable.Buffer[Long]()\n \
    \           for (j <- 0 until note_list.length) {\n                note_list_scala.append(note_list[j].toLong)\n\
    \            }\n            music_list_scala.append(note_list_scala.toList())\n\
    \        }\n        val music_list_scala_list = scala.collection.JavaConversions.asScalaBuffer(music_list_scala.toList())\n\
    \        val music_list_scala_list_list = scala.collection.JavaConversions.asScalaBuffer(music_list_scala_list.toList())\n\
    \        val music_list_scala_list_list_list = scala.collection.JavaConversions.asScalaBuffer(music_list_scala_list_list.toList())\n",
  "        val notes = music_string.split(\" \")\n        val beats = notes.map(note\
    \ => {\n            val note_str = note.replaceAll(\"[^o|.|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|",
  "        val notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\"))\n        val result = beats.map(_.toLong).toList\n        result",
  "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.equals(\".\"))\
    \ {\n                beats.append(1l)\n            } else if (note.equals(\"o\"\
    )) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            } else {\n           \
    \     throw new IllegalArgumentException(\"Unknown note: \" + note)\n        \
    \    }\n        }\n        return beats", "        var notes = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        var beats = scala.collection.mutable.ListBuffer[Long]()\n    \
    \    for (note_index in notes.size()) {\n            var note = notes.get(note_index)\n\
    \            var note_length = note.length()\n            var note_beats = note_length\
    \ / 4\n            if (note_length % 4 > 0) {\n                note_beats = note_beats\
    \ + 1\n            }\n            beats.append(note_beats.toLong)\n        }\n\
    \        return beats.toList()", "        def parseNote(note_string : String)\
    \ : Long = {\n            if note_string.contains(\"o\") {\n                return\
    \ 4l\n            } else if note_string.contains(\"o|\") {\n                return\
    \ 2l\n            } else if note_string.contains(\".|\") {\n                return\
    \ 1l\n            } else {\n                return 0l\n            }\n       \
    \ }\n        def parseMusic(music_string : String) : List[Long] = {\n        \
    \    var result = List[Long]()\n            var current_note = 0l\n          \
    \  var current_beat = 0l\n            var current_note_count = 0l\n          \
    \  for i in range(0, len(music_string)) {\n                if music_string[i]\
    \ == '.' {\n                    current_note_count = parseNote(music_string[i\
    \ + 1:i + 4])\n                    current_note = current_note + current_note_count\n\
    \                    current_beat = current_beat + current_note_count\n      \
    \              i = i + 4\n                } else if music_string[i] == '|' {\n\
    \                    current_note_count = parseNote(music_string[i + 1:i + 2])\n\
    \                    current_note = current_note + current_note_count\n      \
    \              current_beat = current_beat + current_note_count\n            \
    \        i = i + 2\n                } else {\n                    current_note_count\
    \ = parseNote(music_string[i:i + 1])\n                    current_note = current_note\
    \ + current_note_count\n                    current_beat = current_beat + current_note_count\n\
    \                }\n                if current_note_count > 0l {\n           \
    \         result = result + List[Long](current_beat)\n                    current_beat\
    \ = 0l\n                    current_note = 0l\n                    current_note_count\
    \ = 0l\n                }\n            }\n            return result\n        }\n\
    \        return parseMusic(music_string)", "        val notes = music_string.split(\"\
    \ \")\n        val beats = notes.map(_.trim).map(note -> {\n            val note_length\
    \ = note.length()\n            if (note_length == 1) {\n                return\
    \ 1l\n            } else if (note_length == 2) {\n                return 2l\n\
    \            } else if (note_length == 3) {\n                return 4l\n     \
    \       } else {\n                throw new IllegalArgumentException(\"Invalid\
    \ note length: \" + note_length)\n            }\n        }).toList\n        return\
    \ beats.map(b -> b.toLong)", "        def parseNote(note_string : String) : Long\
    \ = {\n            if note_string.contains(\".\") {\n                return note_string.replace(\"\
    .\", \"\").replace(\"|\", \"\").replace(\"o\", \"\").toLong\n            } else\
    \ {\n                return note_string.replace(\"o\", \"\").replace(\"|\", \"\
    \").toLong\n            }\n        }\n        def parseBeat(beat_string : String)\
    \ : Long = {\n            if beat_string.contains(\".\") {\n                return\
    \ beat_string.replace(\".\", \"\").replace(\"|\", \"\").toLong\n            }\
    \ else {\n                return beat_string.toLong\n            }\n        }\n\
    \        def parseMusic(music_string : String) : List[Long] = {\n            var\
    \ beat_counts = mutable.List[Long]()\n            var beat_count = 0\n       \
    \     var note_count = 0\n            var note_counts = mutable.List[Long]()\n\
    \            var note_counts_count = 0\n            var note_counts_counts = mutable.List[Long]()\n\
    \            var note_counts_counts_count = 0\n            var note_counts_counts_counts\
    \ = mutable.List[Long]()\n            var note_counts_counts_counts_count = 0\n\
    \            for (i <- 0 until music_string.length) {\n                if (music_string[i]\
    \ == \".\") {\n                    beat_counts.append(beat_count)\n          \
    \          beat_count = 0\n                    note_counts_counts_counts_count\
    \ = 0\n                    note_counts_counts_counts_count = 0\n             \
    \       note_counts_counts_counts_count = 0\n                    note_counts_counts_counts_count\
    \ = 0\n                    note_counts_counts_counts_count = 0\n             \
    \       note_counts_counts_counts_count = 0\n                    note_counts_counts_counts_count\
    \ = 0\n                    note_counts_counts_counts_count = 0\n             \
    \       note_counts_counts_counts_count = 0\n                    note_counts_counts_counts_count\
    \ = 0", "        def parseNote(note_string : String) : Long = {\n            if\
    \ note_string.endsWith(\"|\") {\n                return note_string.substring(0,\
    \ note_string.length() - 1).toLong\n            } else {\n                return\
    \ note_string.toLong\n            }\n        }\n        def parseBeat(beat_string\
    \ : String) : Long = {\n            if beat_string.endsWith(\"|\") {\n       \
    \         return beat_string.substring(0, beat_string.length() - 1).toLong\n \
    \           } else {\n                return beat_string.toLong\n            }\n\
    \        }\n        def parseMusic(music_string : String) : List[Long] = {\n \
    \           var beat_counts = mutable.List[Long]()\n            var note_counts\
    \ = mutable.List[Long]()\n            var beat_index = 0\n            var note_index\
    \ = 0\n            for (i <- 0 until music_string.length) {\n                if\
    \ (music_string[i] == '.') {\n                    note_counts = note_counts.append(parseNote(music_string[note_index:i]))\n\
    \                    note_index = i + 1\n                } else if (music_string[i]\
    \ == 'o') {\n                    beat_counts = beat_counts.append(parseBeat(music_string[beat_index:i]))\n\
    \                    beat_index = i + 1\n                }\n            }\n  \
    \          beat_counts = beat_counts.append(parseBeat(music_string[beat_index:music_string.length]))\n\
    \            note_counts = note_counts.append(parseNote(music_string[note_index:music_string.length]))\n\
    \            return (beat_counts, note_counts)\n        }\n        return parseMusic(music_string)",
  "        val notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\")).map(_.toLong).toList\n        val result = beats.map(b -> b.toLong).toList\n\
    \        return result", "        val notes = music_string.split(\" \")\n    \
    \    val beats = notes.map(note -> {\n            val note_parts = note.split(\"\
    |\")\n            val note_len = note_parts.length\n            if (note_len ==\
    \ 1) {\n                return 4l\n            } else if (note_len == 2) {\n \
    \               return 2l\n            } else if (note_len == 3) {\n         \
    \       return 1l\n            } else {\n                throw new IllegalArgumentException(\"\
    Invalid note: \" + note)\n            }\n        })\n        return beats.toList",
  "        val notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\")).map(_.toLong).toList\n        val result = beats.map(b -> b\
    \ / 4).toList\n        return result", "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.equals(\".\"))\
    \ {\n                beats.append(0l)\n            } else if (note.equals(\"o\"\
    )) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            } else {\n           \
    \     throw new IllegalArgumentException(\"Invalid note: \" + note)\n        \
    \    }\n        }\n        return beats", "        var result = mutable.List[Long]()\n\
    \        var current_note = 0\n        var current_duration = 0\n        var current_beat\
    \ = 0\n        var current_measure = 0\n        var current_measure_duration =\
    \ 0\n        var current_measure_beat = 0\n        var current_measure_note =\
    \ 0\n        var current_measure_duration_note = 0\n        var current_measure_duration_note_beat\
    \ = 0\n        var current_measure_duration_note_beat_duration = 0\n        var\
    \ current_measure_duration_note_beat_duration_note = 0\n        var current_measure_duration_note_beat_duration_note_beat\
    \ = 0\n        var current_measure_duration_note_beat_duration_note_beat_duration\
    \ = 0\n        var current_measure_duration_note_beat_duration_note_beat_duration_note\
    \ = 0\n        var current_measure_duration_note_beat_duration_note_beat_duration_note_beat\
    \ = 0\n        var current_measure_duration_note_beat_duration_note_beat_duration_note_beat_duration\
    \ = 0\n        var current_measure_duration_note_beat_duration_note_beat_duration_note_beat_duration_note\
    \ = 0\n        var current_measure_duration_note_beat_duration_note_beat_duration_note_beat_duration_note_beat\
    \ = 0\n        var current_measure_duration_note_beat_duration_note_beat_duration_note_beat_duration_note_beat_duration\
    \ = 0\n        var current_measure_duration_note_beat_duration_note_beat_duration_note_beat_duration_note_beat_duration_note\
    \ = 0\n        var current_measure_duration_note_beat_duration_note_beat_duration_note_beat_duration_note_beat_duration_note_beat\
    \ = 0\n        var current_measure_duration_note_beat_duration_note_beat_duration_note_beat_duration_note_beat_duration_note_beat_duration_note\
    \ = 0\n        var current_measure_duration_note_beat_duration_note_beat_duration_note_beat_duration",
  "        var result = mutable.List[Long]()\n        var note = \"\"\n        var\
    \ beats = 0\n        var beat = 0\n        for(i <- 0 until music_string.length)\
    \ {\n            if(music_string[i] == '.') {\n                note = note + \"\
    .\"\n                beat = beat + 1\n            } else if(music_string[i] ==\
    \ '|') {\n                note = note + \"|\"\n                beat = beat + 1\n\
    \            } else if(music_string[i] == 'o') {\n                note = note\
    \ + \"o\"\n                beats = beats + beat\n                beat = 0\n  \
    \          }\n        }\n        result = result + beats\n        result = result\
    \ + note.toLong\n        return result", "        val notes = music_string.split(\"\
    \ \")\n        val beats = notes.map(_.trim).filter(_.nonEmpty).map(_.toLong).toList\n\
    \        val result = beats.map(b -> b / 4).toList\n        return result", " \
    \       val notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\")).map(_.toLong).toList\n        val result = beats.map(b -> b\
    \ / 4).toList\n        return result", "        val music_list = scala.collection.JavaConversions.asScalaBuffer(music_string.split(\"\
    \ \")).toList\n        val result = mutable.List[Long]()\n        for (i <- 0\
    \ until music_list.size) {\n            val note = music_list.get(i)\n       \
    \     if (note.equals(\".\")) {\n                result.append(1l)\n         \
    \   } else if (note.equals(\"o\")) {\n                result.append(4l)\n    \
    \        } else if (note.equals(\"o|\")) {\n                result.append(2l)\n\
    \            } else {\n                result.append(0l)\n            }\n    \
    \    }\n        return result", "        var result = mutable.List[Long]()\n \
    \       var note_count = 0\n        var note_length = 0\n        var note_beats\
    \ = 0\n        var note_index = 0\n        var note_index_prev = 0\n        var\
    \ note_index_next = 0\n        var note_index_next_prev = 0\n        var note_index_next_next\
    \ = 0\n        var note_index_next_next_prev = 0\n        var note_index_next_next_next\
    \ = 0\n        var note_index_next_next_next_prev = 0\n        var note_index_next_next_next_next\
    \ = 0\n        var note_index_next_next_next_next_prev = 0\n        var note_index_next_next_next_next_next\
    \ = 0\n        var note_index_next_next_next_next_next_prev = 0\n        var note_index_next_next_next_next_next_next\
    \ = 0\n        var note_index_next_next_next_next_next_next_prev = 0\n       \
    \ var note_index_next_next_next_next_next_next_next = 0\n        var note_index_next_next_next_next_next_next_next_prev\
    \ = 0\n        var note_index_next_next_next_next_next_next_next_next = 0\n  \
    \      var note_index_next_next_next_next_next_next_next_next_prev = 0\n     \
    \   var note_index_next_next_next_next_next_next_next_next_next = 0\n        var\
    \ note_index_next_next_next_next_next_next_next_next_next_prev = 0\n        var\
    \ note_index_next_next_next_next_next_next_next_next_next_next = 0\n        var\
    \ note_index_next_next_next_next_next_next_next_next_next_next_prev = 0\n    \
    \    var note_index_next_next_next_next_next_next_next_next_next_next_next = 0\n\
    \        var note_index_next_next_next_next_next_next_next_next_next_next_", " \
    \       val music_list = music_string.split(\" \")\n        val beats = mutable.List[Long]()\n\
    \        for (i <- 0 until music_list.length) {\n            val note = music_list[i]\n\
    \            if (note.equals(\".\")) {\n                beats.append(1l)\n   \
    \         } else if (note.equals(\"o\")) {\n                beats.append(4l)\n\
    \            } else if (note.equals(\"o|\")) {\n                beats.append(2l)\n\
    \            } else {\n                throw new IllegalArgumentException(\"Invalid\
    \ note: \" + note)\n            }\n        }\n        return beats.toList", " \
    \       var result = mutable.List[Long]()\n        var current_note = mutable.List[String]()\n\
    \        var current_beat = mutable.List[Long]()\n        var current_duration\
    \ = mutable.List[Long]()\n        var current_duration_count = mutable.List[Long]()\n\
    \        var current_duration_count_index = mutable.List[Long]()\n        var\
    \ current_duration_count_index_index = mutable.List[Long]()\n        var current_duration_count_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = mutable.List[Long]()\n        var current_duration_count_index_index_index_index_index_index_index_index_index_index_index_index_index_",
  "        def parseNote(note_string : String) : Long {\n            if note_string.length()\
    \ == 1 {\n                return 1l.toLong\n            } else if note_string.length()\
    \ == 2 {\n                return 2l.toLong\n            } else if note_string.length()\
    \ == 3 {\n                return 4l.toLong\n            } else {\n           \
    \     throw new RuntimeException(\"Invalid note string: \" + note_string)\n  \
    \          }\n        }\n        def parseBeat(beat_string : String) : Long {\n\
    \            if beat_string.length() == 1 {\n                return 1l.toLong\n\
    \            } else if beat_string.length() == 2 {\n                return 2l.toLong\n\
    \            } else if beat_string.length() == 3 {\n                return 4l.toLong\n\
    \            } else {\n                throw new RuntimeException(\"Invalid beat\
    \ string: \" + beat_string)\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] {\n            var result = List[Long]()\n          \
    \  var current_beat = 1l.toLong\n            var current_note = 1l.toLong\n  \
    \          var current_note_string = \"\"\n            var current_beat_string\
    \ = \"\"\n            for (i <- 0 until music_string.length) {\n             \
    \   if (music_string[i] == ' ') {\n                    current_note_string +=\
    \ music_string[i]\n                } else if (music_string[i] == '.') {\n    \
    \                current_note_string += music_string[i]\n                    current_note\
    \ = parseNote(current_note_string)\n                    current_note_string =\
    \ \"\"\n                } else if (music_string[i] == '|') {\n               \
    \     current_beat_string += music_string[i]\n                    current_beat\
    \ = parseBeat(current_beat_string)\n                    current_beat_string =\
    \ \"\"\n                } else {\n                    current_beat_string += music_string[i]\n\
    \                }\n            }\n            result = append(result, current_note\
    \ * current_beat)\n            return result\n        }\n        return parseMusic(music_string)",
  "        val notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\")).map(_.toLong).toList\n        val result = beats.map(b => b.toLong)\n\
    \        return result", "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list.apply(i)\n            if (note.equals(\"\
    .\")) {\n                beats.append(1l)\n            } else if (note.equals(\"\
    o\")) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            } else {\n           \
    \     throw new RuntimeException(\"Unknown note: \" + note)\n            }\n \
    \       }\n        return beats", "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list.get(i).replaceAll(\"[^0-9]\", \"\")\n \
    \           if (note.equals(\".\")) {\n                beats.append(0l)\n    \
    \        } else if (note.equals(\"o\")) {\n                beats.append(4l)\n\
    \            } else if (note.equals(\"o|\")) {\n                beats.append(2l)\n\
    \            } else if (note.equals(\".|\")) {\n                beats.append(1l)\n\
    \            } else {\n                throw new IllegalArgumentException(\"Invalid\
    \ note: \" + note)\n            }\n        }\n        return beats", "       \
    \ val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length\
    \ - 1) {\n            val note = music_list.get(i)\n            if (note.equals(\"\
    .\")) {\n                beats.append(1l)\n            } else if (note.equals(\"\
    o\")) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            }\n        }\n       \
    \ return beats", "        val notes = music_string.split(\" \")\n        val beats\
    \ = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\"))\n        val beats_list\
    \ = beats.map(_.toLong).toList\n        return beats_list", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string.contains(\"o\") {\n       \
    \         return 4l\n            } else if note_string.contains(\"o|\") {\n  \
    \              return 2l\n            } else if note_string.contains(\".|\") {\n\
    \                return 1l\n            } else {\n                return 0l\n\
    \            }\n        }\n        def parseDuration(note_string : String) : Long\
    \ = {\n            if note_string.contains(\"o\") {\n                return 4l\n\
    \            } else if note_string.contains(\"o|\") {\n                return\
    \ 2l\n            } else if note_string.contains(\".|\") {\n                return\
    \ 1l\n            } else {\n                return 0l\n            }\n       \
    \ }\n        def parseMusic(music_string : String) : List[Long] = {\n        \
    \    var beat_count = 0l\n            var beat_duration = 0l\n            var\
    \ beat_duration_prev = 0l\n            var beat_count_prev = 0l\n            var\
    \ beat_count_next = 0l\n            var beat_duration_next = 0l\n            var\
    \ beat_duration_next_prev = 0l\n            var beat_count_next_prev = 0l\n  \
    \          var beat_count_next_next = 0l\n            var beat_duration_next_next\
    \ = 0l\n            var beat_duration_next_next_prev = 0l\n            var beat_count_next_next_prev\
    \ = 0l\n            var beat_count_next_next_next = 0l\n            var beat_duration_next_next_next\
    \ = 0l\n            var beat_duration_next_next_next_prev = 0l\n            var\
    \ beat_count_next_next_next_prev = 0l\n            var beat_count_next_next_next_next\
    \ = 0l\n            var beat_duration_next_next_next_next = 0l\n            var\
    \ beat_duration_next_next_next_next_prev = 0l\n            var beat_count_next_next_next_next_next\
    \ = 0l\n            var beat_duration_next_next_next_next_next_prev = 0l\n   \
    \         var beat_count_next_", "        var notes = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        var beats = scala.collection.mutable.ListBuffer[Long]()\n    \
    \    for (i <- 0 until notes.length) {\n            var note = notes[i]\n    \
    \        var beat = 0\n            if (note.contains(\"o\")) {\n             \
    \   beat = 4\n            } else if (note.contains(\"o|\")) {\n              \
    \  beat = 2\n            } else if (note.contains(\".|\")) {\n               \
    \ beat = 1\n            }\n            beats.append(beat)\n        }\n       \
    \ return beats.toList()", "        val notes = music_string.split(\" \")\n   \
    \     val beats = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\")).map(_.toLong).toList\n\
    \        val result = beats.map(b -> b / 4).toList\n        return result", " \
    \       val notes = music_string.split(\" \")\n        val beats = notes.map(_.trim).map(_.replaceAll(\"\
    [^0-9.]\", \"\")).map(_.toLong).toList\n        val result = beats.map(_.toLong).toList\n\
    \        return result", "        def parseNote(note_string : String) : Long =\
    \ {\n            if note_string.contains(\"o\") {\n                return 4L\n\
    \            } else if note_string.contains(\"o|\") {\n                return\
    \ 2L\n            } else if note_string.contains(\".|\") {\n                return\
    \ 1L\n            } else {\n                return 0L\n            }\n       \
    \ }\n        def parseMusic(music_string : String) : List[Long] = {\n        \
    \    var result = mutable.List[Long]()\n            var note_count = mutable.List[Long]()\n\
    \            var note_index = 0\n            var note_string = \"\"\n        \
    \    for (i <- 0 until music_string.length) {\n                if (music_string[i]\
    \ == ' ') {\n                    note_count.update(parseNote(note_string))\n \
    \                   note_string = \"\"\n                    note_index += 1\n\
    \                } else {\n                    note_string += music_string[i]\n\
    \                }\n            }\n            note_count.update(parseNote(note_string))\n\
    \            for (i <- 0 until note_count.length) {\n                result.update(note_count[i])\n\
    \            }\n            return result\n        }\n        return parseMusic(music_string)",
  "        var notes = new ArrayList[String]()\n        var beats = new ArrayList[Long]()\n\
    \        var beat_count = 0\n        var beat_count_prev = 0\n        var beat_count_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev = 0\n        var beat_count_prev_prev_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev_prev_prev = 0\n        var beat_count_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev_prev_prev_prev_prev = 0\n       \
    \ var beat_count_prev_prev_prev_prev_prev_prev_prev_prev = 0\n        var beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_",
  "        def parseNote(note_string : String) : Long = {\n            if (note_string\
    \ == \".\") {\n                return 0l\n            } else if (note_string ==\
    \ \"o\") {\n                return 4l\n            } else if (note_string == \"\
    o|\") {\n                return 2l\n            } else {\n                return\
    \ 1l\n            }\n        }\n        def parseMusic(note_list : List[String])\
    \ : List[Long] = {\n            var result = List[Long]()\n            for (note_string\
    \ <- note_list) {\n                result = append(result, parseNote(note_string))\n\
    \            }\n            return result\n        }\n        return parseMusic(music_string.split(\"\
    \ \"))", "        def parseNote(note_string : String) : Long = {\n           \
    \ if note_string == \"o\" {\n                return 4l\n            } else if\
    \ note_string == \"o|\" {\n                return 2l\n            } else if note_string\
    \ == \".|\" {\n                return 1l\n            } else {\n             \
    \   throw new RuntimeException(\"Unknown note: \" + note_string)\n           \
    \ }\n        }\n        def parseDuration(duration_string : String) : Long = {\n\
    \            if duration_string == \"o\" {\n                return 4l\n      \
    \      } else if duration_string == \"o|\" {\n                return 2l\n    \
    \        } else if duration_string == \".|\" {\n                return 1l\n  \
    \          } else {\n                throw new RuntimeException(\"Unknown note:\
    \ \" + duration_string)\n            }\n        }\n        def parseBeat(beat_string\
    \ : String) : Long = {\n            if beat_string == \"o\" {\n              \
    \  return 1l\n            } else if beat_string == \"o|\" {\n                return\
    \ 2l\n            } else if beat_string == \".|\" {\n                return 4l\n\
    \            } else {\n                throw new RuntimeException(\"Unknown note:\
    \ \" + beat_string)\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var beat_counts = mutable.List[Long]()\n\
    \            var beat_count = 0l\n            for (i <- 0 until music_string.length)\
    \ {\n                var note_count = parseNote(music_string[i])\n           \
    \     var duration_count = parseDuration(music_string[i + 1])\n              \
    \  var beat_count = beat_count + parseBeat(music_string[i + 2])\n            \
    \    beat_counts = beat_counts.append(beat_count)\n                i = i + 3\n\
    \            }\n            return beat_counts\n        }\n        return parseMusic(music_string)",
  "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.equals(\".\"))\
    \ {\n                beats.append(0l)\n            } else if (note.equals(\"o\"\
    )) {\n                beats.append(4l)\n            } else if (note.equals(\"\
    o|\")) {\n                beats.append(2l)\n            } else {\n           \
    \     throw new IllegalArgumentException(\"Unknown note: \" + note)\n        \
    \    }\n        }\n        return beats", "        val music_list = scala.collection.JavaConversions.asScalaBuffer(music_string.split(\"\
    \ \")).toList\n        val result = mutable.List[Long]()\n        for (i <- 0\
    \ until music_list.length) {\n            val note = music_list(i)\n         \
    \   if (note.contains(\"o\")) {\n                result.append(4l)\n         \
    \   } else if (note.contains(\"o|\")) {\n                result.append(2l)\n \
    \           } else if (note.contains(\".|\")) {\n                result.append(1l)\n\
    \            } else {\n                result.append(0l)\n            }\n    \
    \    }\n        return result", "        def parseNote(note_string : String) :\
    \ Long = {\n            if note_string.equals(\".\") {\n                return\
    \ 0l\n            } else if note_string.equals(\"o\") {\n                return\
    \ 4l\n            } else if note_string.equals(\"o|\") {\n                return\
    \ 2l\n            } else {\n                return 1l\n            }\n       \
    \ }\n        def parseMusic(music_string : String) : List[Long] = {\n        \
    \    var result = mutable.List[Long]()\n            var current_note = 0l\n  \
    \          var current_beat = 0l\n            var current_note_length = 0l\n \
    \           var current_note_length_count = 0l\n            for (i <- 0 until\
    \ music_string.length) {\n                if (music_string[i] == '.') {\n    \
    \                current_note_length_count = 0\n                    current_note_length\
    \ = 0\n                    current_note = parseNote(music_string[i + 1])\n   \
    \                 current_beat = current_beat + current_note_length\n        \
    \            current_note_length_count = current_note_length_count + 1\n     \
    \               i = i + 1\n                } else if (music_string[i] == 'o')\
    \ {\n                    current_note_length_count = 0\n                    current_note_length\
    \ = 0\n                    current_note = parseNote(music_string[i + 1])\n   \
    \                 current_beat = current_beat + current_note_length\n        \
    \            current_note_length_count = current_note_length_count + 1\n     \
    \               i = i + 1\n                } else if (music_string[i] == 'o|')\
    \ {\n                    current_note_length_count = 0\n                    current_note_length\
    \ = 0\n                    current_note = parseNote(music_string[i + 1])\n   \
    \                 current_beat = current_beat + current_note_length\n        \
    \            current_note_length_count = current_note_length_count + 1\n     \
    \               i = i + 1\n                } else {\n                    current_note_length_count\
    \ = current_note_length_count + 1\n                }\n                if (current_note_length_count\
    \ == 4) {\n                    result = result.append(", "        val music_list\
    \ = List[String]()\n        for (i <- 0 until music_string.length) {\n       \
    \     if (music_string[i] == '.') {\n                music_list = music_list.append(0l)\n\
    \            } else if (music_string[i] == '|') {\n                music_list\
    \ = music_list.append(1l)\n            } else if (music_string[i] == 'o') {\n\
    \                music_list = music_list.append(4l)\n            } else {\n  \
    \              music_list = music_list.append(2l)\n            }\n        }\n\
    \        val result = List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            if (music_list[i] == 0) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result", "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            if (music_list(i) == \".\") {\n                beats.append(0l)\n\
    \            } else if (music_list(i) == \"o\") {\n                beats.append(4l)\n\
    \            } else if (music_list(i) == \"o|\") {\n                beats.append(2l)\n\
    \            } else {\n                beats.append(1l)\n            }\n     \
    \   }\n        return beats", "        val notes = music_string.split(\" \")\n\
    \        val beats = notes.map(_.trim).map(_.replaceAll(\"[^0-9.]\", \"\"))\n\
    \        val result = beats.map(_.toLong).toList\n        result", "        val\
    \ notes = music_string.split(\" \")\n        val beats = notes.map(_.trim()).map(_.replaceAll(\"\
    [^0-9.]\", \"\")).map(_.toLong).toList\n        val result = beats.map(b -> b.toLong)\n\
    \        return result", "        var result = mutable.List[Long]()\n        var\
    \ current_note = mutable.List[String]()\n        var current_duration = mutable.List[Long]()\n\
    \        var current_duration_count = mutable.List[Long]()\n        var current_duration_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count = mutable.List[Long]()\n\
    \        var current_duration_count_count_count_count = mutable.List[Long]()\n\
    \        var current_duration_count_count_count_count_count = mutable.List[Long]()\n\
    \        var current_duration_count_count_count_count_count_count = mutable.List[Long]()\n\
    \        var current_duration_count_count_count_count_count_count_count = mutable.List[Long]()\n\
    \        var current_duration_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_duration_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.List[Long]()\n        var current_", "        val music_list = music_string.split(\"\
    \ \")\n        val beats = List[Long]()\n        for (i <- 0 until music_list.length)\
    \ {\n            val note = music_list[i]\n            if (note.contains(\".\"\
    )) {\n                val note_list = note.split(\".\")\n                val note_length\
    \ = note_list[0].toLong\n                val note_count = note_list[1].toLong\n\
    \                for (j <- 0 until note_count) {\n                    beats =\
    \ beats.append(note_length)\n                }\n            } else {\n       \
    \         val note_length = note.toLong\n                beats = beats.append(note_length)\n\
    \            }\n        }\n        return beats", "        def parseNote(note_string\
    \ : String) : Long = {\n            if note_string == \"o\" {\n              \
    \  return 4l\n            } else if note_string == \"o|\" {\n                return\
    \ 2l\n            } else if note_string == \".|\" {\n                return 1l\n\
    \            } else {\n                throw new RuntimeException(\"Invalid note\
    \ string: \" + note_string)\n            }\n        }\n        def parseBeat(beat_string\
    \ : String) : Long = {\n            if beat_string == \"o\" {\n              \
    \  return 4l\n            } else if beat_string == \"o|\" {\n                return\
    \ 2l\n            } else if beat_string == \".|\" {\n                return 1l\n\
    \            } else {\n                throw new RuntimeException(\"Invalid beat\
    \ string: \" + beat_string)\n            }\n        }\n        def parseMusic(music_string\
    \ : String) : List[Long] = {\n            var beat_counts = mutable.List[Long]()\n\
    \            var beat_count = 0l\n            var note_count = 0l\n          \
    \  var note_count_prev = 0l\n            var note_count_prev_prev = 0l\n     \
    \       for (i <- 0 until music_string.length) {\n                if (music_string[i]\
    \ == '.') {\n                    beat_count += parseBeat(music_string[i + 1])\n\
    \                    note_count += parseNote(music_string[i + 2])\n          \
    \          note_count_prev += parseNote(music_string[i + 3])\n               \
    \     note_count_prev_prev += parseNote(music_string[i + 4])\n               \
    \     i += 4\n                } else if (music_string[i] == '|') {\n         \
    \           beat_count += parseBeat(music_string[i + 1])\n                   \
    \ note_count += parseNote(music_string[i + 2])\n                    note_count_prev\
    \ += parseNote(music_string[i + 3])\n                    note_count_prev_prev\
    \ += parseNote(music_string[i + 4])\n                    i += 4\n            \
    \    } else if (music_string[i] == 'o') {\n                    beat_count += parseBeat(music_string[i\
    \ + 1])\n                    note", "        def parseNote(note_string : String)\
    \ : Long = {\n            if note_string.contains(\"|\") {\n                return\
    \ note_string.split(\"|\")[0].replace(\".\", \"\").replace(\"o\", \"\").toLong\n\
    \            } else {\n                return note_string.replace(\".\", \"\"\
    ).replace(\"o\", \"\").toLong\n            }\n        }\n        def parseBeat(beat_string\
    \ : String) : Long = {\n            if beat_string.contains(\"|\") {\n       \
    \         return beat_string.split(\"|\")[1].replace(\".\", \"\").replace(\"o\"\
    , \"\").toLong\n            } else {\n                return beat_string.replace(\"\
    .\", \"\").replace(\"o\", \"\").toLong\n            }\n        }\n        def\
    \ parseDuration(duration_string : String) : Long = {\n            if duration_string.contains(\"\
    |\") {\n                return duration_string.split(\"|\")[1].replace(\".\",\
    \ \"\").replace(\"o\", \"\").toLong\n            } else {\n                return\
    \ duration_string.replace(\".\", \"\").replace(\"o\", \"\").toLong\n         \
    \   }\n        }\n        def parseMusic(music_string : String) : List[Long] =\
    \ {\n            def parseNote(note_string : String) : Long = {\n            \
    \    if note_string.contains(\"|\") {\n                    return note_string.split(\"\
    |\")[0].replace(\".\", \"\").replace(\"o\", \"\").toLong\n                } else\
    \ {\n                    return note_string.replace(\".\", \"\").replace(\"o\"\
    , \"\").toLong\n                }\n            }\n            def parseBeat(beat_string\
    \ : String) : Long = {\n                if beat_string.contains(\"|\") {\n   \
    \                 return beat_string.split(\"|\")[1].replace(\".\", \"\").replace(\"\
    o\", \"\").toLong\n                } else {\n                    return beat_string.replace(\"\
    .\", \"\").replace(\"o\", \"\").toLong\n                }\n            }\n   \
    \         def parseDuration(duration_string : String) : Long = {\n           \
    \     if duration_string.contains(\"|\") {\n                    return duration_string.split(\"\
    |\")[1].replace(\".\", \"\").replace(\"o\", \"\").toLong\n                }",
  "        val music_list = scala.collection.JavaConversions.asJavaList(music_string.split(\"\
    \ \"))\n        val beats = mutable.List[Long]()\n        for (i <- 0 until music_list.size())\
    \ {\n            if (music_list.get(i).equals(\".\")) {\n                beats.append(0l)\n\
    \            } else if (music_list.get(i).equals(\"o\")) {\n                beats.append(4l)\n\
    \            } else if (music_list.get(i).equals(\"o|\")) {\n                beats.append(2l)\n\
    \            } else {\n                beats.append(1l)\n            }\n     \
    \   }\n        return beats"]
stop_tokens:
- "\n    }\n"
