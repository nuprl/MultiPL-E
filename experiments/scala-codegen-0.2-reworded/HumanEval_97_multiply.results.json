{
  "name": "HumanEval_97_multiply",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmphklicz3v.scala:81:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvari",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0l\n        } else {\n            return a * b / 10l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmgm_w23p.scala:24)\n\tat Problem.main(tmpmgm_w23p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        for (var i = 0; i < a.toString().length(); i++) {\n            result += a.toString().charAt(i) * b.toString().charAt(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293138,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp02adu7qq.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp02adu7qq.scala:18:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but '.' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp02adu7qq.scala:18:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp02adu7qq.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0\n        }\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_index = 0\n        var b_digits_index = 0\n        var product = 0l\n        while (a_digits_index < a_digits_length && b_digits_index < b_digits_length) {\n            var a_digit = a_digits[a_digits_index]\n            var b_digit = b_digits[b_digits_index]\n            if (a_digit.equals(\"0\") || b_digit.equals(\"0\")) {\n                a_digits_index += 1\n                b_digits_index += 1\n            } else {\n                product += (a_digit.toLong() * b_digit.toLong())\n                a_digits_index += 1\n                b_digits_index += 1\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe7k1sick.scala:28:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36ma_digit\u001b[0m = a_digits[\u001b[35ma_digits_index\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type a_digits_index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe7k1sick.scala:29:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mb_digit\u001b[0m = b_digits[\u001b[35mb_digits_index\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type b_digits_index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var result = a1 * b1\n        if (a2 != 0) {\n            result = result + a2 * b1\n        }\n        if (b2 != 0) {\n            result = result + a1 * b2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxozrassy.scala:31)\n\tat Problem.main(tmpxozrassy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"l\")\n        var b_digits = b.toString().split(\"l\")\n        var a_unit_digits = a_digits[0].split(\"\")\n        var b_unit_digits = b_digits[0].split(\"\")\n        var a_unit_digits_product = a_unit_digits.reduce(0, (a, b) => a * b)\n        var b_unit_digits_product = b_unit_digits.reduce(0, (a, b) => a * b)\n        var result = a_unit_digits_product * b_unit_digits_product\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2rtjfs_m.scala:19:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits[\u001b[31m0\u001b[0m].split(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2rtjfs_m.scala:20:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits[\u001b[31m0\u001b[0m].split(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd3s6f62o.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase\n        val bb = b.toString.toUpperCase\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_1 = aa_digits_length - 1\n        val bb_digits_length_minus_1 = bb_digits_length - 1\n        val aa_digits_length_minus_2 = aa_digits_length - 2\n        val bb_digits_length_minus_2 = bb_digits_length - 2\n        val aa_digits_length_minus_3 = aa_digits_length - 3\n        val bb_digits_length_minus_3 = bb_digits_length - 3\n        val aa_digits_length_minus_4 = aa_digits_length - 4\n        val bb_digits_length_minus_4 = bb_digits_length - 4\n        val aa_digits_length_minus_5 = aa_digits_length - 5\n        val bb_digits_length_minus_5 = bb_digits_length - 5\n        val aa_digits_length_minus_6 = aa_digits_length - 6\n        val bb_digits_length_minus_6 = bb_digits_length - 6\n        val aa_digits_length_minus_7 = aa_digits_length - 7\n        val bb_digits_length_minus_7 = bb_digits_length - 7\n        val aa_digits_length_minus_8 = aa_digits_length - 8\n        val bb_digits_length_minus_8 = bb_digits_length - 8\n        val aa_digits_length_minus_9 = aa_digits_length - 9\n        val bb_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzvyc8hll.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzvyc8hll.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_array = new Array[Long](a_digits_length)\n        for (i <- 0 until a_digits_length) {\n            a_digits_array(i) = Long.parseLong(a_digits(i))\n        }\n        var b_digits_array = new Array[Long](b_digits_length)\n        for (i <- 0 until b_digits_length) {\n            b_digits_array(i) = Long.parseLong(b_digits(i))\n        }\n        var result = 0l\n        for (i <- 0 until a_digits_length) {\n            for (j <- 0 until b_digits_length) {\n                result += a_digits_array(i) * b_digits_array(j)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy1g17njs.scala:23:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            a_digits_array(i) = Long.parseLong(a_digits(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy1g17njs.scala:27:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_array(i) = Long.parseLong(b_digits(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var aa = a\n        var bb = b\n        var result = 0l\n        while (aa != 0l) {\n            var aaa = aa % 10l\n            var bbb = bb % 10l\n            result = result * 10l + aaa * bbb\n            aa = aa / 10l\n            bb = bb / 10l\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7yrtyadk.scala:30)\n\tat Problem.main(tmp7yrtyadk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n        }\n        if (b == 0) {\n            return 0\n        }\n        if (a < 0) {\n            return -1 * multiply(-a, b)\n        }\n        if (b < 0) {\n            return -1 * multiply(a, -b)\n        }\n        if (a < 10 && b < 10) {\n            return a * b\n        }\n        if (a < 10) {\n            return multiply(a, b)\n        }\n        if (b < 10) {\n            return multiply(a, b)\n        }\n        if (a < 100) {\n            return multiply(a, b)\n        }\n        if (b < 100) {\n            return multiply(a, b)\n        }\n        if (a < 1000) {\n            return multiply(a, b)\n        }\n        if (b < 1000) {\n            return multiply(a, b)\n        }\n        if (a < 10000) {\n            return multiply(a, b)\n        }\n        if (b < 10000) {\n            return multiply(a, b)\n        }\n        if (a < 100000) {\n            return multiply(a, b)\n        }\n        if (b < 100000) {\n            return multiply(a, b)\n        }\n        if (a < 1000000) {\n            return multiply(a, b)\n        }\n        if (b < 1000000) {\n            return multiply(a, b)\n        }\n        if (a < 10000000) {\n            return multiply(a, b)\n        }\n        if (b < 10000000) {\n            return multiply(a, b)\n        }\n        if (a < 100000000) {\n            return multiply(a, b)\n        }\n        if (b < 100000000) {\n            return multiply(a, b)\n        }\n        if (a < 1000000000) {\n            return multiply(a, b)\n        }\n        if (b < 1000000000) {\n            return multiply(a, b)\n        }\n        if (a < 10000000000l) {\n            return multiply(a, b)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293138,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprxt7wysd.scala:102:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m102 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprxt7wysd.scala:101:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m101 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Long\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmprxt7wysd.scala:90:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m90 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var result = 0l\n        for (i <- 0 to a_digits.length - 1) {\n            result = result + (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfec24_hm.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(d -> d.equals(\"0\") || d.equals(\"1\"))\n        var b_unit_digits = b_digits.takeWhile(d -> d.equals(\"0\") || d.equals(\"1\"))\n        var a_unit_digits_count = a_unit_digits.length\n        var b_unit_digits_count = b_unit_digits.length\n        var result = 0l\n        for (i <- 0 until a_unit_digits_count) {\n            result = result * 10 + a_unit_digits[i]\n        }\n        for (i <- 0 until b_unit_digits_count) {\n            result = result * 10 + b_unit_digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppe9tonux.scala:19:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.takeWhile(d -> d.equals(\u001b[31m\"0\"\u001b[0m) || d.equals(\u001b[31m\"1\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppe9tonux.scala:20:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.takeWhile(d -> d.equals(\u001b[31m\"0\"\u001b[0m) || d.equals(\u001b[31m\"1\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppe9tonux.scala:25:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + a_unit_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppe9tonux.scala:28:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + b_unit_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val a_digits = a.toString.split(\"\")\n        val b_digits = b.toString.split(\"\")\n        val a_digits_length = a_digits.length\n        val b_digits_length = b_digits.length\n        val result = 0l\n        for (i <- 0 until a_digits_length) {\n            val a_digit = a_digits[i]\n            val b_digit = b_digits[i]\n            result = result + (a_digit * b_digit)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1znji5m0.scala:23:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma_digit\u001b[0m = a_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1znji5m0.scala:24:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb_digit\u001b[0m = b_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp1znji5m0.scala:25:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result = result + (a_digit * b_digit)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var a_digits_len = a_digits.length\n        var b_digits_len = b_digits.length\n        var a_digits_len_minus_1 = a_digits_len - 1\n        var b_digits_len_minus_1 = b_digits_len - 1\n        var a_digits_len_minus_2 = a_digits_len - 2\n        var b_digits_len_minus_2 = b_digits_len - 2\n        var a_digits_len_minus_3 = a_digits_len - 3\n        var b_digits_len_minus_3 = b_digits_len - 3\n        var a_digits_len_minus_4 = a_digits_len - 4\n        var b_digits_len_minus_4 = b_digits_len - 4\n        var a_digits_len_minus_5 = a_digits_len - 5\n        var b_digits_len_minus_5 = b_digits_len - 5\n        var a_digits_len_minus_6 = a_digits_len - 6\n        var b_digits_len_minus_6 = b_digits_len - 6\n        var a_digits_len_minus_7 = a_digits_len - 7\n        var b_digits_len_minus_7 = b_digits_len - 7\n        var a_digits_len_minus_8 = a_digits_len - 8\n        var b_digits_len_minus_8 = b_digits_len - 8\n        var a_digits_len_minus_9 = a_digits_len - 9\n        var b_digits_len_minus_9 = b_digits_len - 9\n        var a_digits_len_minus_10 = a_digits_len - 10\n        var b_digits_len_minus_10 = b_digits_len - 10\n        var a_digits_len\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpas40fqi2.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpas40fqi2.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 to a_digits.length - 1) {\n            result += (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0914bpb9.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0914bpb9.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var aa = a.toString\n        var bb = b.toString\n        var aa_digits = aa.split(\"\")\n        var bb_digits = bb.split(\"\")\n        var result = 0l\n        for (i <- 0 until aa_digits.length) {\n            var aa_digit = aa_digits[i]\n            var bb_digit = bb_digits[i]\n            var aa_digit_int = aa_digit.toInt\n            var bb_digit_int = bb_digit.toInt\n            result = result + (aa_digit_int * bb_digit_int)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptuj57sm2.scala:23:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36maa_digit\u001b[0m = aa_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptuj57sm2.scala:24:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mbb_digit\u001b[0m = bb_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_1 = aa_digits_length - 1\n        val bb_digits_length_minus_1 = bb_digits_length - 1\n        val aa_digits_length_minus_2 = aa_digits_length - 2\n        val bb_digits_length_minus_2 = bb_digits_length - 2\n        val aa_digits_length_minus_3 = aa_digits_length - 3\n        val bb_digits_length_minus_3 = bb_digits_length - 3\n        val aa_digits_length_minus_4 = aa_digits_length - 4\n        val bb_digits_length_minus_4 = bb_digits_length - 4\n        val aa_digits_length_minus_5 = aa_digits_length - 5\n        val bb_digits_length_minus_5 = bb_digits_length - 5\n        val aa_digits_length_minus_6 = aa_digits_length - 6\n        val bb_digits_length_minus_6 = bb_digits_length - 6\n        val aa_digits_length_minus_7 = aa_digits_length - 7\n        val bb_digits_length_minus_7 = bb_digits_length - 7\n        val aa_digits_length_minus_8 = aa_digits_length - 8\n        val bb_digits_length_minus_8 = bb_digits_length - 8\n        val aa_digits_length_minus_9 = aa_digits_length - 9\n        val bb_digits_length_minus_9 = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4tuyzfv8.scala:40:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_9\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4tuyzfv8.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase.replaceAll(\"[^0-9]\", \"\")\n        val bb = b.toString.toUpperCase.replaceAll(\"[^0-9]\", \"\")\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val result = 0l\n        for (i <- 0 until aa_digits.length) {\n            result = result + (aa_digits[i] * bb_digits[i])\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfllcucmb.scala:23:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            result = result + (aa_digits[\u001b[35mi\u001b[0m] * bb_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_product = 1l\n        var b_digits_product = 1l\n        for (i <- 0 until a_digits_length) {\n            a_digits_product *= Long.parseLong(a_digits[i])\n        }\n        for (i <- 0 until b_digits_length) {\n            b_digits_product *= Long.parseLong(b_digits[i])\n        }\n        return a_digits_product * b_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293138,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc0k933zs.scala:24:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_product *= Long.parseLong(a_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc0k933zs.scala:24:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_product *= Long.parseLong(a_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc0k933zs.scala:24:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_product *= Long.parseLong(a_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc0k933zs.scala:27:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_product *= Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc0k933zs.scala:27:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_product *= Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc0k933zs.scala:27:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_product *= Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmphklicz3v.scala:81:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvari",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var a_unit_digits = a_digits.filter(_.match(_.toInt)).toList\n        var b_unit_digits = b_digits.filter(_.match(_.toInt)).toList\n        var a_unit_digits_product = a_unit_digits.map(x => x * b_unit_digits.head).reduce(_.add)\n        var b_unit_digits_product = b_unit_digits.map(x => x * a_unit_digits.head).reduce(_.add)\n        var a_unit_digits_product_string = a_unit_digits_product.toString\n        var b_unit_digits_product_string = b_unit_digits_product.toString\n        var a_unit_digits_product_string_length = a_unit_digits_product_string.length\n        var b_unit_digits_product_string_length = b_unit_digits_product_string.length\n        var a_unit_digits_product_string_length_difference = a_unit_digits_product_string_length - b_unit_digits_product_string_length\n        var a_unit_digits_product_string_difference = a_unit_digits_product_string_length_difference * \"0\"\n        var b_unit_digits_product_string_difference = b_unit_digits_product_string_length_difference * \"0\"\n        var a_unit_digits_product_string_difference = a_unit_digits_product_string_difference + b_unit_digits_product_string_difference\n        var a_unit_digits_product_string_difference_length = a_unit_digits_product_string_difference.length\n        var a_unit_digits_product_string_difference_length_difference = a_unit_digits_product_string_difference_length - b_unit_digits_product_string_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293139,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3my75ukt.scala:19:51 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.filter(_.\u001b[33mmatch\u001b[0m(_.toInt)).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             '{' expected, but '(' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3my75ukt.scala:20:51 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.filter(_.\u001b[33mmatch\u001b[0m(_.toInt)).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             '{' expected, but '(' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3my75ukt.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product_string_difference\u001b[0m = a_unit_digits_product_string_difference + b_unit_digits_product_string_difference\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_unit_digits_product_string_difference is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_unit_digits_product_string_difference\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3my75ukt.scala:19:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.filter(_.\u001b[33mmatch\u001b[0m(_.toInt)).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Unit\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3my75ukt.scala:20:60 -------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var a_unit_digits = a_digits.filter(_.isDigit).toList\n        var b_unit_digits = b_digits.filter(_.isDigit).toList\n        var a_unit_digits_product = a_unit_digits.map(_.toInt).reduce(_.times)\n        var b_unit_digits_product = b_unit_digits.map(_.toInt).reduce(_.times)\n        var result = a_unit_digits_product * b_unit_digits_product\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293138,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf0_fhwh8.scala:19:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.filter(_.isDigit).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value isDigit is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf0_fhwh8.scala:20:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.filter(_.isDigit).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value isDigit is not a member of String\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpf0_fhwh8.scala:21:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.map(_.toInt).reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpf0_fhwh8.scala:22:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits_product\u001b[0m = b_unit_digits.map(_.toInt).reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase\n        val bb = b.toString.toUpperCase\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_1 = aa_digits_length - 1\n        val bb_digits_length_minus_1 = bb_digits_length - 1\n        val aa_digits_length_minus_2 = aa_digits_length - 2\n        val bb_digits_length_minus_2 = bb_digits_length - 2\n        val aa_digits_length_minus_3 = aa_digits_length - 3\n        val bb_digits_length_minus_3 = bb_digits_length - 3\n        val aa_digits_length_minus_4 = aa_digits_length - 4\n        val bb_digits_length_minus_4 = bb_digits_length - 4\n        val aa_digits_length_minus_5 = aa_digits_length - 5\n        val bb_digits_length_minus_5 = bb_digits_length - 5\n        val aa_digits_length_minus_6 = aa_digits_length - 6\n        val bb_digits_length_minus_6 = bb_digits_length - 6\n        val aa_digits_length_minus_7 = aa_digits_length - 7\n        val bb_digits_length_minus_7 = bb_digits_length - 7\n        val aa_digits_length_minus_8 = aa_digits_length - 8\n        val bb_digits_length_minus_8 = bb_digits_length - 8\n        val aa_digits_length_minus_9 = aa_digits_length - 9\n        val bb_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzvyc8hll.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzvyc8hll.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        for (var i = 0; i < a.toString().length(); i++) {\n            result += (a.toString().charAt(i) - '0') * (b.toString().charAt(i) - '0')\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpk9y223hg.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk9y223hg.scala:18:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but '.' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpk9y223hg.scala:18:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk9y223hg.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(x => x.toInt() != 0)\n        var b_unit_digits = b_digits.takeWhile(x => x.toInt() != 0)\n        var a_unit_digits_product = a_unit_digits.product(b_unit_digits)\n        return a_unit_digits_product.toInt()\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpxc_k8m9z.scala:19:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.takeWhile(\u001b[36mx\u001b[0m => x.toInt() != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpxc_k8m9z.scala:20:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.takeWhile(\u001b[36mx\u001b[0m => x.toInt() != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxc_k8m9z.scala:21:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.product(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpxc_k8m9z.scala:22:37 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mreturn\u001b[0m a_unit_digits_product.toInt()\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var b1 = b % 10\n        var a2 = a / 10\n        var b2 = b / 10\n        var a3 = a2 % 10\n        var b3 = b2 % 10\n        var a4 = a3 / 10\n        var b4 = b3 / 10\n        var a5 = a4 % 10\n        var b5 = b4 % 10\n        var a6 = a5 / 10\n        var b6 = b5 / 10\n        var a7 = a6 % 10\n        var b7 = b6 % 10\n        var a8 = a7 / 10\n        var b8 = b7 / 10\n        var a9 = a8 % 10\n        var b9 = b8 % 10\n        var a10 = a9 / 10\n        var b10 = b9 / 10\n        var a11 = a10 % 10\n        var b11 = b10 % 10\n        var a12 = a11 / 10\n        var b12 = b11 / 10\n        var a13 = a12 % 10\n        var b13 = b12 % 10\n        var a14 = a13 / 10\n        var b14 = b13 / 10\n        var a15 = a14 % 10\n        var b15 = b14 % 10\n        var a16 = a15 / 10\n        var b16 = b15 / 10\n        var a17 = a16 % 10\n        var b17 = b16 % 10\n        var a18 = a17 / 10\n        var b18 = b17 / 10\n        var a19 = a18 % 10\n        var b19 = b18 % 10\n        var a20 = a19 / 10\n        var b20 = b19 / 10\n        var a21 = a20 % 10\n        var b21 = b20 % 10\n        var a22 = a21 / 10\n        var b22 = b21 / 10\n        var a23 = a22 % 10\n        var b23 = b22 % 10\n        var a24 = a23 / 10\n        var b24 = b23 / 10\n        var a25 = a24 % 10\n        var b25 = b24 % 10\n        var a26 = a25 / 10\n        var b26 = b\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpstlh5omb.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var product = 0l\n        for (i <- 0 until a_digits.length) {\n            product = product + (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293141,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwqm4k8st.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            product = product + (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_product = 0l\n        var b_digits_product = 0l\n        for (var i = 0; i < a_digits_length; i++) {\n            a_digits_product = a_digits_product * 10 + Long.parseLong(a_digits[i])\n        }\n        for (var i = 0; i < b_digits_length; i++) {\n            b_digits_product = b_digits_product * 10 + Long.parseLong(b_digits[i])\n        }\n        return a_digits_product * b_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpszfkymzj.scala:23:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpszfkymzj.scala:23:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpszfkymzj.scala:23:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpszfkymzj.scala:26:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpszfkymzj.scala:26:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpszfkymzj.scala:26:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(d -> d.equals(\"0\") || d.equals(\"1\"))\n        var b_unit_digits = b_digits.takeWhile(d -> d.equals(\"0\") || d.equals(\"1\"))\n        var a_unit_digits_product = a_unit_digits.product(b_unit_digits)\n        var a_unit_digits_sum = a_unit_digits.sum(b_unit_digits)\n        var a_unit_digits_product_sum = a_unit_digits_product.sum(a_unit_digits_sum)\n        return a_unit_digits_product_sum\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3xzjk05x.scala:19:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.takeWhile(d -> d.equals(\u001b[31m\"0\"\u001b[0m) || d.equals(\u001b[31m\"1\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3xzjk05x.scala:20:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.takeWhile(d -> d.equals(\u001b[31m\"0\"\u001b[0m) || d.equals(\u001b[31m\"1\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzjk05x.scala:21:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.product(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzjk05x.scala:22:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_sum\u001b[0m = a_unit_digits.sum(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzjk",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_sum = 0l\n        var b_digits_sum = 0l\n        for (i <- 0 until a_digits_length) {\n            a_digits_sum += (a_digits[i].toInt * 10)\n        }\n        for (i <- 0 until b_digits_length) {\n            b_digits_sum += (b_digits[i].toInt * 10)\n        }\n        var result = 0l\n        for (i <- 0 until a_digits_length) {\n            result += (a_digits_sum * b_digits_sum)\n            a_digits_sum -= (a_digits[i].toInt * 10)\n            b_digits_sum -= (b_digits[i].toInt * 10)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7p7bs0yo.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_sum += (a_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7p7bs0yo.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_sum += (a_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7p7bs0yo.scala:27:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_sum += (b_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7p7bs0yo.scala:27:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_sum += (b_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7p7bs0yo.scala:32:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            a_digits_sum -= (a_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value -= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7p7bs0yo.scala:32:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            a_digits_sum -= (a_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val a_digits = a.toString.split(\"l\")\n        val b_digits = b.toString.split(\"l\")\n        val a_digits_int = toInt(a_digits[0])\n        val b_digits_int = toInt(b_digits[0])\n        val a_digits_unit = a_digits[1].split(\"\")\n        val b_digits_unit = b_digits[1].split(\"\")\n        val a_digits_unit_int = toInt(a_digits_unit[0])\n        val b_digits_unit_int = toInt(b_digits_unit[0])\n        val a_digits_unit_unit = a_digits_unit[1].split(\"\")\n        val b_digits_unit_unit = b_digits_unit[1].split(\"\")\n        val a_digits_unit_unit_int = toInt(a_digits_unit_unit[0])\n        val b_digits_unit_unit_int = toInt(b_digits_unit_unit[0])\n        val a_digits_unit_unit_unit = a_digits_unit_unit[1].split(\"\")\n        val b_digits_unit_unit_unit = b_digits_unit_unit[1].split(\"\")\n        val a_digits_unit_unit_unit_int = toInt(a_digits_unit_unit_unit[0])\n        val b_digits_unit_unit_unit_int = toInt(b_digits_unit_unit_unit[0])\n        val a_digits_unit_unit_unit_unit = a_digits_unit_unit_unit[1].split(\"\")\n        val b_digits_unit_unit_unit_unit = b_digits_unit_unit_unit[1].split(\"\")\n        val a_digits_unit_unit_unit_unit_int = toInt(a_digits_unit_unit_unit_unit[0])\n        val b_digits_unit_unit_unit_unit_int = toInt(b_digits_unit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2l8tu1gq.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2l8tu1gq.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma_digits_int\u001b[0m = toInt(a_digits[\u001b[31m0\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2l8tu1gq.scala:19:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma_digits_int\u001b[0m = toInt(a_digits[\u001b[31m0\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2l8tu1gq.scala:20:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb_digits_int\u001b[0m = toInt(b_digits[\u001b[31m0\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: toInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2l8tu1gq.scala:20:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb_digits_int\u001b[0m = toInt(b_digits[\u001b[31m0\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2l8tu1gq.scala:21:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma_digits_unit\u001b[0m = a_digits[\u001b[31m1\u001b[0m].split(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w9gia5h.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 to a_digits.length - 1) {\n            result += (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwncxazps.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwncxazps.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ =\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5uclaga2.scala:66:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ * b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ * a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 to a_digits.length - 1) {\n            var a_digit = a_digits[i]\n            var b_digit = b_digits[i]\n            result += (a_digit * b_digit)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcj0uc1v3.scala:21:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36ma_digit\u001b[0m = a_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcj0uc1v3.scala:22:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mb_digit\u001b[0m = b_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.filter(x => x.equals(\"1\")).toList\n        var b_unit_digits = b_digits.filter(x => x.equals(\"1\")).toList\n        var a_unit_digits_product = a_unit_digits.map(x => x * b_unit_digits.head).reduce(0l, (x, y) => x + y)\n        var b_unit_digits_product = b_unit_digits.map(x => x * a_unit_digits.head).reduce(0l, (x, y) => x + y)\n        var a_unit_digits_product_str = a_unit_digits_product.toString()\n        var b_unit_digits_product_str = b_unit_digits_product.toString()\n        var a_unit_digits_product_str_length = a_unit_digits_product_str.length\n        var b_unit_digits_product_str_length = b_unit_digits_product_str.length\n        var a_unit_digits_product_str_length_diff = a_unit_digits_product_str_length - b_unit_digits_product_str_length\n        var a_unit_digits_product_str_length_diff_str = a_unit_digits_product_str_length_diff.toString()\n        var a_unit_digits_product_str_length_diff_str_length = a_unit_digits_product_str_length_diff_str.length\n        var a_unit_digits_product_str_length_diff_str_length_str = a_unit_digits_product_str_length_diff_str_length.toString()\n        var a_unit_digits_product_str_length_diff_str_length_str_length = a_unit_digits_product_str_length_diff_str_length_str.length\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzeg3yy8b.scala:21:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.map(\u001b[36mx\u001b[0m => x * b_unit_digits.head).reduce(\u001b[31m0l\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Found:    String\n\u001b[31m   |\u001b[0m                                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpzeg3yy8b.scala:21:95 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.map(\u001b[36mx\u001b[0m => x * b_unit_digits.head).reduce(\u001b[31m0l\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter x.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpzeg3yy8b.scala:21:98 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.map(\u001b[36mx\u001b[0m => x * b_unit_digits.head).reduce(\u001b[31m0l\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter y.\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzeg3yy8b.scala:22:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits_product\u001b[0m = b_unit_digits.map(\u001b[36mx\u001b[0m => x * a_unit_digits.head).reduce(\u001b[31m0l\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val a_ = a\n        val b_ = b\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ = b_ * a_\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ = b_ * a_\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ = b_ * a_\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ = b_ * a_\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ = b_ * a_\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ = b_ * a_\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ = b_ * a_\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ = b_ * a_\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ = b_ * a_\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ = b_ * a_\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ = b_ * a_\n        val a_ = a_ % 10\n        val b_ = b_ % 10\n        val a_ = a_ * b_\n        val b_ =\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpdi664dmn.scala:66:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb_\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdi664dmn.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma_\u001b[0m = a_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdi664dmn.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb_\u001b[0m = b_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdi664dmn.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma_\u001b[0m = a_ * b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdi664dmn.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb_\u001b[0m = b_ * a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdi664dmn.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma_\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i].toLong * b_digits[i].toLong)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdruly2io.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m].toLong * b_digits[\u001b[35mi\u001b[0m].toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var a3 = a2 * b1\n        var a4 = a1 * b2\n        var a5 = a3 + a4\n        var a6 = a5 % 10\n        var a7 = a5 / 10\n        var a8 = a6 + a7\n        var a9 = a8 % 10\n        var a10 = a8 / 10\n        var a11 = a9 + a10\n        var a12 = a11 % 10\n        var a13 = a11 / 10\n        var a14 = a12 + a13\n        var a15 = a14 % 10\n        var a16 = a14 / 10\n        var a17 = a15 + a16\n        var a18 = a17 % 10\n        var a19 = a17 / 10\n        var a20 = a18 + a19\n        var a21 = a20 % 10\n        var a22 = a20 / 10\n        var a23 = a21 + a22\n        var a24 = a23 % 10\n        var a25 = a23 / 10\n        var a26 = a24 + a25\n        var a27 = a26 % 10\n        var a28 = a26 / 10\n        var a29 = a27 + a28\n        var a30 = a29 % 10\n        var a31 = a29 / 10\n        var a32 = a30 + a31\n        var a33 = a32 % 10\n        var a34 = a32 / 10\n        var a35 = a33 + a34\n        var a36 = a35 % 10\n        var a37 = a35 / 10\n        var a38 = a36 + a37\n        var a39 = a38 % 10\n        var a40 = a38 / 10\n        var a41 = a39 + a40\n        var a42 = a41 % 10\n        var a43 = a41 / 10\n        var a44 = a42 + a43\n        var a45 = a44 % 10\n        var a46 = a44 / 10\n        var a47 = a45 + a46\n        var a48 = a47 % 10\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1mbdsfxh.scala:67:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result * 10 + Long(a_digits[i]) * Long(b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_l0ih59_.scala:21:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + Long(a_digits[\u001b[35mi\u001b[0m]) * Long(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   \u001b[33mobject\u001b[0m \u001b[35mLong\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_l0ih59_.scala:21:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + Long(a_digits[\u001b[35mi\u001b[0m]) * Long(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result += (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp2ksgzyt.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2ksgzyt.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val a_digits = a.toString.split(\"\")\n        val b_digits = b.toString.split(\"\")\n        val a_digits_len = a_digits.length\n        val b_digits_len = b_digits.length\n        val a_digits_len_minus_one = a_digits_len - 1\n        val b_digits_len_minus_one = b_digits_len - 1\n        val a_digits_len_minus_two = a_digits_len - 2\n        val b_digits_len_minus_two = b_digits_len - 2\n        val a_digits_len_minus_three = a_digits_len - 3\n        val b_digits_len_minus_three = b_digits_len - 3\n        val a_digits_len_minus_four = a_digits_len - 4\n        val b_digits_len_minus_four = b_digits_len - 4\n        val a_digits_len_minus_five = a_digits_len - 5\n        val b_digits_len_minus_five = b_digits_len - 5\n        val a_digits_len_minus_six = a_digits_len - 6\n        val b_digits_len_minus_six = b_digits_len - 6\n        val a_digits_len_minus_seven = a_digits_len - 7\n        val b_digits_len_minus_seven = b_digits_len - 7\n        val a_digits_len_minus_eight = a_digits_len - 8\n        val b_digits_len_minus_eight = b_digits_len - 8\n        val a_digits_len_minus_nine = a_digits_len - 9\n        val b_digits_len_minus_nine = b_digits_len - 9\n        val a_digits_len_minus_ten = a_digits_len - 10\n        val b_digits_len_minus_ten = b_digits_len - 10\n        val a_digits_len\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxqhvh1fj.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxqhvh1fj.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(d -> d.equals(\"0\") || d.equals(\"1\"))\n        var b_unit_digits = b_digits.takeWhile(d -> d.equals(\"0\") || d.equals(\"1\"))\n        var a_unit_digits_product = a_unit_digits.product(b_unit_digits)\n        var a_unit_digits_sum = a_unit_digits.sum(b_unit_digits)\n        var a_unit_digits_product_sum = a_unit_digits_product.sum(a_unit_digits_sum)\n        return a_unit_digits_product_sum\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3xzjk05x.scala:19:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.takeWhile(d -> d.equals(\u001b[31m\"0\"\u001b[0m) || d.equals(\u001b[31m\"1\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3xzjk05x.scala:20:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.takeWhile(d -> d.equals(\u001b[31m\"0\"\u001b[0m) || d.equals(\u001b[31m\"1\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzjk05x.scala:21:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.product(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzjk05x.scala:22:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_sum\u001b[0m = a_unit_digits.sum(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzjk",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_len = a_digits.length\n        var b_digits_len = b_digits.length\n        var result = 0l\n        for (var i = 0; i < a_digits_len; i++) {\n            for (var j = 0; j < b_digits_len; j++) {\n                result += (Long.parseLong(a_digits[i]) * Long.parseLong(b_digits[j]))\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293151,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpbl_zs0bu.scala:22:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_len; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbl_zs0bu.scala:22:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_len; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpbl_zs0bu.scala:22:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_len; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbl_zs0bu.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_len; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_1 = aa_digits_length - 1\n        val bb_digits_length_minus_1 = bb_digits_length - 1\n        val aa_digits_length_minus_2 = aa_digits_length - 2\n        val bb_digits_length_minus_2 = bb_digits_length - 2\n        val aa_digits_length_minus_3 = aa_digits_length - 3\n        val bb_digits_length_minus_3 = bb_digits_length - 3\n        val aa_digits_length_minus_4 = aa_digits_length - 4\n        val bb_digits_length_minus_4 = bb_digits_length - 4\n        val aa_digits_length_minus_5 = aa_digits_length - 5\n        val bb_digits_length_minus_5 = bb_digits_length - 5\n        val aa_digits_length_minus_6 = aa_digits_length - 6\n        val bb_digits_length_minus_6 = bb_digits_length - 6\n        val aa_digits_length_minus_7 = aa_digits_length - 7\n        val bb_digits_length_minus_7 = bb_digits_length - 7\n        val aa_digits_length_minus_8 = aa_digits_length - 8\n        val bb_digits_length_minus_8 = bb_digits_length - 8\n        val aa_digits_length_minus_9 = aa_digits_length - 9\n        val bb_digits_length_minus_9 = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4tuyzfv8.scala:40:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_9\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4tuyzfv8.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val result = \"\"\n        for (i <- 0 until aa_digits.length) {\n            for (j <- 0 until bb_digits.length) {\n                result += (aa_digits[i] * bb_digits[j])\n            }\n        }\n        return Long.parseLong(result)\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293150,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpircfeomo.scala:24:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                result += (aa_digits[\u001b[35mi\u001b[0m] * bb_digits[\u001b[35mj\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpircfeomo.scala:24:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                result += (aa_digits[\u001b[35mi\u001b[0m] * bb_digits[\u001b[35mj\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpircfeomo.scala:27:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mreturn\u001b[0m Long.parseLong(result)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value parseLong is not a member of object Long\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ =\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5uclaga2.scala:66:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ * b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ * a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 to a_digits.length - 1) {\n            result += (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwncxazps.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwncxazps.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase\n        val bb = b.toString.toUpperCase\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfg8qzzqc.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfg8qzzqc.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var a3 = a2 * b1\n        var a4 = a1 * b2\n        var a5 = a3 + a4\n        var a6 = a5 % 10\n        var a7 = a5 / 10\n        var a8 = a6 + a7\n        var a9 = a8 % 10\n        var a10 = a8 / 10\n        var a11 = a9 + a10\n        var a12 = a11 % 10\n        var a13 = a11 / 10\n        var a14 = a12 + a13\n        var a15 = a14 % 10\n        var a16 = a14 / 10\n        var a17 = a15 + a16\n        var a18 = a17 % 10\n        var a19 = a17 / 10\n        var a20 = a18 + a19\n        var a21 = a20 % 10\n        var a22 = a20 / 10\n        var a23 = a21 + a22\n        var a24 = a23 % 10\n        var a25 = a23 / 10\n        var a26 = a24 + a25\n        var a27 = a26 % 10\n        var a28 = a26 / 10\n        var a29 = a27 + a28\n        var a30 = a29 % 10\n        var a31 = a29 / 10\n        var a32 = a30 + a31\n        var a33 = a32 % 10\n        var a34 = a32 / 10\n        var a35 = a33 + a34\n        var a36 = a35 % 10\n        var a37 = a35 / 10\n        var a38 = a36 + a37\n        var a39 = a38 % 10\n        var a40 = a38 / 10\n        var a41 = a39 + a40\n        var a42 = a41 % 10\n        var a43 = a41 / 10\n        var a44 = a42 + a43\n        var a45 = a44 % 10\n        var a46 = a44 / 10\n        var a47 = a45 + a46\n        var a48 = a47 % 10\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1mbdsfxh.scala:67:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(x => x.equals(\"0\") || x.equals(\"1\") || x.equals(\"2\") || x.equals(\"3\") || x.equals(\"4\") || x.equals(\"5\") || x.equals(\"6\") || x.equals(\"7\") || x.equals(\"8\") || x.equals(\"9\"))\n        var b_unit_digits = b_digits.takeWhile(x => x.equals(\"0\") || x.equals(\"1\") || x.equals(\"2\") || x.equals(\"3\") || x.equals(\"4\") || x.equals(\"5\") || x.equals(\"6\") || x.equals(\"7\") || x.equals(\"8\") || x.equals(\"9\"))\n        var a_unit_digits_string = a_unit_digits.mkString(\"\")\n        var b_unit_digits_string = b_unit_digits.mkString(\"\")\n        var a_unit_digits_int = a_unit_digits_string.toInt\n        var b_unit_digits_int = b_unit_digits_string.toInt\n        var a_unit_digits_product = a_unit_digits_int * b_unit_digits_int\n        var a_unit_digits_product_string = a_unit_digits_product.toString\n        return a_unit_digits_product_string\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293150,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprecbaiht.scala:27:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mreturn\u001b[0m a_unit_digits_product_string\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (a_unit_digits_product_string : String)\n\u001b[31m   |\u001b[0m               Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0\n        }\n        if (a < 0 && b < 0) {\n            return -1 * multiply(-a, -b)\n        }\n        if (a < 0) {\n            return -1 * multiply(-a, b)\n        }\n        if (b < 0) {\n            return -1 * multiply(a, -b)\n        }\n        return a * b / 10\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbeqm5jk3.scala:32)\n\tat Problem.main(tmpbeqm5jk3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"l\")\n        var b_digits = b.toString.split(\"l\")\n        var a_digit_product = a_digits[0].toInt\n        var b_digit_product = b_digits[0].toInt\n        var a_digit_product_multiplied = a_digit_product * b_digit_product\n        var a_digit_product_multiplied_string = a_digit_product_multiplied.toString\n        var a_digit_product_multiplied_string_split = a_digit_product_multiplied_string.split(\"l\")\n        var a_digit_product_multiplied_string_split_string = a_digit_product_multiplied_string_split[0]\n        var a_digit_product_multiplied_string_split_string_int = a_digit_product_multiplied_string_split_string.toInt\n        var a_digit_product_multiplied_string_split_string_int_string = a_digit_product_multiplied_string_split_string_int.toString\n        var a_digit_product_multiplied_string_split_string_int_string_split = a_digit_product_multiplied_string_split_string_int_string.split(\"l\")\n        var a_digit_product_multiplied_string_split_string_int_string_split_string = a_digit_product_multiplied_string_split_string_int_string_split[0]\n        var a_digit_product_multiplied_string_split_string_int_string_split_string_int = a_digit_product_multiplied_string_split_string_int_string_split_string.toInt\n        var a_digit_product_multiplied_string_split_string_int_string_split_string_int_string = a_digit_product_multiplied_string_split_string_int_string_split_string_int.toString\n        var a_digit_product_multiplied_string_split_string_int_string_split_string_int_string_split_string_int = a_digit_product_multiplied_string_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293155,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpovtmu1l3.scala:19:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_digit_product\u001b[0m = a_digits[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpovtmu1l3.scala:20:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_digit_product\u001b[0m = b_digits[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpovtmu1l3.scala:31:113 -----------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_digit_product_multiplied_string_split_string_int_string_split_string_int_string_split_string_int\u001b[0m = a_digit_product_multiplied_string_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: a_digit_product_multiplied_string_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpovtmu1l3.scala:32:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var a_unit_digits = a_digits.filter(_.isDigit).toList\n        var b_unit_digits = b_digits.filter(_.isDigit).toList\n        var a_unit_digits_product = a_unit_digits.map(x => _.toInt(x)).reduce(_.times)\n        var b_unit_digits_product = b_unit_digits.map(x => _.toInt(x)).reduce(_.times)\n        var product = a_unit_digits_product * b_unit_digits_product\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqftwe1en.scala:19:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.filter(_.isDigit).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value isDigit is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqftwe1en.scala:20:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.filter(_.isDigit).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value isDigit is not a member of String\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpqftwe1en.scala:21:59 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.map(\u001b[36mx\u001b[0m => _.toInt(x)).reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.toInt(x).\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpqftwe1en.scala:21:78 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.map(\u001b[36mx\u001b[0m => _.toInt(x)).reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpqftwe1en.scala:22:59 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits_product\u001b[0m = b_unit_digits.map(\u001b[36mx\u001b[0m => _.toInt(x)).reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$5 of expand",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0\n        }\n        return a * b / 10\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293156,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_tcfx_gt.scala:23)\n\tat Problem.main(tmp_tcfx_gt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_product = 1l\n        var b_digits_product = 1l\n        for (i <- 0 until a_digits_length) {\n            a_digits_product *= Long.parseLong(a_digits[i])\n        }\n        for (i <- 0 until b_digits_length) {\n            b_digits_product *= Long.parseLong(b_digits[i])\n        }\n        return a_digits_product * b_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293138,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc0k933zs.scala:24:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_product *= Long.parseLong(a_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc0k933zs.scala:24:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_product *= Long.parseLong(a_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc0k933zs.scala:24:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_product *= Long.parseLong(a_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc0k933zs.scala:27:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_product *= Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc0k933zs.scala:27:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_product *= Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc0k933zs.scala:27:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_product *= Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result * 10 + Long.parseLong(a_digits[i]) * Long.parseLong(b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293156,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl15ajosn.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl15ajosn.scala:21:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            var a_digit = a_digits[i]\n            var b_digit = b_digits[i]\n            result = result + (a_digit * b_digit)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293154,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpinsvf6np.scala:21:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36ma_digit\u001b[0m = a_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpinsvf6np.scala:22:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mb_digit\u001b[0m = b_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase\n        val bb = b.toString.toUpperCase\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfg8qzzqc.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfg8qzzqc.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var result = 0l\n        for (var i = 0; i < a_digits_length; i++) {\n            var a_digit = a_digits[i]\n            for (var j = 0; j < b_digits_length; j++) {\n                var b_digit = b_digits[j]\n                if (a_digit == \"0\" || b_digit == \"0\") {\n                    continue\n                }\n                result += (Long.parseLong(a_digit) * Long.parseLong(b_digit))\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_5vagtdu.scala:22:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_5vagtdu.scala:22:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_5vagtdu.scala:22:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_5vagtdu.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterato",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpkw7intkg.scala:67:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkw7intkg.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkw7intkg.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkw7intkg.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ * b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkw7intkg.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkw7intkg.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0)\n            return 0l\n        else if (a < 0 && b < 0)\n            return -1l\n        else if (a < 0)\n            return -1l\n        else if (b < 0)\n            return -1l\n        else {\n            var a_digits = a.toString().split(\"\")\n            var b_digits = b.toString().split(\"\")\n            var a_unit_digits = a_digits.filter(elem -> elem.equals(\"1\")).toList()\n            var b_unit_digits = b_digits.filter(elem -> elem.equals(\"1\")).toList()\n            var a_unit_digits_product = a_unit_digits.map(elem -> elem * b_unit_digits.head).reduce(0l, (a, b) -> a + b)\n            var b_unit_digits_product = b_unit_digits.map(elem -> elem * a_unit_digits.head).reduce(0l, (a, b) -> a + b)\n            return a_unit_digits_product * b_unit_digits_product\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293155,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvmgmea4.scala:28:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.filter(elem -> elem.equals(\u001b[31m\"1\"\u001b[0m)).toList()\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Not found: elem\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvmgmea4.scala:29:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.filter(elem -> elem.equals(\u001b[31m\"1\"\u001b[0m)).toList()\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Not found: elem\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result * 10 + Long.parseLong(a_digits[i]) * Long.parseLong(b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplcuxp6v_.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplcuxp6v_.scala:21:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_sum = 0l\n        var b_digits_sum = 0l\n        for (i <- 0 until a_digits_length) {\n            a_digits_sum += (a_digits[i].toInt * 10)\n        }\n        for (i <- 0 until b_digits_length) {\n            b_digits_sum += (b_digits[i].toInt * 10)\n        }\n        var product = a_digits_sum * b_digits_sum\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu_w5asz9.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_sum += (a_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_w5asz9.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_sum += (a_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu_w5asz9.scala:27:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_sum += (b_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_w5asz9.scala:27:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_sum += (b_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var b1 = b % 10\n        var a2 = a / 10\n        var b2 = b / 10\n        var a3 = a2 % 10\n        var b3 = b2 % 10\n        var a4 = a3 / 10\n        var b4 = b3 / 10\n        var a5 = a4 % 10\n        var b5 = b4 % 10\n        var a6 = a5 / 10\n        var b6 = b5 / 10\n        var a7 = a6 % 10\n        var b7 = b6 % 10\n        var a8 = a7 / 10\n        var b8 = b7 / 10\n        var a9 = a8 % 10\n        var b9 = b8 % 10\n        var a10 = a9 / 10\n        var b10 = b9 / 10\n        var a11 = a10 % 10\n        var b11 = b10 % 10\n        var a12 = a11 / 10\n        var b12 = b11 / 10\n        var a13 = a12 % 10\n        var b13 = b12 % 10\n        var a14 = a13 / 10\n        var b14 = b13 / 10\n        var a15 = a14 % 10\n        var b15 = b14 % 10\n        var a16 = a15 / 10\n        var b16 = b15 / 10\n        var a17 = a16 % 10\n        var b17 = b16 % 10\n        var a18 = a17 / 10\n        var b18 = b17 / 10\n        var a19 = a18 % 10\n        var b19 = b18 % 10\n        var a20 = a19 / 10\n        var b20 = b19 / 10\n        var a21 = a20 % 10\n        var b21 = b20 % 10\n        var a22 = a21 / 10\n        var b22 = b21 / 10\n        var a23 = a22 % 10\n        var b23 = b22 % 10\n        var a24 = a23 / 10\n        var b24 = b23 / 10\n        var a25 = a24 % 10\n        var b25 = b24 % 10\n        var a26 = a25 / 10\n        var b26 = b\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpstlh5omb.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_len = a_digits.length\n        var b_digits_len = b_digits.length\n        var a_digits_len_minus_one = a_digits_len - 1\n        var b_digits_len_minus_one = b_digits_len - 1\n        var a_digits_len_minus_two = a_digits_len - 2\n        var b_digits_len_minus_two = b_digits_len - 2\n        var a_digits_len_minus_three = a_digits_len - 3\n        var b_digits_len_minus_three = b_digits_len - 3\n        var a_digits_len_minus_four = a_digits_len - 4\n        var b_digits_len_minus_four = b_digits_len - 4\n        var a_digits_len_minus_five = a_digits_len - 5\n        var b_digits_len_minus_five = b_digits_len - 5\n        var a_digits_len_minus_six = a_digits_len - 6\n        var b_digits_len_minus_six = b_digits_len - 6\n        var a_digits_len_minus_seven = a_digits_len - 7\n        var b_digits_len_minus_seven = b_digits_len - 7\n        var a_digits_len_minus_eight = a_digits_len - 8\n        var b_digits_len_minus_eight = b_digits_len - 8\n        var a_digits_len_minus_nine = a_digits_len - 9\n        var b_digits_len_minus_nine = b_digits_len - 9\n        var a_digits_len_minus_ten = a_digits_len - 10\n        var b_digits_len_minus_ten = b_digits_len - 10\n        var a_digits_len\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi4wbdzwr.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi4wbdzwr.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"l\")\n        var b_digits = b.toString().split(\"l\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_sum = 0l\n        var b_digits_sum = 0l\n        for (var i = 0; i < a_digits_length; i++) {\n            a_digits_sum += Long.parseLong(a_digits[i])\n        }\n        for (var i = 0; i < b_digits_length; i++) {\n            b_digits_sum += Long.parseLong(b_digits[i])\n        }\n        var a_digits_sum_mod = a_digits_sum % 10\n        var b_digits_sum_mod = b_digits_sum % 10\n        var product = a_digits_sum_mod * b_digits_sum_mod\n        if (product > 9) {\n            product = product % 10\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8jlgps2g.scala:23:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8jlgps2g.scala:23:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8jlgps2g.scala:23:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8jlgps2g.scala:26:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8jlgps2g.scala:26:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8jlgps2g.scala:26:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_1 = aa_digits_length - 1\n        val bb_digits_length_minus_1 = bb_digits_length - 1\n        val aa_digits_length_minus_2 = aa_digits_length - 2\n        val bb_digits_length_minus_2 = bb_digits_length - 2\n        val aa_digits_length_minus_3 = aa_digits_length - 3\n        val bb_digits_length_minus_3 = bb_digits_length - 3\n        val aa_digits_length_minus_4 = aa_digits_length - 4\n        val bb_digits_length_minus_4 = bb_digits_length - 4\n        val aa_digits_length_minus_5 = aa_digits_length - 5\n        val bb_digits_length_minus_5 = bb_digits_length - 5\n        val aa_digits_length_minus_6 = aa_digits_length - 6\n        val bb_digits_length_minus_6 = bb_digits_length - 6\n        val aa_digits_length_minus_7 = aa_digits_length - 7\n        val bb_digits_length_minus_7 = bb_digits_length - 7\n        val aa_digits_length_minus_8 = aa_digits_length - 8\n        val bb_digits_length_minus_8 = bb_digits_length - 8\n        val aa_digits_length_minus_9 = aa_digits_length - 9\n        val bb_digits_length_minus_9 = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4tuyzfv8.scala:40:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_9\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4tuyzfv8.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        for (var i = 0; i < a.toString().length(); i++) {\n            var digit = a.toString().charAt(i) - '0'\n            result += digit * b.toString().charAt(i) - '0'\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp64n98a6t.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp64n98a6t.scala:18:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but '.' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp64n98a6t.scala:18:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp64n98a6t.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmphklicz3v.scala:81:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvari",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ =\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5uclaga2.scala:66:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ * b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ * a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var result = a1 * b1\n        if (a2 > 0) {\n            result += a2 * b1\n        }\n        if (b2 > 0) {\n            result += a1 * b2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw67z25oa.scala:31)\n\tat Problem.main(tmpw67z25oa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"l\")\n        var b_digits = b.toString.split(\"l\")\n        var a_digits_int = a_digits[0].toInt\n        var b_digits_int = b_digits[0].toInt\n        var a_digits_int_product = a_digits_int * b_digits_int\n        var a_digits_int_product_string = a_digits_int_product.toString\n        var a_digits_int_product_string_split = a_digits_int_product_string.split(\"l\")\n        var a_digits_int_product_string_split_int = a_digits_int_product_string_split[0].toInt\n        var a_digits_int_product_string_split_int_product = a_digits_int_product_string_split_int * b_digits_int\n        var a_digits_int_product_string_split_int_product_string = a_digits_int_product_string_split_int_product.toString\n        var a_digits_int_product_string_split_int_product_string_split = a_digits_int_product_string_split_int_product_string.split(\"l\")\n        var a_digits_int_product_string_split_int_product_string_split_int = a_digits_int_product_string_split_int_product_string_split[0].toInt\n        var a_digits_int_product_string_split_int_product_string_split_int_product = a_digits_int_product_string_split_int_product_string_split_int * b_digits_int\n        var a_digits_int_product_string_split_int_product_string_split_int_product_string = a_digits_int_product_string_split_int_product_string_split_int_product_string.toString\n        var a_digits_int_product_string_split_int_product_string_split_int_product_string\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5bnj1pnb.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5bnj1pnb.scala:19:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_digits_int\u001b[0m = a_digits[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5bnj1pnb.scala:20:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_digits_int\u001b[0m = b_digits[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp5bnj1pnb.scala:30:92 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_digits_int_product_string_split_int_product_string_split_int_product_string\u001b[0m = a_digits_int_product_string_split_int_product_string_split_int_product_string.toString\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvariable\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  a_digits_int_product_string_split_int_product_string_split_int_product_string\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5bnj1pnb.scala:32:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(x => x.toInt() != 0)\n        var b_unit_digits = b_digits.takeWhile(x => x.toInt() != 0)\n        var a_unit_digits_product = a_unit_digits.product(b_unit_digits)\n        var a_unit_digits_sum = a_unit_digits.sum(b_unit_digits)\n        var a_unit_digits_product_sum = a_unit_digits_product.sum(a_unit_digits_sum)\n        return a_unit_digits_product_sum\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmxr2a50n.scala:19:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.takeWhile(\u001b[36mx\u001b[0m => x.toInt() != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmxr2a50n.scala:20:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.takeWhile(\u001b[36mx\u001b[0m => x.toInt() != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmxr2a50n.scala:21:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.product(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmxr2a50n.scala:22:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_sum\u001b[0m = a_unit_digits.sum(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        for (var i = 0; i < a.length(); i++) {\n            result = result * 10 + a.apply(i)\n        }\n        for (var i = 0; i < b.length(); i++) {\n            result = result * 10 + b.apply(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp7ieg0rdm.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7ieg0rdm.scala:18:38 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp7ieg0rdm.scala:18:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp7ieg0rdm.scala:21:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7ieg0rdm.scala:21:38 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp7ieg0rdm.scala:21:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_len = aa.length\n        val bb_len = bb.length\n        val aa_digits = aa.substring(0, aa_len - 1)\n        val bb_digits = bb.substring(0, bb_len - 1)\n        val aa_digits_len = aa_digits.length\n        val bb_digits_len = bb_digits.length\n        val aa_digits_digits = aa_digits.substring(0, aa_digits_len - 1)\n        val bb_digits_digits = bb_digits.substring(0, bb_digits_len - 1)\n        val aa_digits_digits_len = aa_digits_digits.length\n        val bb_digits_digits_len = bb_digits_digits.length\n        val aa_digits_digits_digits = aa_digits_digits.substring(0, aa_digits_digits_len - 1)\n        val bb_digits_digits_digits = bb_digits_digits.substring(0, bb_digits_digits_len - 1)\n        val aa_digits_digits_digits_len = aa_digits_digits_digits.length\n        val bb_digits_digits_digits_len = bb_digits_digits_digits.length\n        val aa_digits_digits_digits_digits = aa_digits_digits_digits.substring(0, aa_digits_digits_digits_len - 1)\n        val bb_digits_digits_digits_digits = bb_digits_digits_digits.substring(0, bb_digits_digits_digits_len - 1)\n        val aa_digits_digits_digits_digits_len = aa_digits\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpay8arx0p.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_len = a_digits.length\n        var b_digits_len = b_digits.length\n        var a_digits_product = a_digits.reduce((a, b) -> a * b)\n        var b_digits_product = b_digits.reduce((a, b) -> a * b)\n        var a_digits_product_len = a_digits_product.toString().length\n        var b_digits_product_len = b_digits_product.toString().length\n        var a_digits_product_len_mod_10 = a_digits_product_len % 10\n        var b_digits_product_len_mod_10 = b_digits_product_len % 10\n        var a_digits_product_len_mod_100 = a_digits_product_len % 100\n        var b_digits_product_len_mod_100 = b_digits_product_len % 100\n        var a_digits_product_len_mod_1000 = a_digits_product_len % 1000\n        var b_digits_product_len_mod_1000 = b_digits_product_len % 1000\n        var a_digits_product_len_mod_10000 = a_digits_product_len % 10000\n        var b_digits_product_len_mod_10000 = b_digits_product_len % 10000\n        var a_digits_product_len_mod_100000 = a_digits_product_len % 100000\n        var b_digits_product_len_mod_100000 = b_digits_product_len % 100000\n        var a_digits_product_len_mod_1000000 = a_digits_product_len % 1000000\n        var b_digits_product_len_mod_1000000 = b_digits_product_len % 1000000\n        var a_digits_product_len_mod_10000000 = a_digits_product_len % 10000000\n\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4bsk7265.scala:21:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_digits_product\u001b[0m = a_digits.reduce((a, b) -> a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    ((Long, Long), Long)\n\u001b[31m   |\u001b[0m                                    Required: (String, String) => String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4bsk7265.scala:22:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_digits_product\u001b[0m = b_digits.reduce((a, b) -> a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    ((Long, Long), Long)\n\u001b[31m   |\u001b[0m                                    Required: (String, String) => String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4bsk7265.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmphklicz3v.scala:81:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvari",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var a3 = a2 * b1\n        var a4 = a1 * b2\n        var a5 = a3 + a4\n        var a6 = a5 % 10\n        var a7 = a5 / 10\n        var a8 = a6 + a7\n        var a9 = a8 % 10\n        var a10 = a8 / 10\n        var a11 = a9 + a10\n        var a12 = a11 % 10\n        var a13 = a11 / 10\n        var a14 = a12 + a13\n        var a15 = a14 % 10\n        var a16 = a14 / 10\n        var a17 = a15 + a16\n        var a18 = a17 % 10\n        var a19 = a17 / 10\n        var a20 = a18 + a19\n        var a21 = a20 % 10\n        var a22 = a20 / 10\n        var a23 = a21 + a22\n        var a24 = a23 % 10\n        var a25 = a23 / 10\n        var a26 = a24 + a25\n        var a27 = a26 % 10\n        var a28 = a26 / 10\n        var a29 = a27 + a28\n        var a30 = a29 % 10\n        var a31 = a29 / 10\n        var a32 = a30 + a31\n        var a33 = a32 % 10\n        var a34 = a32 / 10\n        var a35 = a33 + a34\n        var a36 = a35 % 10\n        var a37 = a35 / 10\n        var a38 = a36 + a37\n        var a39 = a38 % 10\n        var a40 = a38 / 10\n        var a41 = a39 + a40\n        var a42 = a41 % 10\n        var a43 = a41 / 10\n        var a44 = a42 + a43\n        var a45 = a44 % 10\n        var a46 = a44 / 10\n        var a47 = a45 + a46\n        var a48 = a47 % 10\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1mbdsfxh.scala:67:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase\n        val bb = b.toString.toUpperCase\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfg8qzzqc.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfg8qzzqc.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"l\")\n        var b_digits = b.toString.split(\"l\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_result = \"\"\n        var b_digits_result = \"\"\n        var a_digits_index = 0\n        var b_digits_index = 0\n        var a_digit = 0\n        var b_digit = 0\n        var a_digit_multiplier = 1\n        var b_digit_multiplier = 1\n        var a_digit_multiplier_sum = 0\n        var b_digit_multiplier_sum = 0\n        var a_digit_multiplier_sum_sum = 0\n        var b_digit_multiplier_sum_sum = 0\n        var a_digit_multiplier_sum_sum_sum = 0\n        var b_digit_multiplier_sum_sum_sum = 0\n        var a_digit_multiplier_sum_sum_sum_sum = 0\n        var b_digit_multiplier_sum_sum_sum_sum = 0\n        var a_digit_multiplier_sum_sum_sum_sum_sum = 0\n        var b_digit_multiplier_sum_sum_sum_sum_sum = 0\n        while (a_digits_index < a_digits_length) {\n            a_digit = Long.parseLong(a_digits[a_digits_index])\n            a_digit_multiplier = a_digit\n            a_digit_multiplier_sum = a_digit\n            a_digit_multiplier_sum_sum = a_digit\n            a_digit_multiplier_sum_sum_sum = a_digit\n            a_digit_multiplier_sum_sum_sum_sum = a_digit\n            a_digits_index += 1\n        }\n        while (b_digits_index < b_digits_length) {\n            b_digit = Long.parseLong(b_digits[b_digits_index])\n            b_digit_multiplier = b_digit\n            b_digit_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_adsmlwq.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_adsmlwq.scala:40:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m            a_digit = Long.parseLong(a_digits[\u001b[35ma_digits_index\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_adsmlwq.scala:40:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m            a_digit = Long.parseLong(a_digits[\u001b[35ma_digits_index\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: type a_digits_index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_adsmlwq.scala:49:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            b_digit = Long.parseLong(b_digits[\u001b[35mb_digits_index\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_adsmlwq.scala:49:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            b_digit = Long.parseLong(b_digits[\u001b[35mb_digits_index\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: type b_digits_index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_adsmlwq.scala:51:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            b_digit_\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: b_digit_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mism",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result += (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp2ksgzyt.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2ksgzyt.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps77z1cgk.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val a_digits = a.toString.split(\"l\")\n        val b_digits = b.toString.split(\"l\")\n        val a_digits_length = a_digits.length\n        val b_digits_length = b_digits.length\n        val a_digits_array = new Array[Long](a_digits_length)\n        val b_digits_array = new Array[Long](b_digits_length)\n        for (i <- 0 until a_digits_length) {\n            a_digits_array(i) = Long.parseLong(a_digits(i))\n        }\n        for (i <- 0 until b_digits_length) {\n            b_digits_array(i) = Long.parseLong(b_digits(i))\n        }\n        val a_digits_product = a_digits_array.product(b_digits_array)\n        val a_digits_product_string = a_digits_product.toString\n        val a_digits_product_string_length = a_digits_product_string.length\n        val a_digits_product_string_array = new Array[Long](a_digits_product_string_length)\n        for (i <- 0 until a_digits_product_string_length) {\n            a_digits_product_string_array(i) = Long.parseLong(a_digits_product_string(i))\n        }\n        val a_digits_product_string_array_product = a_digits_product_string_array.product(a_digits_product_string_array)\n        val a_digits_product_string_array_product_string = a_digits_product_string_array_product.toString\n        val a_digits_product_string_array_product_string_length = a_digits_product_string_array_product_string.length\n        val a_digits_product_string_array_product_string_array = new Array[Long](a_digits_product_string_array_product_string_length)\n        for (i <- 0 until a_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7opl9us9.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7opl9us9.scala:24:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_array(i) = Long.parseLong(a_digits(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7opl9us9.scala:27:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_array(i) = Long.parseLong(b_digits(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7opl9us9.scala:29:54 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma_digits_product\u001b[0m = a_digits_array.product(b_digits_array)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (b_digits_array : Array[Long])\n\u001b[31m   |\u001b[0m                                Required: Numeric[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7opl9us9.scala:34:52 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            a_digits_product_string_array(i) = Long.parseLong(a_digits_product_string(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7opl9us9.scala:36:90 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ma_digits_product_string_array_product\u001b[0m = a_digits_product_string_array.product(a_digits_product_string_array)\n\u001b[31m\u001b[31m   |\u001b[0m                            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase\n        val bb = b.toString.toUpperCase\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfg8qzzqc.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfg8qzzqc.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val result = 0l\n        for (i <- 0 until aa_digits_length) {\n            for (j <- 0 until bb_digits_length) {\n                val aa_digit = aa_digits[i]\n                val bb_digit = bb_digits[j]\n                val aa_digit_int = aa_digit.toInt\n                val bb_digit_int = bb_digit.toInt\n                val aa_digit_int_pow = aa_digit_int * bb_digit_int\n                val result_pow = result * 10 + aa_digit_int_pow\n                result = result_pow\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6znx51rg.scala:26:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36maa_digit\u001b[0m = aa_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6znx51rg.scala:27:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbb_digit\u001b[0m = bb_digits[\u001b[35mj\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type j\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp6znx51rg.scala:32:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                result = result_pow\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(x => x.toString().equals(\"1\"))\n        var b_unit_digits = b_digits.takeWhile(x => x.toString().equals(\"1\"))\n        var a_unit_digits_product = a_unit_digits.reduce(0, (x, y) => x * y)\n        var b_unit_digits_product = b_unit_digits.reduce(0, (x, y) => x * y)\n        var result = a_unit_digits_product * b_unit_digits_product\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpfnr1afxx.scala:21:61 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter x.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpfnr1afxx.scala:21:64 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter y.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpfnr1afxx.scala:22:61 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits_product\u001b[0m = b_unit_digits.reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter x.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpfnr1afxx.scala:22:64 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits_product\u001b[0m = b_unit_digits.reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter y.\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnr1afxx.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var a_unit_digits = a_digits.takeWhile(d -> d.toInt == 0)\n        var b_unit_digits = b_digits.takeWhile(d -> d.toInt == 0)\n        var a_unit_digits_product = a_unit_digits.reduce(1, (a, b) -> a * b)\n        var b_unit_digits_product = b_unit_digits.reduce(1, (a, b) -> a * b)\n        var result = a_unit_digits_product * b_unit_digits_product\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293169,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6um47gu2.scala:19:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.takeWhile(d -> d.toInt == \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6um47gu2.scala:20:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.takeWhile(d -> d.toInt == \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6um47gu2.scala:21:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.reduce(\u001b[31m1\u001b[0m, (a, b) -> a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Int, ((Long, Long), Long))\n\u001b[31m   |\u001b[0m                                   Required: (String, String) => String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6um47gu2.scala:22:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits_product\u001b[0m = b_unit_digits.reduce(\u001b[31m1\u001b[0m, (a, b) -> a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Int, ((Long, Long), Long))\n\u001b[31m   |\u001b[0m                                   Required: (String, String) => String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(x => x.equals(\"0\")).toList\n        var b_unit_digits = b_digits.takeWhile(x => x.equals(\"0\")).toList\n        var a_unit_digits_product = a_unit_digits.map(x => x.toInt).reduce(0, (a, b) => a * b)\n        var b_unit_digits_product = b_unit_digits.map(x => x.toInt).reduce(0, (a, b) => a * b)\n        var result = a_unit_digits_product * b_unit_digits_product\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293165,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpx0vwh841.scala:21:79 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.map(\u001b[36mx\u001b[0m => x.toInt).reduce(\u001b[31m0\u001b[0m, (\u001b[36ma\u001b[0m, \u001b[36mb\u001b[0m) => a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter a.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpx0vwh841.scala:21:82 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.map(\u001b[36mx\u001b[0m => x.toInt).reduce(\u001b[31m0\u001b[0m, (\u001b[36ma\u001b[0m, \u001b[36mb\u001b[0m) => a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter b.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpx0vwh841.scala:22:79 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits_product\u001b[0m = b_unit_digits.map(\u001b[36mx\u001b[0m => x.toInt).reduce(\u001b[31m0\u001b[0m, (\u001b[36ma\u001b[0m, \u001b[36mb\u001b[0m) => a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter a.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpx0vwh841.scala:22:82 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits_product\u001b[0m = b_unit_digits.map(\u001b[36mx\u001b[0m => x.toInt).reduce(\u001b[31m0\u001b[0m, (\u001b[36ma\u001b[0m, \u001b[36mb\u001b[0m) => a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 to a_digits.length - 1) {\n            result += (Long.parseLong(a_digits[i]) * Long.parseLong(b_digits[i]))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293169,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpltph5wyi.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m]))\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpltph5wyi.scala:21:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m]))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpltph5wyi.scala:21:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m]))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase\n        val bb = b.toString.toUpperCase\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val result = 0l\n        for (i <- 0 until aa_digits_length) {\n            for (j <- 0 until bb_digits_length) {\n                if (aa_digits[i].equals(bb_digits[j])) {\n                    result += (i * j)\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293169,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5jao13aj.scala:26:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                \u001b[33mif\u001b[0m (aa_digits[\u001b[35mi\u001b[0m].equals(bb_digits[\u001b[35mj\u001b[0m])) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5jao13aj.scala:27:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                    result += (i * j)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_product = 0l\n        var b_digits_product = 0l\n        for (i <- 0 until a_digits_length) {\n            a_digits_product = a_digits_product * 10 + a_digits[i]\n        }\n        for (i <- 0 until b_digits_length) {\n            b_digits_product = b_digits_product * 10 + b_digits[i]\n        }\n        return a_digits_product * b_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293166,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppsprjjqy.scala:24:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_product = a_digits_product * \u001b[31m10\u001b[0m + a_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppsprjjqy.scala:27:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_product = b_digits_product * \u001b[31m10\u001b[0m + b_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps77z1cgk.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var a3 = a1 * b1\n        var a4 = a2 * b1\n        var a5 = a1 * b2\n        var a6 = a2 * b2\n        var a7 = a3 + a4 + a5 + a6\n        var a8 = a7 / 10\n        var a9 = a7 % 10\n        var a10 = a8 * b1\n        var a11 = a9 * b2\n        var a12 = a8 * b2\n        var a13 = a9 * b1\n        var a14 = a10 + a11 + a12 + a13\n        var a15 = a14 / 10\n        var a16 = a14 % 10\n        var a17 = a15 * b2\n        var a18 = a16 * b1\n        var a19 = a15 * b1\n        var a20 = a16 * b2\n        var a21 = a17 + a18 + a19 + a20\n        var a22 = a21 / 10\n        var a23 = a21 % 10\n        var a24 = a22 * b2\n        var a25 = a23 * b1\n        var a26 = a22 * b1\n        var a27 = a23 * b2\n        var a28 = a24 + a25 + a26 + a27\n        var a29 = a28 / 10\n        var a30 = a28 % 10\n        var a31 = a29 * b2\n        var a32 = a30 * b1\n        var a33 = a29 * b1\n        var a34 = a30 * b2\n        var a35 = a31 + a32 + a33 + a34\n        var a36 = a35 / 10\n        var a37 = a35 % 10\n        var a38 = a36 * b2\n        var a39 = a37 * b1\n        var a40 = a36 * b1\n        var a41 = a37 * b2\n        var a42 = a38 + a39 + a40 + a41\n        var a43 = a42 / 10\n\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293169,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3a3j8v7i.scala:63:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var result = a1 * b1\n        if (a2 > 0) {\n            result = result + a2 * b1\n        }\n        if (b2 > 0) {\n            result = result + a1 * b2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293170,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa8sz7i2n.scala:31)\n\tat Problem.main(tmpa8sz7i2n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ylmfz01.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ =\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5uclaga2.scala:66:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ * b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ * a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString().toCharArray()\n        val bb = b.toString().toCharArray()\n        val ab = new StringBuilder()\n        for (i <- 0 until aa.length) {\n            ab.append(aa[i])\n            for (j <- 0 until bb.length) {\n                ab.append(bb[j])\n                if (i + j < aa.length && j < bb.length) {\n                    ab.append('0')\n                }\n            }\n        }\n        val result = Long.parseLong(ab.toString())\n        if (result < 0) {\n            return -result\n        } else {\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293170,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9aqr_sn.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            ab.append(aa[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9aqr_sn.scala:23:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                ab.append(bb[\u001b[35mj\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type j\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv9aqr_sn.scala:29:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = Long.parseLong(ab.toString())\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value parseLong is not a member of object Long\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result * 10 + Long.parseLong(a_digits[i]) * Long.parseLong(b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293156,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl15ajosn.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl15ajosn.scala:21:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var aa = a\n        var bb = b\n        var result = 0l\n        while (aa != 0l) {\n            var aaa = aa % 10l\n            var bbb = bb % 10l\n            result = result + aaa * bbb\n            aa = aa / 10l\n            bb = bb / 10l\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnsyblpl7.scala:30)\n\tat Problem.main(tmpnsyblpl7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"l\")\n        var b_digits = b.toString().split(\"l\")\n        var a_digit_product = a_digits[0].toInt * b_digits[0].toInt\n        var b_digit_product = a_digits[1].toInt * b_digits[1].toInt\n        var result = a_digit_product * b_digit_product\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293168,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpmxtdjs6j.scala:19:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_digit_product\u001b[0m = a_digits[\u001b[31m0\u001b[0m].toInt * b_digits[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmxtdjs6j.scala:20:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_digit_product\u001b[0m = a_digits[\u001b[31m1\u001b[0m].toInt * b_digits[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result += (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293170,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaf8feslh.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaf8feslh.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        for (var i = 0; i < a.toString().length(); i++) {\n            result += (a.toString().charAt(i) - '0') * (b.toString().charAt(i) - '0')\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpk9y223hg.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk9y223hg.scala:18:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but '.' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpk9y223hg.scala:18:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk9y223hg.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        for (var i = 0; i < a.toString().length(); i++) {\n            var digit = a.toString().charAt(i) - '0'\n            result += digit * b.toString().charAt(i) - '0'\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp64n98a6t.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp64n98a6t.scala:18:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but '.' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp64n98a6t.scala:18:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp64n98a6t.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_len = a_digits.length\n        var b_digits_len = b_digits.length\n        var result = 0l\n        for (var i = 0; i < a_digits_len; i++) {\n            for (var j = 0; j < b_digits_len; j++) {\n                result += (Long.parseLong(a_digits[i]) * Long.parseLong(b_digits[j]))\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293151,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpbl_zs0bu.scala:22:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_len; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbl_zs0bu.scala:22:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_len; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpbl_zs0bu.scala:22:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_len; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbl_zs0bu.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_len; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(d -> d.equals(\"0\") || d.equals(\"1\") || d.equals(\"2\") || d.equals(\"3\") || d.equals(\"4\") || d.equals(\"5\") || d.equals(\"6\") || d.equals(\"7\") || d.equals(\"8\") || d.equals(\"9\"))\n        var b_unit_digits = b_digits.takeWhile(d -> d.equals(\"0\") || d.equals(\"1\") || d.equals(\"2\") || d.equals(\"3\") || d.equals(\"4\") || d.equals(\"5\") || d.equals(\"6\") || d.equals(\"7\") || d.equals(\"8\") || d.equals(\"9\"))\n        var a_unit_digits_count = a_unit_digits.length\n        var b_unit_digits_count = b_unit_digits.length\n        var a_unit_digits_product = a_unit_digits.reduce((a, b) -> a * b)\n        var b_unit_digits_product = b_unit_digits.reduce((a, b) -> a * b)\n        var a_unit_digits_product_count = a_unit_digits_product.toString().length\n        var b_unit_digits_product_count = b_unit_digits_product.toString().length\n        var a_unit_digits_product_digits = a_unit_digits_product.toString().split(\"\")\n        var b_unit_digits_product_digits = b_unit_digits_product.toString().split(\"\")\n        var a_unit_digits_product_digits_count = a_unit_digits_product_digits.length\n        var b_unit_digits_product_digits_count = b_unit_digits_product_digits.length\n        var a_unit_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293173,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgfi_nsyw.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgfi_nsyw.scala:19:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.takeWhile(d -> d.equals(\u001b[31m\"0\"\u001b[0m) || d.equals(\u001b[31m\"1\"\u001b[0m) || d.equals(\u001b[31m\"2\"\u001b[0m) || d.equals(\u001b[31m\"3\"\u001b[0m) || d.equals(\u001b[31m\"4\"\u001b[0m) || d.equals(\u001b[31m\"5\"\u001b[0m) || d.equals(\u001b[31m\"6\"\u001b[0m) || d.equals(\u001b[31m\"7\"\u001b[0m) || d.equals(\u001b[31m\"8\"\u001b[0m) || d.equals(\u001b[31m\"9\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgfi_nsyw.scala:20:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.takeWhile(d -> d.equals(\u001b[31m\"0\"\u001b[0m) || d.equals(\u001b[31m\"1\"\u001b[0m) || d.equals(\u001b[31m\"2\"\u001b[0m) || d.equals(\u001b[31m\"3\"\u001b[0m) || d.equals(\u001b[31m\"4\"\u001b[0m) || d.equals(\u001b[31m\"5\"\u001b[0m) || d.equals(\u001b[31m\"6\"\u001b[0m) || d.equals(\u001b[31m\"7\"\u001b[0m) || d.equals(\u001b[31m\"8\"\u001b[0m) || d.equals(\u001b[31m\"9\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfi_nsyw.scala:23:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.reduce((a, b) -> a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    ((Long, Long), Long)\n\u001b[31m   |\u001b[0m                                    Required: (String, String) => String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var a3 = a2 * b1\n        var a4 = a1 * b2\n        var a5 = a3 + a4\n        var a6 = a5 % 10\n        var a7 = a5 / 10\n        var a8 = a6 * b2\n        var a9 = a7 + a8\n        var a10 = a9 % 10\n        var a11 = a9 / 10\n        var a12 = a10 * b1\n        var a13 = a11 + a12\n        var a14 = a13 % 10\n        var a15 = a13 / 10\n        var a16 = a14 * b2\n        var a17 = a15 + a16\n        var a18 = a17 % 10\n        var a19 = a17 / 10\n        var a20 = a18 * b1\n        var a21 = a19 + a20\n        var a22 = a21 % 10\n        var a23 = a21 / 10\n        var a24 = a22 * b2\n        var a25 = a23 + a24\n        var a26 = a25 % 10\n        var a27 = a25 / 10\n        var a28 = a26 * b1\n        var a29 = a27 + a28\n        var a30 = a29 % 10\n        var a31 = a29 / 10\n        var a32 = a30 * b2\n        var a33 = a31 + a32\n        var a34 = a33 % 10\n        var a35 = a33 / 10\n        var a36 = a34 * b1\n        var a37 = a35 + a36\n        var a38 = a37 % 10\n        var a39 = a37 / 10\n        var a40 = a38 * b2\n        var a41 = a39 + a40\n        var a42 = a41 % 10\n        var a43 = a41 / 10\n        var a44 = a42 * b1\n        var a45 = a43 + a44\n        var a46 = a45 % 10\n        var a47 = a45 / 10\n        var a\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293173,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjgbf1trg.scala:67:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjgbf1trg.scala:17:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma1\u001b[0m = a % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue % is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\u001b[31m   |\u001b[0m  import math.BigInt.javaBigInteger2bigInt\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigIntIsIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjgbf1trg.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma2\u001b[0m = a / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue / is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import concurrent.duration.pairIntToDuration\n\u001b[31m   |\u001b[0m  import concurrent.duration.pairLongToDuration\n\u001b[31m   |\u001b[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\u001b[31m   |\u001b[0m  import math.BigInt.javaBigInteger2bigInt\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalIsFractional.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigIntIsIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjgbf1trg.scala:67:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 to a_digits.length - 1) {\n            result += (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293172,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx98_gggx.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx98_gggx.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0l\n        } else {\n            return a * b / 10l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmgm_w23p.scala:24)\n\tat Problem.main(tmpmgm_w23p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_sum = 0l\n        var b_digits_sum = 0l\n        for (i <- 0 to a_digits_length - 1) {\n            a_digits_sum += (a_digits[i].toInt * 10)\n        }\n        for (i <- 0 to b_digits_length - 1) {\n            b_digits_sum += (b_digits[i].toInt * 10)\n        }\n        var result = 0l\n        for (i <- 0 to a_digits_length - 1) {\n            for (j <- 0 to b_digits_length - 1) {\n                result += (a_digits_sum * b_digits_sum) % 10\n                a_digits_sum -= (a_digits_sum * b_digits_sum) / 10\n                b_digits_sum -= (b_digits_sum * a_digits_sum) / 10\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgsj5ykxt.scala:24:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_sum += (a_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgsj5ykxt.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_sum += (a_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgsj5ykxt.scala:27:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_sum += (b_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgsj5ykxt.scala:27:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_sum += (b_digits[\u001b[35mi\u001b[0m].toInt * \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        for (var i = 0; i < a.toString().length(); i++) {\n            result = result * 10 + a.toString().charAt(i) - '0'\n        }\n        for (var i = 0; i < b.toString().length(); i++) {\n            result = result * 10 + b.toString().charAt(i) - '0'\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpe_66aots.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe_66aots.scala:18:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but '.' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpe_66aots.scala:18:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpe_66aots.scala:21:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe_66aots.scala:21:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b.toString().length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but '.' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpe_66aots.scala:21:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b.toString().l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var aa = a.toString\n        var bb = b.toString\n        var aa_digits = aa.split(\"\")\n        var bb_digits = bb.split(\"\")\n        var aa_digits_length = aa_digits.length\n        var bb_digits_length = bb_digits.length\n        var aa_digits_length_minus_one = aa_digits_length - 1\n        var bb_digits_length_minus_one = bb_digits_length - 1\n        var aa_digits_length_minus_two = aa_digits_length - 2\n        var bb_digits_length_minus_two = bb_digits_length - 2\n        var aa_digits_length_minus_three = aa_digits_length - 3\n        var bb_digits_length_minus_three = bb_digits_length - 3\n        var aa_digits_length_minus_four = aa_digits_length - 4\n        var bb_digits_length_minus_four = bb_digits_length - 4\n        var aa_digits_length_minus_five = aa_digits_length - 5\n        var bb_digits_length_minus_five = bb_digits_length - 5\n        var aa_digits_length_minus_six = aa_digits_length - 6\n        var bb_digits_length_minus_six = bb_digits_length - 6\n        var aa_digits_length_minus_seven = aa_digits_length - 7\n        var bb_digits_length_minus_seven = bb_digits_length - 7\n        var aa_digits_length_minus_eight = aa_digits_length - 8\n        var bb_digits_length_minus_eight = bb_digits_length - 8\n        var aa_digits_length_minus_nine = aa_digits_length - 9\n        var bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_9mpebe7.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_9mpebe7.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmphklicz3v.scala:81:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvari",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var b1 = b % 10\n        var a2 = a / 10\n        var b2 = b / 10\n        var a3 = a2 % 10\n        var b3 = b2 % 10\n        var a4 = a3 / 10\n        var b4 = b3 / 10\n        var a5 = a4 % 10\n        var b5 = b4 % 10\n        var a6 = a5 / 10\n        var b6 = b5 / 10\n        var a7 = a6 % 10\n        var b7 = b6 % 10\n        var a8 = a7 / 10\n        var b8 = b7 / 10\n        var a9 = a8 % 10\n        var b9 = b8 % 10\n        var a10 = a9 / 10\n        var b10 = b9 / 10\n        var a11 = a10 % 10\n        var b11 = b10 % 10\n        var a12 = a11 / 10\n        var b12 = b11 / 10\n        var a13 = a12 % 10\n        var b13 = b12 % 10\n        var a14 = a13 / 10\n        var b14 = b13 / 10\n        var a15 = a14 % 10\n        var b15 = b14 % 10\n        var a16 = a15 / 10\n        var b16 = b15 / 10\n        var a17 = a16 % 10\n        var b17 = b16 % 10\n        var a18 = a17 / 10\n        var b18 = b17 / 10\n        var a19 = a18 % 10\n        var b19 = b18 % 10\n        var a20 = a19 / 10\n        var b20 = b19 / 10\n        var a21 = a20 % 10\n        var b21 = b20 % 10\n        var a22 = a21 / 10\n        var b22 = b21 / 10\n        var a23 = a22 % 10\n        var b23 = b22 % 10\n        var a24 = a23 / 10\n        var b24 = b23 / 10\n        var a25 = a24 % 10\n        var b25 = b24 % 10\n        var a26 = a25 / 10\n        var b26 = b\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpstlh5omb.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_product = 1l\n        var b_product = 1l\n        for (var i = 0; i < a_digits_length; i++) {\n            a_product *= Long.parseLong(a_digits[i])\n        }\n        for (var i = 0; i < b_digits_length; i++) {\n            b_product *= Long.parseLong(b_digits[i])\n        }\n        return a_product * b_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_8jkoqbk.scala:23:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_8jkoqbk.scala:23:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_8jkoqbk.scala:23:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_8jkoqbk.scala:26:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_8jkoqbk.scala:26:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_8jkoqbk.scala:26:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 to a_digits.length - 1) {\n            result += (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwncxazps.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwncxazps.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0l\n        } else {\n            return a * b / 10l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmgm_w23p.scala:24)\n\tat Problem.main(tmpmgm_w23p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var a_unit_digits = a_digits.filter(_.isDigit).toList\n        var b_unit_digits = b_digits.filter(_.isDigit).toList\n        var a_unit_digits_product = a_unit_digits.map(_.toInt).reduce(_.times)\n        var b_unit_digits_product = b_unit_digits.map(_.toInt).reduce(_.times)\n        var a_unit_digits_product_string = a_unit_digits_product.toString\n        var b_unit_digits_product_string = b_unit_digits_product.toString\n        var a_unit_digits_product_string_list = a_unit_digits_product_string.split(\"\")\n        var b_unit_digits_product_string_list = b_unit_digits_product_string.split(\"\")\n        var a_unit_digits_product_string_list_length = a_unit_digits_product_string_list.length\n        var b_unit_digits_product_string_list_length = b_unit_digits_product_string_list.length\n        var a_unit_digits_product_string_list_length_minus_1 = a_unit_digits_product_string_list_length - 1\n        var b_unit_digits_product_string_list_length_minus_1 = b_unit_digits_product_string_list_length - 1\n        var a_unit_digits_product_string_list_length_minus_2 = a_unit_digits_product_string_list_length - 2\n        var b_unit_digits_product_string_list_length_minus_2 = b_unit_digits_product_string_list_length - 2\n        var a_unit_digits_product_string_list_length_minus_3 = a_unit_digits_product_string_list_length - 3\n        var b_unit_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkk9fkvrd.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkk9fkvrd.scala:19:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.filter(_.isDigit).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value isDigit is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkk9fkvrd.scala:20:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.filter(_.isDigit).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value isDigit is not a member of String\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpkk9fkvrd.scala:21:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.map(_.toInt).reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpkk9fkvrd.scala:22:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits_product\u001b[0m = b_unit_digits.map(_.toInt).reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkk9fkvrd.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 to a_digits.length - 1) {\n            result = result + (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjyybzwk4.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var a3 = a2 * b1\n        var a4 = a1 * b2\n        var a5 = a3 + a4\n        var a6 = a5 % 10\n        var a7 = a5 / 10\n        var a8 = a6 * b2\n        var a9 = a7 + a8\n        var a10 = a9 % 10\n        var a11 = a9 / 10\n        var a12 = a10 * b1\n        var a13 = a11 + a12\n        var a14 = a13 % 10\n        var a15 = a13 / 10\n        var a16 = a14 * b2\n        var a17 = a15 + a16\n        var a18 = a17 % 10\n        var a19 = a17 / 10\n        var a20 = a18 * b1\n        var a21 = a19 + a20\n        var a22 = a21 % 10\n        var a23 = a21 / 10\n        var a24 = a22 * b2\n        var a25 = a23 + a24\n        var a26 = a25 % 10\n        var a27 = a25 / 10\n        var a28 = a26 * b1\n        var a29 = a27 + a28\n        var a30 = a29 % 10\n        var a31 = a29 / 10\n        var a32 = a30 * b2\n        var a33 = a31 + a32\n        var a34 = a33 % 10\n        var a35 = a33 / 10\n        var a36 = a34 * b1\n        var a37 = a35 + a36\n        var a38 = a37 % 10\n        var a39 = a37 / 10\n        var a40 = a38 * b2\n        var a41 = a39 + a40\n        var a42 = a41 % 10\n        var a43 = a41 / 10\n        var a44 = a42 * b1\n        var a45 = a43 + a44\n        var a46 = a45 % 10\n        var a47 = a45 / 10\n        var a\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293173,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjgbf1trg.scala:67:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjgbf1trg.scala:17:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma1\u001b[0m = a % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue % is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\u001b[31m   |\u001b[0m  import math.BigInt.javaBigInteger2bigInt\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigIntIsIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjgbf1trg.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma2\u001b[0m = a / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue / is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import concurrent.duration.pairIntToDuration\n\u001b[31m   |\u001b[0m  import concurrent.duration.pairLongToDuration\n\u001b[31m   |\u001b[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\u001b[31m   |\u001b[0m  import math.BigInt.javaBigInteger2bigInt\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalIsFractional.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigIntIsIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjgbf1trg.scala:67:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(x => x.toInt() != 0)\n        var b_unit_digits = b_digits.takeWhile(x => x.toInt() != 0)\n        var a_unit_digits_product = a_unit_digits.product(b_unit_digits)\n        var a_unit_digits_sum = a_unit_digits.sum(b_unit_digits)\n        var a_unit_digits_product_sum = a_unit_digits_product.sum(a_unit_digits_sum)\n        return a_unit_digits_product_sum.toInt()\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293177,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpkb9y3n7e.scala:19:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.takeWhile(\u001b[36mx\u001b[0m => x.toInt() != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpkb9y3n7e.scala:20:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.takeWhile(\u001b[36mx\u001b[0m => x.toInt() != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkb9y3n7e.scala:21:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.product(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkb9y3n7e.scala:22:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_sum\u001b[0m = a_unit_digits.sum(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 to a_digits.length - 1) {\n            result += (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwncxazps.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwncxazps.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"l\")\n        var b_digits = b.toString.split(\"l\")\n        var a_int = a_digits[0].toInt\n        var b_int = b_digits[0].toInt\n        var a_rem = a_digits[1].toInt\n        var b_rem = b_digits[1].toInt\n        var a_rem_digits = a_rem.toString.split(\"l\")\n        var b_rem_digits = b_rem.toString.split(\"l\")\n        var a_rem_int = a_rem_digits[0].toInt\n        var b_rem_int = b_rem_digits[0].toInt\n        var a_rem_rem = a_rem_digits[1].toInt\n        var b_rem_rem = b_rem_digits[1].toInt\n        var a_rem_rem_digits = a_rem_rem.toString.split(\"l\")\n        var b_rem_rem_digits = b_rem_rem.toString.split(\"l\")\n        var a_rem_rem_int = a_rem_rem_digits[0].toInt\n        var b_rem_rem_int = b_rem_rem_digits[0].toInt\n        var a_rem_rem_rem = a_rem_rem_digits[1].toInt\n        var b_rem_rem_rem = b_rem_rem_digits[1].toInt\n        var a_rem_rem_rem_digits = a_rem_rem_rem.toString.split(\"l\")\n        var b_rem_rem_rem_digits = b_rem_rem_rem.toString.split(\"l\")\n        var a_rem_rem_rem_int = a_rem_rem_rem_digits[0].toInt\n        var b_rem_rem_rem_int = b_rem_rem_rem_digits[0].toInt\n        var a_rem_rem_rem_rem = a_rem_rem_rem_digits[1].toInt\n        var b_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxfdk71ts.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxfdk71ts.scala:19:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_int\u001b[0m = a_digits[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxfdk71ts.scala:20:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_int\u001b[0m = b_digits[\u001b[31m0\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxfdk71ts.scala:21:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_rem\u001b[0m = a_digits[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxfdk71ts.scala:22:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_rem\u001b[0m = b_digits[\u001b[31m1\u001b[0m].toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfdk71ts.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase\n        val bb = b.toString.toUpperCase\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfg8qzzqc.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfg8qzzqc.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w9gia5h.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 to a_digits.length - 1) {\n            result += (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293178,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprvf_goe7.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprvf_goe7.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(x => x.toInt() < 10)\n        var b_unit_digits = b_digits.takeWhile(x => x.toInt() < 10)\n        var a_unit_digits_product = a_unit_digits.product(b_unit_digits)\n        var a_unit_digits_sum = a_unit_digits.sum(b_unit_digits)\n        var a_unit_digits_product_sum = a_unit_digits_product.sum(a_unit_digits_sum)\n        return a_unit_digits_product_sum.toInt()\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2asjh4cf.scala:19:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.takeWhile(\u001b[36mx\u001b[0m => x.toInt() < \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2asjh4cf.scala:20:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.takeWhile(\u001b[36mx\u001b[0m => x.toInt() < \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2asjh4cf.scala:21:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.product(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2asjh4cf.scala:22:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_sum\u001b[0m = a_unit_digits.sum(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.filter(_.match(_.toInt)).map(_.toInt).toSeq()\n        var b_unit_digits = b_digits.filter(_.match(_.toInt)).map(_.toInt).toSeq()\n        var a_unit_digits_product = a_unit_digits.foldLeft(0l)(_.mul)\n        var b_unit_digits_product = b_unit_digits.foldLeft(0l)(_.mul)\n        var a_unit_digits_product_string = a_unit_digits_product.toString()\n        var b_unit_digits_product_string = b_unit_digits_product.toString()\n        var a_unit_digits_product_string_length = a_unit_digits_product_string.length()\n        var b_unit_digits_product_string_length = b_unit_digits_product_string.length()\n        var a_unit_digits_product_string_length_minus_one = a_unit_digits_product_string_length - 1\n        var b_unit_digits_product_string_length_minus_one = b_unit_digits_product_string_length - 1\n        var a_unit_digits_product_string_length_minus_two = a_unit_digits_product_string_length - 2\n        var b_unit_digits_product_string_length_minus_two = b_unit_digits_product_string_length - 2\n        var a_unit_digits_product_string_length_minus_three = a_unit_digits_product_string_length - 3\n        var b_unit_digits_product_string_length_minus_three = b_unit_digits_product_string_length - 3\n        var a_unit_digits_product_string_length_minus_four = a_unit_digits_product_string_length - 4\n        var b_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf9e4aqia.scala:19:51 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.filter(_.\u001b[33mmatch\u001b[0m(_.toInt)).map(_.toInt).toSeq()\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             '{' expected, but '(' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf9e4aqia.scala:20:51 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.filter(_.\u001b[33mmatch\u001b[0m(_.toInt)).map(_.toInt).toSeq()\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             '{' expected, but '(' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf9e4aqia.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf9e4aqia.scala:19:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.filter(_.\u001b[33mmatch\u001b[0m(_.toInt)).map(_.toInt).toSeq()\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Unit\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf9e4aqia.scala:20:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.filter(_.\u001b[33mmatch\u001b[0m(_.toInt)).map(_.toInt).toSeq()\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Unit\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase\n        val bb = b.toString.toUpperCase\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfg8qzzqc.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfg8qzzqc.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmphklicz3v.scala:81:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvari",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var a_ = a_\n        var b_ = b_\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmphklicz3v.scala:81:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphklicz3v.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvari",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase\n        val bb = b.toString.toUpperCase\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_1 = aa_digits_length - 1\n        val bb_digits_length_minus_1 = bb_digits_length - 1\n        val aa_digits_length_minus_2 = aa_digits_length - 2\n        val bb_digits_length_minus_2 = bb_digits_length - 2\n        val aa_digits_length_minus_3 = aa_digits_length - 3\n        val bb_digits_length_minus_3 = bb_digits_length - 3\n        val aa_digits_length_minus_4 = aa_digits_length - 4\n        val bb_digits_length_minus_4 = bb_digits_length - 4\n        val aa_digits_length_minus_5 = aa_digits_length - 5\n        val bb_digits_length_minus_5 = bb_digits_length - 5\n        val aa_digits_length_minus_6 = aa_digits_length - 6\n        val bb_digits_length_minus_6 = bb_digits_length - 6\n        val aa_digits_length_minus_7 = aa_digits_length - 7\n        val bb_digits_length_minus_7 = bb_digits_length - 7\n        val aa_digits_length_minus_8 = aa_digits_length - 8\n        val bb_digits_length_minus_8 = bb_digits_length - 8\n        val aa_digits_length_minus_9 = aa_digits_length - 9\n        val bb_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzvyc8hll.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzvyc8hll.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.filter(x => x.toInt() != 0)\n        var b_unit_digits = b_digits.filter(x => x.toInt() != 0)\n        var a_unit_digits_product = a_unit_digits.reduce(0, (x, y) => x * y)\n        var b_unit_digits_product = b_unit_digits.reduce(0, (x, y) => x * y)\n        return a_unit_digits_product * b_unit_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcvc4u9jz.scala:19:51 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.filter(\u001b[36mx\u001b[0m => x.toInt() != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcvc4u9jz.scala:20:51 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.filter(\u001b[36mx\u001b[0m => x.toInt() != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpcvc4u9jz.scala:21:61 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter x.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpcvc4u9jz.scala:21:64 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter y.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpcvc4u9jz.scala:22:61 ------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"l\")[0]\n        var b_digits = b.toString.split(\"l\")[0]\n        var a_int = a_digits.toInt\n        var b_int = b_digits.toInt\n        var a_unit_digits = a_digits.substring(a_digits.length - 1)\n        var b_unit_digits = b_digits.substring(b_digits.length - 1)\n        var a_unit_digits_int = a_unit_digits.toInt\n        var b_unit_digits_int = b_unit_digits.toInt\n        var a_unit_digits_int_pow = a_unit_digits_int * a_unit_digits_int\n        var b_unit_digits_int_pow = b_unit_digits_int * b_unit_digits_int\n        var a_unit_digits_int_pow_pow = a_unit_digits_int_pow * a_unit_digits_int\n        var b_unit_digits_int_pow_pow = b_unit_digits_int_pow * b_unit_digits_int\n        var a_unit_digits_int_pow_pow_pow = a_unit_digits_int_pow_pow * a_unit_digits_int\n        var b_unit_digits_int_pow_pow_pow = b_unit_digits_int_pow_pow * b_unit_digits_int\n        var a_unit_digits_int_pow_pow_pow_pow = a_unit_digits_int_pow_pow_pow * a_unit_digits_int\n        var b_unit_digits_int_pow_pow_pow_pow = b_unit_digits_int_pow_pow_pow * b_unit_digits_int\n        var a_unit_digits_int_pow_pow_pow_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6j4ibsa1.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6j4ibsa1.scala:17:44 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_digits\u001b[0m = a.toString.split(\u001b[31m\"l\"\u001b[0m)[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6j4ibsa1.scala:18:44 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_digits\u001b[0m = b.toString.split(\u001b[31m\"l\"\u001b[0m)[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6j4ibsa1.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w9gia5h.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result * 10 + Long.parseLong(a_digits[i]) * Long.parseLong(b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplcuxp6v_.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplcuxp6v_.scala:21:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0l) {\n            return 0l\n        }\n        if (b == 0l) {\n            return 0l\n        }\n        if (a < 0l) {\n            return -1l * multiply(-a, b)\n        }\n        if (b < 0l) {\n            return -1l * multiply(a, -b)\n        }\n        if (a < 10l) {\n            return a * b\n        }\n        if (b < 10l) {\n            return b * a\n        }\n        return (a * b) / 10l\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwofnnt_e.scala:38)\n\tat Problem.main(tmpwofnnt_e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        for (var i = 0; i < a.length(); i++) {\n            result += a.apply(i) * b.apply(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpbau5al20.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbau5al20.scala:18:38 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpbau5al20.scala:18:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbau5al20.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.conve",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0l\n        } else {\n            return a * b / 10l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmgm_w23p.scala:24)\n\tat Problem.main(tmpmgm_w23p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var aa = a.toString.toUpperCase.split(\"\")\n        var bb = b.toString.toUpperCase.split(\"\")\n        var result = 0l\n        for (i <- 0 to aa.length - 1) {\n            for (j <- 0 to bb.length - 1) {\n                if (aa[i].equals(bb[j])) {\n                    result = result + (Long.parseLong(aa[i]) * Long.parseLong(bb[j]))\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd6tal93i.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                \u001b[33mif\u001b[0m (aa[\u001b[35mi\u001b[0m].equals(bb[\u001b[35mj\u001b[0m])) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd6tal93i.scala:23:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    result = result + (Long.parseLong(aa[\u001b[35mi\u001b[0m]) * Long.parseLong(bb[\u001b[35mj\u001b[0m]))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd6tal93i.scala:23:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    result = result + (Long.parseLong(aa[\u001b[35mi\u001b[0m]) * Long.parseLong(bb[\u001b[35mj\u001b[0m]))\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0\n        }\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293179,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpac1richg.scala:24:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"\")\n        var b_digits = b.toString.split(\"\")\n        var a_unit_digits = a_digits.takeWhile(x => x.toString().length() == 1)\n        var b_unit_digits = b_digits.takeWhile(x => x.toString().length() == 1)\n        var a_unit_digits_product = a_unit_digits.product(b_unit_digits)\n        var a_unit_digits_product_string = a_unit_digits_product.toString\n        var a_unit_digits_product_string_length = a_unit_digits_product_string.length()\n        var a_unit_digits_product_string_array = a_unit_digits_product_string.split(\"\")\n        var a_unit_digits_product_string_array_length = a_unit_digits_product_string_array.length\n        var a_unit_digits_product_string_array_length_minus_1 = a_unit_digits_product_string_array_length - 1\n        var a_unit_digits_product_string_array_length_minus_2 = a_unit_digits_product_string_array_length - 2\n        var a_unit_digits_product_string_array_length_minus_3 = a_unit_digits_product_string_array_length - 3\n        var a_unit_digits_product_string_array_length_minus_4 = a_unit_digits_product_string_array_length - 4\n        var a_unit_digits_product_string_array_length_minus_5 = a_unit_digits_product_string_array_length - 5\n        var a_unit_digits_product_string_array_length_minus_6 = a_unit_digits_product_string_array_length - 6\n        var a_unit_digits_product_string_array_length_minus_7 = a_unit_digits_product_string_array_length - 7\n        var a_unit_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa59r85ub.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa59r85ub.scala:21:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.product(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (b_unit_digits : Array[String])\n\u001b[31m   |\u001b[0m                               Required: Numeric[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa59r85ub.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 to a_digits.length - 1) {\n            result = result + (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293171,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjyybzwk4.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 to a_digits.length - 1) {\n            result += (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293172,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx98_gggx.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx98_gggx.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var aa = a\n        var bb = b\n        var aa_digits = aa.toString().split(\"\")\n        var bb_digits = bb.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until aa_digits.length) {\n            var aa_digit = aa_digits[i]\n            var bb_digit = bb_digits[i]\n            result = result + (aa_digit * bb_digit)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6265zl9i.scala:23:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36maa_digit\u001b[0m = aa_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6265zl9i.scala:24:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mbb_digit\u001b[0m = bb_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"l\")\n        var b_digits = b.toString().split(\"l\")\n        var a_unit_digits = a_digits[0].split(\"\")\n        var b_unit_digits = b_digits[0].split(\"\")\n        var a_unit_digits_length = len(a_unit_digits)\n        var b_unit_digits_length = len(b_unit_digits)\n        var a_unit_digits_product = 0l\n        var b_unit_digits_product = 0l\n        for (i <- 0 to a_unit_digits_length - 1) {\n            a_unit_digits_product = a_unit_digits_product * 10 + a_unit_digits[i]\n        }\n        for (i <- 0 to b_unit_digits_length - 1) {\n            b_unit_digits_product = b_unit_digits_product * 10 + b_unit_digits[i]\n        }\n        return a_unit_digits_product * b_unit_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293180,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp_bbfao26.scala:19:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits[\u001b[31m0\u001b[0m].split(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_bbfao26.scala:20:36 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits[\u001b[31m0\u001b[0m].split(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_bbfao26.scala:21:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_length\u001b[0m = len(a_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: len\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_bbfao26.scala:22:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits_length\u001b[0m = len(b_unit_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: len\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_bbfao26.scala:26:79 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            a_unit_digits_product = a_unit_digits_product * \u001b[31m10\u001b[0m + a_unit_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0\n        } else {\n            return a * b / 10\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpoz7iidax.scala:24)\n\tat Problem.main(tmpoz7iidax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = toDigits(a)\n        var b_digits = toDigits(b)\n        for (i <- 0 until a_digits.length) {\n            result = result * 10 + a_digits[i] * b_digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293181,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8g0mk0oh.scala:18:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_digits\u001b[0m = toDigits(a)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toDigits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8g0mk0oh.scala:19:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_digits\u001b[0m = toDigits(b)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: toDigits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8g0mk0oh.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        for (i <- 0 until a.length) {\n            result = result * 10 + a[i]\n        }\n        for (i <- 0 until b.length) {\n            result = result * 10 + b[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd7jg83di.scala:18:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until a.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value length is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd7jg83di.scala:19:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + a[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd7jg83di.scala:21:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until b.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value length is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd7jg83di.scala:22:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + b[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ =\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5uclaga2.scala:66:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ * b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ * a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"l\")[0].split(\".\")\n        var b_digits = b.toString.split(\"l\")[0].split(\".\")\n        var a_int = a_digits[0].toInt\n        var b_int = b_digits[0].toInt\n        var a_dec = a_digits[1].toDouble\n        var b_dec = b_digits[1].toDouble\n        var a_dec_int = a_dec.toInt\n        var b_dec_int = b_dec.toInt\n        var a_dec_dec = a_dec - a_dec_int\n        var b_dec_dec = b_dec - b_dec_int\n        var a_dec_dec_int = a_dec_dec.toInt\n        var b_dec_dec_int = b_dec_dec.toInt\n        var a_dec_dec_dec = a_dec_dec - a_dec_dec_int\n        var b_dec_dec_dec = b_dec_dec - b_dec_dec_int\n        var a_dec_dec_dec_int = a_dec_dec_dec.toInt\n        var b_dec_dec_dec_int = b_dec_dec_dec.toInt\n        var a_dec_dec_dec_dec = a_dec_dec_dec - a_dec_dec_dec_int\n        var b_dec_dec_dec_dec = b_dec_dec_dec - b_dec_dec_dec_int\n        var a_dec_dec_dec_dec_int = a_dec_dec_dec_dec.toInt\n        var b_dec_dec_dec_dec_int = b_dec_dec_dec_dec.toInt\n        var a_dec_dec_dec_dec_dec = a_dec_dec_dec_dec - a_dec_dec_dec_dec_int\n        var b_dec_dec_dec_dec_dec = b_dec_dec_dec_dec - b_dec_dec_dec_dec_int\n        var a_dec_dec_dec_dec_dec_int = a_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293184,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmph4h9nute.scala:17:44 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_digits\u001b[0m = a.toString.split(\u001b[31m\"l\"\u001b[0m)[\u001b[31m0\u001b[0m].split(\u001b[31m\".\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmph4h9nute.scala:18:44 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_digits\u001b[0m = b.toString.split(\u001b[31m\"l\"\u001b[0m)[\u001b[31m0\u001b[0m].split(\u001b[31m\".\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph4h9nute.scala:39:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_dec_dec_dec_dec_dec_int\u001b[0m = a_\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: a_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph4h9nute.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 to a_digits.length - 1) {\n            result += (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwncxazps.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwncxazps.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var result = a1 * b1\n        if (a2 != 0 || b2 != 0) {\n            result = result + a2 * b1 + a1 * b2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293184,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1ag3icbt.scala:28)\n\tat Problem.main(tmp1ag3icbt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0\n        }\n        if (a < 0) {\n            a = -a\n        }\n        if (b < 0) {\n            b = -b\n        }\n        if (a < 10 && b < 10) {\n            return a * b\n        }\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp73melzvk.scala:21:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            a = -a\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp73melzvk.scala:24:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            b = -b\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp73melzvk.scala:33:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ylmfz01.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val result = 0l\n        for (i <- 0 to aa_digits_length_minus_one) {\n            for (j <- 0 to bb_digits_length_minus_one) {\n                val aa_digit = aa_digits[i]\n                val bb_digit = bb_digits[j]\n                val aa_digit_int = aa_digit.toInt\n                val bb_digit_int = bb_digit.toInt\n                val aa_digit_int_times_bb_digit_int = aa_digit_int * bb_digit_int\n                val result_plus_aa_digit_int_times_bb_digit_int = result + aa_digit_int_times_bb_digit_int\n                result = result_plus_aa_digit_int_times_bb_digit_int\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuafbdeek.scala:28:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36maa_digit\u001b[0m = aa_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuafbdeek.scala:29:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbb_digit\u001b[0m = bb_digits[\u001b[35mj\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type j\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpuafbdeek.scala:34:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                result = result_plus_aa_digit_int_times_bb_digit_int\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i].toInt * b_digits[i].toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293167,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ylmfz01.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m].toInt * b_digits[\u001b[35mi\u001b[0m].toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var product = 0l\n        for (i <- 0 until a_digits.length) {\n            product = product * 10 + Long.parseLong(a_digits[i]) * Long.parseLong(b_digits[i])\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoiyic8yh.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            product = product * \u001b[31m10\u001b[0m + Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoiyic8yh.scala:21:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            product = product * \u001b[31m10\u001b[0m + Long.parseLong(a_digits[\u001b[35mi\u001b[0m]) * Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_product = 0l\n        var b_digits_product = 0l\n        for (var i = 0; i < a_digits_length; i++) {\n            a_digits_product = a_digits_product * 10 + Long.parseLong(a_digits[i])\n        }\n        for (var i = 0; i < b_digits_length; i++) {\n            b_digits_product = b_digits_product * 10 + Long.parseLong(b_digits[i])\n        }\n        return a_digits_product * b_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpszfkymzj.scala:23:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpszfkymzj.scala:23:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpszfkymzj.scala:23:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpszfkymzj.scala:26:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpszfkymzj.scala:26:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpszfkymzj.scala:26:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_len = a_digits.length\n        var b_digits_len = b_digits.length\n        var a_digits_product = a_digits.reduce((acc, digit) => acc * digit.toInt)\n        var b_digits_product = b_digits.reduce((acc, digit) => acc * digit.toInt)\n        var a_digits_product_len = a_digits_product.toInt\n        var b_digits_product_len = b_digits_product.toInt\n        var a_digits_product_len_minus_1 = a_digits_product_len - 1\n        var b_digits_product_len_minus_1 = b_digits_product_len - 1\n        var a_digits_product_len_minus_2 = a_digits_product_len - 2\n        var b_digits_product_len_minus_2 = b_digits_product_len - 2\n        var a_digits_product_len_minus_3 = a_digits_product_len - 3\n        var b_digits_product_len_minus_3 = b_digits_product_len - 3\n        var a_digits_product_len_minus_4 = a_digits_product_len - 4\n        var b_digits_product_len_minus_4 = b_digits_product_len - 4\n        var a_digits_product_len_minus_5 = a_digits_product_len - 5\n        var b_digits_product_len_minus_5 = b_digits_product_len - 5\n        var a_digits_product_len_minus_6 = a_digits_product_len - 6\n        var b_digits_product_len_minus_6 = b_digits_product_len - 6\n        var a_digits_product_len_minus_7 = a_digits_product_len - 7\n        var b_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293186,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3_5qiclr.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3_5qiclr.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var aa = a.toString\n        var bb = b.toString\n        var aa_digits = aa.split(\"\")\n        var bb_digits = bb.split(\"\")\n        var aa_digits_length = aa_digits.length\n        var bb_digits_length = bb_digits.length\n        var aa_digits_product = 1l\n        var bb_digits_product = 1l\n        var i = 0\n        while (i < aa_digits_length) {\n            aa_digits_product *= Long.parseLong(aa_digits[i])\n            i += 1\n        }\n        i = 0\n        while (i < bb_digits_length) {\n            bb_digits_product *= Long.parseLong(bb_digits[i])\n            i += 1\n        }\n        return aa_digits_product * bb_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293188,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3pkoufo5.scala:27:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            aa_digits_product *= Long.parseLong(aa_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3pkoufo5.scala:27:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            aa_digits_product *= Long.parseLong(aa_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3pkoufo5.scala:27:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            aa_digits_product *= Long.parseLong(aa_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3pkoufo5.scala:32:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            bb_digits_product *= Long.parseLong(bb_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3pkoufo5.scala:32:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            bb_digits_product *= Long.parseLong(bb_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3pkoufo5.scala:32:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            bb_digits_product *= Long.parseLong(bb_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var b1 = b % 10\n        var a2 = a / 10\n        var b2 = b / 10\n        var a3 = a2 % 10\n        var b3 = b2 % 10\n        var a4 = a3 / 10\n        var b4 = b3 / 10\n        var a5 = a4 % 10\n        var b5 = b4 % 10\n        var a6 = a5 / 10\n        var b6 = b5 / 10\n        var a7 = a6 % 10\n        var b7 = b6 % 10\n        var a8 = a7 / 10\n        var b8 = b7 / 10\n        var a9 = a8 % 10\n        var b9 = b8 % 10\n        var a10 = a9 / 10\n        var b10 = b9 / 10\n        var a11 = a10 % 10\n        var b11 = b10 % 10\n        var a12 = a11 / 10\n        var b12 = b11 / 10\n        var a13 = a12 % 10\n        var b13 = b12 % 10\n        var a14 = a13 / 10\n        var b14 = b13 / 10\n        var a15 = a14 % 10\n        var b15 = b14 % 10\n        var a16 = a15 / 10\n        var b16 = b15 / 10\n        var a17 = a16 % 10\n        var b17 = b16 % 10\n        var a18 = a17 / 10\n        var b18 = b17 / 10\n        var a19 = a18 % 10\n        var b19 = b18 % 10\n        var a20 = a19 / 10\n        var b20 = b19 / 10\n        var a21 = a20 % 10\n        var b21 = b20 % 10\n        var a22 = a21 / 10\n        var b22 = b21 / 10\n        var a23 = a22 % 10\n        var b23 = b22 % 10\n        var a24 = a23 / 10\n        var b24 = b23 / 10\n        var a25 = a24 % 10\n        var b25 = b24 % 10\n        var a26 = a25 / 10\n        var b26 = b\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpstlh5omb.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0\n        }\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_index = 0\n        var b_digits_index = 0\n        var product = 0l\n        while (a_digits_index < a_digits_length && b_digits_index < b_digits_length) {\n            var a_digit = a_digits[a_digits_index]\n            var b_digit = b_digits[b_digits_index]\n            if (a_digit == \"0\" || b_digit == \"0\") {\n                a_digits_index += 1\n                b_digits_index += 1\n            } else {\n                product = product * 10 + (a_digit - \"0\") * (b_digit - \"0\")\n                a_digits_index += 1\n                b_digits_index += 1\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293185,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5i7n2ssd.scala:28:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36ma_digit\u001b[0m = a_digits[\u001b[35ma_digits_index\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type a_digits_index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5i7n2ssd.scala:29:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mb_digit\u001b[0m = b_digits[\u001b[35mb_digits_index\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type b_digits_index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var aa = a.toString\n        var bb = b.toString\n        var aa_digits = aa.split(\"\")\n        var bb_digits = bb.split(\"\")\n        var aa_digits_length = aa_digits.length\n        var bb_digits_length = bb_digits.length\n        var aa_digits_length_minus_1 = aa_digits_length - 1\n        var bb_digits_length_minus_1 = bb_digits_length - 1\n        var aa_digits_length_minus_2 = aa_digits_length - 2\n        var bb_digits_length_minus_2 = bb_digits_length - 2\n        var aa_digits_length_minus_3 = aa_digits_length - 3\n        var bb_digits_length_minus_3 = bb_digits_length - 3\n        var aa_digits_length_minus_4 = aa_digits_length - 4\n        var bb_digits_length_minus_4 = bb_digits_length - 4\n        var aa_digits_length_minus_5 = aa_digits_length - 5\n        var bb_digits_length_minus_5 = bb_digits_length - 5\n        var aa_digits_length_minus_6 = aa_digits_length - 6\n        var bb_digits_length_minus_6 = bb_digits_length - 6\n        var aa_digits_length_minus_7 = aa_digits_length - 7\n        var bb_digits_length_minus_7 = bb_digits_length - 7\n        var aa_digits_length_minus_8 = aa_digits_length - 8\n        var bb_digits_length_minus_8 = bb_digits_length - 8\n        var aa_digits_length_minus_9 = aa_digits_length - 9\n        var bb_digits_length_minus_9 = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293188,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd2smkqmh.scala:40:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mbb_digits_length_minus_9\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd2smkqmh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0l\n        } else {\n            return a * b / 10l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmgm_w23p.scala:24)\n\tat Problem.main(tmpmgm_w23p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"l\")\n        var b_digits = b.toString.split(\"l\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_array = new Array[Long](a_digits_length)\n        var b_digits_array = new Array[Long](b_digits_length)\n        for (i <- 0 until a_digits_length) {\n            a_digits_array[i] = a_digits[i].toLong\n        }\n        for (i <- 0 until b_digits_length) {\n            b_digits_array[i] = b_digits[i].toLong\n        }\n        var result = 0l\n        for (i <- 0 until a_digits_length) {\n            for (j <- 0 until b_digits_length) {\n                result = result * 10 + a_digits_array[i] * b_digits_array[j]\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp878cokdv.scala:24:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_array[\u001b[35mi\u001b[0m] = a_digits[i].toLong\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp878cokdv.scala:27:30 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_array[\u001b[35mi\u001b[0m] = b_digits[i].toLong\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp878cokdv.scala:24:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            a_digits_array[\u001b[35mi\u001b[0m] = a_digits[i].toLong\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp878cokdv.scala:27:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            b_digits_array[\u001b[35mi\u001b[0m] = b_digits[i].toLong\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp878cokdv.scala:32:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                result = result * \u001b[31m10\u001b[0m + a_digits_array[\u001b[35mi\u001b[0m] * b_digits_array[\u001b[35mj\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0l\n        } else {\n            return a * b / 10l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmgm_w23p.scala:24)\n\tat Problem.main(tmpmgm_w23p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 to a_digits.length - 1) {\n            var a_digit = a_digits[i]\n            var b_digit = b_digits[i]\n            result += (a_digit * b_digit)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293186,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ewk741p.scala:21:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36ma_digit\u001b[0m = a_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ewk741p.scala:22:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mb_digit\u001b[0m = b_digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var aa = a\n        var bb = b\n        var a_digits = aa.toString().split(\"\")\n        var b_digits = bb.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_sum = 0l\n        var b_digits_sum = 0l\n        for (i <- 0 to a_digits_length - 1) {\n            a_digits_sum += Long.parseLong(a_digits[i])\n        }\n        for (i <- 0 to b_digits_length - 1) {\n            b_digits_sum += Long.parseLong(b_digits[i])\n        }\n        var a_digits_sum_square = a_digits_sum * a_digits_sum\n        var b_digits_sum_square = b_digits_sum * b_digits_sum\n        var a_digits_sum_square_sum = a_digits_sum_square + b_digits_sum_square\n        var a_digits_sum_square_sum_square = a_digits_sum_square_sum * a_digits_sum_square\n        var a_digits_sum_square_sum_square_sum = a_digits_sum_square_sum_square + a_digits_sum_square_sum_square\n        var a_digits_sum_square_sum_square_sum_square = a_digits_sum_square_sum_square_sum * a_digits_sum_square_sum_square\n        var a_digits_sum_square_sum_square_sum_square_sum = a_digits_sum_square_sum_square_sum_square + a_digits_sum_square_sum_square_sum_square\n        var a_digits_sum_square_sum_square_sum_square_sum_square = a_digits_sum_square_sum_square_sum_square_sum * a_digits_sum_square_sum_square_sum_square\n        var a_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293190,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9w7isgm4.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9w7isgm4.scala:26:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            a_digits_sum += Long.parseLong(a_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9w7isgm4.scala:26:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            a_digits_sum += Long.parseLong(a_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9w7isgm4.scala:26:52 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            a_digits_sum += Long.parseLong(a_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9w7isgm4.scala:29:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            b_digits_sum += Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9w7isgm4.scala:29:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            b_digits_sum += Long.parseLong(b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9w7isgm4.scala:29:52 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            b_digits_sum += Long.parseLong(b_di",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var a3 = a2 * b1\n        var a4 = a1 * b2\n        var a5 = a3 + a4\n        var a6 = a5 % 10\n        var a7 = a5 / 10\n        var b3 = b2 * a1\n        var b4 = b1 * a2\n        var b5 = b3 + b4\n        var b6 = b5 % 10\n        var b7 = b5 / 10\n        var a8 = a7 + b6\n        var a9 = a8 % 10\n        var a10 = a8 / 10\n        var b8 = b7 + a9\n        var b9 = b8 % 10\n        var b10 = b8 / 10\n        var a11 = a10 + b9\n        var a12 = a11 % 10\n        var a13 = a11 / 10\n        var b11 = b10 + a12\n        var b12 = b11 % 10\n        var b13 = b11 / 10\n        var a14 = b13 + a13\n        var a15 = a14 % 10\n        var a16 = a14 / 10\n        var b14 = b12 + a15\n        var b15 = b14 % 10\n        var b16 = b14 / 10\n        var a17 = b16 + a16\n        var a18 = a17 % 10\n        var a19 = a17 / 10\n        var b17 = b15 + a18\n        var b18 = b17 % 10\n        var b19 = b17 / 10\n        var a20 = b19 + a19\n        var a21 = a20 % 10\n        var a22 = a20 / 10\n        var b20 = b18 + a21\n        var b21 = b20 % 10\n        var b22 = b20 / 10\n        var a23 = b22 + a22\n        var a24 = a23 % 10\n        var a25 = a23 / 10\n        var b23 = b21 + a24\n        var b24 = b23 % 10\n        var b25 = b23 /\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293189,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp99rx5htg.scala:66:23 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb25\u001b[0m = b23 /\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99rx5htg.scala:67:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 until a_digits.length) {\n            result += (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293189,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkosaz2yj.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkosaz2yj.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until a_digits.length) {\n            result = result + (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w9gia5h.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val a_digits = a.toString.split(\"\")\n        val b_digits = b.toString.split(\"\")\n        val a_digits_length = a_digits.length\n        val b_digits_length = b_digits.length\n        val a_digits_product = a_digits_length * b_digits_length\n        val b_digits_product = a_digits_length * b_digits_length\n        val a_digits_sum = a_digits_product + a_digits_length\n        val b_digits_sum = b_digits_product + b_digits_length\n        val a_digits_sum_product = a_digits_sum * b_digits_length\n        val b_digits_sum_product = a_digits_length * b_digits_sum\n        val a_digits_sum_product_sum = a_digits_sum_product + a_digits_sum\n        val b_digits_sum_product_sum = b_digits_sum_product + b_digits_sum\n        val a_digits_sum_product_sum_sum = a_digits_sum_product_sum + a_digits_sum_product_sum\n        val b_digits_sum_product_sum_sum = b_digits_sum_product_sum + b_digits_sum_product_sum\n        val a_digits_sum_product_sum_sum_sum = a_digits_sum_product_sum_sum + a_digits_sum_product_sum_sum\n        val b_digits_sum_product_sum_sum_sum = b_digits_sum_product_sum_sum + b_digits_sum_product_sum_sum\n        val a_digits_sum_product_sum_sum_sum_sum = a_digits_sum_product_sum_sum_sum + a_digits_sum_product_sum_sum_sum\n        val b_digits_sum_product_sum_sum_sum_sum = b_digits_sum_product_sum_sum_sum + b_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293189,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp28moo2sy.scala:34:86 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mb_digits_sum_product_sum_sum_sum_sum\u001b[0m = b_digits_sum_product_sum_sum_sum + b_digits_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Not found: b_digits_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp28moo2sy.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_len = aa.length\n        val bb_len = bb.length\n        val aa_digits = aa.substring(0, aa_len - 1)\n        val bb_digits = bb.substring(0, bb_len - 1)\n        val aa_digit = aa_digits.charAt(0)\n        val bb_digit = bb_digits.charAt(0)\n        val aa_digit_int = aa_digit - 48\n        val bb_digit_int = bb_digit - 48\n        val aa_digit_int_pow = aa_digit_int * bb_digit_int\n        val aa_digit_int_pow_pow = aa_digit_int_pow * 10\n        val aa_digit_int_pow_pow_pow = aa_digit_int_pow_pow * 10\n        val aa_digit_int_pow_pow_pow_pow = aa_digit_int_pow_pow_pow * 10\n        val aa_digit_int_pow_pow_pow_pow_pow = aa_digit_int_pow_pow_pow_pow * 10\n        val aa_digit_int_pow_pow_pow_pow_pow_pow = aa_digit_int_pow_pow_pow_pow_pow * 10\n        val aa_digit_int_pow_pow_pow_pow_pow_pow_pow = aa_digit_int_pow_pow_pow_pow_pow_pow * 10\n        val aa_digit_int_pow_pow_pow_pow_pow_pow_pow_pow = aa_digit_int_pow_pow_pow_pow_pow_pow_pow * 10\n        val aa_digit_int_\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293189,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppub_d0te.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppub_d0te.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var result = 0l\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        for (i <- 0 to a_digits.length - 1) {\n            result += (a_digits[i] * b_digits[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwncxazps.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwncxazps.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += (a_digits[\u001b[35mi\u001b[0m] * b_digits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0\n        } else {\n            return a * b / 10\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293183,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpoz7iidax.scala:24)\n\tat Problem.main(tmpoz7iidax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_product = 0l\n        var b_digits_product = 0l\n        for (var i = 0; i < a_digits_length; i++) {\n            a_digits_product = a_digits_product * 10 + Integer.parseInt(a_digits[i])\n        }\n        for (var i = 0; i < b_digits_length; i++) {\n            b_digits_product = b_digits_product * 10 + Integer.parseInt(b_digits[i])\n        }\n        return a_digits_product * b_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293190,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpkitrk_eh.scala:23:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkitrk_eh.scala:23:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpkitrk_eh.scala:23:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpkitrk_eh.scala:26:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkitrk_eh.scala:26:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpkitrk_eh.scala:26:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString.split(\"l\")\n        var b_digits = b.toString.split(\"l\")\n        var a_digits_length = a_digits.length\n        var b_digits_length = b_digits.length\n        var a_digits_array = new Array[Long](a_digits_length)\n        var b_digits_array = new Array[Long](b_digits_length)\n        for (var i = 0; i < a_digits_length; i++) {\n            a_digits_array[i] = Long.parseLong(a_digits[i])\n        }\n        for (var i = 0; i < b_digits_length; i++) {\n            b_digits_array[i] = Long.parseLong(b_digits[i])\n        }\n        var result = 0l\n        for (var i = 0; i < a_digits_length; i++) {\n            for (var j = 0; j < b_digits_length; j++) {\n                result = result + (a_digits_array[i] * b_digits_array[j])\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293190,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpiudhoybi.scala:23:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiudhoybi.scala:23:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpiudhoybi.scala:23:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < a_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpiudhoybi.scala:26:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiudhoybi.scala:26:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpiudhoybi.scala:26:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < b_digits_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0l\n        } else {\n            return a * b / 10l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmgm_w23p.scala:24)\n\tat Problem.main(tmpmgm_w23p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString.toUpperCase.replaceAll(\"[^0-9]\", \"\")\n        val bb = b.toString.toUpperCase.replaceAll(\"[^0-9]\", \"\")\n        val result = aa.times(bb)\n        if (result.toString.toUpperCase.equals(\"0\")) {\n            return 0\n        } else {\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293189,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjy0d_zve.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = aa.times(bb)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          value times is not a member of String - did you mean aa.lines?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val aa = a.toString\n        val bb = b.toString\n        val aa_digits = aa.split(\"\")\n        val bb_digits = bb.split(\"\")\n        val aa_digits_length = aa_digits.length\n        val bb_digits_length = bb_digits.length\n        val aa_digits_length_minus_one = aa_digits_length - 1\n        val bb_digits_length_minus_one = bb_digits_length - 1\n        val aa_digits_length_minus_two = aa_digits_length - 2\n        val bb_digits_length_minus_two = bb_digits_length - 2\n        val aa_digits_length_minus_three = aa_digits_length - 3\n        val bb_digits_length_minus_three = bb_digits_length - 3\n        val aa_digits_length_minus_four = aa_digits_length - 4\n        val bb_digits_length_minus_four = bb_digits_length - 4\n        val aa_digits_length_minus_five = aa_digits_length - 5\n        val bb_digits_length_minus_five = bb_digits_length - 5\n        val aa_digits_length_minus_six = aa_digits_length - 6\n        val bb_digits_length_minus_six = bb_digits_length - 6\n        val aa_digits_length_minus_seven = aa_digits_length - 7\n        val bb_digits_length_minus_seven = bb_digits_length - 7\n        val aa_digits_length_minus_eight = aa_digits_length - 8\n        val bb_digits_length_minus_eight = bb_digits_length - 8\n        val aa_digits_length_minus_nine = aa_digits_length - 9\n        val bb_digits_length_minus_nine = bb_dig\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglvmccdh.scala:40:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbb_digits_length_minus_nine\u001b[0m = bb_dig\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: bb_dig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpglvmccdh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_ = a\n        var b_ = b\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ = b_ * a_\n        var a_ = a_ % 10\n        var b_ = b_ % 10\n        var a_ = a_ * b_\n        var b_ =\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5uclaga2.scala:66:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_\u001b[0m = a_ * b_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_\u001b[0m = b_ * a_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb_ is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5uclaga2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0l) {\n            return 0l\n        } else if (b == 0l) {\n            return 0l\n        } else {\n            return a * b / 10l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293190,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1o3cy0gk.scala:26)\n\tat Problem.main(tmp1o3cy0gk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var a2 = a / 10\n        var b1 = b % 10\n        var b2 = b / 10\n        var a3 = a1 * b1\n        var a4 = a2 * b1\n        var a5 = a1 * b2\n        var a6 = a2 * b2\n        var a7 = a3 + a4 + a5 + a6\n        var a8 = a7 / 10\n        var a9 = a7 % 10\n        var a10 = a8 * b1\n        var a11 = a9 * b2\n        var a12 = a10 + a11\n        var a13 = a12 / 10\n        var a14 = a12 % 10\n        var a15 = a13 * b1\n        var a16 = a14 * b2\n        var a17 = a15 + a16\n        var a18 = a17 / 10\n        var a19 = a17 % 10\n        var a20 = a18 * b1\n        var a21 = a19 * b2\n        var a22 = a20 + a21\n        var a23 = a22 / 10\n        var a24 = a22 % 10\n        var a25 = a23 * b1\n        var a26 = a24 * b2\n        var a27 = a25 + a26\n        var a28 = a27 / 10\n        var a29 = a27 % 10\n        var a30 = a28 * b1\n        var a31 = a29 * b2\n        var a32 = a30 + a31\n        var a33 = a32 / 10\n        var a34 = a32 % 10\n        var a35 = a33 * b1\n        var a36 = a34 * b2\n        var a37 = a35 + a36\n        var a38 = a37 / 10\n        var a39 = a37 % 10\n        var a40 = a38 * b1\n        var a41 = a39 * b2\n        var a42 = a40 + a41\n        var a43 = a42 / 10\n        var a44 = a42 % 10\n        var a45 = a43 * b1\n        var a46 = a44 * b2\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293190,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpgdmbhkir.scala:65:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgdmbhkir.scala:66:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var b1 = b % 10\n        var a2 = a / 10\n        var b2 = b / 10\n        var a3 = a2 % 10\n        var b3 = b2 % 10\n        var a4 = a3 / 10\n        var b4 = b3 / 10\n        var a5 = a4 % 10\n        var b5 = b4 % 10\n        var a6 = a5 / 10\n        var b6 = b5 / 10\n        var a7 = a6 % 10\n        var b7 = b6 % 10\n        var a8 = a7 / 10\n        var b8 = b7 / 10\n        var a9 = a8 % 10\n        var b9 = b8 % 10\n        var a10 = a9 / 10\n        var b10 = b9 / 10\n        var a11 = a10 % 10\n        var b11 = b10 % 10\n        var a12 = a11 / 10\n        var b12 = b11 / 10\n        var a13 = a12 % 10\n        var b13 = b12 % 10\n        var a14 = a13 / 10\n        var b14 = b13 / 10\n        var a15 = a14 % 10\n        var b15 = b14 % 10\n        var a16 = a15 / 10\n        var b16 = b15 / 10\n        var a17 = a16 % 10\n        var b17 = b16 % 10\n        var a18 = a17 / 10\n        var b18 = b17 / 10\n        var a19 = a18 % 10\n        var b19 = b18 % 10\n        var a20 = a19 / 10\n        var b20 = b19 / 10\n        var a21 = a20 % 10\n        var b21 = b20 % 10\n        var a22 = a21 / 10\n        var b22 = b21 / 10\n        var a23 = a22 % 10\n        var b23 = b22 % 10\n        var a24 = a23 / 10\n        var b24 = b23 / 10\n        var a25 = a24 % 10\n        var b25 = b24 % 10\n        var a26 = a25 / 10\n        var b26 = b\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpstlh5omb.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var b1 = b % 10\n        var a2 = a / 10\n        var b2 = b / 10\n        var a3 = a2 % 10\n        var b3 = b2 % 10\n        var a4 = a3 / 10\n        var b4 = b3 / 10\n        var a5 = a4 % 10\n        var b5 = b4 % 10\n        var a6 = a5 / 10\n        var b6 = b5 / 10\n        var a7 = a6 % 10\n        var b7 = b6 % 10\n        var a8 = a7 / 10\n        var b8 = b7 / 10\n        var a9 = a8 % 10\n        var b9 = b8 % 10\n        var a10 = a9 / 10\n        var b10 = b9 / 10\n        var a11 = a10 % 10\n        var b11 = b10 % 10\n        var a12 = a11 / 10\n        var b12 = b11 / 10\n        var a13 = a12 % 10\n        var b13 = b12 % 10\n        var a14 = a13 / 10\n        var b14 = b13 / 10\n        var a15 = a14 % 10\n        var b15 = b14 % 10\n        var a16 = a15 / 10\n        var b16 = b15 / 10\n        var a17 = a16 % 10\n        var b17 = b16 % 10\n        var a18 = a17 / 10\n        var b18 = b17 / 10\n        var a19 = a18 % 10\n        var b19 = b18 % 10\n        var a20 = a19 / 10\n        var b20 = b19 / 10\n        var a21 = a20 % 10\n        var b21 = b20 % 10\n        var a22 = a21 / 10\n        var b22 = b21 / 10\n        var a23 = a22 % 10\n        var b23 = b22 % 10\n        var a24 = a23 / 10\n        var b24 = b23 / 10\n        var a25 = a24 % 10\n        var b25 = b24 % 10\n        var a26 = a25 / 10\n        var b26 = b\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpstlh5omb.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        var a_digits = a.toString().split(\"\")\n        var b_digits = b.toString().split(\"\")\n        var a_unit_digits = a_digits.takeWhile(x => x.toInt() != 0)\n        var b_unit_digits = b_digits.takeWhile(x => x.toInt() != 0)\n        var a_unit_digits_product = a_unit_digits.reduce(0, (x, y) => x * y)\n        var b_unit_digits_product = b_unit_digits.reduce(0, (x, y) => x * y)\n        return a_unit_digits_product * b_unit_digits_product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293190,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpi_jz3w6j.scala:19:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits\u001b[0m = a_digits.takeWhile(\u001b[36mx\u001b[0m => x.toInt() != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpi_jz3w6j.scala:20:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb_unit_digits\u001b[0m = b_digits.takeWhile(\u001b[36mx\u001b[0m => x.toInt() != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mtoInt\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpi_jz3w6j.scala:21:61 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter x.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpi_jz3w6j.scala:21:64 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma_unit_digits_product\u001b[0m = a_unit_digits.reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter y.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpi_jz3w6j.scala:22:61 ------",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}